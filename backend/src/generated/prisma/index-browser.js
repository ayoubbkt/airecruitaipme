
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  jobTitle: 'jobTitle',
  departmentName: 'departmentName',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  website: 'website',
  phoneNumber: 'phoneNumber',
  description: 'description',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyMemberScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  userId: 'userId',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  employmentType: 'employmentType',
  workType: 'workType',
  salaryMin: 'salaryMin',
  salaryMax: 'salaryMax',
  currency: 'currency',
  payPeriod: 'payPeriod',
  displaySalary: 'displaySalary',
  status: 'status',
  jobCode: 'jobCode',
  companyId: 'companyId',
  departmentId: 'departmentId',
  locationId: 'locationId',
  minYearsExperience: 'minYearsExperience',
  skills: 'skills',
  jobBoards: 'jobBoards',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobLocationScalarFieldEnum = {
  id: 'id',
  address: 'address',
  country: 'country',
  city: 'city',
  stateRegion: 'stateRegion',
  zipPostal: 'zipPostal',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApplicationFormFieldScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  fieldName: 'fieldName',
  label: 'label',
  fieldType: 'fieldType',
  isRequired: 'isRequired',
  isOptional: 'isOptional',
  isDisabled: 'isDisabled',
  customQuestionId: 'customQuestionId',
  order: 'order'
};

exports.Prisma.CustomQuestionScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  questionText: 'questionText',
  responseType: 'responseType',
  options: 'options',
  visibility: 'visibility',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CandidateScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  phoneNumber: 'phoneNumber',
  resumeUrl: 'resumeUrl',
  coverLetterText: 'coverLetterText',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  candidateId: 'candidateId',
  appliedAt: 'appliedAt',
  currentStageId: 'currentStageId',
  status: 'status',
  disqualificationReason: 'disqualificationReason',
  archivedAt: 'archivedAt',
  hiredAt: 'hiredAt',
  source: 'source'
};

exports.Prisma.CandidateAnswerScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  customQuestionId: 'customQuestionId',
  answerText: 'answerText',
  answerFileUrl: 'answerFileUrl',
  answeredAt: 'answeredAt',
  candidateId: 'candidateId'
};

exports.Prisma.WorkflowTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  companyId: 'companyId',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkflowStageTemplateScalarFieldEnum = {
  id: 'id',
  workflowTemplateId: 'workflowTemplateId',
  name: 'name',
  type: 'type',
  order: 'order',
  isDefault: 'isDefault',
  canBeDeleted: 'canBeDeleted',
  settings: 'settings',
  visibilityToReviewers: 'visibilityToReviewers'
};

exports.Prisma.JobWorkflowScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  workflowTemplateId: 'workflowTemplateId',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobWorkflowStageScalarFieldEnum = {
  id: 'id',
  jobWorkflowId: 'jobWorkflowId',
  name: 'name',
  type: 'type',
  order: 'order',
  settings: 'settings'
};

exports.Prisma.JobHiringMemberScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  userId: 'userId',
  role: 'role',
  isExternalRecruiter: 'isExternalRecruiter',
  createdAt: 'createdAt'
};

exports.Prisma.RatingCardTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  companyId: 'companyId',
  type: 'type',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RatingCategoryScalarFieldEnum = {
  id: 'id',
  ratingCardTemplateId: 'ratingCardTemplateId',
  name: 'name',
  description: 'description',
  order: 'order'
};

exports.Prisma.CandidateRatingScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  jobWorkflowStageId: 'jobWorkflowStageId',
  raterId: 'raterId',
  ratingCardTemplateId: 'ratingCardTemplateId',
  overallScore: 'overallScore',
  comments: 'comments',
  submittedAt: 'submittedAt'
};

exports.Prisma.CategoryScoreScalarFieldEnum = {
  id: 'id',
  candidateRatingId: 'candidateRatingId',
  ratingCategoryId: 'ratingCategoryId',
  score: 'score',
  comments: 'comments'
};

exports.Prisma.MessageThreadScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  threadId: 'threadId',
  senderId: 'senderId',
  content: 'content',
  sentAt: 'sentAt',
  isInternalNote: 'isInternalNote',
  visibility: 'visibility',
  attachments: 'attachments'
};

exports.Prisma.MeetingScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  startTime: 'startTime',
  endTime: 'endTime',
  type: 'type',
  location: 'location',
  videoCallLink: 'videoCallLink',
  jobId: 'jobId',
  applicationId: 'applicationId',
  organizerId: 'organizerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  meetingTemplateId: 'meetingTemplateId'
};

exports.Prisma.MeetingAttendeeScalarFieldEnum = {
  id: 'id',
  meetingId: 'meetingId',
  userId: 'userId',
  candidateId: 'candidateId',
  email: 'email',
  name: 'name',
  status: 'status',
  isCandidate: 'isCandidate'
};

exports.Prisma.MeetingTemplateScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  title: 'title',
  duration: 'duration',
  meetingType: 'meetingType',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CareersPageSettingScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  logoUrl: 'logoUrl',
  primaryColor: 'primaryColor',
  focusColor: 'focusColor',
  hyperlinkColor: 'hyperlinkColor',
  googleAnalyticsId: 'googleAnalyticsId',
  trackingPixelUrl: 'trackingPixelUrl',
  embedJobsCode: 'embedJobsCode',
  customCSS: 'customCSS',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  message: 'message',
  link: 'link',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.AIScreeningConfigScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  isEnabled: 'isEnabled',
  guidance: 'guidance',
  updatedAt: 'updatedAt'
};

exports.Prisma.AISchedulingConfigScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  isEnabled: 'isEnabled',
  updatedAt: 'updatedAt'
};

exports.Prisma.AINoteTakingConfigScalarFieldEnum = {
  id: 'id',
  meetingId: 'meetingId',
  isEnabled: 'isEnabled',
  transcript: 'transcript',
  summary: 'summary',
  actionItems: 'actionItems',
  updatedAt: 'updatedAt'
};

exports.Prisma.AIInteractionLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  inputType: 'inputType',
  input: 'input',
  output: 'output',
  timestamp: 'timestamp'
};

exports.Prisma.AIBusinessPreferenceScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  businessOverview: 'businessOverview',
  businessCulture: 'businessCulture',
  businessValues: 'businessValues',
  businessMission: 'businessMission',
  updatedAt: 'updatedAt'
};

exports.Prisma.AICommunicationPreferenceScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  tone: 'tone',
  blockedTeamTopics: 'blockedTeamTopics',
  blockedCandidateTopics: 'blockedCandidateTopics',
  updatedAt: 'updatedAt'
};

exports.Prisma.CalendarIntegrationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  expiresAt: 'expiresAt',
  scopes: 'scopes',
  calendarId: 'calendarId',
  connectedAt: 'connectedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobBoardIntegrationScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  boardName: 'boardName',
  apiKey: 'apiKey',
  config: 'config',
  isEnabled: 'isEnabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageTemplateScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  subject: 'subject',
  content: 'content',
  description: 'description',
  isRequired: 'isRequired',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  text: 'text',
  responseType: 'responseType',
  visibility: 'visibility',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuestionOptionScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  value: 'value'
};

exports.Prisma.QuestionSetScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  STANDARD: 'STANDARD',
  ADMIN: 'ADMIN',
  MEGA_ADMIN: 'MEGA_ADMIN',
  EXTERNAL_RECRUITER: 'EXTERNAL_RECRUITER'
};

exports.CompanyMemberRole = exports.$Enums.CompanyMemberRole = {
  RECRUITING_ADMIN: 'RECRUITING_ADMIN',
  HIRING_MANAGER: 'HIRING_MANAGER',
  REVIEWER: 'REVIEWER'
};

exports.EmploymentType = exports.$Enums.EmploymentType = {
  FULL_TIME: 'FULL_TIME',
  PART_TIME: 'PART_TIME',
  CONTRACT: 'CONTRACT',
  INTERNSHIP_PAID: 'INTERNSHIP_PAID',
  INTERNSHIP_UNPAID: 'INTERNSHIP_UNPAID',
  TEMPORARY: 'TEMPORARY',
  OTHER: 'OTHER'
};

exports.WorkType = exports.$Enums.WorkType = {
  ON_SITE: 'ON_SITE',
  REMOTE: 'REMOTE',
  HYBRID: 'HYBRID'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  INTERNAL_ONLY: 'INTERNAL_ONLY',
  CONFIDENTIAL: 'CONFIDENTIAL',
  ARCHIVED: 'ARCHIVED',
  CLOSED: 'CLOSED'
};

exports.FieldType = exports.$Enums.FieldType = {
  TEXT: 'TEXT',
  TEXTAREA: 'TEXTAREA',
  EMAIL: 'EMAIL',
  PHONE: 'PHONE',
  FILE: 'FILE',
  YES_NO: 'YES_NO',
  DROPDOWN: 'DROPDOWN',
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE',
  NUMBER: 'NUMBER',
  CUSTOM_QUESTION_REFERENCE: 'CUSTOM_QUESTION_REFERENCE'
};

exports.ResponseType = exports.$Enums.ResponseType = {
  SHORT_TEXT: 'SHORT_TEXT',
  PARAGRAPH_TEXT: 'PARAGRAPH_TEXT',
  YES_NO: 'YES_NO',
  DROPDOWN_LIST: 'DROPDOWN_LIST',
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE',
  NUMBER: 'NUMBER',
  FILE_UPLOAD: 'FILE_UPLOAD'
};

exports.ResponseVisibility = exports.$Enums.ResponseVisibility = {
  HIRING_TEAM: 'HIRING_TEAM',
  HIRING_MANAGERS_AND_ABOVE: 'HIRING_MANAGERS_AND_ABOVE'
};

exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
  ACTIVE: 'ACTIVE',
  DISQUALIFIED: 'DISQUALIFIED',
  ARCHIVED: 'ARCHIVED',
  HIRED: 'HIRED',
  WITHDRAWN: 'WITHDRAWN'
};

exports.StageType = exports.$Enums.StageType = {
  LEADS: 'LEADS',
  APPLIED: 'APPLIED',
  AI_SCREENING: 'AI_SCREENING',
  REVIEW: 'REVIEW',
  INTERVIEW: 'INTERVIEW',
  BACKGROUND_CHECK: 'BACKGROUND_CHECK',
  OFFER: 'OFFER',
  HIRED: 'HIRED',
  DISQUALIFIED: 'DISQUALIFIED',
  ARCHIVED: 'ARCHIVED',
  OTHER: 'OTHER'
};

exports.RatingCardType = exports.$Enums.RatingCardType = {
  BASIC: 'BASIC',
  CATEGORIZED: 'CATEGORIZED'
};

exports.CommentVisibility = exports.$Enums.CommentVisibility = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  CONFIDENTIAL: 'CONFIDENTIAL'
};

exports.MeetingType = exports.$Enums.MeetingType = {
  PHONE_CALL: 'PHONE_CALL',
  VIDEO_CALL: 'VIDEO_CALL',
  IN_PERSON: 'IN_PERSON',
  OTHER: 'OTHER'
};

exports.AttendeeStatus = exports.$Enums.AttendeeStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED',
  TENTATIVE: 'TENTATIVE'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  NEW_CANDIDATE: 'NEW_CANDIDATE',
  CANDIDATE_STAGE_CHANGED: 'CANDIDATE_STAGE_CHANGED',
  INTERVIEW_SCHEDULED: 'INTERVIEW_SCHEDULED',
  INTERVIEW_REMINDER: 'INTERVIEW_REMINDER',
  RATING_CARD_DUE: 'RATING_CARD_DUE',
  TASK_ASSIGNED: 'TASK_ASSIGNED',
  COMMENT_MENTION: 'COMMENT_MENTION',
  REPORT_READY: 'REPORT_READY',
  JOB_STATUS_UPDATED: 'JOB_STATUS_UPDATED',
  SLA_WARNING: 'SLA_WARNING',
  SLA_EXPIRED: 'SLA_EXPIRED'
};

exports.AITone = exports.$Enums.AITone = {
  CASUAL_LAID_BACK: 'CASUAL_LAID_BACK',
  PROFESSIONAL_FORMAL: 'PROFESSIONAL_FORMAL',
  GAMESHOW_LAID_BACK: 'GAMESHOW_LAID_BACK',
  ROBOTIC_AI: 'ROBOTIC_AI'
};

exports.CalendarProvider = exports.$Enums.CalendarProvider = {
  GOOGLE_WORKSPACE: 'GOOGLE_WORKSPACE',
  MS_365_OUTLOOK: 'MS_365_OUTLOOK'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserProfile: 'UserProfile',
  Company: 'Company',
  CompanyMember: 'CompanyMember',
  Job: 'Job',
  Department: 'Department',
  JobLocation: 'JobLocation',
  ApplicationFormField: 'ApplicationFormField',
  CustomQuestion: 'CustomQuestion',
  Candidate: 'Candidate',
  Application: 'Application',
  CandidateAnswer: 'CandidateAnswer',
  WorkflowTemplate: 'WorkflowTemplate',
  WorkflowStageTemplate: 'WorkflowStageTemplate',
  JobWorkflow: 'JobWorkflow',
  JobWorkflowStage: 'JobWorkflowStage',
  JobHiringMember: 'JobHiringMember',
  RatingCardTemplate: 'RatingCardTemplate',
  RatingCategory: 'RatingCategory',
  CandidateRating: 'CandidateRating',
  CategoryScore: 'CategoryScore',
  MessageThread: 'MessageThread',
  Message: 'Message',
  Meeting: 'Meeting',
  MeetingAttendee: 'MeetingAttendee',
  MeetingTemplate: 'MeetingTemplate',
  CareersPageSetting: 'CareersPageSetting',
  Notification: 'Notification',
  AIScreeningConfig: 'AIScreeningConfig',
  AISchedulingConfig: 'AISchedulingConfig',
  AINoteTakingConfig: 'AINoteTakingConfig',
  AIInteractionLog: 'AIInteractionLog',
  AIBusinessPreference: 'AIBusinessPreference',
  AICommunicationPreference: 'AICommunicationPreference',
  CalendarIntegration: 'CalendarIntegration',
  JobBoardIntegration: 'JobBoardIntegration',
  MessageTemplate: 'MessageTemplate',
  Question: 'Question',
  QuestionOption: 'QuestionOption',
  QuestionSet: 'QuestionSet'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
