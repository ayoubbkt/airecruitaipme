
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserProfile
 * 
 */
export type UserProfile = $Result.DefaultSelection<Prisma.$UserProfilePayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model CompanyMember
 * 
 */
export type CompanyMember = $Result.DefaultSelection<Prisma.$CompanyMemberPayload>
/**
 * Model Job
 * 
 */
export type Job = $Result.DefaultSelection<Prisma.$JobPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model JobLocation
 * 
 */
export type JobLocation = $Result.DefaultSelection<Prisma.$JobLocationPayload>
/**
 * Model ApplicationFormField
 * 
 */
export type ApplicationFormField = $Result.DefaultSelection<Prisma.$ApplicationFormFieldPayload>
/**
 * Model CustomQuestion
 * 
 */
export type CustomQuestion = $Result.DefaultSelection<Prisma.$CustomQuestionPayload>
/**
 * Model Candidate
 * 
 */
export type Candidate = $Result.DefaultSelection<Prisma.$CandidatePayload>
/**
 * Model Application
 * 
 */
export type Application = $Result.DefaultSelection<Prisma.$ApplicationPayload>
/**
 * Model CandidateAnswer
 * 
 */
export type CandidateAnswer = $Result.DefaultSelection<Prisma.$CandidateAnswerPayload>
/**
 * Model WorkflowTemplate
 * 
 */
export type WorkflowTemplate = $Result.DefaultSelection<Prisma.$WorkflowTemplatePayload>
/**
 * Model WorkflowStageTemplate
 * 
 */
export type WorkflowStageTemplate = $Result.DefaultSelection<Prisma.$WorkflowStageTemplatePayload>
/**
 * Model JobWorkflow
 * 
 */
export type JobWorkflow = $Result.DefaultSelection<Prisma.$JobWorkflowPayload>
/**
 * Model JobWorkflowStage
 * 
 */
export type JobWorkflowStage = $Result.DefaultSelection<Prisma.$JobWorkflowStagePayload>
/**
 * Model JobHiringMember
 * 
 */
export type JobHiringMember = $Result.DefaultSelection<Prisma.$JobHiringMemberPayload>
/**
 * Model RatingCardTemplate
 * 
 */
export type RatingCardTemplate = $Result.DefaultSelection<Prisma.$RatingCardTemplatePayload>
/**
 * Model RatingCategory
 * 
 */
export type RatingCategory = $Result.DefaultSelection<Prisma.$RatingCategoryPayload>
/**
 * Model CandidateRating
 * 
 */
export type CandidateRating = $Result.DefaultSelection<Prisma.$CandidateRatingPayload>
/**
 * Model CategoryScore
 * 
 */
export type CategoryScore = $Result.DefaultSelection<Prisma.$CategoryScorePayload>
/**
 * Model MessageThread
 * 
 */
export type MessageThread = $Result.DefaultSelection<Prisma.$MessageThreadPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model Meeting
 * 
 */
export type Meeting = $Result.DefaultSelection<Prisma.$MeetingPayload>
/**
 * Model MeetingAttendee
 * 
 */
export type MeetingAttendee = $Result.DefaultSelection<Prisma.$MeetingAttendeePayload>
/**
 * Model MeetingTemplate
 * 
 */
export type MeetingTemplate = $Result.DefaultSelection<Prisma.$MeetingTemplatePayload>
/**
 * Model CareersPageSetting
 * 
 */
export type CareersPageSetting = $Result.DefaultSelection<Prisma.$CareersPageSettingPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model AIScreeningConfig
 * 
 */
export type AIScreeningConfig = $Result.DefaultSelection<Prisma.$AIScreeningConfigPayload>
/**
 * Model AISchedulingConfig
 * 
 */
export type AISchedulingConfig = $Result.DefaultSelection<Prisma.$AISchedulingConfigPayload>
/**
 * Model AINoteTakingConfig
 * 
 */
export type AINoteTakingConfig = $Result.DefaultSelection<Prisma.$AINoteTakingConfigPayload>
/**
 * Model AIInteractionLog
 * 
 */
export type AIInteractionLog = $Result.DefaultSelection<Prisma.$AIInteractionLogPayload>
/**
 * Model AIBusinessPreference
 * 
 */
export type AIBusinessPreference = $Result.DefaultSelection<Prisma.$AIBusinessPreferencePayload>
/**
 * Model AICommunicationPreference
 * 
 */
export type AICommunicationPreference = $Result.DefaultSelection<Prisma.$AICommunicationPreferencePayload>
/**
 * Model CalendarIntegration
 * 
 */
export type CalendarIntegration = $Result.DefaultSelection<Prisma.$CalendarIntegrationPayload>
/**
 * Model JobBoardIntegration
 * 
 */
export type JobBoardIntegration = $Result.DefaultSelection<Prisma.$JobBoardIntegrationPayload>
/**
 * Model MessageTemplate
 * 
 */
export type MessageTemplate = $Result.DefaultSelection<Prisma.$MessageTemplatePayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model QuestionOption
 * 
 */
export type QuestionOption = $Result.DefaultSelection<Prisma.$QuestionOptionPayload>
/**
 * Model QuestionSet
 * 
 */
export type QuestionSet = $Result.DefaultSelection<Prisma.$QuestionSetPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  STANDARD: 'STANDARD',
  ADMIN: 'ADMIN',
  MEGA_ADMIN: 'MEGA_ADMIN',
  EXTERNAL_RECRUITER: 'EXTERNAL_RECRUITER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const CompanyMemberRole: {
  RECRUITING_ADMIN: 'RECRUITING_ADMIN',
  HIRING_MANAGER: 'HIRING_MANAGER',
  REVIEWER: 'REVIEWER'
};

export type CompanyMemberRole = (typeof CompanyMemberRole)[keyof typeof CompanyMemberRole]


export const EmploymentType: {
  FULL_TIME: 'FULL_TIME',
  PART_TIME: 'PART_TIME',
  CONTRACT: 'CONTRACT',
  INTERNSHIP_PAID: 'INTERNSHIP_PAID',
  INTERNSHIP_UNPAID: 'INTERNSHIP_UNPAID',
  TEMPORARY: 'TEMPORARY',
  OTHER: 'OTHER'
};

export type EmploymentType = (typeof EmploymentType)[keyof typeof EmploymentType]


export const WorkType: {
  ON_SITE: 'ON_SITE',
  REMOTE: 'REMOTE',
  HYBRID: 'HYBRID'
};

export type WorkType = (typeof WorkType)[keyof typeof WorkType]


export const JobStatus: {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  INTERNAL_ONLY: 'INTERNAL_ONLY',
  CONFIDENTIAL: 'CONFIDENTIAL',
  ARCHIVED: 'ARCHIVED',
  CLOSED: 'CLOSED'
};

export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus]


export const FieldType: {
  TEXT: 'TEXT',
  TEXTAREA: 'TEXTAREA',
  EMAIL: 'EMAIL',
  PHONE: 'PHONE',
  FILE: 'FILE',
  YES_NO: 'YES_NO',
  DROPDOWN: 'DROPDOWN',
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE',
  NUMBER: 'NUMBER',
  CUSTOM_QUESTION_REFERENCE: 'CUSTOM_QUESTION_REFERENCE'
};

export type FieldType = (typeof FieldType)[keyof typeof FieldType]


export const ResponseType: {
  SHORT_TEXT: 'SHORT_TEXT',
  PARAGRAPH_TEXT: 'PARAGRAPH_TEXT',
  YES_NO: 'YES_NO',
  DROPDOWN_LIST: 'DROPDOWN_LIST',
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE',
  NUMBER: 'NUMBER',
  FILE_UPLOAD: 'FILE_UPLOAD'
};

export type ResponseType = (typeof ResponseType)[keyof typeof ResponseType]


export const ResponseVisibility: {
  HIRING_TEAM: 'HIRING_TEAM',
  HIRING_MANAGERS_AND_ABOVE: 'HIRING_MANAGERS_AND_ABOVE'
};

export type ResponseVisibility = (typeof ResponseVisibility)[keyof typeof ResponseVisibility]


export const ApplicationStatus: {
  ACTIVE: 'ACTIVE',
  DISQUALIFIED: 'DISQUALIFIED',
  ARCHIVED: 'ARCHIVED',
  HIRED: 'HIRED',
  WITHDRAWN: 'WITHDRAWN'
};

export type ApplicationStatus = (typeof ApplicationStatus)[keyof typeof ApplicationStatus]


export const StageType: {
  LEADS: 'LEADS',
  APPLIED: 'APPLIED',
  AI_SCREENING: 'AI_SCREENING',
  REVIEW: 'REVIEW',
  INTERVIEW: 'INTERVIEW',
  BACKGROUND_CHECK: 'BACKGROUND_CHECK',
  OFFER: 'OFFER',
  HIRED: 'HIRED',
  DISQUALIFIED: 'DISQUALIFIED',
  ARCHIVED: 'ARCHIVED',
  OTHER: 'OTHER'
};

export type StageType = (typeof StageType)[keyof typeof StageType]


export const RatingCardType: {
  BASIC: 'BASIC',
  CATEGORIZED: 'CATEGORIZED'
};

export type RatingCardType = (typeof RatingCardType)[keyof typeof RatingCardType]


export const CommentVisibility: {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  CONFIDENTIAL: 'CONFIDENTIAL'
};

export type CommentVisibility = (typeof CommentVisibility)[keyof typeof CommentVisibility]


export const MeetingType: {
  PHONE_CALL: 'PHONE_CALL',
  VIDEO_CALL: 'VIDEO_CALL',
  IN_PERSON: 'IN_PERSON',
  OTHER: 'OTHER'
};

export type MeetingType = (typeof MeetingType)[keyof typeof MeetingType]


export const AttendeeStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED',
  TENTATIVE: 'TENTATIVE'
};

export type AttendeeStatus = (typeof AttendeeStatus)[keyof typeof AttendeeStatus]


export const NotificationType: {
  NEW_CANDIDATE: 'NEW_CANDIDATE',
  CANDIDATE_STAGE_CHANGED: 'CANDIDATE_STAGE_CHANGED',
  INTERVIEW_SCHEDULED: 'INTERVIEW_SCHEDULED',
  INTERVIEW_REMINDER: 'INTERVIEW_REMINDER',
  RATING_CARD_DUE: 'RATING_CARD_DUE',
  TASK_ASSIGNED: 'TASK_ASSIGNED',
  COMMENT_MENTION: 'COMMENT_MENTION',
  REPORT_READY: 'REPORT_READY',
  JOB_STATUS_UPDATED: 'JOB_STATUS_UPDATED',
  SLA_WARNING: 'SLA_WARNING',
  SLA_EXPIRED: 'SLA_EXPIRED'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const AITone: {
  CASUAL_LAID_BACK: 'CASUAL_LAID_BACK',
  PROFESSIONAL_FORMAL: 'PROFESSIONAL_FORMAL',
  GAMESHOW_LAID_BACK: 'GAMESHOW_LAID_BACK',
  ROBOTIC_AI: 'ROBOTIC_AI'
};

export type AITone = (typeof AITone)[keyof typeof AITone]


export const CalendarProvider: {
  GOOGLE_WORKSPACE: 'GOOGLE_WORKSPACE',
  MS_365_OUTLOOK: 'MS_365_OUTLOOK'
};

export type CalendarProvider = (typeof CalendarProvider)[keyof typeof CalendarProvider]


export const TemplateType: {
  EMAIL: 'EMAIL',
  IN_APP_MESSAGE: 'IN_APP_MESSAGE',
  SMS: 'SMS'
};

export type TemplateType = (typeof TemplateType)[keyof typeof TemplateType]


export const TriggerType: {
  STAGE_ENTER: 'STAGE_ENTER',
  STAGE_EXIT: 'STAGE_EXIT',
  SCORE_ABOVE: 'SCORE_ABOVE',
  SCORE_BELOW: 'SCORE_BELOW',
  TIME_ELAPSED: 'TIME_ELAPSED',
  MANUAL: 'MANUAL'
};

export type TriggerType = (typeof TriggerType)[keyof typeof TriggerType]


export const ActionType: {
  SEND_NOTIFICATION: 'SEND_NOTIFICATION',
  SEND_EMAIL: 'SEND_EMAIL',
  UPDATE_STATUS: 'UPDATE_STATUS',
  ASSIGN_RECRUITER: 'ASSIGN_RECRUITER',
  SCHEDULE_INTERVIEW: 'SCHEDULE_INTERVIEW',
  AUTO_PROGRESS: 'AUTO_PROGRESS',
  SEND_SURVEY: 'SEND_SURVEY'
};

export type ActionType = (typeof ActionType)[keyof typeof ActionType]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type CompanyMemberRole = $Enums.CompanyMemberRole

export const CompanyMemberRole: typeof $Enums.CompanyMemberRole

export type EmploymentType = $Enums.EmploymentType

export const EmploymentType: typeof $Enums.EmploymentType

export type WorkType = $Enums.WorkType

export const WorkType: typeof $Enums.WorkType

export type JobStatus = $Enums.JobStatus

export const JobStatus: typeof $Enums.JobStatus

export type FieldType = $Enums.FieldType

export const FieldType: typeof $Enums.FieldType

export type ResponseType = $Enums.ResponseType

export const ResponseType: typeof $Enums.ResponseType

export type ResponseVisibility = $Enums.ResponseVisibility

export const ResponseVisibility: typeof $Enums.ResponseVisibility

export type ApplicationStatus = $Enums.ApplicationStatus

export const ApplicationStatus: typeof $Enums.ApplicationStatus

export type StageType = $Enums.StageType

export const StageType: typeof $Enums.StageType

export type RatingCardType = $Enums.RatingCardType

export const RatingCardType: typeof $Enums.RatingCardType

export type CommentVisibility = $Enums.CommentVisibility

export const CommentVisibility: typeof $Enums.CommentVisibility

export type MeetingType = $Enums.MeetingType

export const MeetingType: typeof $Enums.MeetingType

export type AttendeeStatus = $Enums.AttendeeStatus

export const AttendeeStatus: typeof $Enums.AttendeeStatus

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type AITone = $Enums.AITone

export const AITone: typeof $Enums.AITone

export type CalendarProvider = $Enums.CalendarProvider

export const CalendarProvider: typeof $Enums.CalendarProvider

export type TemplateType = $Enums.TemplateType

export const TemplateType: typeof $Enums.TemplateType

export type TriggerType = $Enums.TriggerType

export const TriggerType: typeof $Enums.TriggerType

export type ActionType = $Enums.ActionType

export const ActionType: typeof $Enums.ActionType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userProfile`: Exposes CRUD operations for the **UserProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProfiles
    * const userProfiles = await prisma.userProfile.findMany()
    * ```
    */
  get userProfile(): Prisma.UserProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.companyMember`: Exposes CRUD operations for the **CompanyMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompanyMembers
    * const companyMembers = await prisma.companyMember.findMany()
    * ```
    */
  get companyMember(): Prisma.CompanyMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.job`: Exposes CRUD operations for the **Job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.JobDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobLocation`: Exposes CRUD operations for the **JobLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobLocations
    * const jobLocations = await prisma.jobLocation.findMany()
    * ```
    */
  get jobLocation(): Prisma.JobLocationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.applicationFormField`: Exposes CRUD operations for the **ApplicationFormField** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApplicationFormFields
    * const applicationFormFields = await prisma.applicationFormField.findMany()
    * ```
    */
  get applicationFormField(): Prisma.ApplicationFormFieldDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customQuestion`: Exposes CRUD operations for the **CustomQuestion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomQuestions
    * const customQuestions = await prisma.customQuestion.findMany()
    * ```
    */
  get customQuestion(): Prisma.CustomQuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.candidate`: Exposes CRUD operations for the **Candidate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Candidates
    * const candidates = await prisma.candidate.findMany()
    * ```
    */
  get candidate(): Prisma.CandidateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.application`: Exposes CRUD operations for the **Application** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applications
    * const applications = await prisma.application.findMany()
    * ```
    */
  get application(): Prisma.ApplicationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.candidateAnswer`: Exposes CRUD operations for the **CandidateAnswer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CandidateAnswers
    * const candidateAnswers = await prisma.candidateAnswer.findMany()
    * ```
    */
  get candidateAnswer(): Prisma.CandidateAnswerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workflowTemplate`: Exposes CRUD operations for the **WorkflowTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkflowTemplates
    * const workflowTemplates = await prisma.workflowTemplate.findMany()
    * ```
    */
  get workflowTemplate(): Prisma.WorkflowTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workflowStageTemplate`: Exposes CRUD operations for the **WorkflowStageTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkflowStageTemplates
    * const workflowStageTemplates = await prisma.workflowStageTemplate.findMany()
    * ```
    */
  get workflowStageTemplate(): Prisma.WorkflowStageTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobWorkflow`: Exposes CRUD operations for the **JobWorkflow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobWorkflows
    * const jobWorkflows = await prisma.jobWorkflow.findMany()
    * ```
    */
  get jobWorkflow(): Prisma.JobWorkflowDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobWorkflowStage`: Exposes CRUD operations for the **JobWorkflowStage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobWorkflowStages
    * const jobWorkflowStages = await prisma.jobWorkflowStage.findMany()
    * ```
    */
  get jobWorkflowStage(): Prisma.JobWorkflowStageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobHiringMember`: Exposes CRUD operations for the **JobHiringMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobHiringMembers
    * const jobHiringMembers = await prisma.jobHiringMember.findMany()
    * ```
    */
  get jobHiringMember(): Prisma.JobHiringMemberDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ratingCardTemplate`: Exposes CRUD operations for the **RatingCardTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RatingCardTemplates
    * const ratingCardTemplates = await prisma.ratingCardTemplate.findMany()
    * ```
    */
  get ratingCardTemplate(): Prisma.RatingCardTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ratingCategory`: Exposes CRUD operations for the **RatingCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RatingCategories
    * const ratingCategories = await prisma.ratingCategory.findMany()
    * ```
    */
  get ratingCategory(): Prisma.RatingCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.candidateRating`: Exposes CRUD operations for the **CandidateRating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CandidateRatings
    * const candidateRatings = await prisma.candidateRating.findMany()
    * ```
    */
  get candidateRating(): Prisma.CandidateRatingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.categoryScore`: Exposes CRUD operations for the **CategoryScore** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategoryScores
    * const categoryScores = await prisma.categoryScore.findMany()
    * ```
    */
  get categoryScore(): Prisma.CategoryScoreDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.messageThread`: Exposes CRUD operations for the **MessageThread** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageThreads
    * const messageThreads = await prisma.messageThread.findMany()
    * ```
    */
  get messageThread(): Prisma.MessageThreadDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.meeting`: Exposes CRUD operations for the **Meeting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Meetings
    * const meetings = await prisma.meeting.findMany()
    * ```
    */
  get meeting(): Prisma.MeetingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.meetingAttendee`: Exposes CRUD operations for the **MeetingAttendee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeetingAttendees
    * const meetingAttendees = await prisma.meetingAttendee.findMany()
    * ```
    */
  get meetingAttendee(): Prisma.MeetingAttendeeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.meetingTemplate`: Exposes CRUD operations for the **MeetingTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeetingTemplates
    * const meetingTemplates = await prisma.meetingTemplate.findMany()
    * ```
    */
  get meetingTemplate(): Prisma.MeetingTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.careersPageSetting`: Exposes CRUD operations for the **CareersPageSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CareersPageSettings
    * const careersPageSettings = await prisma.careersPageSetting.findMany()
    * ```
    */
  get careersPageSetting(): Prisma.CareersPageSettingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aIScreeningConfig`: Exposes CRUD operations for the **AIScreeningConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AIScreeningConfigs
    * const aIScreeningConfigs = await prisma.aIScreeningConfig.findMany()
    * ```
    */
  get aIScreeningConfig(): Prisma.AIScreeningConfigDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aISchedulingConfig`: Exposes CRUD operations for the **AISchedulingConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AISchedulingConfigs
    * const aISchedulingConfigs = await prisma.aISchedulingConfig.findMany()
    * ```
    */
  get aISchedulingConfig(): Prisma.AISchedulingConfigDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aINoteTakingConfig`: Exposes CRUD operations for the **AINoteTakingConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AINoteTakingConfigs
    * const aINoteTakingConfigs = await prisma.aINoteTakingConfig.findMany()
    * ```
    */
  get aINoteTakingConfig(): Prisma.AINoteTakingConfigDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aIInteractionLog`: Exposes CRUD operations for the **AIInteractionLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AIInteractionLogs
    * const aIInteractionLogs = await prisma.aIInteractionLog.findMany()
    * ```
    */
  get aIInteractionLog(): Prisma.AIInteractionLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aIBusinessPreference`: Exposes CRUD operations for the **AIBusinessPreference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AIBusinessPreferences
    * const aIBusinessPreferences = await prisma.aIBusinessPreference.findMany()
    * ```
    */
  get aIBusinessPreference(): Prisma.AIBusinessPreferenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aICommunicationPreference`: Exposes CRUD operations for the **AICommunicationPreference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AICommunicationPreferences
    * const aICommunicationPreferences = await prisma.aICommunicationPreference.findMany()
    * ```
    */
  get aICommunicationPreference(): Prisma.AICommunicationPreferenceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.calendarIntegration`: Exposes CRUD operations for the **CalendarIntegration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CalendarIntegrations
    * const calendarIntegrations = await prisma.calendarIntegration.findMany()
    * ```
    */
  get calendarIntegration(): Prisma.CalendarIntegrationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobBoardIntegration`: Exposes CRUD operations for the **JobBoardIntegration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobBoardIntegrations
    * const jobBoardIntegrations = await prisma.jobBoardIntegration.findMany()
    * ```
    */
  get jobBoardIntegration(): Prisma.JobBoardIntegrationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.messageTemplate`: Exposes CRUD operations for the **MessageTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageTemplates
    * const messageTemplates = await prisma.messageTemplate.findMany()
    * ```
    */
  get messageTemplate(): Prisma.MessageTemplateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionOption`: Exposes CRUD operations for the **QuestionOption** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionOptions
    * const questionOptions = await prisma.questionOption.findMany()
    * ```
    */
  get questionOption(): Prisma.QuestionOptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionSet`: Exposes CRUD operations for the **QuestionSet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionSets
    * const questionSets = await prisma.questionSet.findMany()
    * ```
    */
  get questionSet(): Prisma.QuestionSetDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserProfile: 'UserProfile',
    Company: 'Company',
    CompanyMember: 'CompanyMember',
    Job: 'Job',
    Department: 'Department',
    JobLocation: 'JobLocation',
    ApplicationFormField: 'ApplicationFormField',
    CustomQuestion: 'CustomQuestion',
    Candidate: 'Candidate',
    Application: 'Application',
    CandidateAnswer: 'CandidateAnswer',
    WorkflowTemplate: 'WorkflowTemplate',
    WorkflowStageTemplate: 'WorkflowStageTemplate',
    JobWorkflow: 'JobWorkflow',
    JobWorkflowStage: 'JobWorkflowStage',
    JobHiringMember: 'JobHiringMember',
    RatingCardTemplate: 'RatingCardTemplate',
    RatingCategory: 'RatingCategory',
    CandidateRating: 'CandidateRating',
    CategoryScore: 'CategoryScore',
    MessageThread: 'MessageThread',
    Message: 'Message',
    Meeting: 'Meeting',
    MeetingAttendee: 'MeetingAttendee',
    MeetingTemplate: 'MeetingTemplate',
    CareersPageSetting: 'CareersPageSetting',
    Notification: 'Notification',
    AIScreeningConfig: 'AIScreeningConfig',
    AISchedulingConfig: 'AISchedulingConfig',
    AINoteTakingConfig: 'AINoteTakingConfig',
    AIInteractionLog: 'AIInteractionLog',
    AIBusinessPreference: 'AIBusinessPreference',
    AICommunicationPreference: 'AICommunicationPreference',
    CalendarIntegration: 'CalendarIntegration',
    JobBoardIntegration: 'JobBoardIntegration',
    MessageTemplate: 'MessageTemplate',
    Question: 'Question',
    QuestionOption: 'QuestionOption',
    QuestionSet: 'QuestionSet'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "userProfile" | "company" | "companyMember" | "job" | "department" | "jobLocation" | "applicationFormField" | "customQuestion" | "candidate" | "application" | "candidateAnswer" | "workflowTemplate" | "workflowStageTemplate" | "jobWorkflow" | "jobWorkflowStage" | "jobHiringMember" | "ratingCardTemplate" | "ratingCategory" | "candidateRating" | "categoryScore" | "messageThread" | "message" | "meeting" | "meetingAttendee" | "meetingTemplate" | "careersPageSetting" | "notification" | "aIScreeningConfig" | "aISchedulingConfig" | "aINoteTakingConfig" | "aIInteractionLog" | "aIBusinessPreference" | "aICommunicationPreference" | "calendarIntegration" | "jobBoardIntegration" | "messageTemplate" | "question" | "questionOption" | "questionSet"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserProfile: {
        payload: Prisma.$UserProfilePayload<ExtArgs>
        fields: Prisma.UserProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findFirst: {
            args: Prisma.UserProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findMany: {
            args: Prisma.UserProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          create: {
            args: Prisma.UserProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          createMany: {
            args: Prisma.UserProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          delete: {
            args: Prisma.UserProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          update: {
            args: Prisma.UserProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          deleteMany: {
            args: Prisma.UserProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          upsert: {
            args: Prisma.UserProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          aggregate: {
            args: Prisma.UserProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProfile>
          }
          groupBy: {
            args: Prisma.UserProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProfileCountArgs<ExtArgs>
            result: $Utils.Optional<UserProfileCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      CompanyMember: {
        payload: Prisma.$CompanyMemberPayload<ExtArgs>
        fields: Prisma.CompanyMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          findFirst: {
            args: Prisma.CompanyMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          findMany: {
            args: Prisma.CompanyMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>[]
          }
          create: {
            args: Prisma.CompanyMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          createMany: {
            args: Prisma.CompanyMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>[]
          }
          delete: {
            args: Prisma.CompanyMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          update: {
            args: Prisma.CompanyMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          deleteMany: {
            args: Prisma.CompanyMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CompanyMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>[]
          }
          upsert: {
            args: Prisma.CompanyMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyMemberPayload>
          }
          aggregate: {
            args: Prisma.CompanyMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanyMember>
          }
          groupBy: {
            args: Prisma.CompanyMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyMemberCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyMemberCountAggregateOutputType> | number
          }
        }
      }
      Job: {
        payload: Prisma.$JobPayload<ExtArgs>
        fields: Prisma.JobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findFirst: {
            args: Prisma.JobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findMany: {
            args: Prisma.JobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          create: {
            args: Prisma.JobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          createMany: {
            args: Prisma.JobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          delete: {
            args: Prisma.JobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          update: {
            args: Prisma.JobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          deleteMany: {
            args: Prisma.JobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          upsert: {
            args: Prisma.JobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          aggregate: {
            args: Prisma.JobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJob>
          }
          groupBy: {
            args: Prisma.JobGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobCountArgs<ExtArgs>
            result: $Utils.Optional<JobCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      JobLocation: {
        payload: Prisma.$JobLocationPayload<ExtArgs>
        fields: Prisma.JobLocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobLocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobLocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobLocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobLocationPayload>
          }
          findFirst: {
            args: Prisma.JobLocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobLocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobLocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobLocationPayload>
          }
          findMany: {
            args: Prisma.JobLocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobLocationPayload>[]
          }
          create: {
            args: Prisma.JobLocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobLocationPayload>
          }
          createMany: {
            args: Prisma.JobLocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobLocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobLocationPayload>[]
          }
          delete: {
            args: Prisma.JobLocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobLocationPayload>
          }
          update: {
            args: Prisma.JobLocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobLocationPayload>
          }
          deleteMany: {
            args: Prisma.JobLocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobLocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobLocationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobLocationPayload>[]
          }
          upsert: {
            args: Prisma.JobLocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobLocationPayload>
          }
          aggregate: {
            args: Prisma.JobLocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobLocation>
          }
          groupBy: {
            args: Prisma.JobLocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobLocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobLocationCountArgs<ExtArgs>
            result: $Utils.Optional<JobLocationCountAggregateOutputType> | number
          }
        }
      }
      ApplicationFormField: {
        payload: Prisma.$ApplicationFormFieldPayload<ExtArgs>
        fields: Prisma.ApplicationFormFieldFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicationFormFieldFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationFormFieldPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicationFormFieldFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationFormFieldPayload>
          }
          findFirst: {
            args: Prisma.ApplicationFormFieldFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationFormFieldPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicationFormFieldFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationFormFieldPayload>
          }
          findMany: {
            args: Prisma.ApplicationFormFieldFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationFormFieldPayload>[]
          }
          create: {
            args: Prisma.ApplicationFormFieldCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationFormFieldPayload>
          }
          createMany: {
            args: Prisma.ApplicationFormFieldCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApplicationFormFieldCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationFormFieldPayload>[]
          }
          delete: {
            args: Prisma.ApplicationFormFieldDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationFormFieldPayload>
          }
          update: {
            args: Prisma.ApplicationFormFieldUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationFormFieldPayload>
          }
          deleteMany: {
            args: Prisma.ApplicationFormFieldDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicationFormFieldUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ApplicationFormFieldUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationFormFieldPayload>[]
          }
          upsert: {
            args: Prisma.ApplicationFormFieldUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationFormFieldPayload>
          }
          aggregate: {
            args: Prisma.ApplicationFormFieldAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplicationFormField>
          }
          groupBy: {
            args: Prisma.ApplicationFormFieldGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicationFormFieldGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicationFormFieldCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicationFormFieldCountAggregateOutputType> | number
          }
        }
      }
      CustomQuestion: {
        payload: Prisma.$CustomQuestionPayload<ExtArgs>
        fields: Prisma.CustomQuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomQuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomQuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomQuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomQuestionPayload>
          }
          findFirst: {
            args: Prisma.CustomQuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomQuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomQuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomQuestionPayload>
          }
          findMany: {
            args: Prisma.CustomQuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomQuestionPayload>[]
          }
          create: {
            args: Prisma.CustomQuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomQuestionPayload>
          }
          createMany: {
            args: Prisma.CustomQuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomQuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomQuestionPayload>[]
          }
          delete: {
            args: Prisma.CustomQuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomQuestionPayload>
          }
          update: {
            args: Prisma.CustomQuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomQuestionPayload>
          }
          deleteMany: {
            args: Prisma.CustomQuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomQuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomQuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomQuestionPayload>[]
          }
          upsert: {
            args: Prisma.CustomQuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomQuestionPayload>
          }
          aggregate: {
            args: Prisma.CustomQuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomQuestion>
          }
          groupBy: {
            args: Prisma.CustomQuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomQuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomQuestionCountArgs<ExtArgs>
            result: $Utils.Optional<CustomQuestionCountAggregateOutputType> | number
          }
        }
      }
      Candidate: {
        payload: Prisma.$CandidatePayload<ExtArgs>
        fields: Prisma.CandidateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          findFirst: {
            args: Prisma.CandidateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          findMany: {
            args: Prisma.CandidateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>[]
          }
          create: {
            args: Prisma.CandidateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          createMany: {
            args: Prisma.CandidateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CandidateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>[]
          }
          delete: {
            args: Prisma.CandidateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          update: {
            args: Prisma.CandidateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          deleteMany: {
            args: Prisma.CandidateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CandidateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CandidateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>[]
          }
          upsert: {
            args: Prisma.CandidateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidatePayload>
          }
          aggregate: {
            args: Prisma.CandidateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCandidate>
          }
          groupBy: {
            args: Prisma.CandidateGroupByArgs<ExtArgs>
            result: $Utils.Optional<CandidateGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidateCountArgs<ExtArgs>
            result: $Utils.Optional<CandidateCountAggregateOutputType> | number
          }
        }
      }
      Application: {
        payload: Prisma.$ApplicationPayload<ExtArgs>
        fields: Prisma.ApplicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findFirst: {
            args: Prisma.ApplicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findMany: {
            args: Prisma.ApplicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          create: {
            args: Prisma.ApplicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          createMany: {
            args: Prisma.ApplicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApplicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          delete: {
            args: Prisma.ApplicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          update: {
            args: Prisma.ApplicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          deleteMany: {
            args: Prisma.ApplicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ApplicationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          upsert: {
            args: Prisma.ApplicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          aggregate: {
            args: Prisma.ApplicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplication>
          }
          groupBy: {
            args: Prisma.ApplicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicationCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicationCountAggregateOutputType> | number
          }
        }
      }
      CandidateAnswer: {
        payload: Prisma.$CandidateAnswerPayload<ExtArgs>
        fields: Prisma.CandidateAnswerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidateAnswerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateAnswerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidateAnswerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateAnswerPayload>
          }
          findFirst: {
            args: Prisma.CandidateAnswerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateAnswerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidateAnswerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateAnswerPayload>
          }
          findMany: {
            args: Prisma.CandidateAnswerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateAnswerPayload>[]
          }
          create: {
            args: Prisma.CandidateAnswerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateAnswerPayload>
          }
          createMany: {
            args: Prisma.CandidateAnswerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CandidateAnswerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateAnswerPayload>[]
          }
          delete: {
            args: Prisma.CandidateAnswerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateAnswerPayload>
          }
          update: {
            args: Prisma.CandidateAnswerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateAnswerPayload>
          }
          deleteMany: {
            args: Prisma.CandidateAnswerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CandidateAnswerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CandidateAnswerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateAnswerPayload>[]
          }
          upsert: {
            args: Prisma.CandidateAnswerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateAnswerPayload>
          }
          aggregate: {
            args: Prisma.CandidateAnswerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCandidateAnswer>
          }
          groupBy: {
            args: Prisma.CandidateAnswerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CandidateAnswerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidateAnswerCountArgs<ExtArgs>
            result: $Utils.Optional<CandidateAnswerCountAggregateOutputType> | number
          }
        }
      }
      WorkflowTemplate: {
        payload: Prisma.$WorkflowTemplatePayload<ExtArgs>
        fields: Prisma.WorkflowTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkflowTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkflowTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          findFirst: {
            args: Prisma.WorkflowTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkflowTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          findMany: {
            args: Prisma.WorkflowTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>[]
          }
          create: {
            args: Prisma.WorkflowTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          createMany: {
            args: Prisma.WorkflowTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkflowTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>[]
          }
          delete: {
            args: Prisma.WorkflowTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          update: {
            args: Prisma.WorkflowTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          deleteMany: {
            args: Prisma.WorkflowTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkflowTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkflowTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>[]
          }
          upsert: {
            args: Prisma.WorkflowTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowTemplatePayload>
          }
          aggregate: {
            args: Prisma.WorkflowTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkflowTemplate>
          }
          groupBy: {
            args: Prisma.WorkflowTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkflowTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkflowTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<WorkflowTemplateCountAggregateOutputType> | number
          }
        }
      }
      WorkflowStageTemplate: {
        payload: Prisma.$WorkflowStageTemplatePayload<ExtArgs>
        fields: Prisma.WorkflowStageTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkflowStageTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStageTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkflowStageTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStageTemplatePayload>
          }
          findFirst: {
            args: Prisma.WorkflowStageTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStageTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkflowStageTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStageTemplatePayload>
          }
          findMany: {
            args: Prisma.WorkflowStageTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStageTemplatePayload>[]
          }
          create: {
            args: Prisma.WorkflowStageTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStageTemplatePayload>
          }
          createMany: {
            args: Prisma.WorkflowStageTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkflowStageTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStageTemplatePayload>[]
          }
          delete: {
            args: Prisma.WorkflowStageTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStageTemplatePayload>
          }
          update: {
            args: Prisma.WorkflowStageTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStageTemplatePayload>
          }
          deleteMany: {
            args: Prisma.WorkflowStageTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkflowStageTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WorkflowStageTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStageTemplatePayload>[]
          }
          upsert: {
            args: Prisma.WorkflowStageTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowStageTemplatePayload>
          }
          aggregate: {
            args: Prisma.WorkflowStageTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkflowStageTemplate>
          }
          groupBy: {
            args: Prisma.WorkflowStageTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkflowStageTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkflowStageTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<WorkflowStageTemplateCountAggregateOutputType> | number
          }
        }
      }
      JobWorkflow: {
        payload: Prisma.$JobWorkflowPayload<ExtArgs>
        fields: Prisma.JobWorkflowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobWorkflowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobWorkflowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowPayload>
          }
          findFirst: {
            args: Prisma.JobWorkflowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobWorkflowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowPayload>
          }
          findMany: {
            args: Prisma.JobWorkflowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowPayload>[]
          }
          create: {
            args: Prisma.JobWorkflowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowPayload>
          }
          createMany: {
            args: Prisma.JobWorkflowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobWorkflowCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowPayload>[]
          }
          delete: {
            args: Prisma.JobWorkflowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowPayload>
          }
          update: {
            args: Prisma.JobWorkflowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowPayload>
          }
          deleteMany: {
            args: Prisma.JobWorkflowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobWorkflowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobWorkflowUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowPayload>[]
          }
          upsert: {
            args: Prisma.JobWorkflowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowPayload>
          }
          aggregate: {
            args: Prisma.JobWorkflowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobWorkflow>
          }
          groupBy: {
            args: Prisma.JobWorkflowGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobWorkflowGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobWorkflowCountArgs<ExtArgs>
            result: $Utils.Optional<JobWorkflowCountAggregateOutputType> | number
          }
        }
      }
      JobWorkflowStage: {
        payload: Prisma.$JobWorkflowStagePayload<ExtArgs>
        fields: Prisma.JobWorkflowStageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobWorkflowStageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowStagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobWorkflowStageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowStagePayload>
          }
          findFirst: {
            args: Prisma.JobWorkflowStageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowStagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobWorkflowStageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowStagePayload>
          }
          findMany: {
            args: Prisma.JobWorkflowStageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowStagePayload>[]
          }
          create: {
            args: Prisma.JobWorkflowStageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowStagePayload>
          }
          createMany: {
            args: Prisma.JobWorkflowStageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobWorkflowStageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowStagePayload>[]
          }
          delete: {
            args: Prisma.JobWorkflowStageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowStagePayload>
          }
          update: {
            args: Prisma.JobWorkflowStageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowStagePayload>
          }
          deleteMany: {
            args: Prisma.JobWorkflowStageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobWorkflowStageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobWorkflowStageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowStagePayload>[]
          }
          upsert: {
            args: Prisma.JobWorkflowStageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobWorkflowStagePayload>
          }
          aggregate: {
            args: Prisma.JobWorkflowStageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobWorkflowStage>
          }
          groupBy: {
            args: Prisma.JobWorkflowStageGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobWorkflowStageGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobWorkflowStageCountArgs<ExtArgs>
            result: $Utils.Optional<JobWorkflowStageCountAggregateOutputType> | number
          }
        }
      }
      JobHiringMember: {
        payload: Prisma.$JobHiringMemberPayload<ExtArgs>
        fields: Prisma.JobHiringMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobHiringMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHiringMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobHiringMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHiringMemberPayload>
          }
          findFirst: {
            args: Prisma.JobHiringMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHiringMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobHiringMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHiringMemberPayload>
          }
          findMany: {
            args: Prisma.JobHiringMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHiringMemberPayload>[]
          }
          create: {
            args: Prisma.JobHiringMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHiringMemberPayload>
          }
          createMany: {
            args: Prisma.JobHiringMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobHiringMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHiringMemberPayload>[]
          }
          delete: {
            args: Prisma.JobHiringMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHiringMemberPayload>
          }
          update: {
            args: Prisma.JobHiringMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHiringMemberPayload>
          }
          deleteMany: {
            args: Prisma.JobHiringMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobHiringMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobHiringMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHiringMemberPayload>[]
          }
          upsert: {
            args: Prisma.JobHiringMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobHiringMemberPayload>
          }
          aggregate: {
            args: Prisma.JobHiringMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobHiringMember>
          }
          groupBy: {
            args: Prisma.JobHiringMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobHiringMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobHiringMemberCountArgs<ExtArgs>
            result: $Utils.Optional<JobHiringMemberCountAggregateOutputType> | number
          }
        }
      }
      RatingCardTemplate: {
        payload: Prisma.$RatingCardTemplatePayload<ExtArgs>
        fields: Prisma.RatingCardTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RatingCardTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCardTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RatingCardTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCardTemplatePayload>
          }
          findFirst: {
            args: Prisma.RatingCardTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCardTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RatingCardTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCardTemplatePayload>
          }
          findMany: {
            args: Prisma.RatingCardTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCardTemplatePayload>[]
          }
          create: {
            args: Prisma.RatingCardTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCardTemplatePayload>
          }
          createMany: {
            args: Prisma.RatingCardTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RatingCardTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCardTemplatePayload>[]
          }
          delete: {
            args: Prisma.RatingCardTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCardTemplatePayload>
          }
          update: {
            args: Prisma.RatingCardTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCardTemplatePayload>
          }
          deleteMany: {
            args: Prisma.RatingCardTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RatingCardTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RatingCardTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCardTemplatePayload>[]
          }
          upsert: {
            args: Prisma.RatingCardTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCardTemplatePayload>
          }
          aggregate: {
            args: Prisma.RatingCardTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRatingCardTemplate>
          }
          groupBy: {
            args: Prisma.RatingCardTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<RatingCardTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.RatingCardTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<RatingCardTemplateCountAggregateOutputType> | number
          }
        }
      }
      RatingCategory: {
        payload: Prisma.$RatingCategoryPayload<ExtArgs>
        fields: Prisma.RatingCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RatingCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RatingCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCategoryPayload>
          }
          findFirst: {
            args: Prisma.RatingCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RatingCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCategoryPayload>
          }
          findMany: {
            args: Prisma.RatingCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCategoryPayload>[]
          }
          create: {
            args: Prisma.RatingCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCategoryPayload>
          }
          createMany: {
            args: Prisma.RatingCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RatingCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCategoryPayload>[]
          }
          delete: {
            args: Prisma.RatingCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCategoryPayload>
          }
          update: {
            args: Prisma.RatingCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCategoryPayload>
          }
          deleteMany: {
            args: Prisma.RatingCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RatingCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RatingCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCategoryPayload>[]
          }
          upsert: {
            args: Prisma.RatingCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingCategoryPayload>
          }
          aggregate: {
            args: Prisma.RatingCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRatingCategory>
          }
          groupBy: {
            args: Prisma.RatingCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<RatingCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.RatingCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<RatingCategoryCountAggregateOutputType> | number
          }
        }
      }
      CandidateRating: {
        payload: Prisma.$CandidateRatingPayload<ExtArgs>
        fields: Prisma.CandidateRatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CandidateRatingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateRatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CandidateRatingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateRatingPayload>
          }
          findFirst: {
            args: Prisma.CandidateRatingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateRatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CandidateRatingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateRatingPayload>
          }
          findMany: {
            args: Prisma.CandidateRatingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateRatingPayload>[]
          }
          create: {
            args: Prisma.CandidateRatingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateRatingPayload>
          }
          createMany: {
            args: Prisma.CandidateRatingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CandidateRatingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateRatingPayload>[]
          }
          delete: {
            args: Prisma.CandidateRatingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateRatingPayload>
          }
          update: {
            args: Prisma.CandidateRatingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateRatingPayload>
          }
          deleteMany: {
            args: Prisma.CandidateRatingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CandidateRatingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CandidateRatingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateRatingPayload>[]
          }
          upsert: {
            args: Prisma.CandidateRatingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CandidateRatingPayload>
          }
          aggregate: {
            args: Prisma.CandidateRatingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCandidateRating>
          }
          groupBy: {
            args: Prisma.CandidateRatingGroupByArgs<ExtArgs>
            result: $Utils.Optional<CandidateRatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.CandidateRatingCountArgs<ExtArgs>
            result: $Utils.Optional<CandidateRatingCountAggregateOutputType> | number
          }
        }
      }
      CategoryScore: {
        payload: Prisma.$CategoryScorePayload<ExtArgs>
        fields: Prisma.CategoryScoreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryScoreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryScorePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryScoreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryScorePayload>
          }
          findFirst: {
            args: Prisma.CategoryScoreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryScorePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryScoreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryScorePayload>
          }
          findMany: {
            args: Prisma.CategoryScoreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryScorePayload>[]
          }
          create: {
            args: Prisma.CategoryScoreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryScorePayload>
          }
          createMany: {
            args: Prisma.CategoryScoreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryScoreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryScorePayload>[]
          }
          delete: {
            args: Prisma.CategoryScoreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryScorePayload>
          }
          update: {
            args: Prisma.CategoryScoreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryScorePayload>
          }
          deleteMany: {
            args: Prisma.CategoryScoreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryScoreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryScoreUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryScorePayload>[]
          }
          upsert: {
            args: Prisma.CategoryScoreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryScorePayload>
          }
          aggregate: {
            args: Prisma.CategoryScoreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategoryScore>
          }
          groupBy: {
            args: Prisma.CategoryScoreGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryScoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryScoreCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryScoreCountAggregateOutputType> | number
          }
        }
      }
      MessageThread: {
        payload: Prisma.$MessageThreadPayload<ExtArgs>
        fields: Prisma.MessageThreadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageThreadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageThreadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>
          }
          findFirst: {
            args: Prisma.MessageThreadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageThreadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>
          }
          findMany: {
            args: Prisma.MessageThreadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>[]
          }
          create: {
            args: Prisma.MessageThreadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>
          }
          createMany: {
            args: Prisma.MessageThreadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageThreadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>[]
          }
          delete: {
            args: Prisma.MessageThreadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>
          }
          update: {
            args: Prisma.MessageThreadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>
          }
          deleteMany: {
            args: Prisma.MessageThreadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageThreadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageThreadUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>[]
          }
          upsert: {
            args: Prisma.MessageThreadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageThreadPayload>
          }
          aggregate: {
            args: Prisma.MessageThreadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessageThread>
          }
          groupBy: {
            args: Prisma.MessageThreadGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageThreadGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageThreadCountArgs<ExtArgs>
            result: $Utils.Optional<MessageThreadCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      Meeting: {
        payload: Prisma.$MeetingPayload<ExtArgs>
        fields: Prisma.MeetingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeetingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeetingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload>
          }
          findFirst: {
            args: Prisma.MeetingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeetingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload>
          }
          findMany: {
            args: Prisma.MeetingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload>[]
          }
          create: {
            args: Prisma.MeetingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload>
          }
          createMany: {
            args: Prisma.MeetingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MeetingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload>[]
          }
          delete: {
            args: Prisma.MeetingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload>
          }
          update: {
            args: Prisma.MeetingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload>
          }
          deleteMany: {
            args: Prisma.MeetingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeetingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MeetingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload>[]
          }
          upsert: {
            args: Prisma.MeetingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingPayload>
          }
          aggregate: {
            args: Prisma.MeetingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeeting>
          }
          groupBy: {
            args: Prisma.MeetingGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeetingGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeetingCountArgs<ExtArgs>
            result: $Utils.Optional<MeetingCountAggregateOutputType> | number
          }
        }
      }
      MeetingAttendee: {
        payload: Prisma.$MeetingAttendeePayload<ExtArgs>
        fields: Prisma.MeetingAttendeeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeetingAttendeeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingAttendeePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeetingAttendeeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingAttendeePayload>
          }
          findFirst: {
            args: Prisma.MeetingAttendeeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingAttendeePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeetingAttendeeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingAttendeePayload>
          }
          findMany: {
            args: Prisma.MeetingAttendeeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingAttendeePayload>[]
          }
          create: {
            args: Prisma.MeetingAttendeeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingAttendeePayload>
          }
          createMany: {
            args: Prisma.MeetingAttendeeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MeetingAttendeeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingAttendeePayload>[]
          }
          delete: {
            args: Prisma.MeetingAttendeeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingAttendeePayload>
          }
          update: {
            args: Prisma.MeetingAttendeeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingAttendeePayload>
          }
          deleteMany: {
            args: Prisma.MeetingAttendeeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeetingAttendeeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MeetingAttendeeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingAttendeePayload>[]
          }
          upsert: {
            args: Prisma.MeetingAttendeeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingAttendeePayload>
          }
          aggregate: {
            args: Prisma.MeetingAttendeeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeetingAttendee>
          }
          groupBy: {
            args: Prisma.MeetingAttendeeGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeetingAttendeeGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeetingAttendeeCountArgs<ExtArgs>
            result: $Utils.Optional<MeetingAttendeeCountAggregateOutputType> | number
          }
        }
      }
      MeetingTemplate: {
        payload: Prisma.$MeetingTemplatePayload<ExtArgs>
        fields: Prisma.MeetingTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeetingTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeetingTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingTemplatePayload>
          }
          findFirst: {
            args: Prisma.MeetingTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeetingTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingTemplatePayload>
          }
          findMany: {
            args: Prisma.MeetingTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingTemplatePayload>[]
          }
          create: {
            args: Prisma.MeetingTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingTemplatePayload>
          }
          createMany: {
            args: Prisma.MeetingTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MeetingTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingTemplatePayload>[]
          }
          delete: {
            args: Prisma.MeetingTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingTemplatePayload>
          }
          update: {
            args: Prisma.MeetingTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingTemplatePayload>
          }
          deleteMany: {
            args: Prisma.MeetingTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeetingTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MeetingTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingTemplatePayload>[]
          }
          upsert: {
            args: Prisma.MeetingTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetingTemplatePayload>
          }
          aggregate: {
            args: Prisma.MeetingTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeetingTemplate>
          }
          groupBy: {
            args: Prisma.MeetingTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeetingTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeetingTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<MeetingTemplateCountAggregateOutputType> | number
          }
        }
      }
      CareersPageSetting: {
        payload: Prisma.$CareersPageSettingPayload<ExtArgs>
        fields: Prisma.CareersPageSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CareersPageSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareersPageSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CareersPageSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareersPageSettingPayload>
          }
          findFirst: {
            args: Prisma.CareersPageSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareersPageSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CareersPageSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareersPageSettingPayload>
          }
          findMany: {
            args: Prisma.CareersPageSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareersPageSettingPayload>[]
          }
          create: {
            args: Prisma.CareersPageSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareersPageSettingPayload>
          }
          createMany: {
            args: Prisma.CareersPageSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CareersPageSettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareersPageSettingPayload>[]
          }
          delete: {
            args: Prisma.CareersPageSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareersPageSettingPayload>
          }
          update: {
            args: Prisma.CareersPageSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareersPageSettingPayload>
          }
          deleteMany: {
            args: Prisma.CareersPageSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CareersPageSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CareersPageSettingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareersPageSettingPayload>[]
          }
          upsert: {
            args: Prisma.CareersPageSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CareersPageSettingPayload>
          }
          aggregate: {
            args: Prisma.CareersPageSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCareersPageSetting>
          }
          groupBy: {
            args: Prisma.CareersPageSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<CareersPageSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.CareersPageSettingCountArgs<ExtArgs>
            result: $Utils.Optional<CareersPageSettingCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      AIScreeningConfig: {
        payload: Prisma.$AIScreeningConfigPayload<ExtArgs>
        fields: Prisma.AIScreeningConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AIScreeningConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIScreeningConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AIScreeningConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIScreeningConfigPayload>
          }
          findFirst: {
            args: Prisma.AIScreeningConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIScreeningConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AIScreeningConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIScreeningConfigPayload>
          }
          findMany: {
            args: Prisma.AIScreeningConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIScreeningConfigPayload>[]
          }
          create: {
            args: Prisma.AIScreeningConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIScreeningConfigPayload>
          }
          createMany: {
            args: Prisma.AIScreeningConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AIScreeningConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIScreeningConfigPayload>[]
          }
          delete: {
            args: Prisma.AIScreeningConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIScreeningConfigPayload>
          }
          update: {
            args: Prisma.AIScreeningConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIScreeningConfigPayload>
          }
          deleteMany: {
            args: Prisma.AIScreeningConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AIScreeningConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AIScreeningConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIScreeningConfigPayload>[]
          }
          upsert: {
            args: Prisma.AIScreeningConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIScreeningConfigPayload>
          }
          aggregate: {
            args: Prisma.AIScreeningConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAIScreeningConfig>
          }
          groupBy: {
            args: Prisma.AIScreeningConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<AIScreeningConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.AIScreeningConfigCountArgs<ExtArgs>
            result: $Utils.Optional<AIScreeningConfigCountAggregateOutputType> | number
          }
        }
      }
      AISchedulingConfig: {
        payload: Prisma.$AISchedulingConfigPayload<ExtArgs>
        fields: Prisma.AISchedulingConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AISchedulingConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AISchedulingConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AISchedulingConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AISchedulingConfigPayload>
          }
          findFirst: {
            args: Prisma.AISchedulingConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AISchedulingConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AISchedulingConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AISchedulingConfigPayload>
          }
          findMany: {
            args: Prisma.AISchedulingConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AISchedulingConfigPayload>[]
          }
          create: {
            args: Prisma.AISchedulingConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AISchedulingConfigPayload>
          }
          createMany: {
            args: Prisma.AISchedulingConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AISchedulingConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AISchedulingConfigPayload>[]
          }
          delete: {
            args: Prisma.AISchedulingConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AISchedulingConfigPayload>
          }
          update: {
            args: Prisma.AISchedulingConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AISchedulingConfigPayload>
          }
          deleteMany: {
            args: Prisma.AISchedulingConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AISchedulingConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AISchedulingConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AISchedulingConfigPayload>[]
          }
          upsert: {
            args: Prisma.AISchedulingConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AISchedulingConfigPayload>
          }
          aggregate: {
            args: Prisma.AISchedulingConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAISchedulingConfig>
          }
          groupBy: {
            args: Prisma.AISchedulingConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<AISchedulingConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.AISchedulingConfigCountArgs<ExtArgs>
            result: $Utils.Optional<AISchedulingConfigCountAggregateOutputType> | number
          }
        }
      }
      AINoteTakingConfig: {
        payload: Prisma.$AINoteTakingConfigPayload<ExtArgs>
        fields: Prisma.AINoteTakingConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AINoteTakingConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AINoteTakingConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AINoteTakingConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AINoteTakingConfigPayload>
          }
          findFirst: {
            args: Prisma.AINoteTakingConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AINoteTakingConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AINoteTakingConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AINoteTakingConfigPayload>
          }
          findMany: {
            args: Prisma.AINoteTakingConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AINoteTakingConfigPayload>[]
          }
          create: {
            args: Prisma.AINoteTakingConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AINoteTakingConfigPayload>
          }
          createMany: {
            args: Prisma.AINoteTakingConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AINoteTakingConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AINoteTakingConfigPayload>[]
          }
          delete: {
            args: Prisma.AINoteTakingConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AINoteTakingConfigPayload>
          }
          update: {
            args: Prisma.AINoteTakingConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AINoteTakingConfigPayload>
          }
          deleteMany: {
            args: Prisma.AINoteTakingConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AINoteTakingConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AINoteTakingConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AINoteTakingConfigPayload>[]
          }
          upsert: {
            args: Prisma.AINoteTakingConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AINoteTakingConfigPayload>
          }
          aggregate: {
            args: Prisma.AINoteTakingConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAINoteTakingConfig>
          }
          groupBy: {
            args: Prisma.AINoteTakingConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<AINoteTakingConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.AINoteTakingConfigCountArgs<ExtArgs>
            result: $Utils.Optional<AINoteTakingConfigCountAggregateOutputType> | number
          }
        }
      }
      AIInteractionLog: {
        payload: Prisma.$AIInteractionLogPayload<ExtArgs>
        fields: Prisma.AIInteractionLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AIInteractionLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AIInteractionLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionLogPayload>
          }
          findFirst: {
            args: Prisma.AIInteractionLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AIInteractionLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionLogPayload>
          }
          findMany: {
            args: Prisma.AIInteractionLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionLogPayload>[]
          }
          create: {
            args: Prisma.AIInteractionLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionLogPayload>
          }
          createMany: {
            args: Prisma.AIInteractionLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AIInteractionLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionLogPayload>[]
          }
          delete: {
            args: Prisma.AIInteractionLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionLogPayload>
          }
          update: {
            args: Prisma.AIInteractionLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionLogPayload>
          }
          deleteMany: {
            args: Prisma.AIInteractionLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AIInteractionLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AIInteractionLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionLogPayload>[]
          }
          upsert: {
            args: Prisma.AIInteractionLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIInteractionLogPayload>
          }
          aggregate: {
            args: Prisma.AIInteractionLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAIInteractionLog>
          }
          groupBy: {
            args: Prisma.AIInteractionLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AIInteractionLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AIInteractionLogCountArgs<ExtArgs>
            result: $Utils.Optional<AIInteractionLogCountAggregateOutputType> | number
          }
        }
      }
      AIBusinessPreference: {
        payload: Prisma.$AIBusinessPreferencePayload<ExtArgs>
        fields: Prisma.AIBusinessPreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AIBusinessPreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIBusinessPreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AIBusinessPreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIBusinessPreferencePayload>
          }
          findFirst: {
            args: Prisma.AIBusinessPreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIBusinessPreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AIBusinessPreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIBusinessPreferencePayload>
          }
          findMany: {
            args: Prisma.AIBusinessPreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIBusinessPreferencePayload>[]
          }
          create: {
            args: Prisma.AIBusinessPreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIBusinessPreferencePayload>
          }
          createMany: {
            args: Prisma.AIBusinessPreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AIBusinessPreferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIBusinessPreferencePayload>[]
          }
          delete: {
            args: Prisma.AIBusinessPreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIBusinessPreferencePayload>
          }
          update: {
            args: Prisma.AIBusinessPreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIBusinessPreferencePayload>
          }
          deleteMany: {
            args: Prisma.AIBusinessPreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AIBusinessPreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AIBusinessPreferenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIBusinessPreferencePayload>[]
          }
          upsert: {
            args: Prisma.AIBusinessPreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AIBusinessPreferencePayload>
          }
          aggregate: {
            args: Prisma.AIBusinessPreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAIBusinessPreference>
          }
          groupBy: {
            args: Prisma.AIBusinessPreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AIBusinessPreferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AIBusinessPreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<AIBusinessPreferenceCountAggregateOutputType> | number
          }
        }
      }
      AICommunicationPreference: {
        payload: Prisma.$AICommunicationPreferencePayload<ExtArgs>
        fields: Prisma.AICommunicationPreferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AICommunicationPreferenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICommunicationPreferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AICommunicationPreferenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICommunicationPreferencePayload>
          }
          findFirst: {
            args: Prisma.AICommunicationPreferenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICommunicationPreferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AICommunicationPreferenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICommunicationPreferencePayload>
          }
          findMany: {
            args: Prisma.AICommunicationPreferenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICommunicationPreferencePayload>[]
          }
          create: {
            args: Prisma.AICommunicationPreferenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICommunicationPreferencePayload>
          }
          createMany: {
            args: Prisma.AICommunicationPreferenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AICommunicationPreferenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICommunicationPreferencePayload>[]
          }
          delete: {
            args: Prisma.AICommunicationPreferenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICommunicationPreferencePayload>
          }
          update: {
            args: Prisma.AICommunicationPreferenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICommunicationPreferencePayload>
          }
          deleteMany: {
            args: Prisma.AICommunicationPreferenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AICommunicationPreferenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AICommunicationPreferenceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICommunicationPreferencePayload>[]
          }
          upsert: {
            args: Prisma.AICommunicationPreferenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AICommunicationPreferencePayload>
          }
          aggregate: {
            args: Prisma.AICommunicationPreferenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAICommunicationPreference>
          }
          groupBy: {
            args: Prisma.AICommunicationPreferenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AICommunicationPreferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.AICommunicationPreferenceCountArgs<ExtArgs>
            result: $Utils.Optional<AICommunicationPreferenceCountAggregateOutputType> | number
          }
        }
      }
      CalendarIntegration: {
        payload: Prisma.$CalendarIntegrationPayload<ExtArgs>
        fields: Prisma.CalendarIntegrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CalendarIntegrationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarIntegrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CalendarIntegrationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarIntegrationPayload>
          }
          findFirst: {
            args: Prisma.CalendarIntegrationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarIntegrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CalendarIntegrationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarIntegrationPayload>
          }
          findMany: {
            args: Prisma.CalendarIntegrationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarIntegrationPayload>[]
          }
          create: {
            args: Prisma.CalendarIntegrationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarIntegrationPayload>
          }
          createMany: {
            args: Prisma.CalendarIntegrationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CalendarIntegrationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarIntegrationPayload>[]
          }
          delete: {
            args: Prisma.CalendarIntegrationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarIntegrationPayload>
          }
          update: {
            args: Prisma.CalendarIntegrationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarIntegrationPayload>
          }
          deleteMany: {
            args: Prisma.CalendarIntegrationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CalendarIntegrationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CalendarIntegrationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarIntegrationPayload>[]
          }
          upsert: {
            args: Prisma.CalendarIntegrationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarIntegrationPayload>
          }
          aggregate: {
            args: Prisma.CalendarIntegrationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCalendarIntegration>
          }
          groupBy: {
            args: Prisma.CalendarIntegrationGroupByArgs<ExtArgs>
            result: $Utils.Optional<CalendarIntegrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.CalendarIntegrationCountArgs<ExtArgs>
            result: $Utils.Optional<CalendarIntegrationCountAggregateOutputType> | number
          }
        }
      }
      JobBoardIntegration: {
        payload: Prisma.$JobBoardIntegrationPayload<ExtArgs>
        fields: Prisma.JobBoardIntegrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobBoardIntegrationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobBoardIntegrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobBoardIntegrationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobBoardIntegrationPayload>
          }
          findFirst: {
            args: Prisma.JobBoardIntegrationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobBoardIntegrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobBoardIntegrationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobBoardIntegrationPayload>
          }
          findMany: {
            args: Prisma.JobBoardIntegrationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobBoardIntegrationPayload>[]
          }
          create: {
            args: Prisma.JobBoardIntegrationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobBoardIntegrationPayload>
          }
          createMany: {
            args: Prisma.JobBoardIntegrationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobBoardIntegrationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobBoardIntegrationPayload>[]
          }
          delete: {
            args: Prisma.JobBoardIntegrationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobBoardIntegrationPayload>
          }
          update: {
            args: Prisma.JobBoardIntegrationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobBoardIntegrationPayload>
          }
          deleteMany: {
            args: Prisma.JobBoardIntegrationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobBoardIntegrationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JobBoardIntegrationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobBoardIntegrationPayload>[]
          }
          upsert: {
            args: Prisma.JobBoardIntegrationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobBoardIntegrationPayload>
          }
          aggregate: {
            args: Prisma.JobBoardIntegrationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobBoardIntegration>
          }
          groupBy: {
            args: Prisma.JobBoardIntegrationGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobBoardIntegrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobBoardIntegrationCountArgs<ExtArgs>
            result: $Utils.Optional<JobBoardIntegrationCountAggregateOutputType> | number
          }
        }
      }
      MessageTemplate: {
        payload: Prisma.$MessageTemplatePayload<ExtArgs>
        fields: Prisma.MessageTemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageTemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageTemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTemplatePayload>
          }
          findFirst: {
            args: Prisma.MessageTemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageTemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTemplatePayload>
          }
          findMany: {
            args: Prisma.MessageTemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTemplatePayload>[]
          }
          create: {
            args: Prisma.MessageTemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTemplatePayload>
          }
          createMany: {
            args: Prisma.MessageTemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageTemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTemplatePayload>[]
          }
          delete: {
            args: Prisma.MessageTemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTemplatePayload>
          }
          update: {
            args: Prisma.MessageTemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTemplatePayload>
          }
          deleteMany: {
            args: Prisma.MessageTemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageTemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageTemplateUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTemplatePayload>[]
          }
          upsert: {
            args: Prisma.MessageTemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageTemplatePayload>
          }
          aggregate: {
            args: Prisma.MessageTemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessageTemplate>
          }
          groupBy: {
            args: Prisma.MessageTemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageTemplateCountArgs<ExtArgs>
            result: $Utils.Optional<MessageTemplateCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      QuestionOption: {
        payload: Prisma.$QuestionOptionPayload<ExtArgs>
        fields: Prisma.QuestionOptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionOptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionOptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          findFirst: {
            args: Prisma.QuestionOptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionOptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          findMany: {
            args: Prisma.QuestionOptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>[]
          }
          create: {
            args: Prisma.QuestionOptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          createMany: {
            args: Prisma.QuestionOptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionOptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>[]
          }
          delete: {
            args: Prisma.QuestionOptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          update: {
            args: Prisma.QuestionOptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionOptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionOptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionOptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>[]
          }
          upsert: {
            args: Prisma.QuestionOptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionOptionPayload>
          }
          aggregate: {
            args: Prisma.QuestionOptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionOption>
          }
          groupBy: {
            args: Prisma.QuestionOptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionOptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionOptionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionOptionCountAggregateOutputType> | number
          }
        }
      }
      QuestionSet: {
        payload: Prisma.$QuestionSetPayload<ExtArgs>
        fields: Prisma.QuestionSetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionSetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionSetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          findFirst: {
            args: Prisma.QuestionSetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionSetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          findMany: {
            args: Prisma.QuestionSetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>[]
          }
          create: {
            args: Prisma.QuestionSetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          createMany: {
            args: Prisma.QuestionSetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionSetCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>[]
          }
          delete: {
            args: Prisma.QuestionSetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          update: {
            args: Prisma.QuestionSetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          deleteMany: {
            args: Prisma.QuestionSetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionSetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionSetUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>[]
          }
          upsert: {
            args: Prisma.QuestionSetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionSetPayload>
          }
          aggregate: {
            args: Prisma.QuestionSetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionSet>
          }
          groupBy: {
            args: Prisma.QuestionSetGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionSetGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionSetCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionSetCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    userProfile?: UserProfileOmit
    company?: CompanyOmit
    companyMember?: CompanyMemberOmit
    job?: JobOmit
    department?: DepartmentOmit
    jobLocation?: JobLocationOmit
    applicationFormField?: ApplicationFormFieldOmit
    customQuestion?: CustomQuestionOmit
    candidate?: CandidateOmit
    application?: ApplicationOmit
    candidateAnswer?: CandidateAnswerOmit
    workflowTemplate?: WorkflowTemplateOmit
    workflowStageTemplate?: WorkflowStageTemplateOmit
    jobWorkflow?: JobWorkflowOmit
    jobWorkflowStage?: JobWorkflowStageOmit
    jobHiringMember?: JobHiringMemberOmit
    ratingCardTemplate?: RatingCardTemplateOmit
    ratingCategory?: RatingCategoryOmit
    candidateRating?: CandidateRatingOmit
    categoryScore?: CategoryScoreOmit
    messageThread?: MessageThreadOmit
    message?: MessageOmit
    meeting?: MeetingOmit
    meetingAttendee?: MeetingAttendeeOmit
    meetingTemplate?: MeetingTemplateOmit
    careersPageSetting?: CareersPageSettingOmit
    notification?: NotificationOmit
    aIScreeningConfig?: AIScreeningConfigOmit
    aISchedulingConfig?: AISchedulingConfigOmit
    aINoteTakingConfig?: AINoteTakingConfigOmit
    aIInteractionLog?: AIInteractionLogOmit
    aIBusinessPreference?: AIBusinessPreferenceOmit
    aICommunicationPreference?: AICommunicationPreferenceOmit
    calendarIntegration?: CalendarIntegrationOmit
    jobBoardIntegration?: JobBoardIntegrationOmit
    messageTemplate?: MessageTemplateOmit
    question?: QuestionOmit
    questionOption?: QuestionOptionOmit
    questionSet?: QuestionSetOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    notifications: number
    sentMessages: number
    meetingsOwned: number
    meetingAttendees: number
    candidateRatings: number
    companiesOwned: number
    companyMemberships: number
    calendarIntegrations: number
    aiInteractionLogs: number
    jobHiringMembers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    sentMessages?: boolean | UserCountOutputTypeCountSentMessagesArgs
    meetingsOwned?: boolean | UserCountOutputTypeCountMeetingsOwnedArgs
    meetingAttendees?: boolean | UserCountOutputTypeCountMeetingAttendeesArgs
    candidateRatings?: boolean | UserCountOutputTypeCountCandidateRatingsArgs
    companiesOwned?: boolean | UserCountOutputTypeCountCompaniesOwnedArgs
    companyMemberships?: boolean | UserCountOutputTypeCountCompanyMembershipsArgs
    calendarIntegrations?: boolean | UserCountOutputTypeCountCalendarIntegrationsArgs
    aiInteractionLogs?: boolean | UserCountOutputTypeCountAiInteractionLogsArgs
    jobHiringMembers?: boolean | UserCountOutputTypeCountJobHiringMembersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMeetingsOwnedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMeetingAttendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetingAttendeeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCandidateRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateRatingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCompaniesOwnedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCompanyMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCalendarIntegrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalendarIntegrationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAiInteractionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AIInteractionLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountJobHiringMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobHiringMemberWhereInput
  }


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    members: number
    jobs: number
    departments: number
    locations: number
    workflowTemplates: number
    ratingCardTemplates: number
    jobBoardIntegrations: number
    messageTemplates: number
    questions: number
    questionSets: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | CompanyCountOutputTypeCountMembersArgs
    jobs?: boolean | CompanyCountOutputTypeCountJobsArgs
    departments?: boolean | CompanyCountOutputTypeCountDepartmentsArgs
    locations?: boolean | CompanyCountOutputTypeCountLocationsArgs
    workflowTemplates?: boolean | CompanyCountOutputTypeCountWorkflowTemplatesArgs
    ratingCardTemplates?: boolean | CompanyCountOutputTypeCountRatingCardTemplatesArgs
    jobBoardIntegrations?: boolean | CompanyCountOutputTypeCountJobBoardIntegrationsArgs
    messageTemplates?: boolean | CompanyCountOutputTypeCountMessageTemplatesArgs
    questions?: boolean | CompanyCountOutputTypeCountQuestionsArgs
    questionSets?: boolean | CompanyCountOutputTypeCountQuestionSetsArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyMemberWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountLocationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobLocationWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountWorkflowTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowTemplateWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountRatingCardTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingCardTemplateWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountJobBoardIntegrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobBoardIntegrationWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountMessageTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageTemplateWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountQuestionSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSetWhereInput
  }


  /**
   * Count Type JobCountOutputType
   */

  export type JobCountOutputType = {
    applicationForm: number
    hiringTeam: number
    applications: number
  }

  export type JobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicationForm?: boolean | JobCountOutputTypeCountApplicationFormArgs
    hiringTeam?: boolean | JobCountOutputTypeCountHiringTeamArgs
    applications?: boolean | JobCountOutputTypeCountApplicationsArgs
  }

  // Custom InputTypes
  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCountOutputType
     */
    select?: JobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountApplicationFormArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationFormFieldWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountHiringTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobHiringMemberWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    jobs: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobs?: boolean | DepartmentCountOutputTypeCountJobsArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
  }


  /**
   * Count Type JobLocationCountOutputType
   */

  export type JobLocationCountOutputType = {
    jobs: number
  }

  export type JobLocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobs?: boolean | JobLocationCountOutputTypeCountJobsArgs
  }

  // Custom InputTypes
  /**
   * JobLocationCountOutputType without action
   */
  export type JobLocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLocationCountOutputType
     */
    select?: JobLocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobLocationCountOutputType without action
   */
  export type JobLocationCountOutputTypeCountJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
  }


  /**
   * Count Type CustomQuestionCountOutputType
   */

  export type CustomQuestionCountOutputType = {
    applicationFormFields: number
    candidateAnswers: number
  }

  export type CustomQuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicationFormFields?: boolean | CustomQuestionCountOutputTypeCountApplicationFormFieldsArgs
    candidateAnswers?: boolean | CustomQuestionCountOutputTypeCountCandidateAnswersArgs
  }

  // Custom InputTypes
  /**
   * CustomQuestionCountOutputType without action
   */
  export type CustomQuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomQuestionCountOutputType
     */
    select?: CustomQuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomQuestionCountOutputType without action
   */
  export type CustomQuestionCountOutputTypeCountApplicationFormFieldsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationFormFieldWhereInput
  }

  /**
   * CustomQuestionCountOutputType without action
   */
  export type CustomQuestionCountOutputTypeCountCandidateAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateAnswerWhereInput
  }


  /**
   * Count Type CandidateCountOutputType
   */

  export type CandidateCountOutputType = {
    applications: number
    candidateAnswers: number
  }

  export type CandidateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | CandidateCountOutputTypeCountApplicationsArgs
    candidateAnswers?: boolean | CandidateCountOutputTypeCountCandidateAnswersArgs
  }

  // Custom InputTypes
  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateCountOutputType
     */
    select?: CandidateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }

  /**
   * CandidateCountOutputType without action
   */
  export type CandidateCountOutputTypeCountCandidateAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateAnswerWhereInput
  }


  /**
   * Count Type ApplicationCountOutputType
   */

  export type ApplicationCountOutputType = {
    candidateAnswers: number
    candidateRatings: number
    messages: number
  }

  export type ApplicationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidateAnswers?: boolean | ApplicationCountOutputTypeCountCandidateAnswersArgs
    candidateRatings?: boolean | ApplicationCountOutputTypeCountCandidateRatingsArgs
    messages?: boolean | ApplicationCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationCountOutputType
     */
    select?: ApplicationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountCandidateAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateAnswerWhereInput
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountCandidateRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateRatingWhereInput
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageThreadWhereInput
  }


  /**
   * Count Type WorkflowTemplateCountOutputType
   */

  export type WorkflowTemplateCountOutputType = {
    stages: number
    jobWorkflows: number
  }

  export type WorkflowTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stages?: boolean | WorkflowTemplateCountOutputTypeCountStagesArgs
    jobWorkflows?: boolean | WorkflowTemplateCountOutputTypeCountJobWorkflowsArgs
  }

  // Custom InputTypes
  /**
   * WorkflowTemplateCountOutputType without action
   */
  export type WorkflowTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplateCountOutputType
     */
    select?: WorkflowTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WorkflowTemplateCountOutputType without action
   */
  export type WorkflowTemplateCountOutputTypeCountStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowStageTemplateWhereInput
  }

  /**
   * WorkflowTemplateCountOutputType without action
   */
  export type WorkflowTemplateCountOutputTypeCountJobWorkflowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWorkflowWhereInput
  }


  /**
   * Count Type JobWorkflowCountOutputType
   */

  export type JobWorkflowCountOutputType = {
    stages: number
  }

  export type JobWorkflowCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stages?: boolean | JobWorkflowCountOutputTypeCountStagesArgs
  }

  // Custom InputTypes
  /**
   * JobWorkflowCountOutputType without action
   */
  export type JobWorkflowCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflowCountOutputType
     */
    select?: JobWorkflowCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobWorkflowCountOutputType without action
   */
  export type JobWorkflowCountOutputTypeCountStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWorkflowStageWhereInput
  }


  /**
   * Count Type RatingCardTemplateCountOutputType
   */

  export type RatingCardTemplateCountOutputType = {
    categories: number
    candidateRatings: number
  }

  export type RatingCardTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | RatingCardTemplateCountOutputTypeCountCategoriesArgs
    candidateRatings?: boolean | RatingCardTemplateCountOutputTypeCountCandidateRatingsArgs
  }

  // Custom InputTypes
  /**
   * RatingCardTemplateCountOutputType without action
   */
  export type RatingCardTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCardTemplateCountOutputType
     */
    select?: RatingCardTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RatingCardTemplateCountOutputType without action
   */
  export type RatingCardTemplateCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingCategoryWhereInput
  }

  /**
   * RatingCardTemplateCountOutputType without action
   */
  export type RatingCardTemplateCountOutputTypeCountCandidateRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateRatingWhereInput
  }


  /**
   * Count Type RatingCategoryCountOutputType
   */

  export type RatingCategoryCountOutputType = {
    categoryScores: number
  }

  export type RatingCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoryScores?: boolean | RatingCategoryCountOutputTypeCountCategoryScoresArgs
  }

  // Custom InputTypes
  /**
   * RatingCategoryCountOutputType without action
   */
  export type RatingCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCategoryCountOutputType
     */
    select?: RatingCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RatingCategoryCountOutputType without action
   */
  export type RatingCategoryCountOutputTypeCountCategoryScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryScoreWhereInput
  }


  /**
   * Count Type CandidateRatingCountOutputType
   */

  export type CandidateRatingCountOutputType = {
    categoryScores: number
  }

  export type CandidateRatingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoryScores?: boolean | CandidateRatingCountOutputTypeCountCategoryScoresArgs
  }

  // Custom InputTypes
  /**
   * CandidateRatingCountOutputType without action
   */
  export type CandidateRatingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateRatingCountOutputType
     */
    select?: CandidateRatingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CandidateRatingCountOutputType without action
   */
  export type CandidateRatingCountOutputTypeCountCategoryScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryScoreWhereInput
  }


  /**
   * Count Type MessageThreadCountOutputType
   */

  export type MessageThreadCountOutputType = {
    messages: number
  }

  export type MessageThreadCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | MessageThreadCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * MessageThreadCountOutputType without action
   */
  export type MessageThreadCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThreadCountOutputType
     */
    select?: MessageThreadCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MessageThreadCountOutputType without action
   */
  export type MessageThreadCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }


  /**
   * Count Type MeetingCountOutputType
   */

  export type MeetingCountOutputType = {
    attendees: number
  }

  export type MeetingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendees?: boolean | MeetingCountOutputTypeCountAttendeesArgs
  }

  // Custom InputTypes
  /**
   * MeetingCountOutputType without action
   */
  export type MeetingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingCountOutputType
     */
    select?: MeetingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MeetingCountOutputType without action
   */
  export type MeetingCountOutputTypeCountAttendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetingAttendeeWhereInput
  }


  /**
   * Count Type MeetingTemplateCountOutputType
   */

  export type MeetingTemplateCountOutputType = {
    meetings: number
  }

  export type MeetingTemplateCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetings?: boolean | MeetingTemplateCountOutputTypeCountMeetingsArgs
  }

  // Custom InputTypes
  /**
   * MeetingTemplateCountOutputType without action
   */
  export type MeetingTemplateCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingTemplateCountOutputType
     */
    select?: MeetingTemplateCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MeetingTemplateCountOutputType without action
   */
  export type MeetingTemplateCountOutputTypeCountMeetingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetingWhereInput
  }


  /**
   * Count Type QuestionCountOutputType
   */

  export type QuestionCountOutputType = {
    options: number
    questionSets: number
  }

  export type QuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    options?: boolean | QuestionCountOutputTypeCountOptionsArgs
    questionSets?: boolean | QuestionCountOutputTypeCountQuestionSetsArgs
  }

  // Custom InputTypes
  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCountOutputType
     */
    select?: QuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountOptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionOptionWhereInput
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountQuestionSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSetWhereInput
  }


  /**
   * Count Type QuestionSetCountOutputType
   */

  export type QuestionSetCountOutputType = {
    questions: number
  }

  export type QuestionSetCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    questions?: boolean | QuestionSetCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes
  /**
   * QuestionSetCountOutputType without action
   */
  export type QuestionSetCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSetCountOutputType
     */
    select?: QuestionSetCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionSetCountOutputType without action
   */
  export type QuestionSetCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    jobTitle: string | null
    departmentName: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    jobTitle: string | null
    departmentName: string | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    jobTitle: number
    departmentName: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    jobTitle?: true
    departmentName?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    jobTitle?: true
    departmentName?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    jobTitle?: true
    departmentName?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    firstName: string | null
    lastName: string | null
    jobTitle: string | null
    departmentName: string | null
    role: $Enums.UserRole
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    jobTitle?: boolean
    departmentName?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | User$profileArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    meetingsOwned?: boolean | User$meetingsOwnedArgs<ExtArgs>
    meetingAttendees?: boolean | User$meetingAttendeesArgs<ExtArgs>
    candidateRatings?: boolean | User$candidateRatingsArgs<ExtArgs>
    companiesOwned?: boolean | User$companiesOwnedArgs<ExtArgs>
    companyMemberships?: boolean | User$companyMembershipsArgs<ExtArgs>
    calendarIntegrations?: boolean | User$calendarIntegrationsArgs<ExtArgs>
    aiInteractionLogs?: boolean | User$aiInteractionLogsArgs<ExtArgs>
    jobHiringMembers?: boolean | User$jobHiringMembersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    jobTitle?: boolean
    departmentName?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    jobTitle?: boolean
    departmentName?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    jobTitle?: boolean
    departmentName?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "firstName" | "lastName" | "jobTitle" | "departmentName" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | User$profileArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    sentMessages?: boolean | User$sentMessagesArgs<ExtArgs>
    meetingsOwned?: boolean | User$meetingsOwnedArgs<ExtArgs>
    meetingAttendees?: boolean | User$meetingAttendeesArgs<ExtArgs>
    candidateRatings?: boolean | User$candidateRatingsArgs<ExtArgs>
    companiesOwned?: boolean | User$companiesOwnedArgs<ExtArgs>
    companyMemberships?: boolean | User$companyMembershipsArgs<ExtArgs>
    calendarIntegrations?: boolean | User$calendarIntegrationsArgs<ExtArgs>
    aiInteractionLogs?: boolean | User$aiInteractionLogsArgs<ExtArgs>
    jobHiringMembers?: boolean | User$jobHiringMembersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      profile: Prisma.$UserProfilePayload<ExtArgs> | null
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      sentMessages: Prisma.$MessagePayload<ExtArgs>[]
      meetingsOwned: Prisma.$MeetingPayload<ExtArgs>[]
      meetingAttendees: Prisma.$MeetingAttendeePayload<ExtArgs>[]
      candidateRatings: Prisma.$CandidateRatingPayload<ExtArgs>[]
      companiesOwned: Prisma.$CompanyPayload<ExtArgs>[]
      companyMemberships: Prisma.$CompanyMemberPayload<ExtArgs>[]
      calendarIntegrations: Prisma.$CalendarIntegrationPayload<ExtArgs>[]
      aiInteractionLogs: Prisma.$AIInteractionLogPayload<ExtArgs>[]
      jobHiringMembers: Prisma.$JobHiringMemberPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      firstName: string | null
      lastName: string | null
      jobTitle: string | null
      departmentName: string | null
      role: $Enums.UserRole
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sentMessages<T extends User$sentMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$sentMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    meetingsOwned<T extends User$meetingsOwnedArgs<ExtArgs> = {}>(args?: Subset<T, User$meetingsOwnedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    meetingAttendees<T extends User$meetingAttendeesArgs<ExtArgs> = {}>(args?: Subset<T, User$meetingAttendeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingAttendeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    candidateRatings<T extends User$candidateRatingsArgs<ExtArgs> = {}>(args?: Subset<T, User$candidateRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateRatingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    companiesOwned<T extends User$companiesOwnedArgs<ExtArgs> = {}>(args?: Subset<T, User$companiesOwnedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    companyMemberships<T extends User$companyMembershipsArgs<ExtArgs> = {}>(args?: Subset<T, User$companyMembershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    calendarIntegrations<T extends User$calendarIntegrationsArgs<ExtArgs> = {}>(args?: Subset<T, User$calendarIntegrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarIntegrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    aiInteractionLogs<T extends User$aiInteractionLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$aiInteractionLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIInteractionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jobHiringMembers<T extends User$jobHiringMembersArgs<ExtArgs> = {}>(args?: Subset<T, User$jobHiringMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobHiringMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly jobTitle: FieldRef<"User", 'String'>
    readonly departmentName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    where?: UserProfileWhereInput
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.sentMessages
   */
  export type User$sentMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.meetingsOwned
   */
  export type User$meetingsOwnedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meeting
     */
    omit?: MeetingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    where?: MeetingWhereInput
    orderBy?: MeetingOrderByWithRelationInput | MeetingOrderByWithRelationInput[]
    cursor?: MeetingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetingScalarFieldEnum | MeetingScalarFieldEnum[]
  }

  /**
   * User.meetingAttendees
   */
  export type User$meetingAttendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingAttendee
     */
    select?: MeetingAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingAttendee
     */
    omit?: MeetingAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingAttendeeInclude<ExtArgs> | null
    where?: MeetingAttendeeWhereInput
    orderBy?: MeetingAttendeeOrderByWithRelationInput | MeetingAttendeeOrderByWithRelationInput[]
    cursor?: MeetingAttendeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetingAttendeeScalarFieldEnum | MeetingAttendeeScalarFieldEnum[]
  }

  /**
   * User.candidateRatings
   */
  export type User$candidateRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateRating
     */
    select?: CandidateRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateRating
     */
    omit?: CandidateRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateRatingInclude<ExtArgs> | null
    where?: CandidateRatingWhereInput
    orderBy?: CandidateRatingOrderByWithRelationInput | CandidateRatingOrderByWithRelationInput[]
    cursor?: CandidateRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidateRatingScalarFieldEnum | CandidateRatingScalarFieldEnum[]
  }

  /**
   * User.companiesOwned
   */
  export type User$companiesOwnedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    cursor?: CompanyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * User.companyMemberships
   */
  export type User$companyMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    where?: CompanyMemberWhereInput
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    cursor?: CompanyMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyMemberScalarFieldEnum | CompanyMemberScalarFieldEnum[]
  }

  /**
   * User.calendarIntegrations
   */
  export type User$calendarIntegrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarIntegration
     */
    select?: CalendarIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarIntegration
     */
    omit?: CalendarIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarIntegrationInclude<ExtArgs> | null
    where?: CalendarIntegrationWhereInput
    orderBy?: CalendarIntegrationOrderByWithRelationInput | CalendarIntegrationOrderByWithRelationInput[]
    cursor?: CalendarIntegrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CalendarIntegrationScalarFieldEnum | CalendarIntegrationScalarFieldEnum[]
  }

  /**
   * User.aiInteractionLogs
   */
  export type User$aiInteractionLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteractionLog
     */
    select?: AIInteractionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIInteractionLog
     */
    omit?: AIInteractionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIInteractionLogInclude<ExtArgs> | null
    where?: AIInteractionLogWhereInput
    orderBy?: AIInteractionLogOrderByWithRelationInput | AIInteractionLogOrderByWithRelationInput[]
    cursor?: AIInteractionLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AIInteractionLogScalarFieldEnum | AIInteractionLogScalarFieldEnum[]
  }

  /**
   * User.jobHiringMembers
   */
  export type User$jobHiringMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHiringMember
     */
    select?: JobHiringMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHiringMember
     */
    omit?: JobHiringMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHiringMemberInclude<ExtArgs> | null
    where?: JobHiringMemberWhereInput
    orderBy?: JobHiringMemberOrderByWithRelationInput | JobHiringMemberOrderByWithRelationInput[]
    cursor?: JobHiringMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobHiringMemberScalarFieldEnum | JobHiringMemberScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserProfile
   */

  export type AggregateUserProfile = {
    _count: UserProfileCountAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  export type UserProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileCountAggregateOutputType = {
    id: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserProfileMinAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileCountAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfile to aggregate.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProfiles
    **/
    _count?: true | UserProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProfileMaxAggregateInputType
  }

  export type GetUserProfileAggregateType<T extends UserProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfile[P]>
      : GetScalarType<T[P], AggregateUserProfile[P]>
  }




  export type UserProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProfileWhereInput
    orderBy?: UserProfileOrderByWithAggregationInput | UserProfileOrderByWithAggregationInput[]
    by: UserProfileScalarFieldEnum[] | UserProfileScalarFieldEnum
    having?: UserProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProfileCountAggregateInputType | true
    _min?: UserProfileMinAggregateInputType
    _max?: UserProfileMaxAggregateInputType
  }

  export type UserProfileGroupByOutputType = {
    id: string
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: UserProfileCountAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  type GetUserProfileGroupByPayload<T extends UserProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["userProfile"]>
  export type UserProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userProfile"]>
    composites: {}
  }

  type UserProfileGetPayload<S extends boolean | null | undefined | UserProfileDefaultArgs> = $Result.GetResult<Prisma.$UserProfilePayload, S>

  type UserProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserProfileCountAggregateInputType | true
    }

  export interface UserProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProfile'], meta: { name: 'UserProfile' } }
    /**
     * Find zero or one UserProfile that matches the filter.
     * @param {UserProfileFindUniqueArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProfileFindUniqueArgs>(args: SelectSubset<T, UserProfileFindUniqueArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserProfile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserProfileFindUniqueOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProfileFindFirstArgs>(args?: SelectSubset<T, UserProfileFindFirstArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfiles
     * const userProfiles = await prisma.userProfile.findMany()
     * 
     * // Get first 10 UserProfiles
     * const userProfiles = await prisma.userProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserProfileFindManyArgs>(args?: SelectSubset<T, UserProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserProfile.
     * @param {UserProfileCreateArgs} args - Arguments to create a UserProfile.
     * @example
     * // Create one UserProfile
     * const UserProfile = await prisma.userProfile.create({
     *   data: {
     *     // ... data to create a UserProfile
     *   }
     * })
     * 
     */
    create<T extends UserProfileCreateArgs>(args: SelectSubset<T, UserProfileCreateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserProfiles.
     * @param {UserProfileCreateManyArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProfileCreateManyArgs>(args?: SelectSubset<T, UserProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProfiles and returns the data saved in the database.
     * @param {UserProfileCreateManyAndReturnArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProfiles and only return the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserProfile.
     * @param {UserProfileDeleteArgs} args - Arguments to delete one UserProfile.
     * @example
     * // Delete one UserProfile
     * const UserProfile = await prisma.userProfile.delete({
     *   where: {
     *     // ... filter to delete one UserProfile
     *   }
     * })
     * 
     */
    delete<T extends UserProfileDeleteArgs>(args: SelectSubset<T, UserProfileDeleteArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserProfile.
     * @param {UserProfileUpdateArgs} args - Arguments to update one UserProfile.
     * @example
     * // Update one UserProfile
     * const userProfile = await prisma.userProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProfileUpdateArgs>(args: SelectSubset<T, UserProfileUpdateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserProfiles.
     * @param {UserProfileDeleteManyArgs} args - Arguments to filter UserProfiles to delete.
     * @example
     * // Delete a few UserProfiles
     * const { count } = await prisma.userProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProfileDeleteManyArgs>(args?: SelectSubset<T, UserProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProfileUpdateManyArgs>(args: SelectSubset<T, UserProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles and returns the data updated in the database.
     * @param {UserProfileUpdateManyAndReturnArgs} args - Arguments to update many UserProfiles.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserProfiles and only return the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, UserProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserProfile.
     * @param {UserProfileUpsertArgs} args - Arguments to update or create a UserProfile.
     * @example
     * // Update or create a UserProfile
     * const userProfile = await prisma.userProfile.upsert({
     *   create: {
     *     // ... data to create a UserProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfile we want to update
     *   }
     * })
     */
    upsert<T extends UserProfileUpsertArgs>(args: SelectSubset<T, UserProfileUpsertArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileCountArgs} args - Arguments to filter UserProfiles to count.
     * @example
     * // Count the number of UserProfiles
     * const count = await prisma.userProfile.count({
     *   where: {
     *     // ... the filter for the UserProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserProfileCountArgs>(
      args?: Subset<T, UserProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProfileAggregateArgs>(args: Subset<T, UserProfileAggregateArgs>): Prisma.PrismaPromise<GetUserProfileAggregateType<T>>

    /**
     * Group by UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProfile model
   */
  readonly fields: UserProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProfile model
   */
  interface UserProfileFieldRefs {
    readonly id: FieldRef<"UserProfile", 'String'>
    readonly userId: FieldRef<"UserProfile", 'String'>
    readonly createdAt: FieldRef<"UserProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"UserProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserProfile findUnique
   */
  export type UserProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findUniqueOrThrow
   */
  export type UserProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findFirst
   */
  export type UserProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findFirstOrThrow
   */
  export type UserProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findMany
   */
  export type UserProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfiles to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile create
   */
  export type UserProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a UserProfile.
     */
    data: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
  }

  /**
   * UserProfile createMany
   */
  export type UserProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProfile createManyAndReturn
   */
  export type UserProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProfile update
   */
  export type UserProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a UserProfile.
     */
    data: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
    /**
     * Choose, which UserProfile to update.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile updateMany
   */
  export type UserProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProfiles.
     */
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     */
    where?: UserProfileWhereInput
    /**
     * Limit how many UserProfiles to update.
     */
    limit?: number
  }

  /**
   * UserProfile updateManyAndReturn
   */
  export type UserProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * The data used to update UserProfiles.
     */
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     */
    where?: UserProfileWhereInput
    /**
     * Limit how many UserProfiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProfile upsert
   */
  export type UserProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the UserProfile to update in case it exists.
     */
    where: UserProfileWhereUniqueInput
    /**
     * In case the UserProfile found by the `where` argument doesn't exist, create a new UserProfile with this data.
     */
    create: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
    /**
     * In case the UserProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
  }

  /**
   * UserProfile delete
   */
  export type UserProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter which UserProfile to delete.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile deleteMany
   */
  export type UserProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfiles to delete
     */
    where?: UserProfileWhereInput
    /**
     * Limit how many UserProfiles to delete.
     */
    limit?: number
  }

  /**
   * UserProfile without action
   */
  export type UserProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserProfile
     */
    omit?: UserProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyMinAggregateOutputType = {
    id: string | null
    name: string | null
    website: string | null
    phoneNumber: string | null
    description: string | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    website: string | null
    phoneNumber: string | null
    description: string | null
    ownerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    name: number
    website: number
    phoneNumber: number
    description: number
    ownerId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyMinAggregateInputType = {
    id?: true
    name?: true
    website?: true
    phoneNumber?: true
    description?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    name?: true
    website?: true
    phoneNumber?: true
    description?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    name?: true
    website?: true
    phoneNumber?: true
    description?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: string
    name: string
    website: string | null
    phoneNumber: string | null
    description: string | null
    ownerId: string
    createdAt: Date
    updatedAt: Date
    _count: CompanyCountAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    website?: boolean
    phoneNumber?: boolean
    description?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    members?: boolean | Company$membersArgs<ExtArgs>
    jobs?: boolean | Company$jobsArgs<ExtArgs>
    departments?: boolean | Company$departmentsArgs<ExtArgs>
    locations?: boolean | Company$locationsArgs<ExtArgs>
    workflowTemplates?: boolean | Company$workflowTemplatesArgs<ExtArgs>
    ratingCardTemplates?: boolean | Company$ratingCardTemplatesArgs<ExtArgs>
    careersPageSettings?: boolean | Company$careersPageSettingsArgs<ExtArgs>
    jobBoardIntegrations?: boolean | Company$jobBoardIntegrationsArgs<ExtArgs>
    messageTemplates?: boolean | Company$messageTemplatesArgs<ExtArgs>
    questions?: boolean | Company$questionsArgs<ExtArgs>
    questionSets?: boolean | Company$questionSetsArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    website?: boolean
    phoneNumber?: boolean
    description?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    website?: boolean
    phoneNumber?: boolean
    description?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    name?: boolean
    website?: boolean
    phoneNumber?: boolean
    description?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "website" | "phoneNumber" | "description" | "ownerId" | "createdAt" | "updatedAt", ExtArgs["result"]["company"]>
  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    members?: boolean | Company$membersArgs<ExtArgs>
    jobs?: boolean | Company$jobsArgs<ExtArgs>
    departments?: boolean | Company$departmentsArgs<ExtArgs>
    locations?: boolean | Company$locationsArgs<ExtArgs>
    workflowTemplates?: boolean | Company$workflowTemplatesArgs<ExtArgs>
    ratingCardTemplates?: boolean | Company$ratingCardTemplatesArgs<ExtArgs>
    careersPageSettings?: boolean | Company$careersPageSettingsArgs<ExtArgs>
    jobBoardIntegrations?: boolean | Company$jobBoardIntegrationsArgs<ExtArgs>
    messageTemplates?: boolean | Company$messageTemplatesArgs<ExtArgs>
    questions?: boolean | Company$questionsArgs<ExtArgs>
    questionSets?: boolean | Company$questionSetsArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      members: Prisma.$CompanyMemberPayload<ExtArgs>[]
      jobs: Prisma.$JobPayload<ExtArgs>[]
      departments: Prisma.$DepartmentPayload<ExtArgs>[]
      locations: Prisma.$JobLocationPayload<ExtArgs>[]
      workflowTemplates: Prisma.$WorkflowTemplatePayload<ExtArgs>[]
      ratingCardTemplates: Prisma.$RatingCardTemplatePayload<ExtArgs>[]
      careersPageSettings: Prisma.$CareersPageSettingPayload<ExtArgs> | null
      jobBoardIntegrations: Prisma.$JobBoardIntegrationPayload<ExtArgs>[]
      messageTemplates: Prisma.$MessageTemplatePayload<ExtArgs>[]
      questions: Prisma.$QuestionPayload<ExtArgs>[]
      questionSets: Prisma.$QuestionSetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      website: string | null
      phoneNumber: string | null
      description: string | null
      ownerId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies and returns the data updated in the database.
     * @param {CompanyUpdateManyAndReturnArgs} args - Arguments to update many Companies.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    members<T extends Company$membersArgs<ExtArgs> = {}>(args?: Subset<T, Company$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jobs<T extends Company$jobsArgs<ExtArgs> = {}>(args?: Subset<T, Company$jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    departments<T extends Company$departmentsArgs<ExtArgs> = {}>(args?: Subset<T, Company$departmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    locations<T extends Company$locationsArgs<ExtArgs> = {}>(args?: Subset<T, Company$locationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    workflowTemplates<T extends Company$workflowTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Company$workflowTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    ratingCardTemplates<T extends Company$ratingCardTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Company$ratingCardTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingCardTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    careersPageSettings<T extends Company$careersPageSettingsArgs<ExtArgs> = {}>(args?: Subset<T, Company$careersPageSettingsArgs<ExtArgs>>): Prisma__CareersPageSettingClient<$Result.GetResult<Prisma.$CareersPageSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    jobBoardIntegrations<T extends Company$jobBoardIntegrationsArgs<ExtArgs> = {}>(args?: Subset<T, Company$jobBoardIntegrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobBoardIntegrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messageTemplates<T extends Company$messageTemplatesArgs<ExtArgs> = {}>(args?: Subset<T, Company$messageTemplatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questions<T extends Company$questionsArgs<ExtArgs> = {}>(args?: Subset<T, Company$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionSets<T extends Company$questionSetsArgs<ExtArgs> = {}>(args?: Subset<T, Company$questionSetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'String'>
    readonly name: FieldRef<"Company", 'String'>
    readonly website: FieldRef<"Company", 'String'>
    readonly phoneNumber: FieldRef<"Company", 'String'>
    readonly description: FieldRef<"Company", 'String'>
    readonly ownerId: FieldRef<"Company", 'String'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
  }

  /**
   * Company updateManyAndReturn
   */
  export type CompanyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
    /**
     * Limit how many Companies to delete.
     */
    limit?: number
  }

  /**
   * Company.members
   */
  export type Company$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    where?: CompanyMemberWhereInput
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    cursor?: CompanyMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyMemberScalarFieldEnum | CompanyMemberScalarFieldEnum[]
  }

  /**
   * Company.jobs
   */
  export type Company$jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    cursor?: JobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Company.departments
   */
  export type Company$departmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Company.locations
   */
  export type Company$locationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLocation
     */
    select?: JobLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobLocation
     */
    omit?: JobLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobLocationInclude<ExtArgs> | null
    where?: JobLocationWhereInput
    orderBy?: JobLocationOrderByWithRelationInput | JobLocationOrderByWithRelationInput[]
    cursor?: JobLocationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobLocationScalarFieldEnum | JobLocationScalarFieldEnum[]
  }

  /**
   * Company.workflowTemplates
   */
  export type Company$workflowTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    where?: WorkflowTemplateWhereInput
    orderBy?: WorkflowTemplateOrderByWithRelationInput | WorkflowTemplateOrderByWithRelationInput[]
    cursor?: WorkflowTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowTemplateScalarFieldEnum | WorkflowTemplateScalarFieldEnum[]
  }

  /**
   * Company.ratingCardTemplates
   */
  export type Company$ratingCardTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCardTemplate
     */
    select?: RatingCardTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCardTemplate
     */
    omit?: RatingCardTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCardTemplateInclude<ExtArgs> | null
    where?: RatingCardTemplateWhereInput
    orderBy?: RatingCardTemplateOrderByWithRelationInput | RatingCardTemplateOrderByWithRelationInput[]
    cursor?: RatingCardTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingCardTemplateScalarFieldEnum | RatingCardTemplateScalarFieldEnum[]
  }

  /**
   * Company.careersPageSettings
   */
  export type Company$careersPageSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareersPageSetting
     */
    select?: CareersPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareersPageSetting
     */
    omit?: CareersPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareersPageSettingInclude<ExtArgs> | null
    where?: CareersPageSettingWhereInput
  }

  /**
   * Company.jobBoardIntegrations
   */
  export type Company$jobBoardIntegrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobBoardIntegration
     */
    select?: JobBoardIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobBoardIntegration
     */
    omit?: JobBoardIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobBoardIntegrationInclude<ExtArgs> | null
    where?: JobBoardIntegrationWhereInput
    orderBy?: JobBoardIntegrationOrderByWithRelationInput | JobBoardIntegrationOrderByWithRelationInput[]
    cursor?: JobBoardIntegrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobBoardIntegrationScalarFieldEnum | JobBoardIntegrationScalarFieldEnum[]
  }

  /**
   * Company.messageTemplates
   */
  export type Company$messageTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTemplate
     */
    select?: MessageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageTemplate
     */
    omit?: MessageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTemplateInclude<ExtArgs> | null
    where?: MessageTemplateWhereInput
    orderBy?: MessageTemplateOrderByWithRelationInput | MessageTemplateOrderByWithRelationInput[]
    cursor?: MessageTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageTemplateScalarFieldEnum | MessageTemplateScalarFieldEnum[]
  }

  /**
   * Company.questions
   */
  export type Company$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Company.questionSets
   */
  export type Company$questionSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    where?: QuestionSetWhereInput
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    cursor?: QuestionSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Company
     */
    omit?: CompanyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model CompanyMember
   */

  export type AggregateCompanyMember = {
    _count: CompanyMemberCountAggregateOutputType | null
    _min: CompanyMemberMinAggregateOutputType | null
    _max: CompanyMemberMaxAggregateOutputType | null
  }

  export type CompanyMemberMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    userId: string | null
    role: $Enums.CompanyMemberRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyMemberMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    userId: string | null
    role: $Enums.CompanyMemberRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyMemberCountAggregateOutputType = {
    id: number
    companyId: number
    userId: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyMemberMinAggregateInputType = {
    id?: true
    companyId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyMemberMaxAggregateInputType = {
    id?: true
    companyId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyMemberCountAggregateInputType = {
    id?: true
    companyId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyMember to aggregate.
     */
    where?: CompanyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyMembers to fetch.
     */
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompanyMembers
    **/
    _count?: true | CompanyMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMemberMaxAggregateInputType
  }

  export type GetCompanyMemberAggregateType<T extends CompanyMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanyMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanyMember[P]>
      : GetScalarType<T[P], AggregateCompanyMember[P]>
  }




  export type CompanyMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyMemberWhereInput
    orderBy?: CompanyMemberOrderByWithAggregationInput | CompanyMemberOrderByWithAggregationInput[]
    by: CompanyMemberScalarFieldEnum[] | CompanyMemberScalarFieldEnum
    having?: CompanyMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyMemberCountAggregateInputType | true
    _min?: CompanyMemberMinAggregateInputType
    _max?: CompanyMemberMaxAggregateInputType
  }

  export type CompanyMemberGroupByOutputType = {
    id: string
    companyId: string
    userId: string
    role: $Enums.CompanyMemberRole
    createdAt: Date
    updatedAt: Date
    _count: CompanyMemberCountAggregateOutputType | null
    _min: CompanyMemberMinAggregateOutputType | null
    _max: CompanyMemberMaxAggregateOutputType | null
  }

  type GetCompanyMemberGroupByPayload<T extends CompanyMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyMemberGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyMemberGroupByOutputType[P]>
        }
      >
    >


  export type CompanyMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyMember"]>

  export type CompanyMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyMember"]>

  export type CompanyMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyMember"]>

  export type CompanyMemberSelectScalar = {
    id?: boolean
    companyId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "userId" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["companyMember"]>
  export type CompanyMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CompanyMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CompanyMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CompanyMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompanyMember"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      userId: string
      role: $Enums.CompanyMemberRole
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["companyMember"]>
    composites: {}
  }

  type CompanyMemberGetPayload<S extends boolean | null | undefined | CompanyMemberDefaultArgs> = $Result.GetResult<Prisma.$CompanyMemberPayload, S>

  type CompanyMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CompanyMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompanyMemberCountAggregateInputType | true
    }

  export interface CompanyMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompanyMember'], meta: { name: 'CompanyMember' } }
    /**
     * Find zero or one CompanyMember that matches the filter.
     * @param {CompanyMemberFindUniqueArgs} args - Arguments to find a CompanyMember
     * @example
     * // Get one CompanyMember
     * const companyMember = await prisma.companyMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyMemberFindUniqueArgs>(args: SelectSubset<T, CompanyMemberFindUniqueArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CompanyMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CompanyMemberFindUniqueOrThrowArgs} args - Arguments to find a CompanyMember
     * @example
     * // Get one CompanyMember
     * const companyMember = await prisma.companyMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanyMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberFindFirstArgs} args - Arguments to find a CompanyMember
     * @example
     * // Get one CompanyMember
     * const companyMember = await prisma.companyMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyMemberFindFirstArgs>(args?: SelectSubset<T, CompanyMemberFindFirstArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CompanyMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberFindFirstOrThrowArgs} args - Arguments to find a CompanyMember
     * @example
     * // Get one CompanyMember
     * const companyMember = await prisma.companyMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CompanyMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompanyMembers
     * const companyMembers = await prisma.companyMember.findMany()
     * 
     * // Get first 10 CompanyMembers
     * const companyMembers = await prisma.companyMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyMemberWithIdOnly = await prisma.companyMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyMemberFindManyArgs>(args?: SelectSubset<T, CompanyMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CompanyMember.
     * @param {CompanyMemberCreateArgs} args - Arguments to create a CompanyMember.
     * @example
     * // Create one CompanyMember
     * const CompanyMember = await prisma.companyMember.create({
     *   data: {
     *     // ... data to create a CompanyMember
     *   }
     * })
     * 
     */
    create<T extends CompanyMemberCreateArgs>(args: SelectSubset<T, CompanyMemberCreateArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CompanyMembers.
     * @param {CompanyMemberCreateManyArgs} args - Arguments to create many CompanyMembers.
     * @example
     * // Create many CompanyMembers
     * const companyMember = await prisma.companyMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyMemberCreateManyArgs>(args?: SelectSubset<T, CompanyMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompanyMembers and returns the data saved in the database.
     * @param {CompanyMemberCreateManyAndReturnArgs} args - Arguments to create many CompanyMembers.
     * @example
     * // Create many CompanyMembers
     * const companyMember = await prisma.companyMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompanyMembers and only return the `id`
     * const companyMemberWithIdOnly = await prisma.companyMember.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CompanyMember.
     * @param {CompanyMemberDeleteArgs} args - Arguments to delete one CompanyMember.
     * @example
     * // Delete one CompanyMember
     * const CompanyMember = await prisma.companyMember.delete({
     *   where: {
     *     // ... filter to delete one CompanyMember
     *   }
     * })
     * 
     */
    delete<T extends CompanyMemberDeleteArgs>(args: SelectSubset<T, CompanyMemberDeleteArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CompanyMember.
     * @param {CompanyMemberUpdateArgs} args - Arguments to update one CompanyMember.
     * @example
     * // Update one CompanyMember
     * const companyMember = await prisma.companyMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyMemberUpdateArgs>(args: SelectSubset<T, CompanyMemberUpdateArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CompanyMembers.
     * @param {CompanyMemberDeleteManyArgs} args - Arguments to filter CompanyMembers to delete.
     * @example
     * // Delete a few CompanyMembers
     * const { count } = await prisma.companyMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyMemberDeleteManyArgs>(args?: SelectSubset<T, CompanyMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompanyMembers
     * const companyMember = await prisma.companyMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyMemberUpdateManyArgs>(args: SelectSubset<T, CompanyMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyMembers and returns the data updated in the database.
     * @param {CompanyMemberUpdateManyAndReturnArgs} args - Arguments to update many CompanyMembers.
     * @example
     * // Update many CompanyMembers
     * const companyMember = await prisma.companyMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CompanyMembers and only return the `id`
     * const companyMemberWithIdOnly = await prisma.companyMember.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CompanyMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, CompanyMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CompanyMember.
     * @param {CompanyMemberUpsertArgs} args - Arguments to update or create a CompanyMember.
     * @example
     * // Update or create a CompanyMember
     * const companyMember = await prisma.companyMember.upsert({
     *   create: {
     *     // ... data to create a CompanyMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompanyMember we want to update
     *   }
     * })
     */
    upsert<T extends CompanyMemberUpsertArgs>(args: SelectSubset<T, CompanyMemberUpsertArgs<ExtArgs>>): Prisma__CompanyMemberClient<$Result.GetResult<Prisma.$CompanyMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CompanyMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberCountArgs} args - Arguments to filter CompanyMembers to count.
     * @example
     * // Count the number of CompanyMembers
     * const count = await prisma.companyMember.count({
     *   where: {
     *     // ... the filter for the CompanyMembers we want to count
     *   }
     * })
    **/
    count<T extends CompanyMemberCountArgs>(
      args?: Subset<T, CompanyMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompanyMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyMemberAggregateArgs>(args: Subset<T, CompanyMemberAggregateArgs>): Prisma.PrismaPromise<GetCompanyMemberAggregateType<T>>

    /**
     * Group by CompanyMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyMemberGroupByArgs['orderBy'] }
        : { orderBy?: CompanyMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompanyMember model
   */
  readonly fields: CompanyMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompanyMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompanyMember model
   */
  interface CompanyMemberFieldRefs {
    readonly id: FieldRef<"CompanyMember", 'String'>
    readonly companyId: FieldRef<"CompanyMember", 'String'>
    readonly userId: FieldRef<"CompanyMember", 'String'>
    readonly role: FieldRef<"CompanyMember", 'CompanyMemberRole'>
    readonly createdAt: FieldRef<"CompanyMember", 'DateTime'>
    readonly updatedAt: FieldRef<"CompanyMember", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CompanyMember findUnique
   */
  export type CompanyMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMember to fetch.
     */
    where: CompanyMemberWhereUniqueInput
  }

  /**
   * CompanyMember findUniqueOrThrow
   */
  export type CompanyMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMember to fetch.
     */
    where: CompanyMemberWhereUniqueInput
  }

  /**
   * CompanyMember findFirst
   */
  export type CompanyMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMember to fetch.
     */
    where?: CompanyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyMembers to fetch.
     */
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyMembers.
     */
    cursor?: CompanyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyMembers.
     */
    distinct?: CompanyMemberScalarFieldEnum | CompanyMemberScalarFieldEnum[]
  }

  /**
   * CompanyMember findFirstOrThrow
   */
  export type CompanyMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMember to fetch.
     */
    where?: CompanyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyMembers to fetch.
     */
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyMembers.
     */
    cursor?: CompanyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyMembers.
     */
    distinct?: CompanyMemberScalarFieldEnum | CompanyMemberScalarFieldEnum[]
  }

  /**
   * CompanyMember findMany
   */
  export type CompanyMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter, which CompanyMembers to fetch.
     */
    where?: CompanyMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyMembers to fetch.
     */
    orderBy?: CompanyMemberOrderByWithRelationInput | CompanyMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompanyMembers.
     */
    cursor?: CompanyMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyMembers.
     */
    skip?: number
    distinct?: CompanyMemberScalarFieldEnum | CompanyMemberScalarFieldEnum[]
  }

  /**
   * CompanyMember create
   */
  export type CompanyMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a CompanyMember.
     */
    data: XOR<CompanyMemberCreateInput, CompanyMemberUncheckedCreateInput>
  }

  /**
   * CompanyMember createMany
   */
  export type CompanyMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompanyMembers.
     */
    data: CompanyMemberCreateManyInput | CompanyMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompanyMember createManyAndReturn
   */
  export type CompanyMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * The data used to create many CompanyMembers.
     */
    data: CompanyMemberCreateManyInput | CompanyMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyMember update
   */
  export type CompanyMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a CompanyMember.
     */
    data: XOR<CompanyMemberUpdateInput, CompanyMemberUncheckedUpdateInput>
    /**
     * Choose, which CompanyMember to update.
     */
    where: CompanyMemberWhereUniqueInput
  }

  /**
   * CompanyMember updateMany
   */
  export type CompanyMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompanyMembers.
     */
    data: XOR<CompanyMemberUpdateManyMutationInput, CompanyMemberUncheckedUpdateManyInput>
    /**
     * Filter which CompanyMembers to update
     */
    where?: CompanyMemberWhereInput
    /**
     * Limit how many CompanyMembers to update.
     */
    limit?: number
  }

  /**
   * CompanyMember updateManyAndReturn
   */
  export type CompanyMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * The data used to update CompanyMembers.
     */
    data: XOR<CompanyMemberUpdateManyMutationInput, CompanyMemberUncheckedUpdateManyInput>
    /**
     * Filter which CompanyMembers to update
     */
    where?: CompanyMemberWhereInput
    /**
     * Limit how many CompanyMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyMember upsert
   */
  export type CompanyMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the CompanyMember to update in case it exists.
     */
    where: CompanyMemberWhereUniqueInput
    /**
     * In case the CompanyMember found by the `where` argument doesn't exist, create a new CompanyMember with this data.
     */
    create: XOR<CompanyMemberCreateInput, CompanyMemberUncheckedCreateInput>
    /**
     * In case the CompanyMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyMemberUpdateInput, CompanyMemberUncheckedUpdateInput>
  }

  /**
   * CompanyMember delete
   */
  export type CompanyMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
    /**
     * Filter which CompanyMember to delete.
     */
    where: CompanyMemberWhereUniqueInput
  }

  /**
   * CompanyMember deleteMany
   */
  export type CompanyMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyMembers to delete
     */
    where?: CompanyMemberWhereInput
    /**
     * Limit how many CompanyMembers to delete.
     */
    limit?: number
  }

  /**
   * CompanyMember without action
   */
  export type CompanyMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyMember
     */
    select?: CompanyMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CompanyMember
     */
    omit?: CompanyMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyMemberInclude<ExtArgs> | null
  }


  /**
   * Model Job
   */

  export type AggregateJob = {
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  export type JobAvgAggregateOutputType = {
    salaryMin: number | null
    salaryMax: number | null
    minYearsExperience: number | null
  }

  export type JobSumAggregateOutputType = {
    salaryMin: number | null
    salaryMax: number | null
    minYearsExperience: number | null
  }

  export type JobMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    employmentType: $Enums.EmploymentType | null
    workType: $Enums.WorkType | null
    salaryMin: number | null
    salaryMax: number | null
    currency: string | null
    payPeriod: string | null
    displaySalary: boolean | null
    status: $Enums.JobStatus | null
    jobCode: string | null
    companyId: string | null
    departmentId: string | null
    locationId: string | null
    minYearsExperience: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    employmentType: $Enums.EmploymentType | null
    workType: $Enums.WorkType | null
    salaryMin: number | null
    salaryMax: number | null
    currency: string | null
    payPeriod: string | null
    displaySalary: boolean | null
    status: $Enums.JobStatus | null
    jobCode: string | null
    companyId: string | null
    departmentId: string | null
    locationId: string | null
    minYearsExperience: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobCountAggregateOutputType = {
    id: number
    title: number
    description: number
    employmentType: number
    workType: number
    salaryMin: number
    salaryMax: number
    currency: number
    payPeriod: number
    displaySalary: number
    status: number
    jobCode: number
    companyId: number
    departmentId: number
    locationId: number
    minYearsExperience: number
    skills: number
    jobBoards: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobAvgAggregateInputType = {
    salaryMin?: true
    salaryMax?: true
    minYearsExperience?: true
  }

  export type JobSumAggregateInputType = {
    salaryMin?: true
    salaryMax?: true
    minYearsExperience?: true
  }

  export type JobMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    employmentType?: true
    workType?: true
    salaryMin?: true
    salaryMax?: true
    currency?: true
    payPeriod?: true
    displaySalary?: true
    status?: true
    jobCode?: true
    companyId?: true
    departmentId?: true
    locationId?: true
    minYearsExperience?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    employmentType?: true
    workType?: true
    salaryMin?: true
    salaryMax?: true
    currency?: true
    payPeriod?: true
    displaySalary?: true
    status?: true
    jobCode?: true
    companyId?: true
    departmentId?: true
    locationId?: true
    minYearsExperience?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    employmentType?: true
    workType?: true
    salaryMin?: true
    salaryMax?: true
    currency?: true
    payPeriod?: true
    displaySalary?: true
    status?: true
    jobCode?: true
    companyId?: true
    departmentId?: true
    locationId?: true
    minYearsExperience?: true
    skills?: true
    jobBoards?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Job to aggregate.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobs
    **/
    _count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
        [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }




  export type JobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
    orderBy?: JobOrderByWithAggregationInput | JobOrderByWithAggregationInput[]
    by: JobScalarFieldEnum[] | JobScalarFieldEnum
    having?: JobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCountAggregateInputType | true
    _avg?: JobAvgAggregateInputType
    _sum?: JobSumAggregateInputType
    _min?: JobMinAggregateInputType
    _max?: JobMaxAggregateInputType
  }

  export type JobGroupByOutputType = {
    id: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin: number | null
    salaryMax: number | null
    currency: string | null
    payPeriod: string | null
    displaySalary: boolean
    status: $Enums.JobStatus
    jobCode: string | null
    companyId: string
    departmentId: string | null
    locationId: string | null
    minYearsExperience: number | null
    skills: JsonValue | null
    jobBoards: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  type GetJobGroupByPayload<T extends JobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobGroupByOutputType[P]>
            : GetScalarType<T[P], JobGroupByOutputType[P]>
        }
      >
    >


  export type JobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    employmentType?: boolean
    workType?: boolean
    salaryMin?: boolean
    salaryMax?: boolean
    currency?: boolean
    payPeriod?: boolean
    displaySalary?: boolean
    status?: boolean
    jobCode?: boolean
    companyId?: boolean
    departmentId?: boolean
    locationId?: boolean
    minYearsExperience?: boolean
    skills?: boolean
    jobBoards?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    department?: boolean | Job$departmentArgs<ExtArgs>
    location?: boolean | Job$locationArgs<ExtArgs>
    applicationForm?: boolean | Job$applicationFormArgs<ExtArgs>
    hiringTeam?: boolean | Job$hiringTeamArgs<ExtArgs>
    jobWorkflow?: boolean | Job$jobWorkflowArgs<ExtArgs>
    applications?: boolean | Job$applicationsArgs<ExtArgs>
    aiScreeningConfig?: boolean | Job$aiScreeningConfigArgs<ExtArgs>
    aiSchedulingConfig?: boolean | Job$aiSchedulingConfigArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    employmentType?: boolean
    workType?: boolean
    salaryMin?: boolean
    salaryMax?: boolean
    currency?: boolean
    payPeriod?: boolean
    displaySalary?: boolean
    status?: boolean
    jobCode?: boolean
    companyId?: boolean
    departmentId?: boolean
    locationId?: boolean
    minYearsExperience?: boolean
    skills?: boolean
    jobBoards?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    department?: boolean | Job$departmentArgs<ExtArgs>
    location?: boolean | Job$locationArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    employmentType?: boolean
    workType?: boolean
    salaryMin?: boolean
    salaryMax?: boolean
    currency?: boolean
    payPeriod?: boolean
    displaySalary?: boolean
    status?: boolean
    jobCode?: boolean
    companyId?: boolean
    departmentId?: boolean
    locationId?: boolean
    minYearsExperience?: boolean
    skills?: boolean
    jobBoards?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    department?: boolean | Job$departmentArgs<ExtArgs>
    location?: boolean | Job$locationArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    employmentType?: boolean
    workType?: boolean
    salaryMin?: boolean
    salaryMax?: boolean
    currency?: boolean
    payPeriod?: boolean
    displaySalary?: boolean
    status?: boolean
    jobCode?: boolean
    companyId?: boolean
    departmentId?: boolean
    locationId?: boolean
    minYearsExperience?: boolean
    skills?: boolean
    jobBoards?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "employmentType" | "workType" | "salaryMin" | "salaryMax" | "currency" | "payPeriod" | "displaySalary" | "status" | "jobCode" | "companyId" | "departmentId" | "locationId" | "minYearsExperience" | "skills" | "jobBoards" | "createdAt" | "updatedAt", ExtArgs["result"]["job"]>
  export type JobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    department?: boolean | Job$departmentArgs<ExtArgs>
    location?: boolean | Job$locationArgs<ExtArgs>
    applicationForm?: boolean | Job$applicationFormArgs<ExtArgs>
    hiringTeam?: boolean | Job$hiringTeamArgs<ExtArgs>
    jobWorkflow?: boolean | Job$jobWorkflowArgs<ExtArgs>
    applications?: boolean | Job$applicationsArgs<ExtArgs>
    aiScreeningConfig?: boolean | Job$aiScreeningConfigArgs<ExtArgs>
    aiSchedulingConfig?: boolean | Job$aiSchedulingConfigArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    department?: boolean | Job$departmentArgs<ExtArgs>
    location?: boolean | Job$locationArgs<ExtArgs>
  }
  export type JobIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    department?: boolean | Job$departmentArgs<ExtArgs>
    location?: boolean | Job$locationArgs<ExtArgs>
  }

  export type $JobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Job"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      location: Prisma.$JobLocationPayload<ExtArgs> | null
      applicationForm: Prisma.$ApplicationFormFieldPayload<ExtArgs>[]
      hiringTeam: Prisma.$JobHiringMemberPayload<ExtArgs>[]
      jobWorkflow: Prisma.$JobWorkflowPayload<ExtArgs> | null
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
      aiScreeningConfig: Prisma.$AIScreeningConfigPayload<ExtArgs> | null
      aiSchedulingConfig: Prisma.$AISchedulingConfigPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      employmentType: $Enums.EmploymentType
      workType: $Enums.WorkType
      salaryMin: number | null
      salaryMax: number | null
      currency: string | null
      payPeriod: string | null
      displaySalary: boolean
      status: $Enums.JobStatus
      jobCode: string | null
      companyId: string
      departmentId: string | null
      locationId: string | null
      minYearsExperience: number | null
      skills: Prisma.JsonValue | null
      jobBoards: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["job"]>
    composites: {}
  }

  type JobGetPayload<S extends boolean | null | undefined | JobDefaultArgs> = $Result.GetResult<Prisma.$JobPayload, S>

  type JobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobCountAggregateInputType | true
    }

  export interface JobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Job'], meta: { name: 'Job' } }
    /**
     * Find zero or one Job that matches the filter.
     * @param {JobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobFindUniqueArgs>(args: SelectSubset<T, JobFindUniqueArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Job that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobFindUniqueOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobFindUniqueOrThrowArgs>(args: SelectSubset<T, JobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobFindFirstArgs>(args?: SelectSubset<T, JobFindFirstArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Job that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobFindFirstOrThrowArgs>(args?: SelectSubset<T, JobFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobFindManyArgs>(args?: SelectSubset<T, JobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Job.
     * @param {JobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
     */
    create<T extends JobCreateArgs>(args: SelectSubset<T, JobCreateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Jobs.
     * @param {JobCreateManyArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobCreateManyArgs>(args?: SelectSubset<T, JobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jobs and returns the data saved in the database.
     * @param {JobCreateManyAndReturnArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobCreateManyAndReturnArgs>(args?: SelectSubset<T, JobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Job.
     * @param {JobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
     */
    delete<T extends JobDeleteArgs>(args: SelectSubset<T, JobDeleteArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Job.
     * @param {JobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobUpdateArgs>(args: SelectSubset<T, JobUpdateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Jobs.
     * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobDeleteManyArgs>(args?: SelectSubset<T, JobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobUpdateManyArgs>(args: SelectSubset<T, JobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs and returns the data updated in the database.
     * @param {JobUpdateManyAndReturnArgs} args - Arguments to update many Jobs.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobUpdateManyAndReturnArgs>(args: SelectSubset<T, JobUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Job.
     * @param {JobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
     */
    upsert<T extends JobUpsertArgs>(args: SelectSubset<T, JobUpsertArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends JobCountArgs>(
      args?: Subset<T, JobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): Prisma.PrismaPromise<GetJobAggregateType<T>>

    /**
     * Group by Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobGroupByArgs['orderBy'] }
        : { orderBy?: JobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Job model
   */
  readonly fields: JobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    department<T extends Job$departmentArgs<ExtArgs> = {}>(args?: Subset<T, Job$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    location<T extends Job$locationArgs<ExtArgs> = {}>(args?: Subset<T, Job$locationArgs<ExtArgs>>): Prisma__JobLocationClient<$Result.GetResult<Prisma.$JobLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    applicationForm<T extends Job$applicationFormArgs<ExtArgs> = {}>(args?: Subset<T, Job$applicationFormArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationFormFieldPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    hiringTeam<T extends Job$hiringTeamArgs<ExtArgs> = {}>(args?: Subset<T, Job$hiringTeamArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobHiringMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jobWorkflow<T extends Job$jobWorkflowArgs<ExtArgs> = {}>(args?: Subset<T, Job$jobWorkflowArgs<ExtArgs>>): Prisma__JobWorkflowClient<$Result.GetResult<Prisma.$JobWorkflowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    applications<T extends Job$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, Job$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    aiScreeningConfig<T extends Job$aiScreeningConfigArgs<ExtArgs> = {}>(args?: Subset<T, Job$aiScreeningConfigArgs<ExtArgs>>): Prisma__AIScreeningConfigClient<$Result.GetResult<Prisma.$AIScreeningConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    aiSchedulingConfig<T extends Job$aiSchedulingConfigArgs<ExtArgs> = {}>(args?: Subset<T, Job$aiSchedulingConfigArgs<ExtArgs>>): Prisma__AISchedulingConfigClient<$Result.GetResult<Prisma.$AISchedulingConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Job model
   */
  interface JobFieldRefs {
    readonly id: FieldRef<"Job", 'String'>
    readonly title: FieldRef<"Job", 'String'>
    readonly description: FieldRef<"Job", 'String'>
    readonly employmentType: FieldRef<"Job", 'EmploymentType'>
    readonly workType: FieldRef<"Job", 'WorkType'>
    readonly salaryMin: FieldRef<"Job", 'Float'>
    readonly salaryMax: FieldRef<"Job", 'Float'>
    readonly currency: FieldRef<"Job", 'String'>
    readonly payPeriod: FieldRef<"Job", 'String'>
    readonly displaySalary: FieldRef<"Job", 'Boolean'>
    readonly status: FieldRef<"Job", 'JobStatus'>
    readonly jobCode: FieldRef<"Job", 'String'>
    readonly companyId: FieldRef<"Job", 'String'>
    readonly departmentId: FieldRef<"Job", 'String'>
    readonly locationId: FieldRef<"Job", 'String'>
    readonly minYearsExperience: FieldRef<"Job", 'Int'>
    readonly skills: FieldRef<"Job", 'Json'>
    readonly jobBoards: FieldRef<"Job", 'Json'>
    readonly createdAt: FieldRef<"Job", 'DateTime'>
    readonly updatedAt: FieldRef<"Job", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Job findUnique
   */
  export type JobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findUniqueOrThrow
   */
  export type JobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findFirst
   */
  export type JobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findFirstOrThrow
   */
  export type JobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findMany
   */
  export type JobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Jobs to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job create
   */
  export type JobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to create a Job.
     */
    data: XOR<JobCreateInput, JobUncheckedCreateInput>
  }

  /**
   * Job createMany
   */
  export type JobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Job createManyAndReturn
   */
  export type JobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Job update
   */
  export type JobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to update a Job.
     */
    data: XOR<JobUpdateInput, JobUncheckedUpdateInput>
    /**
     * Choose, which Job to update.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job updateMany
   */
  export type JobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to update.
     */
    limit?: number
  }

  /**
   * Job updateManyAndReturn
   */
  export type JobUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Job upsert
   */
  export type JobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The filter to search for the Job to update in case it exists.
     */
    where: JobWhereUniqueInput
    /**
     * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
     */
    create: XOR<JobCreateInput, JobUncheckedCreateInput>
    /**
     * In case the Job was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobUpdateInput, JobUncheckedUpdateInput>
  }

  /**
   * Job delete
   */
  export type JobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter which Job to delete.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job deleteMany
   */
  export type JobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jobs to delete
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to delete.
     */
    limit?: number
  }

  /**
   * Job.department
   */
  export type Job$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * Job.location
   */
  export type Job$locationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLocation
     */
    select?: JobLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobLocation
     */
    omit?: JobLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobLocationInclude<ExtArgs> | null
    where?: JobLocationWhereInput
  }

  /**
   * Job.applicationForm
   */
  export type Job$applicationFormArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationFormField
     */
    select?: ApplicationFormFieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationFormField
     */
    omit?: ApplicationFormFieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationFormFieldInclude<ExtArgs> | null
    where?: ApplicationFormFieldWhereInput
    orderBy?: ApplicationFormFieldOrderByWithRelationInput | ApplicationFormFieldOrderByWithRelationInput[]
    cursor?: ApplicationFormFieldWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationFormFieldScalarFieldEnum | ApplicationFormFieldScalarFieldEnum[]
  }

  /**
   * Job.hiringTeam
   */
  export type Job$hiringTeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHiringMember
     */
    select?: JobHiringMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHiringMember
     */
    omit?: JobHiringMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHiringMemberInclude<ExtArgs> | null
    where?: JobHiringMemberWhereInput
    orderBy?: JobHiringMemberOrderByWithRelationInput | JobHiringMemberOrderByWithRelationInput[]
    cursor?: JobHiringMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobHiringMemberScalarFieldEnum | JobHiringMemberScalarFieldEnum[]
  }

  /**
   * Job.jobWorkflow
   */
  export type Job$jobWorkflowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflow
     */
    select?: JobWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflow
     */
    omit?: JobWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowInclude<ExtArgs> | null
    where?: JobWorkflowWhereInput
  }

  /**
   * Job.applications
   */
  export type Job$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Job.aiScreeningConfig
   */
  export type Job$aiScreeningConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIScreeningConfig
     */
    select?: AIScreeningConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIScreeningConfig
     */
    omit?: AIScreeningConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIScreeningConfigInclude<ExtArgs> | null
    where?: AIScreeningConfigWhereInput
  }

  /**
   * Job.aiSchedulingConfig
   */
  export type Job$aiSchedulingConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AISchedulingConfig
     */
    select?: AISchedulingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AISchedulingConfig
     */
    omit?: AISchedulingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AISchedulingConfigInclude<ExtArgs> | null
    where?: AISchedulingConfigWhereInput
  }

  /**
   * Job without action
   */
  export type JobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    companyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    companyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    companyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: string
    name: string
    companyId: string
    createdAt: Date
    updatedAt: Date
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    jobs?: boolean | Department$jobsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "companyId" | "createdAt" | "updatedAt", ExtArgs["result"]["department"]>
  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    jobs?: boolean | Department$jobsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      jobs: Prisma.$JobPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      companyId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments and returns the data updated in the database.
     * @param {DepartmentUpdateManyAndReturnArgs} args - Arguments to update many Departments.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    jobs<T extends Department$jobsArgs<ExtArgs> = {}>(args?: Subset<T, Department$jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'String'>
    readonly name: FieldRef<"Department", 'String'>
    readonly companyId: FieldRef<"Department", 'String'>
    readonly createdAt: FieldRef<"Department", 'DateTime'>
    readonly updatedAt: FieldRef<"Department", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department updateManyAndReturn
   */
  export type DepartmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to delete.
     */
    limit?: number
  }

  /**
   * Department.jobs
   */
  export type Department$jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    cursor?: JobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model JobLocation
   */

  export type AggregateJobLocation = {
    _count: JobLocationCountAggregateOutputType | null
    _min: JobLocationMinAggregateOutputType | null
    _max: JobLocationMaxAggregateOutputType | null
  }

  export type JobLocationMinAggregateOutputType = {
    id: string | null
    address: string | null
    country: string | null
    city: string | null
    stateRegion: string | null
    zipPostal: string | null
    companyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobLocationMaxAggregateOutputType = {
    id: string | null
    address: string | null
    country: string | null
    city: string | null
    stateRegion: string | null
    zipPostal: string | null
    companyId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobLocationCountAggregateOutputType = {
    id: number
    address: number
    country: number
    city: number
    stateRegion: number
    zipPostal: number
    companyId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobLocationMinAggregateInputType = {
    id?: true
    address?: true
    country?: true
    city?: true
    stateRegion?: true
    zipPostal?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobLocationMaxAggregateInputType = {
    id?: true
    address?: true
    country?: true
    city?: true
    stateRegion?: true
    zipPostal?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobLocationCountAggregateInputType = {
    id?: true
    address?: true
    country?: true
    city?: true
    stateRegion?: true
    zipPostal?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobLocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobLocation to aggregate.
     */
    where?: JobLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobLocations to fetch.
     */
    orderBy?: JobLocationOrderByWithRelationInput | JobLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobLocations
    **/
    _count?: true | JobLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobLocationMaxAggregateInputType
  }

  export type GetJobLocationAggregateType<T extends JobLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateJobLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobLocation[P]>
      : GetScalarType<T[P], AggregateJobLocation[P]>
  }




  export type JobLocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobLocationWhereInput
    orderBy?: JobLocationOrderByWithAggregationInput | JobLocationOrderByWithAggregationInput[]
    by: JobLocationScalarFieldEnum[] | JobLocationScalarFieldEnum
    having?: JobLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobLocationCountAggregateInputType | true
    _min?: JobLocationMinAggregateInputType
    _max?: JobLocationMaxAggregateInputType
  }

  export type JobLocationGroupByOutputType = {
    id: string
    address: string | null
    country: string
    city: string
    stateRegion: string | null
    zipPostal: string | null
    companyId: string
    createdAt: Date
    updatedAt: Date
    _count: JobLocationCountAggregateOutputType | null
    _min: JobLocationMinAggregateOutputType | null
    _max: JobLocationMaxAggregateOutputType | null
  }

  type GetJobLocationGroupByPayload<T extends JobLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobLocationGroupByOutputType[P]>
            : GetScalarType<T[P], JobLocationGroupByOutputType[P]>
        }
      >
    >


  export type JobLocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    country?: boolean
    city?: boolean
    stateRegion?: boolean
    zipPostal?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    jobs?: boolean | JobLocation$jobsArgs<ExtArgs>
    _count?: boolean | JobLocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobLocation"]>

  export type JobLocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    country?: boolean
    city?: boolean
    stateRegion?: boolean
    zipPostal?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobLocation"]>

  export type JobLocationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    country?: boolean
    city?: boolean
    stateRegion?: boolean
    zipPostal?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobLocation"]>

  export type JobLocationSelectScalar = {
    id?: boolean
    address?: boolean
    country?: boolean
    city?: boolean
    stateRegion?: boolean
    zipPostal?: boolean
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JobLocationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "address" | "country" | "city" | "stateRegion" | "zipPostal" | "companyId" | "createdAt" | "updatedAt", ExtArgs["result"]["jobLocation"]>
  export type JobLocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    jobs?: boolean | JobLocation$jobsArgs<ExtArgs>
    _count?: boolean | JobLocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobLocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type JobLocationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $JobLocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobLocation"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      jobs: Prisma.$JobPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      address: string | null
      country: string
      city: string
      stateRegion: string | null
      zipPostal: string | null
      companyId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["jobLocation"]>
    composites: {}
  }

  type JobLocationGetPayload<S extends boolean | null | undefined | JobLocationDefaultArgs> = $Result.GetResult<Prisma.$JobLocationPayload, S>

  type JobLocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobLocationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobLocationCountAggregateInputType | true
    }

  export interface JobLocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobLocation'], meta: { name: 'JobLocation' } }
    /**
     * Find zero or one JobLocation that matches the filter.
     * @param {JobLocationFindUniqueArgs} args - Arguments to find a JobLocation
     * @example
     * // Get one JobLocation
     * const jobLocation = await prisma.jobLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobLocationFindUniqueArgs>(args: SelectSubset<T, JobLocationFindUniqueArgs<ExtArgs>>): Prisma__JobLocationClient<$Result.GetResult<Prisma.$JobLocationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobLocation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobLocationFindUniqueOrThrowArgs} args - Arguments to find a JobLocation
     * @example
     * // Get one JobLocation
     * const jobLocation = await prisma.jobLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobLocationFindUniqueOrThrowArgs>(args: SelectSubset<T, JobLocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobLocationClient<$Result.GetResult<Prisma.$JobLocationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobLocationFindFirstArgs} args - Arguments to find a JobLocation
     * @example
     * // Get one JobLocation
     * const jobLocation = await prisma.jobLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobLocationFindFirstArgs>(args?: SelectSubset<T, JobLocationFindFirstArgs<ExtArgs>>): Prisma__JobLocationClient<$Result.GetResult<Prisma.$JobLocationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobLocation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobLocationFindFirstOrThrowArgs} args - Arguments to find a JobLocation
     * @example
     * // Get one JobLocation
     * const jobLocation = await prisma.jobLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobLocationFindFirstOrThrowArgs>(args?: SelectSubset<T, JobLocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobLocationClient<$Result.GetResult<Prisma.$JobLocationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobLocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobLocations
     * const jobLocations = await prisma.jobLocation.findMany()
     * 
     * // Get first 10 JobLocations
     * const jobLocations = await prisma.jobLocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobLocationWithIdOnly = await prisma.jobLocation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobLocationFindManyArgs>(args?: SelectSubset<T, JobLocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobLocationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobLocation.
     * @param {JobLocationCreateArgs} args - Arguments to create a JobLocation.
     * @example
     * // Create one JobLocation
     * const JobLocation = await prisma.jobLocation.create({
     *   data: {
     *     // ... data to create a JobLocation
     *   }
     * })
     * 
     */
    create<T extends JobLocationCreateArgs>(args: SelectSubset<T, JobLocationCreateArgs<ExtArgs>>): Prisma__JobLocationClient<$Result.GetResult<Prisma.$JobLocationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobLocations.
     * @param {JobLocationCreateManyArgs} args - Arguments to create many JobLocations.
     * @example
     * // Create many JobLocations
     * const jobLocation = await prisma.jobLocation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobLocationCreateManyArgs>(args?: SelectSubset<T, JobLocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobLocations and returns the data saved in the database.
     * @param {JobLocationCreateManyAndReturnArgs} args - Arguments to create many JobLocations.
     * @example
     * // Create many JobLocations
     * const jobLocation = await prisma.jobLocation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobLocations and only return the `id`
     * const jobLocationWithIdOnly = await prisma.jobLocation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobLocationCreateManyAndReturnArgs>(args?: SelectSubset<T, JobLocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobLocationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JobLocation.
     * @param {JobLocationDeleteArgs} args - Arguments to delete one JobLocation.
     * @example
     * // Delete one JobLocation
     * const JobLocation = await prisma.jobLocation.delete({
     *   where: {
     *     // ... filter to delete one JobLocation
     *   }
     * })
     * 
     */
    delete<T extends JobLocationDeleteArgs>(args: SelectSubset<T, JobLocationDeleteArgs<ExtArgs>>): Prisma__JobLocationClient<$Result.GetResult<Prisma.$JobLocationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobLocation.
     * @param {JobLocationUpdateArgs} args - Arguments to update one JobLocation.
     * @example
     * // Update one JobLocation
     * const jobLocation = await prisma.jobLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobLocationUpdateArgs>(args: SelectSubset<T, JobLocationUpdateArgs<ExtArgs>>): Prisma__JobLocationClient<$Result.GetResult<Prisma.$JobLocationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobLocations.
     * @param {JobLocationDeleteManyArgs} args - Arguments to filter JobLocations to delete.
     * @example
     * // Delete a few JobLocations
     * const { count } = await prisma.jobLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobLocationDeleteManyArgs>(args?: SelectSubset<T, JobLocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobLocations
     * const jobLocation = await prisma.jobLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobLocationUpdateManyArgs>(args: SelectSubset<T, JobLocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobLocations and returns the data updated in the database.
     * @param {JobLocationUpdateManyAndReturnArgs} args - Arguments to update many JobLocations.
     * @example
     * // Update many JobLocations
     * const jobLocation = await prisma.jobLocation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JobLocations and only return the `id`
     * const jobLocationWithIdOnly = await prisma.jobLocation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobLocationUpdateManyAndReturnArgs>(args: SelectSubset<T, JobLocationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobLocationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JobLocation.
     * @param {JobLocationUpsertArgs} args - Arguments to update or create a JobLocation.
     * @example
     * // Update or create a JobLocation
     * const jobLocation = await prisma.jobLocation.upsert({
     *   create: {
     *     // ... data to create a JobLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobLocation we want to update
     *   }
     * })
     */
    upsert<T extends JobLocationUpsertArgs>(args: SelectSubset<T, JobLocationUpsertArgs<ExtArgs>>): Prisma__JobLocationClient<$Result.GetResult<Prisma.$JobLocationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobLocationCountArgs} args - Arguments to filter JobLocations to count.
     * @example
     * // Count the number of JobLocations
     * const count = await prisma.jobLocation.count({
     *   where: {
     *     // ... the filter for the JobLocations we want to count
     *   }
     * })
    **/
    count<T extends JobLocationCountArgs>(
      args?: Subset<T, JobLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobLocationAggregateArgs>(args: Subset<T, JobLocationAggregateArgs>): Prisma.PrismaPromise<GetJobLocationAggregateType<T>>

    /**
     * Group by JobLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobLocationGroupByArgs['orderBy'] }
        : { orderBy?: JobLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobLocation model
   */
  readonly fields: JobLocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobLocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    jobs<T extends JobLocation$jobsArgs<ExtArgs> = {}>(args?: Subset<T, JobLocation$jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobLocation model
   */
  interface JobLocationFieldRefs {
    readonly id: FieldRef<"JobLocation", 'String'>
    readonly address: FieldRef<"JobLocation", 'String'>
    readonly country: FieldRef<"JobLocation", 'String'>
    readonly city: FieldRef<"JobLocation", 'String'>
    readonly stateRegion: FieldRef<"JobLocation", 'String'>
    readonly zipPostal: FieldRef<"JobLocation", 'String'>
    readonly companyId: FieldRef<"JobLocation", 'String'>
    readonly createdAt: FieldRef<"JobLocation", 'DateTime'>
    readonly updatedAt: FieldRef<"JobLocation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JobLocation findUnique
   */
  export type JobLocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLocation
     */
    select?: JobLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobLocation
     */
    omit?: JobLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobLocationInclude<ExtArgs> | null
    /**
     * Filter, which JobLocation to fetch.
     */
    where: JobLocationWhereUniqueInput
  }

  /**
   * JobLocation findUniqueOrThrow
   */
  export type JobLocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLocation
     */
    select?: JobLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobLocation
     */
    omit?: JobLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobLocationInclude<ExtArgs> | null
    /**
     * Filter, which JobLocation to fetch.
     */
    where: JobLocationWhereUniqueInput
  }

  /**
   * JobLocation findFirst
   */
  export type JobLocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLocation
     */
    select?: JobLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobLocation
     */
    omit?: JobLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobLocationInclude<ExtArgs> | null
    /**
     * Filter, which JobLocation to fetch.
     */
    where?: JobLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobLocations to fetch.
     */
    orderBy?: JobLocationOrderByWithRelationInput | JobLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobLocations.
     */
    cursor?: JobLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobLocations.
     */
    distinct?: JobLocationScalarFieldEnum | JobLocationScalarFieldEnum[]
  }

  /**
   * JobLocation findFirstOrThrow
   */
  export type JobLocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLocation
     */
    select?: JobLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobLocation
     */
    omit?: JobLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobLocationInclude<ExtArgs> | null
    /**
     * Filter, which JobLocation to fetch.
     */
    where?: JobLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobLocations to fetch.
     */
    orderBy?: JobLocationOrderByWithRelationInput | JobLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobLocations.
     */
    cursor?: JobLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobLocations.
     */
    distinct?: JobLocationScalarFieldEnum | JobLocationScalarFieldEnum[]
  }

  /**
   * JobLocation findMany
   */
  export type JobLocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLocation
     */
    select?: JobLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobLocation
     */
    omit?: JobLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobLocationInclude<ExtArgs> | null
    /**
     * Filter, which JobLocations to fetch.
     */
    where?: JobLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobLocations to fetch.
     */
    orderBy?: JobLocationOrderByWithRelationInput | JobLocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobLocations.
     */
    cursor?: JobLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobLocations.
     */
    skip?: number
    distinct?: JobLocationScalarFieldEnum | JobLocationScalarFieldEnum[]
  }

  /**
   * JobLocation create
   */
  export type JobLocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLocation
     */
    select?: JobLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobLocation
     */
    omit?: JobLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobLocationInclude<ExtArgs> | null
    /**
     * The data needed to create a JobLocation.
     */
    data: XOR<JobLocationCreateInput, JobLocationUncheckedCreateInput>
  }

  /**
   * JobLocation createMany
   */
  export type JobLocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobLocations.
     */
    data: JobLocationCreateManyInput | JobLocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobLocation createManyAndReturn
   */
  export type JobLocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLocation
     */
    select?: JobLocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobLocation
     */
    omit?: JobLocationOmit<ExtArgs> | null
    /**
     * The data used to create many JobLocations.
     */
    data: JobLocationCreateManyInput | JobLocationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobLocationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobLocation update
   */
  export type JobLocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLocation
     */
    select?: JobLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobLocation
     */
    omit?: JobLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobLocationInclude<ExtArgs> | null
    /**
     * The data needed to update a JobLocation.
     */
    data: XOR<JobLocationUpdateInput, JobLocationUncheckedUpdateInput>
    /**
     * Choose, which JobLocation to update.
     */
    where: JobLocationWhereUniqueInput
  }

  /**
   * JobLocation updateMany
   */
  export type JobLocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobLocations.
     */
    data: XOR<JobLocationUpdateManyMutationInput, JobLocationUncheckedUpdateManyInput>
    /**
     * Filter which JobLocations to update
     */
    where?: JobLocationWhereInput
    /**
     * Limit how many JobLocations to update.
     */
    limit?: number
  }

  /**
   * JobLocation updateManyAndReturn
   */
  export type JobLocationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLocation
     */
    select?: JobLocationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobLocation
     */
    omit?: JobLocationOmit<ExtArgs> | null
    /**
     * The data used to update JobLocations.
     */
    data: XOR<JobLocationUpdateManyMutationInput, JobLocationUncheckedUpdateManyInput>
    /**
     * Filter which JobLocations to update
     */
    where?: JobLocationWhereInput
    /**
     * Limit how many JobLocations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobLocationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobLocation upsert
   */
  export type JobLocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLocation
     */
    select?: JobLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobLocation
     */
    omit?: JobLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobLocationInclude<ExtArgs> | null
    /**
     * The filter to search for the JobLocation to update in case it exists.
     */
    where: JobLocationWhereUniqueInput
    /**
     * In case the JobLocation found by the `where` argument doesn't exist, create a new JobLocation with this data.
     */
    create: XOR<JobLocationCreateInput, JobLocationUncheckedCreateInput>
    /**
     * In case the JobLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobLocationUpdateInput, JobLocationUncheckedUpdateInput>
  }

  /**
   * JobLocation delete
   */
  export type JobLocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLocation
     */
    select?: JobLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobLocation
     */
    omit?: JobLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobLocationInclude<ExtArgs> | null
    /**
     * Filter which JobLocation to delete.
     */
    where: JobLocationWhereUniqueInput
  }

  /**
   * JobLocation deleteMany
   */
  export type JobLocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobLocations to delete
     */
    where?: JobLocationWhereInput
    /**
     * Limit how many JobLocations to delete.
     */
    limit?: number
  }

  /**
   * JobLocation.jobs
   */
  export type JobLocation$jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    cursor?: JobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * JobLocation without action
   */
  export type JobLocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobLocation
     */
    select?: JobLocationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobLocation
     */
    omit?: JobLocationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobLocationInclude<ExtArgs> | null
  }


  /**
   * Model ApplicationFormField
   */

  export type AggregateApplicationFormField = {
    _count: ApplicationFormFieldCountAggregateOutputType | null
    _avg: ApplicationFormFieldAvgAggregateOutputType | null
    _sum: ApplicationFormFieldSumAggregateOutputType | null
    _min: ApplicationFormFieldMinAggregateOutputType | null
    _max: ApplicationFormFieldMaxAggregateOutputType | null
  }

  export type ApplicationFormFieldAvgAggregateOutputType = {
    order: number | null
  }

  export type ApplicationFormFieldSumAggregateOutputType = {
    order: number | null
  }

  export type ApplicationFormFieldMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    fieldName: string | null
    label: string | null
    fieldType: $Enums.FieldType | null
    isRequired: boolean | null
    isOptional: boolean | null
    isDisabled: boolean | null
    customQuestionId: string | null
    order: number | null
  }

  export type ApplicationFormFieldMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    fieldName: string | null
    label: string | null
    fieldType: $Enums.FieldType | null
    isRequired: boolean | null
    isOptional: boolean | null
    isDisabled: boolean | null
    customQuestionId: string | null
    order: number | null
  }

  export type ApplicationFormFieldCountAggregateOutputType = {
    id: number
    jobId: number
    fieldName: number
    label: number
    fieldType: number
    isRequired: number
    isOptional: number
    isDisabled: number
    customQuestionId: number
    order: number
    _all: number
  }


  export type ApplicationFormFieldAvgAggregateInputType = {
    order?: true
  }

  export type ApplicationFormFieldSumAggregateInputType = {
    order?: true
  }

  export type ApplicationFormFieldMinAggregateInputType = {
    id?: true
    jobId?: true
    fieldName?: true
    label?: true
    fieldType?: true
    isRequired?: true
    isOptional?: true
    isDisabled?: true
    customQuestionId?: true
    order?: true
  }

  export type ApplicationFormFieldMaxAggregateInputType = {
    id?: true
    jobId?: true
    fieldName?: true
    label?: true
    fieldType?: true
    isRequired?: true
    isOptional?: true
    isDisabled?: true
    customQuestionId?: true
    order?: true
  }

  export type ApplicationFormFieldCountAggregateInputType = {
    id?: true
    jobId?: true
    fieldName?: true
    label?: true
    fieldType?: true
    isRequired?: true
    isOptional?: true
    isDisabled?: true
    customQuestionId?: true
    order?: true
    _all?: true
  }

  export type ApplicationFormFieldAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApplicationFormField to aggregate.
     */
    where?: ApplicationFormFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationFormFields to fetch.
     */
    orderBy?: ApplicationFormFieldOrderByWithRelationInput | ApplicationFormFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationFormFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationFormFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationFormFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApplicationFormFields
    **/
    _count?: true | ApplicationFormFieldCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApplicationFormFieldAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApplicationFormFieldSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationFormFieldMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationFormFieldMaxAggregateInputType
  }

  export type GetApplicationFormFieldAggregateType<T extends ApplicationFormFieldAggregateArgs> = {
        [P in keyof T & keyof AggregateApplicationFormField]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplicationFormField[P]>
      : GetScalarType<T[P], AggregateApplicationFormField[P]>
  }




  export type ApplicationFormFieldGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationFormFieldWhereInput
    orderBy?: ApplicationFormFieldOrderByWithAggregationInput | ApplicationFormFieldOrderByWithAggregationInput[]
    by: ApplicationFormFieldScalarFieldEnum[] | ApplicationFormFieldScalarFieldEnum
    having?: ApplicationFormFieldScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationFormFieldCountAggregateInputType | true
    _avg?: ApplicationFormFieldAvgAggregateInputType
    _sum?: ApplicationFormFieldSumAggregateInputType
    _min?: ApplicationFormFieldMinAggregateInputType
    _max?: ApplicationFormFieldMaxAggregateInputType
  }

  export type ApplicationFormFieldGroupByOutputType = {
    id: string
    jobId: string
    fieldName: string
    label: string
    fieldType: $Enums.FieldType
    isRequired: boolean
    isOptional: boolean
    isDisabled: boolean
    customQuestionId: string | null
    order: number
    _count: ApplicationFormFieldCountAggregateOutputType | null
    _avg: ApplicationFormFieldAvgAggregateOutputType | null
    _sum: ApplicationFormFieldSumAggregateOutputType | null
    _min: ApplicationFormFieldMinAggregateOutputType | null
    _max: ApplicationFormFieldMaxAggregateOutputType | null
  }

  type GetApplicationFormFieldGroupByPayload<T extends ApplicationFormFieldGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationFormFieldGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationFormFieldGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationFormFieldGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationFormFieldGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationFormFieldSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    fieldName?: boolean
    label?: boolean
    fieldType?: boolean
    isRequired?: boolean
    isOptional?: boolean
    isDisabled?: boolean
    customQuestionId?: boolean
    order?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    customQuestion?: boolean | ApplicationFormField$customQuestionArgs<ExtArgs>
  }, ExtArgs["result"]["applicationFormField"]>

  export type ApplicationFormFieldSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    fieldName?: boolean
    label?: boolean
    fieldType?: boolean
    isRequired?: boolean
    isOptional?: boolean
    isDisabled?: boolean
    customQuestionId?: boolean
    order?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    customQuestion?: boolean | ApplicationFormField$customQuestionArgs<ExtArgs>
  }, ExtArgs["result"]["applicationFormField"]>

  export type ApplicationFormFieldSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    fieldName?: boolean
    label?: boolean
    fieldType?: boolean
    isRequired?: boolean
    isOptional?: boolean
    isDisabled?: boolean
    customQuestionId?: boolean
    order?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    customQuestion?: boolean | ApplicationFormField$customQuestionArgs<ExtArgs>
  }, ExtArgs["result"]["applicationFormField"]>

  export type ApplicationFormFieldSelectScalar = {
    id?: boolean
    jobId?: boolean
    fieldName?: boolean
    label?: boolean
    fieldType?: boolean
    isRequired?: boolean
    isOptional?: boolean
    isDisabled?: boolean
    customQuestionId?: boolean
    order?: boolean
  }

  export type ApplicationFormFieldOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "fieldName" | "label" | "fieldType" | "isRequired" | "isOptional" | "isDisabled" | "customQuestionId" | "order", ExtArgs["result"]["applicationFormField"]>
  export type ApplicationFormFieldInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    customQuestion?: boolean | ApplicationFormField$customQuestionArgs<ExtArgs>
  }
  export type ApplicationFormFieldIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    customQuestion?: boolean | ApplicationFormField$customQuestionArgs<ExtArgs>
  }
  export type ApplicationFormFieldIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    customQuestion?: boolean | ApplicationFormField$customQuestionArgs<ExtArgs>
  }

  export type $ApplicationFormFieldPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ApplicationFormField"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
      customQuestion: Prisma.$CustomQuestionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      fieldName: string
      label: string
      fieldType: $Enums.FieldType
      isRequired: boolean
      isOptional: boolean
      isDisabled: boolean
      customQuestionId: string | null
      order: number
    }, ExtArgs["result"]["applicationFormField"]>
    composites: {}
  }

  type ApplicationFormFieldGetPayload<S extends boolean | null | undefined | ApplicationFormFieldDefaultArgs> = $Result.GetResult<Prisma.$ApplicationFormFieldPayload, S>

  type ApplicationFormFieldCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApplicationFormFieldFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApplicationFormFieldCountAggregateInputType | true
    }

  export interface ApplicationFormFieldDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApplicationFormField'], meta: { name: 'ApplicationFormField' } }
    /**
     * Find zero or one ApplicationFormField that matches the filter.
     * @param {ApplicationFormFieldFindUniqueArgs} args - Arguments to find a ApplicationFormField
     * @example
     * // Get one ApplicationFormField
     * const applicationFormField = await prisma.applicationFormField.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicationFormFieldFindUniqueArgs>(args: SelectSubset<T, ApplicationFormFieldFindUniqueArgs<ExtArgs>>): Prisma__ApplicationFormFieldClient<$Result.GetResult<Prisma.$ApplicationFormFieldPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ApplicationFormField that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApplicationFormFieldFindUniqueOrThrowArgs} args - Arguments to find a ApplicationFormField
     * @example
     * // Get one ApplicationFormField
     * const applicationFormField = await prisma.applicationFormField.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicationFormFieldFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicationFormFieldFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicationFormFieldClient<$Result.GetResult<Prisma.$ApplicationFormFieldPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApplicationFormField that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFormFieldFindFirstArgs} args - Arguments to find a ApplicationFormField
     * @example
     * // Get one ApplicationFormField
     * const applicationFormField = await prisma.applicationFormField.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicationFormFieldFindFirstArgs>(args?: SelectSubset<T, ApplicationFormFieldFindFirstArgs<ExtArgs>>): Prisma__ApplicationFormFieldClient<$Result.GetResult<Prisma.$ApplicationFormFieldPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApplicationFormField that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFormFieldFindFirstOrThrowArgs} args - Arguments to find a ApplicationFormField
     * @example
     * // Get one ApplicationFormField
     * const applicationFormField = await prisma.applicationFormField.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicationFormFieldFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicationFormFieldFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicationFormFieldClient<$Result.GetResult<Prisma.$ApplicationFormFieldPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ApplicationFormFields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFormFieldFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApplicationFormFields
     * const applicationFormFields = await prisma.applicationFormField.findMany()
     * 
     * // Get first 10 ApplicationFormFields
     * const applicationFormFields = await prisma.applicationFormField.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationFormFieldWithIdOnly = await prisma.applicationFormField.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicationFormFieldFindManyArgs>(args?: SelectSubset<T, ApplicationFormFieldFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationFormFieldPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ApplicationFormField.
     * @param {ApplicationFormFieldCreateArgs} args - Arguments to create a ApplicationFormField.
     * @example
     * // Create one ApplicationFormField
     * const ApplicationFormField = await prisma.applicationFormField.create({
     *   data: {
     *     // ... data to create a ApplicationFormField
     *   }
     * })
     * 
     */
    create<T extends ApplicationFormFieldCreateArgs>(args: SelectSubset<T, ApplicationFormFieldCreateArgs<ExtArgs>>): Prisma__ApplicationFormFieldClient<$Result.GetResult<Prisma.$ApplicationFormFieldPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ApplicationFormFields.
     * @param {ApplicationFormFieldCreateManyArgs} args - Arguments to create many ApplicationFormFields.
     * @example
     * // Create many ApplicationFormFields
     * const applicationFormField = await prisma.applicationFormField.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicationFormFieldCreateManyArgs>(args?: SelectSubset<T, ApplicationFormFieldCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ApplicationFormFields and returns the data saved in the database.
     * @param {ApplicationFormFieldCreateManyAndReturnArgs} args - Arguments to create many ApplicationFormFields.
     * @example
     * // Create many ApplicationFormFields
     * const applicationFormField = await prisma.applicationFormField.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ApplicationFormFields and only return the `id`
     * const applicationFormFieldWithIdOnly = await prisma.applicationFormField.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApplicationFormFieldCreateManyAndReturnArgs>(args?: SelectSubset<T, ApplicationFormFieldCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationFormFieldPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ApplicationFormField.
     * @param {ApplicationFormFieldDeleteArgs} args - Arguments to delete one ApplicationFormField.
     * @example
     * // Delete one ApplicationFormField
     * const ApplicationFormField = await prisma.applicationFormField.delete({
     *   where: {
     *     // ... filter to delete one ApplicationFormField
     *   }
     * })
     * 
     */
    delete<T extends ApplicationFormFieldDeleteArgs>(args: SelectSubset<T, ApplicationFormFieldDeleteArgs<ExtArgs>>): Prisma__ApplicationFormFieldClient<$Result.GetResult<Prisma.$ApplicationFormFieldPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ApplicationFormField.
     * @param {ApplicationFormFieldUpdateArgs} args - Arguments to update one ApplicationFormField.
     * @example
     * // Update one ApplicationFormField
     * const applicationFormField = await prisma.applicationFormField.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicationFormFieldUpdateArgs>(args: SelectSubset<T, ApplicationFormFieldUpdateArgs<ExtArgs>>): Prisma__ApplicationFormFieldClient<$Result.GetResult<Prisma.$ApplicationFormFieldPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ApplicationFormFields.
     * @param {ApplicationFormFieldDeleteManyArgs} args - Arguments to filter ApplicationFormFields to delete.
     * @example
     * // Delete a few ApplicationFormFields
     * const { count } = await prisma.applicationFormField.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicationFormFieldDeleteManyArgs>(args?: SelectSubset<T, ApplicationFormFieldDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApplicationFormFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFormFieldUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApplicationFormFields
     * const applicationFormField = await prisma.applicationFormField.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicationFormFieldUpdateManyArgs>(args: SelectSubset<T, ApplicationFormFieldUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApplicationFormFields and returns the data updated in the database.
     * @param {ApplicationFormFieldUpdateManyAndReturnArgs} args - Arguments to update many ApplicationFormFields.
     * @example
     * // Update many ApplicationFormFields
     * const applicationFormField = await prisma.applicationFormField.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ApplicationFormFields and only return the `id`
     * const applicationFormFieldWithIdOnly = await prisma.applicationFormField.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ApplicationFormFieldUpdateManyAndReturnArgs>(args: SelectSubset<T, ApplicationFormFieldUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationFormFieldPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ApplicationFormField.
     * @param {ApplicationFormFieldUpsertArgs} args - Arguments to update or create a ApplicationFormField.
     * @example
     * // Update or create a ApplicationFormField
     * const applicationFormField = await prisma.applicationFormField.upsert({
     *   create: {
     *     // ... data to create a ApplicationFormField
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApplicationFormField we want to update
     *   }
     * })
     */
    upsert<T extends ApplicationFormFieldUpsertArgs>(args: SelectSubset<T, ApplicationFormFieldUpsertArgs<ExtArgs>>): Prisma__ApplicationFormFieldClient<$Result.GetResult<Prisma.$ApplicationFormFieldPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ApplicationFormFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFormFieldCountArgs} args - Arguments to filter ApplicationFormFields to count.
     * @example
     * // Count the number of ApplicationFormFields
     * const count = await prisma.applicationFormField.count({
     *   where: {
     *     // ... the filter for the ApplicationFormFields we want to count
     *   }
     * })
    **/
    count<T extends ApplicationFormFieldCountArgs>(
      args?: Subset<T, ApplicationFormFieldCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationFormFieldCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApplicationFormField.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFormFieldAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationFormFieldAggregateArgs>(args: Subset<T, ApplicationFormFieldAggregateArgs>): Prisma.PrismaPromise<GetApplicationFormFieldAggregateType<T>>

    /**
     * Group by ApplicationFormField.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFormFieldGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationFormFieldGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationFormFieldGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationFormFieldGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationFormFieldGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationFormFieldGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApplicationFormField model
   */
  readonly fields: ApplicationFormFieldFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApplicationFormField.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicationFormFieldClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    customQuestion<T extends ApplicationFormField$customQuestionArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationFormField$customQuestionArgs<ExtArgs>>): Prisma__CustomQuestionClient<$Result.GetResult<Prisma.$CustomQuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ApplicationFormField model
   */
  interface ApplicationFormFieldFieldRefs {
    readonly id: FieldRef<"ApplicationFormField", 'String'>
    readonly jobId: FieldRef<"ApplicationFormField", 'String'>
    readonly fieldName: FieldRef<"ApplicationFormField", 'String'>
    readonly label: FieldRef<"ApplicationFormField", 'String'>
    readonly fieldType: FieldRef<"ApplicationFormField", 'FieldType'>
    readonly isRequired: FieldRef<"ApplicationFormField", 'Boolean'>
    readonly isOptional: FieldRef<"ApplicationFormField", 'Boolean'>
    readonly isDisabled: FieldRef<"ApplicationFormField", 'Boolean'>
    readonly customQuestionId: FieldRef<"ApplicationFormField", 'String'>
    readonly order: FieldRef<"ApplicationFormField", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ApplicationFormField findUnique
   */
  export type ApplicationFormFieldFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationFormField
     */
    select?: ApplicationFormFieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationFormField
     */
    omit?: ApplicationFormFieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationFormFieldInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationFormField to fetch.
     */
    where: ApplicationFormFieldWhereUniqueInput
  }

  /**
   * ApplicationFormField findUniqueOrThrow
   */
  export type ApplicationFormFieldFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationFormField
     */
    select?: ApplicationFormFieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationFormField
     */
    omit?: ApplicationFormFieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationFormFieldInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationFormField to fetch.
     */
    where: ApplicationFormFieldWhereUniqueInput
  }

  /**
   * ApplicationFormField findFirst
   */
  export type ApplicationFormFieldFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationFormField
     */
    select?: ApplicationFormFieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationFormField
     */
    omit?: ApplicationFormFieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationFormFieldInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationFormField to fetch.
     */
    where?: ApplicationFormFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationFormFields to fetch.
     */
    orderBy?: ApplicationFormFieldOrderByWithRelationInput | ApplicationFormFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicationFormFields.
     */
    cursor?: ApplicationFormFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationFormFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationFormFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicationFormFields.
     */
    distinct?: ApplicationFormFieldScalarFieldEnum | ApplicationFormFieldScalarFieldEnum[]
  }

  /**
   * ApplicationFormField findFirstOrThrow
   */
  export type ApplicationFormFieldFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationFormField
     */
    select?: ApplicationFormFieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationFormField
     */
    omit?: ApplicationFormFieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationFormFieldInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationFormField to fetch.
     */
    where?: ApplicationFormFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationFormFields to fetch.
     */
    orderBy?: ApplicationFormFieldOrderByWithRelationInput | ApplicationFormFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicationFormFields.
     */
    cursor?: ApplicationFormFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationFormFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationFormFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicationFormFields.
     */
    distinct?: ApplicationFormFieldScalarFieldEnum | ApplicationFormFieldScalarFieldEnum[]
  }

  /**
   * ApplicationFormField findMany
   */
  export type ApplicationFormFieldFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationFormField
     */
    select?: ApplicationFormFieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationFormField
     */
    omit?: ApplicationFormFieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationFormFieldInclude<ExtArgs> | null
    /**
     * Filter, which ApplicationFormFields to fetch.
     */
    where?: ApplicationFormFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicationFormFields to fetch.
     */
    orderBy?: ApplicationFormFieldOrderByWithRelationInput | ApplicationFormFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApplicationFormFields.
     */
    cursor?: ApplicationFormFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicationFormFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicationFormFields.
     */
    skip?: number
    distinct?: ApplicationFormFieldScalarFieldEnum | ApplicationFormFieldScalarFieldEnum[]
  }

  /**
   * ApplicationFormField create
   */
  export type ApplicationFormFieldCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationFormField
     */
    select?: ApplicationFormFieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationFormField
     */
    omit?: ApplicationFormFieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationFormFieldInclude<ExtArgs> | null
    /**
     * The data needed to create a ApplicationFormField.
     */
    data: XOR<ApplicationFormFieldCreateInput, ApplicationFormFieldUncheckedCreateInput>
  }

  /**
   * ApplicationFormField createMany
   */
  export type ApplicationFormFieldCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApplicationFormFields.
     */
    data: ApplicationFormFieldCreateManyInput | ApplicationFormFieldCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ApplicationFormField createManyAndReturn
   */
  export type ApplicationFormFieldCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationFormField
     */
    select?: ApplicationFormFieldSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationFormField
     */
    omit?: ApplicationFormFieldOmit<ExtArgs> | null
    /**
     * The data used to create many ApplicationFormFields.
     */
    data: ApplicationFormFieldCreateManyInput | ApplicationFormFieldCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationFormFieldIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApplicationFormField update
   */
  export type ApplicationFormFieldUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationFormField
     */
    select?: ApplicationFormFieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationFormField
     */
    omit?: ApplicationFormFieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationFormFieldInclude<ExtArgs> | null
    /**
     * The data needed to update a ApplicationFormField.
     */
    data: XOR<ApplicationFormFieldUpdateInput, ApplicationFormFieldUncheckedUpdateInput>
    /**
     * Choose, which ApplicationFormField to update.
     */
    where: ApplicationFormFieldWhereUniqueInput
  }

  /**
   * ApplicationFormField updateMany
   */
  export type ApplicationFormFieldUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApplicationFormFields.
     */
    data: XOR<ApplicationFormFieldUpdateManyMutationInput, ApplicationFormFieldUncheckedUpdateManyInput>
    /**
     * Filter which ApplicationFormFields to update
     */
    where?: ApplicationFormFieldWhereInput
    /**
     * Limit how many ApplicationFormFields to update.
     */
    limit?: number
  }

  /**
   * ApplicationFormField updateManyAndReturn
   */
  export type ApplicationFormFieldUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationFormField
     */
    select?: ApplicationFormFieldSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationFormField
     */
    omit?: ApplicationFormFieldOmit<ExtArgs> | null
    /**
     * The data used to update ApplicationFormFields.
     */
    data: XOR<ApplicationFormFieldUpdateManyMutationInput, ApplicationFormFieldUncheckedUpdateManyInput>
    /**
     * Filter which ApplicationFormFields to update
     */
    where?: ApplicationFormFieldWhereInput
    /**
     * Limit how many ApplicationFormFields to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationFormFieldIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApplicationFormField upsert
   */
  export type ApplicationFormFieldUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationFormField
     */
    select?: ApplicationFormFieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationFormField
     */
    omit?: ApplicationFormFieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationFormFieldInclude<ExtArgs> | null
    /**
     * The filter to search for the ApplicationFormField to update in case it exists.
     */
    where: ApplicationFormFieldWhereUniqueInput
    /**
     * In case the ApplicationFormField found by the `where` argument doesn't exist, create a new ApplicationFormField with this data.
     */
    create: XOR<ApplicationFormFieldCreateInput, ApplicationFormFieldUncheckedCreateInput>
    /**
     * In case the ApplicationFormField was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationFormFieldUpdateInput, ApplicationFormFieldUncheckedUpdateInput>
  }

  /**
   * ApplicationFormField delete
   */
  export type ApplicationFormFieldDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationFormField
     */
    select?: ApplicationFormFieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationFormField
     */
    omit?: ApplicationFormFieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationFormFieldInclude<ExtArgs> | null
    /**
     * Filter which ApplicationFormField to delete.
     */
    where: ApplicationFormFieldWhereUniqueInput
  }

  /**
   * ApplicationFormField deleteMany
   */
  export type ApplicationFormFieldDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApplicationFormFields to delete
     */
    where?: ApplicationFormFieldWhereInput
    /**
     * Limit how many ApplicationFormFields to delete.
     */
    limit?: number
  }

  /**
   * ApplicationFormField.customQuestion
   */
  export type ApplicationFormField$customQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomQuestion
     */
    select?: CustomQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomQuestion
     */
    omit?: CustomQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomQuestionInclude<ExtArgs> | null
    where?: CustomQuestionWhereInput
  }

  /**
   * ApplicationFormField without action
   */
  export type ApplicationFormFieldDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationFormField
     */
    select?: ApplicationFormFieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationFormField
     */
    omit?: ApplicationFormFieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationFormFieldInclude<ExtArgs> | null
  }


  /**
   * Model CustomQuestion
   */

  export type AggregateCustomQuestion = {
    _count: CustomQuestionCountAggregateOutputType | null
    _min: CustomQuestionMinAggregateOutputType | null
    _max: CustomQuestionMaxAggregateOutputType | null
  }

  export type CustomQuestionMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    questionText: string | null
    responseType: $Enums.ResponseType | null
    visibility: $Enums.ResponseVisibility | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomQuestionMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    questionText: string | null
    responseType: $Enums.ResponseType | null
    visibility: $Enums.ResponseVisibility | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomQuestionCountAggregateOutputType = {
    id: number
    companyId: number
    questionText: number
    responseType: number
    options: number
    visibility: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomQuestionMinAggregateInputType = {
    id?: true
    companyId?: true
    questionText?: true
    responseType?: true
    visibility?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomQuestionMaxAggregateInputType = {
    id?: true
    companyId?: true
    questionText?: true
    responseType?: true
    visibility?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomQuestionCountAggregateInputType = {
    id?: true
    companyId?: true
    questionText?: true
    responseType?: true
    options?: true
    visibility?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomQuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomQuestion to aggregate.
     */
    where?: CustomQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomQuestions to fetch.
     */
    orderBy?: CustomQuestionOrderByWithRelationInput | CustomQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomQuestions
    **/
    _count?: true | CustomQuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomQuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomQuestionMaxAggregateInputType
  }

  export type GetCustomQuestionAggregateType<T extends CustomQuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomQuestion[P]>
      : GetScalarType<T[P], AggregateCustomQuestion[P]>
  }




  export type CustomQuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomQuestionWhereInput
    orderBy?: CustomQuestionOrderByWithAggregationInput | CustomQuestionOrderByWithAggregationInput[]
    by: CustomQuestionScalarFieldEnum[] | CustomQuestionScalarFieldEnum
    having?: CustomQuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomQuestionCountAggregateInputType | true
    _min?: CustomQuestionMinAggregateInputType
    _max?: CustomQuestionMaxAggregateInputType
  }

  export type CustomQuestionGroupByOutputType = {
    id: string
    companyId: string
    questionText: string
    responseType: $Enums.ResponseType
    options: JsonValue | null
    visibility: $Enums.ResponseVisibility
    createdAt: Date
    updatedAt: Date
    _count: CustomQuestionCountAggregateOutputType | null
    _min: CustomQuestionMinAggregateOutputType | null
    _max: CustomQuestionMaxAggregateOutputType | null
  }

  type GetCustomQuestionGroupByPayload<T extends CustomQuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomQuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomQuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomQuestionGroupByOutputType[P]>
            : GetScalarType<T[P], CustomQuestionGroupByOutputType[P]>
        }
      >
    >


  export type CustomQuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    questionText?: boolean
    responseType?: boolean
    options?: boolean
    visibility?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicationFormFields?: boolean | CustomQuestion$applicationFormFieldsArgs<ExtArgs>
    candidateAnswers?: boolean | CustomQuestion$candidateAnswersArgs<ExtArgs>
    _count?: boolean | CustomQuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customQuestion"]>

  export type CustomQuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    questionText?: boolean
    responseType?: boolean
    options?: boolean
    visibility?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["customQuestion"]>

  export type CustomQuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    questionText?: boolean
    responseType?: boolean
    options?: boolean
    visibility?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["customQuestion"]>

  export type CustomQuestionSelectScalar = {
    id?: boolean
    companyId?: boolean
    questionText?: boolean
    responseType?: boolean
    options?: boolean
    visibility?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomQuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "questionText" | "responseType" | "options" | "visibility" | "createdAt" | "updatedAt", ExtArgs["result"]["customQuestion"]>
  export type CustomQuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicationFormFields?: boolean | CustomQuestion$applicationFormFieldsArgs<ExtArgs>
    candidateAnswers?: boolean | CustomQuestion$candidateAnswersArgs<ExtArgs>
    _count?: boolean | CustomQuestionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomQuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CustomQuestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CustomQuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomQuestion"
    objects: {
      applicationFormFields: Prisma.$ApplicationFormFieldPayload<ExtArgs>[]
      candidateAnswers: Prisma.$CandidateAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      questionText: string
      responseType: $Enums.ResponseType
      options: Prisma.JsonValue | null
      visibility: $Enums.ResponseVisibility
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customQuestion"]>
    composites: {}
  }

  type CustomQuestionGetPayload<S extends boolean | null | undefined | CustomQuestionDefaultArgs> = $Result.GetResult<Prisma.$CustomQuestionPayload, S>

  type CustomQuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomQuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomQuestionCountAggregateInputType | true
    }

  export interface CustomQuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomQuestion'], meta: { name: 'CustomQuestion' } }
    /**
     * Find zero or one CustomQuestion that matches the filter.
     * @param {CustomQuestionFindUniqueArgs} args - Arguments to find a CustomQuestion
     * @example
     * // Get one CustomQuestion
     * const customQuestion = await prisma.customQuestion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomQuestionFindUniqueArgs>(args: SelectSubset<T, CustomQuestionFindUniqueArgs<ExtArgs>>): Prisma__CustomQuestionClient<$Result.GetResult<Prisma.$CustomQuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CustomQuestion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomQuestionFindUniqueOrThrowArgs} args - Arguments to find a CustomQuestion
     * @example
     * // Get one CustomQuestion
     * const customQuestion = await prisma.customQuestion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomQuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomQuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomQuestionClient<$Result.GetResult<Prisma.$CustomQuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomQuestion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomQuestionFindFirstArgs} args - Arguments to find a CustomQuestion
     * @example
     * // Get one CustomQuestion
     * const customQuestion = await prisma.customQuestion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomQuestionFindFirstArgs>(args?: SelectSubset<T, CustomQuestionFindFirstArgs<ExtArgs>>): Prisma__CustomQuestionClient<$Result.GetResult<Prisma.$CustomQuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomQuestion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomQuestionFindFirstOrThrowArgs} args - Arguments to find a CustomQuestion
     * @example
     * // Get one CustomQuestion
     * const customQuestion = await prisma.customQuestion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomQuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomQuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomQuestionClient<$Result.GetResult<Prisma.$CustomQuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CustomQuestions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomQuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomQuestions
     * const customQuestions = await prisma.customQuestion.findMany()
     * 
     * // Get first 10 CustomQuestions
     * const customQuestions = await prisma.customQuestion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customQuestionWithIdOnly = await prisma.customQuestion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomQuestionFindManyArgs>(args?: SelectSubset<T, CustomQuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomQuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CustomQuestion.
     * @param {CustomQuestionCreateArgs} args - Arguments to create a CustomQuestion.
     * @example
     * // Create one CustomQuestion
     * const CustomQuestion = await prisma.customQuestion.create({
     *   data: {
     *     // ... data to create a CustomQuestion
     *   }
     * })
     * 
     */
    create<T extends CustomQuestionCreateArgs>(args: SelectSubset<T, CustomQuestionCreateArgs<ExtArgs>>): Prisma__CustomQuestionClient<$Result.GetResult<Prisma.$CustomQuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CustomQuestions.
     * @param {CustomQuestionCreateManyArgs} args - Arguments to create many CustomQuestions.
     * @example
     * // Create many CustomQuestions
     * const customQuestion = await prisma.customQuestion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomQuestionCreateManyArgs>(args?: SelectSubset<T, CustomQuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomQuestions and returns the data saved in the database.
     * @param {CustomQuestionCreateManyAndReturnArgs} args - Arguments to create many CustomQuestions.
     * @example
     * // Create many CustomQuestions
     * const customQuestion = await prisma.customQuestion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomQuestions and only return the `id`
     * const customQuestionWithIdOnly = await prisma.customQuestion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomQuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomQuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomQuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CustomQuestion.
     * @param {CustomQuestionDeleteArgs} args - Arguments to delete one CustomQuestion.
     * @example
     * // Delete one CustomQuestion
     * const CustomQuestion = await prisma.customQuestion.delete({
     *   where: {
     *     // ... filter to delete one CustomQuestion
     *   }
     * })
     * 
     */
    delete<T extends CustomQuestionDeleteArgs>(args: SelectSubset<T, CustomQuestionDeleteArgs<ExtArgs>>): Prisma__CustomQuestionClient<$Result.GetResult<Prisma.$CustomQuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CustomQuestion.
     * @param {CustomQuestionUpdateArgs} args - Arguments to update one CustomQuestion.
     * @example
     * // Update one CustomQuestion
     * const customQuestion = await prisma.customQuestion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomQuestionUpdateArgs>(args: SelectSubset<T, CustomQuestionUpdateArgs<ExtArgs>>): Prisma__CustomQuestionClient<$Result.GetResult<Prisma.$CustomQuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CustomQuestions.
     * @param {CustomQuestionDeleteManyArgs} args - Arguments to filter CustomQuestions to delete.
     * @example
     * // Delete a few CustomQuestions
     * const { count } = await prisma.customQuestion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomQuestionDeleteManyArgs>(args?: SelectSubset<T, CustomQuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomQuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomQuestions
     * const customQuestion = await prisma.customQuestion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomQuestionUpdateManyArgs>(args: SelectSubset<T, CustomQuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomQuestions and returns the data updated in the database.
     * @param {CustomQuestionUpdateManyAndReturnArgs} args - Arguments to update many CustomQuestions.
     * @example
     * // Update many CustomQuestions
     * const customQuestion = await prisma.customQuestion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CustomQuestions and only return the `id`
     * const customQuestionWithIdOnly = await prisma.customQuestion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomQuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomQuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomQuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CustomQuestion.
     * @param {CustomQuestionUpsertArgs} args - Arguments to update or create a CustomQuestion.
     * @example
     * // Update or create a CustomQuestion
     * const customQuestion = await prisma.customQuestion.upsert({
     *   create: {
     *     // ... data to create a CustomQuestion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomQuestion we want to update
     *   }
     * })
     */
    upsert<T extends CustomQuestionUpsertArgs>(args: SelectSubset<T, CustomQuestionUpsertArgs<ExtArgs>>): Prisma__CustomQuestionClient<$Result.GetResult<Prisma.$CustomQuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CustomQuestions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomQuestionCountArgs} args - Arguments to filter CustomQuestions to count.
     * @example
     * // Count the number of CustomQuestions
     * const count = await prisma.customQuestion.count({
     *   where: {
     *     // ... the filter for the CustomQuestions we want to count
     *   }
     * })
    **/
    count<T extends CustomQuestionCountArgs>(
      args?: Subset<T, CustomQuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomQuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomQuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomQuestionAggregateArgs>(args: Subset<T, CustomQuestionAggregateArgs>): Prisma.PrismaPromise<GetCustomQuestionAggregateType<T>>

    /**
     * Group by CustomQuestion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomQuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomQuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomQuestionGroupByArgs['orderBy'] }
        : { orderBy?: CustomQuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomQuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomQuestion model
   */
  readonly fields: CustomQuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomQuestion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomQuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    applicationFormFields<T extends CustomQuestion$applicationFormFieldsArgs<ExtArgs> = {}>(args?: Subset<T, CustomQuestion$applicationFormFieldsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationFormFieldPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    candidateAnswers<T extends CustomQuestion$candidateAnswersArgs<ExtArgs> = {}>(args?: Subset<T, CustomQuestion$candidateAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomQuestion model
   */
  interface CustomQuestionFieldRefs {
    readonly id: FieldRef<"CustomQuestion", 'String'>
    readonly companyId: FieldRef<"CustomQuestion", 'String'>
    readonly questionText: FieldRef<"CustomQuestion", 'String'>
    readonly responseType: FieldRef<"CustomQuestion", 'ResponseType'>
    readonly options: FieldRef<"CustomQuestion", 'Json'>
    readonly visibility: FieldRef<"CustomQuestion", 'ResponseVisibility'>
    readonly createdAt: FieldRef<"CustomQuestion", 'DateTime'>
    readonly updatedAt: FieldRef<"CustomQuestion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CustomQuestion findUnique
   */
  export type CustomQuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomQuestion
     */
    select?: CustomQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomQuestion
     */
    omit?: CustomQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomQuestionInclude<ExtArgs> | null
    /**
     * Filter, which CustomQuestion to fetch.
     */
    where: CustomQuestionWhereUniqueInput
  }

  /**
   * CustomQuestion findUniqueOrThrow
   */
  export type CustomQuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomQuestion
     */
    select?: CustomQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomQuestion
     */
    omit?: CustomQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomQuestionInclude<ExtArgs> | null
    /**
     * Filter, which CustomQuestion to fetch.
     */
    where: CustomQuestionWhereUniqueInput
  }

  /**
   * CustomQuestion findFirst
   */
  export type CustomQuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomQuestion
     */
    select?: CustomQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomQuestion
     */
    omit?: CustomQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomQuestionInclude<ExtArgs> | null
    /**
     * Filter, which CustomQuestion to fetch.
     */
    where?: CustomQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomQuestions to fetch.
     */
    orderBy?: CustomQuestionOrderByWithRelationInput | CustomQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomQuestions.
     */
    cursor?: CustomQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomQuestions.
     */
    distinct?: CustomQuestionScalarFieldEnum | CustomQuestionScalarFieldEnum[]
  }

  /**
   * CustomQuestion findFirstOrThrow
   */
  export type CustomQuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomQuestion
     */
    select?: CustomQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomQuestion
     */
    omit?: CustomQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomQuestionInclude<ExtArgs> | null
    /**
     * Filter, which CustomQuestion to fetch.
     */
    where?: CustomQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomQuestions to fetch.
     */
    orderBy?: CustomQuestionOrderByWithRelationInput | CustomQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomQuestions.
     */
    cursor?: CustomQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomQuestions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomQuestions.
     */
    distinct?: CustomQuestionScalarFieldEnum | CustomQuestionScalarFieldEnum[]
  }

  /**
   * CustomQuestion findMany
   */
  export type CustomQuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomQuestion
     */
    select?: CustomQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomQuestion
     */
    omit?: CustomQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomQuestionInclude<ExtArgs> | null
    /**
     * Filter, which CustomQuestions to fetch.
     */
    where?: CustomQuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomQuestions to fetch.
     */
    orderBy?: CustomQuestionOrderByWithRelationInput | CustomQuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomQuestions.
     */
    cursor?: CustomQuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomQuestions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomQuestions.
     */
    skip?: number
    distinct?: CustomQuestionScalarFieldEnum | CustomQuestionScalarFieldEnum[]
  }

  /**
   * CustomQuestion create
   */
  export type CustomQuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomQuestion
     */
    select?: CustomQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomQuestion
     */
    omit?: CustomQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomQuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomQuestion.
     */
    data: XOR<CustomQuestionCreateInput, CustomQuestionUncheckedCreateInput>
  }

  /**
   * CustomQuestion createMany
   */
  export type CustomQuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomQuestions.
     */
    data: CustomQuestionCreateManyInput | CustomQuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomQuestion createManyAndReturn
   */
  export type CustomQuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomQuestion
     */
    select?: CustomQuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomQuestion
     */
    omit?: CustomQuestionOmit<ExtArgs> | null
    /**
     * The data used to create many CustomQuestions.
     */
    data: CustomQuestionCreateManyInput | CustomQuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomQuestion update
   */
  export type CustomQuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomQuestion
     */
    select?: CustomQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomQuestion
     */
    omit?: CustomQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomQuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomQuestion.
     */
    data: XOR<CustomQuestionUpdateInput, CustomQuestionUncheckedUpdateInput>
    /**
     * Choose, which CustomQuestion to update.
     */
    where: CustomQuestionWhereUniqueInput
  }

  /**
   * CustomQuestion updateMany
   */
  export type CustomQuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomQuestions.
     */
    data: XOR<CustomQuestionUpdateManyMutationInput, CustomQuestionUncheckedUpdateManyInput>
    /**
     * Filter which CustomQuestions to update
     */
    where?: CustomQuestionWhereInput
    /**
     * Limit how many CustomQuestions to update.
     */
    limit?: number
  }

  /**
   * CustomQuestion updateManyAndReturn
   */
  export type CustomQuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomQuestion
     */
    select?: CustomQuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomQuestion
     */
    omit?: CustomQuestionOmit<ExtArgs> | null
    /**
     * The data used to update CustomQuestions.
     */
    data: XOR<CustomQuestionUpdateManyMutationInput, CustomQuestionUncheckedUpdateManyInput>
    /**
     * Filter which CustomQuestions to update
     */
    where?: CustomQuestionWhereInput
    /**
     * Limit how many CustomQuestions to update.
     */
    limit?: number
  }

  /**
   * CustomQuestion upsert
   */
  export type CustomQuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomQuestion
     */
    select?: CustomQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomQuestion
     */
    omit?: CustomQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomQuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomQuestion to update in case it exists.
     */
    where: CustomQuestionWhereUniqueInput
    /**
     * In case the CustomQuestion found by the `where` argument doesn't exist, create a new CustomQuestion with this data.
     */
    create: XOR<CustomQuestionCreateInput, CustomQuestionUncheckedCreateInput>
    /**
     * In case the CustomQuestion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomQuestionUpdateInput, CustomQuestionUncheckedUpdateInput>
  }

  /**
   * CustomQuestion delete
   */
  export type CustomQuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomQuestion
     */
    select?: CustomQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomQuestion
     */
    omit?: CustomQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomQuestionInclude<ExtArgs> | null
    /**
     * Filter which CustomQuestion to delete.
     */
    where: CustomQuestionWhereUniqueInput
  }

  /**
   * CustomQuestion deleteMany
   */
  export type CustomQuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomQuestions to delete
     */
    where?: CustomQuestionWhereInput
    /**
     * Limit how many CustomQuestions to delete.
     */
    limit?: number
  }

  /**
   * CustomQuestion.applicationFormFields
   */
  export type CustomQuestion$applicationFormFieldsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationFormField
     */
    select?: ApplicationFormFieldSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicationFormField
     */
    omit?: ApplicationFormFieldOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationFormFieldInclude<ExtArgs> | null
    where?: ApplicationFormFieldWhereInput
    orderBy?: ApplicationFormFieldOrderByWithRelationInput | ApplicationFormFieldOrderByWithRelationInput[]
    cursor?: ApplicationFormFieldWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationFormFieldScalarFieldEnum | ApplicationFormFieldScalarFieldEnum[]
  }

  /**
   * CustomQuestion.candidateAnswers
   */
  export type CustomQuestion$candidateAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateAnswer
     */
    select?: CandidateAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateAnswer
     */
    omit?: CandidateAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateAnswerInclude<ExtArgs> | null
    where?: CandidateAnswerWhereInput
    orderBy?: CandidateAnswerOrderByWithRelationInput | CandidateAnswerOrderByWithRelationInput[]
    cursor?: CandidateAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidateAnswerScalarFieldEnum | CandidateAnswerScalarFieldEnum[]
  }

  /**
   * CustomQuestion without action
   */
  export type CustomQuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomQuestion
     */
    select?: CustomQuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomQuestion
     */
    omit?: CustomQuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomQuestionInclude<ExtArgs> | null
  }


  /**
   * Model Candidate
   */

  export type AggregateCandidate = {
    _count: CandidateCountAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  export type CandidateMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phoneNumber: string | null
    resumeUrl: string | null
    coverLetterText: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CandidateMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phoneNumber: string | null
    resumeUrl: string | null
    coverLetterText: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CandidateCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    phoneNumber: number
    resumeUrl: number
    coverLetterText: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CandidateMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    resumeUrl?: true
    coverLetterText?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CandidateMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    resumeUrl?: true
    coverLetterText?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CandidateCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    resumeUrl?: true
    coverLetterText?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CandidateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidate to aggregate.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Candidates
    **/
    _count?: true | CandidateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidateMaxAggregateInputType
  }

  export type GetCandidateAggregateType<T extends CandidateAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidate[P]>
      : GetScalarType<T[P], AggregateCandidate[P]>
  }




  export type CandidateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateWhereInput
    orderBy?: CandidateOrderByWithAggregationInput | CandidateOrderByWithAggregationInput[]
    by: CandidateScalarFieldEnum[] | CandidateScalarFieldEnum
    having?: CandidateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidateCountAggregateInputType | true
    _min?: CandidateMinAggregateInputType
    _max?: CandidateMaxAggregateInputType
  }

  export type CandidateGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string | null
    resumeUrl: string | null
    coverLetterText: string | null
    createdAt: Date
    updatedAt: Date
    _count: CandidateCountAggregateOutputType | null
    _min: CandidateMinAggregateOutputType | null
    _max: CandidateMaxAggregateOutputType | null
  }

  type GetCandidateGroupByPayload<T extends CandidateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidateGroupByOutputType[P]>
            : GetScalarType<T[P], CandidateGroupByOutputType[P]>
        }
      >
    >


  export type CandidateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phoneNumber?: boolean
    resumeUrl?: boolean
    coverLetterText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applications?: boolean | Candidate$applicationsArgs<ExtArgs>
    candidateAnswers?: boolean | Candidate$candidateAnswersArgs<ExtArgs>
    _count?: boolean | CandidateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidate"]>

  export type CandidateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phoneNumber?: boolean
    resumeUrl?: boolean
    coverLetterText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["candidate"]>

  export type CandidateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phoneNumber?: boolean
    resumeUrl?: boolean
    coverLetterText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["candidate"]>

  export type CandidateSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phoneNumber?: boolean
    resumeUrl?: boolean
    coverLetterText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CandidateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "email" | "phoneNumber" | "resumeUrl" | "coverLetterText" | "createdAt" | "updatedAt", ExtArgs["result"]["candidate"]>
  export type CandidateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | Candidate$applicationsArgs<ExtArgs>
    candidateAnswers?: boolean | Candidate$candidateAnswersArgs<ExtArgs>
    _count?: boolean | CandidateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CandidateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CandidateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CandidatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Candidate"
    objects: {
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
      candidateAnswers: Prisma.$CandidateAnswerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      email: string
      phoneNumber: string | null
      resumeUrl: string | null
      coverLetterText: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["candidate"]>
    composites: {}
  }

  type CandidateGetPayload<S extends boolean | null | undefined | CandidateDefaultArgs> = $Result.GetResult<Prisma.$CandidatePayload, S>

  type CandidateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CandidateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CandidateCountAggregateInputType | true
    }

  export interface CandidateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Candidate'], meta: { name: 'Candidate' } }
    /**
     * Find zero or one Candidate that matches the filter.
     * @param {CandidateFindUniqueArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CandidateFindUniqueArgs>(args: SelectSubset<T, CandidateFindUniqueArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Candidate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CandidateFindUniqueOrThrowArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CandidateFindUniqueOrThrowArgs>(args: SelectSubset<T, CandidateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Candidate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindFirstArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CandidateFindFirstArgs>(args?: SelectSubset<T, CandidateFindFirstArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Candidate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindFirstOrThrowArgs} args - Arguments to find a Candidate
     * @example
     * // Get one Candidate
     * const candidate = await prisma.candidate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CandidateFindFirstOrThrowArgs>(args?: SelectSubset<T, CandidateFindFirstOrThrowArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Candidates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Candidates
     * const candidates = await prisma.candidate.findMany()
     * 
     * // Get first 10 Candidates
     * const candidates = await prisma.candidate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidateWithIdOnly = await prisma.candidate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CandidateFindManyArgs>(args?: SelectSubset<T, CandidateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Candidate.
     * @param {CandidateCreateArgs} args - Arguments to create a Candidate.
     * @example
     * // Create one Candidate
     * const Candidate = await prisma.candidate.create({
     *   data: {
     *     // ... data to create a Candidate
     *   }
     * })
     * 
     */
    create<T extends CandidateCreateArgs>(args: SelectSubset<T, CandidateCreateArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Candidates.
     * @param {CandidateCreateManyArgs} args - Arguments to create many Candidates.
     * @example
     * // Create many Candidates
     * const candidate = await prisma.candidate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CandidateCreateManyArgs>(args?: SelectSubset<T, CandidateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Candidates and returns the data saved in the database.
     * @param {CandidateCreateManyAndReturnArgs} args - Arguments to create many Candidates.
     * @example
     * // Create many Candidates
     * const candidate = await prisma.candidate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Candidates and only return the `id`
     * const candidateWithIdOnly = await prisma.candidate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CandidateCreateManyAndReturnArgs>(args?: SelectSubset<T, CandidateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Candidate.
     * @param {CandidateDeleteArgs} args - Arguments to delete one Candidate.
     * @example
     * // Delete one Candidate
     * const Candidate = await prisma.candidate.delete({
     *   where: {
     *     // ... filter to delete one Candidate
     *   }
     * })
     * 
     */
    delete<T extends CandidateDeleteArgs>(args: SelectSubset<T, CandidateDeleteArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Candidate.
     * @param {CandidateUpdateArgs} args - Arguments to update one Candidate.
     * @example
     * // Update one Candidate
     * const candidate = await prisma.candidate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CandidateUpdateArgs>(args: SelectSubset<T, CandidateUpdateArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Candidates.
     * @param {CandidateDeleteManyArgs} args - Arguments to filter Candidates to delete.
     * @example
     * // Delete a few Candidates
     * const { count } = await prisma.candidate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CandidateDeleteManyArgs>(args?: SelectSubset<T, CandidateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Candidates
     * const candidate = await prisma.candidate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CandidateUpdateManyArgs>(args: SelectSubset<T, CandidateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Candidates and returns the data updated in the database.
     * @param {CandidateUpdateManyAndReturnArgs} args - Arguments to update many Candidates.
     * @example
     * // Update many Candidates
     * const candidate = await prisma.candidate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Candidates and only return the `id`
     * const candidateWithIdOnly = await prisma.candidate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CandidateUpdateManyAndReturnArgs>(args: SelectSubset<T, CandidateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Candidate.
     * @param {CandidateUpsertArgs} args - Arguments to update or create a Candidate.
     * @example
     * // Update or create a Candidate
     * const candidate = await prisma.candidate.upsert({
     *   create: {
     *     // ... data to create a Candidate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Candidate we want to update
     *   }
     * })
     */
    upsert<T extends CandidateUpsertArgs>(args: SelectSubset<T, CandidateUpsertArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Candidates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateCountArgs} args - Arguments to filter Candidates to count.
     * @example
     * // Count the number of Candidates
     * const count = await prisma.candidate.count({
     *   where: {
     *     // ... the filter for the Candidates we want to count
     *   }
     * })
    **/
    count<T extends CandidateCountArgs>(
      args?: Subset<T, CandidateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidateAggregateArgs>(args: Subset<T, CandidateAggregateArgs>): Prisma.PrismaPromise<GetCandidateAggregateType<T>>

    /**
     * Group by Candidate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidateGroupByArgs['orderBy'] }
        : { orderBy?: CandidateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Candidate model
   */
  readonly fields: CandidateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Candidate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    applications<T extends Candidate$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    candidateAnswers<T extends Candidate$candidateAnswersArgs<ExtArgs> = {}>(args?: Subset<T, Candidate$candidateAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Candidate model
   */
  interface CandidateFieldRefs {
    readonly id: FieldRef<"Candidate", 'String'>
    readonly firstName: FieldRef<"Candidate", 'String'>
    readonly lastName: FieldRef<"Candidate", 'String'>
    readonly email: FieldRef<"Candidate", 'String'>
    readonly phoneNumber: FieldRef<"Candidate", 'String'>
    readonly resumeUrl: FieldRef<"Candidate", 'String'>
    readonly coverLetterText: FieldRef<"Candidate", 'String'>
    readonly createdAt: FieldRef<"Candidate", 'DateTime'>
    readonly updatedAt: FieldRef<"Candidate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Candidate findUnique
   */
  export type CandidateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate findUniqueOrThrow
   */
  export type CandidateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate findFirst
   */
  export type CandidateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidates.
     */
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate findFirstOrThrow
   */
  export type CandidateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidate to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Candidates.
     */
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate findMany
   */
  export type CandidateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter, which Candidates to fetch.
     */
    where?: CandidateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Candidates to fetch.
     */
    orderBy?: CandidateOrderByWithRelationInput | CandidateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Candidates.
     */
    cursor?: CandidateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Candidates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Candidates.
     */
    skip?: number
    distinct?: CandidateScalarFieldEnum | CandidateScalarFieldEnum[]
  }

  /**
   * Candidate create
   */
  export type CandidateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The data needed to create a Candidate.
     */
    data: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
  }

  /**
   * Candidate createMany
   */
  export type CandidateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Candidates.
     */
    data: CandidateCreateManyInput | CandidateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Candidate createManyAndReturn
   */
  export type CandidateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * The data used to create many Candidates.
     */
    data: CandidateCreateManyInput | CandidateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Candidate update
   */
  export type CandidateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The data needed to update a Candidate.
     */
    data: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
    /**
     * Choose, which Candidate to update.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate updateMany
   */
  export type CandidateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Candidates.
     */
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyInput>
    /**
     * Filter which Candidates to update
     */
    where?: CandidateWhereInput
    /**
     * Limit how many Candidates to update.
     */
    limit?: number
  }

  /**
   * Candidate updateManyAndReturn
   */
  export type CandidateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * The data used to update Candidates.
     */
    data: XOR<CandidateUpdateManyMutationInput, CandidateUncheckedUpdateManyInput>
    /**
     * Filter which Candidates to update
     */
    where?: CandidateWhereInput
    /**
     * Limit how many Candidates to update.
     */
    limit?: number
  }

  /**
   * Candidate upsert
   */
  export type CandidateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * The filter to search for the Candidate to update in case it exists.
     */
    where: CandidateWhereUniqueInput
    /**
     * In case the Candidate found by the `where` argument doesn't exist, create a new Candidate with this data.
     */
    create: XOR<CandidateCreateInput, CandidateUncheckedCreateInput>
    /**
     * In case the Candidate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidateUpdateInput, CandidateUncheckedUpdateInput>
  }

  /**
   * Candidate delete
   */
  export type CandidateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
    /**
     * Filter which Candidate to delete.
     */
    where: CandidateWhereUniqueInput
  }

  /**
   * Candidate deleteMany
   */
  export type CandidateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Candidates to delete
     */
    where?: CandidateWhereInput
    /**
     * Limit how many Candidates to delete.
     */
    limit?: number
  }

  /**
   * Candidate.applications
   */
  export type Candidate$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Candidate.candidateAnswers
   */
  export type Candidate$candidateAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateAnswer
     */
    select?: CandidateAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateAnswer
     */
    omit?: CandidateAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateAnswerInclude<ExtArgs> | null
    where?: CandidateAnswerWhereInput
    orderBy?: CandidateAnswerOrderByWithRelationInput | CandidateAnswerOrderByWithRelationInput[]
    cursor?: CandidateAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidateAnswerScalarFieldEnum | CandidateAnswerScalarFieldEnum[]
  }

  /**
   * Candidate without action
   */
  export type CandidateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Candidate
     */
    select?: CandidateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Candidate
     */
    omit?: CandidateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateInclude<ExtArgs> | null
  }


  /**
   * Model Application
   */

  export type AggregateApplication = {
    _count: ApplicationCountAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  export type ApplicationMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    candidateId: string | null
    appliedAt: Date | null
    currentStageId: string | null
    status: $Enums.ApplicationStatus | null
    disqualificationReason: string | null
    archivedAt: Date | null
    hiredAt: Date | null
    source: string | null
  }

  export type ApplicationMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    candidateId: string | null
    appliedAt: Date | null
    currentStageId: string | null
    status: $Enums.ApplicationStatus | null
    disqualificationReason: string | null
    archivedAt: Date | null
    hiredAt: Date | null
    source: string | null
  }

  export type ApplicationCountAggregateOutputType = {
    id: number
    jobId: number
    candidateId: number
    appliedAt: number
    currentStageId: number
    status: number
    disqualificationReason: number
    archivedAt: number
    hiredAt: number
    source: number
    _all: number
  }


  export type ApplicationMinAggregateInputType = {
    id?: true
    jobId?: true
    candidateId?: true
    appliedAt?: true
    currentStageId?: true
    status?: true
    disqualificationReason?: true
    archivedAt?: true
    hiredAt?: true
    source?: true
  }

  export type ApplicationMaxAggregateInputType = {
    id?: true
    jobId?: true
    candidateId?: true
    appliedAt?: true
    currentStageId?: true
    status?: true
    disqualificationReason?: true
    archivedAt?: true
    hiredAt?: true
    source?: true
  }

  export type ApplicationCountAggregateInputType = {
    id?: true
    jobId?: true
    candidateId?: true
    appliedAt?: true
    currentStageId?: true
    status?: true
    disqualificationReason?: true
    archivedAt?: true
    hiredAt?: true
    source?: true
    _all?: true
  }

  export type ApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Application to aggregate.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Applications
    **/
    _count?: true | ApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationMaxAggregateInputType
  }

  export type GetApplicationAggregateType<T extends ApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplication[P]>
      : GetScalarType<T[P], AggregateApplication[P]>
  }




  export type ApplicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithAggregationInput | ApplicationOrderByWithAggregationInput[]
    by: ApplicationScalarFieldEnum[] | ApplicationScalarFieldEnum
    having?: ApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationCountAggregateInputType | true
    _min?: ApplicationMinAggregateInputType
    _max?: ApplicationMaxAggregateInputType
  }

  export type ApplicationGroupByOutputType = {
    id: string
    jobId: string
    candidateId: string
    appliedAt: Date
    currentStageId: string | null
    status: $Enums.ApplicationStatus
    disqualificationReason: string | null
    archivedAt: Date | null
    hiredAt: Date | null
    source: string | null
    _count: ApplicationCountAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  type GetApplicationGroupByPayload<T extends ApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    candidateId?: boolean
    appliedAt?: boolean
    currentStageId?: boolean
    status?: boolean
    disqualificationReason?: boolean
    archivedAt?: boolean
    hiredAt?: boolean
    source?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    candidateAnswers?: boolean | Application$candidateAnswersArgs<ExtArgs>
    candidateRatings?: boolean | Application$candidateRatingsArgs<ExtArgs>
    messages?: boolean | Application$messagesArgs<ExtArgs>
    _count?: boolean | ApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    candidateId?: boolean
    appliedAt?: boolean
    currentStageId?: boolean
    status?: boolean
    disqualificationReason?: boolean
    archivedAt?: boolean
    hiredAt?: boolean
    source?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    candidateId?: boolean
    appliedAt?: boolean
    currentStageId?: boolean
    status?: boolean
    disqualificationReason?: boolean
    archivedAt?: boolean
    hiredAt?: boolean
    source?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>

  export type ApplicationSelectScalar = {
    id?: boolean
    jobId?: boolean
    candidateId?: boolean
    appliedAt?: boolean
    currentStageId?: boolean
    status?: boolean
    disqualificationReason?: boolean
    archivedAt?: boolean
    hiredAt?: boolean
    source?: boolean
  }

  export type ApplicationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "candidateId" | "appliedAt" | "currentStageId" | "status" | "disqualificationReason" | "archivedAt" | "hiredAt" | "source", ExtArgs["result"]["application"]>
  export type ApplicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
    candidateAnswers?: boolean | Application$candidateAnswersArgs<ExtArgs>
    candidateRatings?: boolean | Application$candidateRatingsArgs<ExtArgs>
    messages?: boolean | Application$messagesArgs<ExtArgs>
    _count?: boolean | ApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ApplicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type ApplicationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }

  export type $ApplicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Application"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
      candidate: Prisma.$CandidatePayload<ExtArgs>
      candidateAnswers: Prisma.$CandidateAnswerPayload<ExtArgs>[]
      candidateRatings: Prisma.$CandidateRatingPayload<ExtArgs>[]
      messages: Prisma.$MessageThreadPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      candidateId: string
      appliedAt: Date
      currentStageId: string | null
      status: $Enums.ApplicationStatus
      disqualificationReason: string | null
      archivedAt: Date | null
      hiredAt: Date | null
      source: string | null
    }, ExtArgs["result"]["application"]>
    composites: {}
  }

  type ApplicationGetPayload<S extends boolean | null | undefined | ApplicationDefaultArgs> = $Result.GetResult<Prisma.$ApplicationPayload, S>

  type ApplicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApplicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApplicationCountAggregateInputType | true
    }

  export interface ApplicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Application'], meta: { name: 'Application' } }
    /**
     * Find zero or one Application that matches the filter.
     * @param {ApplicationFindUniqueArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicationFindUniqueArgs>(args: SelectSubset<T, ApplicationFindUniqueArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Application that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApplicationFindUniqueOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicationFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Application that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicationFindFirstArgs>(args?: SelectSubset<T, ApplicationFindFirstArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Application that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicationFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Applications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applications
     * const applications = await prisma.application.findMany()
     * 
     * // Get first 10 Applications
     * const applications = await prisma.application.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationWithIdOnly = await prisma.application.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicationFindManyArgs>(args?: SelectSubset<T, ApplicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Application.
     * @param {ApplicationCreateArgs} args - Arguments to create a Application.
     * @example
     * // Create one Application
     * const Application = await prisma.application.create({
     *   data: {
     *     // ... data to create a Application
     *   }
     * })
     * 
     */
    create<T extends ApplicationCreateArgs>(args: SelectSubset<T, ApplicationCreateArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Applications.
     * @param {ApplicationCreateManyArgs} args - Arguments to create many Applications.
     * @example
     * // Create many Applications
     * const application = await prisma.application.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicationCreateManyArgs>(args?: SelectSubset<T, ApplicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Applications and returns the data saved in the database.
     * @param {ApplicationCreateManyAndReturnArgs} args - Arguments to create many Applications.
     * @example
     * // Create many Applications
     * const application = await prisma.application.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Applications and only return the `id`
     * const applicationWithIdOnly = await prisma.application.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApplicationCreateManyAndReturnArgs>(args?: SelectSubset<T, ApplicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Application.
     * @param {ApplicationDeleteArgs} args - Arguments to delete one Application.
     * @example
     * // Delete one Application
     * const Application = await prisma.application.delete({
     *   where: {
     *     // ... filter to delete one Application
     *   }
     * })
     * 
     */
    delete<T extends ApplicationDeleteArgs>(args: SelectSubset<T, ApplicationDeleteArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Application.
     * @param {ApplicationUpdateArgs} args - Arguments to update one Application.
     * @example
     * // Update one Application
     * const application = await prisma.application.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicationUpdateArgs>(args: SelectSubset<T, ApplicationUpdateArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Applications.
     * @param {ApplicationDeleteManyArgs} args - Arguments to filter Applications to delete.
     * @example
     * // Delete a few Applications
     * const { count } = await prisma.application.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicationDeleteManyArgs>(args?: SelectSubset<T, ApplicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicationUpdateManyArgs>(args: SelectSubset<T, ApplicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications and returns the data updated in the database.
     * @param {ApplicationUpdateManyAndReturnArgs} args - Arguments to update many Applications.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Applications and only return the `id`
     * const applicationWithIdOnly = await prisma.application.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ApplicationUpdateManyAndReturnArgs>(args: SelectSubset<T, ApplicationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Application.
     * @param {ApplicationUpsertArgs} args - Arguments to update or create a Application.
     * @example
     * // Update or create a Application
     * const application = await prisma.application.upsert({
     *   create: {
     *     // ... data to create a Application
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Application we want to update
     *   }
     * })
     */
    upsert<T extends ApplicationUpsertArgs>(args: SelectSubset<T, ApplicationUpsertArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationCountArgs} args - Arguments to filter Applications to count.
     * @example
     * // Count the number of Applications
     * const count = await prisma.application.count({
     *   where: {
     *     // ... the filter for the Applications we want to count
     *   }
     * })
    **/
    count<T extends ApplicationCountArgs>(
      args?: Subset<T, ApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationAggregateArgs>(args: Subset<T, ApplicationAggregateArgs>): Prisma.PrismaPromise<GetApplicationAggregateType<T>>

    /**
     * Group by Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Application model
   */
  readonly fields: ApplicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Application.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    candidateAnswers<T extends Application$candidateAnswersArgs<ExtArgs> = {}>(args?: Subset<T, Application$candidateAnswersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    candidateRatings<T extends Application$candidateRatingsArgs<ExtArgs> = {}>(args?: Subset<T, Application$candidateRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateRatingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messages<T extends Application$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Application$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Application model
   */
  interface ApplicationFieldRefs {
    readonly id: FieldRef<"Application", 'String'>
    readonly jobId: FieldRef<"Application", 'String'>
    readonly candidateId: FieldRef<"Application", 'String'>
    readonly appliedAt: FieldRef<"Application", 'DateTime'>
    readonly currentStageId: FieldRef<"Application", 'String'>
    readonly status: FieldRef<"Application", 'ApplicationStatus'>
    readonly disqualificationReason: FieldRef<"Application", 'String'>
    readonly archivedAt: FieldRef<"Application", 'DateTime'>
    readonly hiredAt: FieldRef<"Application", 'DateTime'>
    readonly source: FieldRef<"Application", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Application findUnique
   */
  export type ApplicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findUniqueOrThrow
   */
  export type ApplicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findFirst
   */
  export type ApplicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application findFirstOrThrow
   */
  export type ApplicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application findMany
   */
  export type ApplicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Applications to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application create
   */
  export type ApplicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to create a Application.
     */
    data: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
  }

  /**
   * Application createMany
   */
  export type ApplicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Application createManyAndReturn
   */
  export type ApplicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Application update
   */
  export type ApplicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to update a Application.
     */
    data: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
    /**
     * Choose, which Application to update.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application updateMany
   */
  export type ApplicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
    /**
     * Limit how many Applications to update.
     */
    limit?: number
  }

  /**
   * Application updateManyAndReturn
   */
  export type ApplicationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
    /**
     * Limit how many Applications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Application upsert
   */
  export type ApplicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The filter to search for the Application to update in case it exists.
     */
    where: ApplicationWhereUniqueInput
    /**
     * In case the Application found by the `where` argument doesn't exist, create a new Application with this data.
     */
    create: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
    /**
     * In case the Application was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
  }

  /**
   * Application delete
   */
  export type ApplicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter which Application to delete.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application deleteMany
   */
  export type ApplicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Applications to delete
     */
    where?: ApplicationWhereInput
    /**
     * Limit how many Applications to delete.
     */
    limit?: number
  }

  /**
   * Application.candidateAnswers
   */
  export type Application$candidateAnswersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateAnswer
     */
    select?: CandidateAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateAnswer
     */
    omit?: CandidateAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateAnswerInclude<ExtArgs> | null
    where?: CandidateAnswerWhereInput
    orderBy?: CandidateAnswerOrderByWithRelationInput | CandidateAnswerOrderByWithRelationInput[]
    cursor?: CandidateAnswerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidateAnswerScalarFieldEnum | CandidateAnswerScalarFieldEnum[]
  }

  /**
   * Application.candidateRatings
   */
  export type Application$candidateRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateRating
     */
    select?: CandidateRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateRating
     */
    omit?: CandidateRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateRatingInclude<ExtArgs> | null
    where?: CandidateRatingWhereInput
    orderBy?: CandidateRatingOrderByWithRelationInput | CandidateRatingOrderByWithRelationInput[]
    cursor?: CandidateRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidateRatingScalarFieldEnum | CandidateRatingScalarFieldEnum[]
  }

  /**
   * Application.messages
   */
  export type Application$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    where?: MessageThreadWhereInput
    orderBy?: MessageThreadOrderByWithRelationInput | MessageThreadOrderByWithRelationInput[]
    cursor?: MessageThreadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageThreadScalarFieldEnum | MessageThreadScalarFieldEnum[]
  }

  /**
   * Application without action
   */
  export type ApplicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
  }


  /**
   * Model CandidateAnswer
   */

  export type AggregateCandidateAnswer = {
    _count: CandidateAnswerCountAggregateOutputType | null
    _min: CandidateAnswerMinAggregateOutputType | null
    _max: CandidateAnswerMaxAggregateOutputType | null
  }

  export type CandidateAnswerMinAggregateOutputType = {
    id: string | null
    applicationId: string | null
    customQuestionId: string | null
    answerText: string | null
    answerFileUrl: string | null
    answeredAt: Date | null
    candidateId: string | null
  }

  export type CandidateAnswerMaxAggregateOutputType = {
    id: string | null
    applicationId: string | null
    customQuestionId: string | null
    answerText: string | null
    answerFileUrl: string | null
    answeredAt: Date | null
    candidateId: string | null
  }

  export type CandidateAnswerCountAggregateOutputType = {
    id: number
    applicationId: number
    customQuestionId: number
    answerText: number
    answerFileUrl: number
    answeredAt: number
    candidateId: number
    _all: number
  }


  export type CandidateAnswerMinAggregateInputType = {
    id?: true
    applicationId?: true
    customQuestionId?: true
    answerText?: true
    answerFileUrl?: true
    answeredAt?: true
    candidateId?: true
  }

  export type CandidateAnswerMaxAggregateInputType = {
    id?: true
    applicationId?: true
    customQuestionId?: true
    answerText?: true
    answerFileUrl?: true
    answeredAt?: true
    candidateId?: true
  }

  export type CandidateAnswerCountAggregateInputType = {
    id?: true
    applicationId?: true
    customQuestionId?: true
    answerText?: true
    answerFileUrl?: true
    answeredAt?: true
    candidateId?: true
    _all?: true
  }

  export type CandidateAnswerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidateAnswer to aggregate.
     */
    where?: CandidateAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateAnswers to fetch.
     */
    orderBy?: CandidateAnswerOrderByWithRelationInput | CandidateAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidateAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CandidateAnswers
    **/
    _count?: true | CandidateAnswerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidateAnswerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidateAnswerMaxAggregateInputType
  }

  export type GetCandidateAnswerAggregateType<T extends CandidateAnswerAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidateAnswer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidateAnswer[P]>
      : GetScalarType<T[P], AggregateCandidateAnswer[P]>
  }




  export type CandidateAnswerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateAnswerWhereInput
    orderBy?: CandidateAnswerOrderByWithAggregationInput | CandidateAnswerOrderByWithAggregationInput[]
    by: CandidateAnswerScalarFieldEnum[] | CandidateAnswerScalarFieldEnum
    having?: CandidateAnswerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidateAnswerCountAggregateInputType | true
    _min?: CandidateAnswerMinAggregateInputType
    _max?: CandidateAnswerMaxAggregateInputType
  }

  export type CandidateAnswerGroupByOutputType = {
    id: string
    applicationId: string
    customQuestionId: string
    answerText: string | null
    answerFileUrl: string | null
    answeredAt: Date
    candidateId: string
    _count: CandidateAnswerCountAggregateOutputType | null
    _min: CandidateAnswerMinAggregateOutputType | null
    _max: CandidateAnswerMaxAggregateOutputType | null
  }

  type GetCandidateAnswerGroupByPayload<T extends CandidateAnswerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidateAnswerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidateAnswerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidateAnswerGroupByOutputType[P]>
            : GetScalarType<T[P], CandidateAnswerGroupByOutputType[P]>
        }
      >
    >


  export type CandidateAnswerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    customQuestionId?: boolean
    answerText?: boolean
    answerFileUrl?: boolean
    answeredAt?: boolean
    candidateId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    customQuestion?: boolean | CustomQuestionDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidateAnswer"]>

  export type CandidateAnswerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    customQuestionId?: boolean
    answerText?: boolean
    answerFileUrl?: boolean
    answeredAt?: boolean
    candidateId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    customQuestion?: boolean | CustomQuestionDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidateAnswer"]>

  export type CandidateAnswerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    customQuestionId?: boolean
    answerText?: boolean
    answerFileUrl?: boolean
    answeredAt?: boolean
    candidateId?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    customQuestion?: boolean | CustomQuestionDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidateAnswer"]>

  export type CandidateAnswerSelectScalar = {
    id?: boolean
    applicationId?: boolean
    customQuestionId?: boolean
    answerText?: boolean
    answerFileUrl?: boolean
    answeredAt?: boolean
    candidateId?: boolean
  }

  export type CandidateAnswerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "applicationId" | "customQuestionId" | "answerText" | "answerFileUrl" | "answeredAt" | "candidateId", ExtArgs["result"]["candidateAnswer"]>
  export type CandidateAnswerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    customQuestion?: boolean | CustomQuestionDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type CandidateAnswerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    customQuestion?: boolean | CustomQuestionDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }
  export type CandidateAnswerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    customQuestion?: boolean | CustomQuestionDefaultArgs<ExtArgs>
    candidate?: boolean | CandidateDefaultArgs<ExtArgs>
  }

  export type $CandidateAnswerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CandidateAnswer"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
      customQuestion: Prisma.$CustomQuestionPayload<ExtArgs>
      candidate: Prisma.$CandidatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      applicationId: string
      customQuestionId: string
      answerText: string | null
      answerFileUrl: string | null
      answeredAt: Date
      candidateId: string
    }, ExtArgs["result"]["candidateAnswer"]>
    composites: {}
  }

  type CandidateAnswerGetPayload<S extends boolean | null | undefined | CandidateAnswerDefaultArgs> = $Result.GetResult<Prisma.$CandidateAnswerPayload, S>

  type CandidateAnswerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CandidateAnswerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CandidateAnswerCountAggregateInputType | true
    }

  export interface CandidateAnswerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CandidateAnswer'], meta: { name: 'CandidateAnswer' } }
    /**
     * Find zero or one CandidateAnswer that matches the filter.
     * @param {CandidateAnswerFindUniqueArgs} args - Arguments to find a CandidateAnswer
     * @example
     * // Get one CandidateAnswer
     * const candidateAnswer = await prisma.candidateAnswer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CandidateAnswerFindUniqueArgs>(args: SelectSubset<T, CandidateAnswerFindUniqueArgs<ExtArgs>>): Prisma__CandidateAnswerClient<$Result.GetResult<Prisma.$CandidateAnswerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CandidateAnswer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CandidateAnswerFindUniqueOrThrowArgs} args - Arguments to find a CandidateAnswer
     * @example
     * // Get one CandidateAnswer
     * const candidateAnswer = await prisma.candidateAnswer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CandidateAnswerFindUniqueOrThrowArgs>(args: SelectSubset<T, CandidateAnswerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CandidateAnswerClient<$Result.GetResult<Prisma.$CandidateAnswerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CandidateAnswer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateAnswerFindFirstArgs} args - Arguments to find a CandidateAnswer
     * @example
     * // Get one CandidateAnswer
     * const candidateAnswer = await prisma.candidateAnswer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CandidateAnswerFindFirstArgs>(args?: SelectSubset<T, CandidateAnswerFindFirstArgs<ExtArgs>>): Prisma__CandidateAnswerClient<$Result.GetResult<Prisma.$CandidateAnswerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CandidateAnswer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateAnswerFindFirstOrThrowArgs} args - Arguments to find a CandidateAnswer
     * @example
     * // Get one CandidateAnswer
     * const candidateAnswer = await prisma.candidateAnswer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CandidateAnswerFindFirstOrThrowArgs>(args?: SelectSubset<T, CandidateAnswerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CandidateAnswerClient<$Result.GetResult<Prisma.$CandidateAnswerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CandidateAnswers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateAnswerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CandidateAnswers
     * const candidateAnswers = await prisma.candidateAnswer.findMany()
     * 
     * // Get first 10 CandidateAnswers
     * const candidateAnswers = await prisma.candidateAnswer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidateAnswerWithIdOnly = await prisma.candidateAnswer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CandidateAnswerFindManyArgs>(args?: SelectSubset<T, CandidateAnswerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateAnswerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CandidateAnswer.
     * @param {CandidateAnswerCreateArgs} args - Arguments to create a CandidateAnswer.
     * @example
     * // Create one CandidateAnswer
     * const CandidateAnswer = await prisma.candidateAnswer.create({
     *   data: {
     *     // ... data to create a CandidateAnswer
     *   }
     * })
     * 
     */
    create<T extends CandidateAnswerCreateArgs>(args: SelectSubset<T, CandidateAnswerCreateArgs<ExtArgs>>): Prisma__CandidateAnswerClient<$Result.GetResult<Prisma.$CandidateAnswerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CandidateAnswers.
     * @param {CandidateAnswerCreateManyArgs} args - Arguments to create many CandidateAnswers.
     * @example
     * // Create many CandidateAnswers
     * const candidateAnswer = await prisma.candidateAnswer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CandidateAnswerCreateManyArgs>(args?: SelectSubset<T, CandidateAnswerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CandidateAnswers and returns the data saved in the database.
     * @param {CandidateAnswerCreateManyAndReturnArgs} args - Arguments to create many CandidateAnswers.
     * @example
     * // Create many CandidateAnswers
     * const candidateAnswer = await prisma.candidateAnswer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CandidateAnswers and only return the `id`
     * const candidateAnswerWithIdOnly = await prisma.candidateAnswer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CandidateAnswerCreateManyAndReturnArgs>(args?: SelectSubset<T, CandidateAnswerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateAnswerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CandidateAnswer.
     * @param {CandidateAnswerDeleteArgs} args - Arguments to delete one CandidateAnswer.
     * @example
     * // Delete one CandidateAnswer
     * const CandidateAnswer = await prisma.candidateAnswer.delete({
     *   where: {
     *     // ... filter to delete one CandidateAnswer
     *   }
     * })
     * 
     */
    delete<T extends CandidateAnswerDeleteArgs>(args: SelectSubset<T, CandidateAnswerDeleteArgs<ExtArgs>>): Prisma__CandidateAnswerClient<$Result.GetResult<Prisma.$CandidateAnswerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CandidateAnswer.
     * @param {CandidateAnswerUpdateArgs} args - Arguments to update one CandidateAnswer.
     * @example
     * // Update one CandidateAnswer
     * const candidateAnswer = await prisma.candidateAnswer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CandidateAnswerUpdateArgs>(args: SelectSubset<T, CandidateAnswerUpdateArgs<ExtArgs>>): Prisma__CandidateAnswerClient<$Result.GetResult<Prisma.$CandidateAnswerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CandidateAnswers.
     * @param {CandidateAnswerDeleteManyArgs} args - Arguments to filter CandidateAnswers to delete.
     * @example
     * // Delete a few CandidateAnswers
     * const { count } = await prisma.candidateAnswer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CandidateAnswerDeleteManyArgs>(args?: SelectSubset<T, CandidateAnswerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidateAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateAnswerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CandidateAnswers
     * const candidateAnswer = await prisma.candidateAnswer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CandidateAnswerUpdateManyArgs>(args: SelectSubset<T, CandidateAnswerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidateAnswers and returns the data updated in the database.
     * @param {CandidateAnswerUpdateManyAndReturnArgs} args - Arguments to update many CandidateAnswers.
     * @example
     * // Update many CandidateAnswers
     * const candidateAnswer = await prisma.candidateAnswer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CandidateAnswers and only return the `id`
     * const candidateAnswerWithIdOnly = await prisma.candidateAnswer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CandidateAnswerUpdateManyAndReturnArgs>(args: SelectSubset<T, CandidateAnswerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateAnswerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CandidateAnswer.
     * @param {CandidateAnswerUpsertArgs} args - Arguments to update or create a CandidateAnswer.
     * @example
     * // Update or create a CandidateAnswer
     * const candidateAnswer = await prisma.candidateAnswer.upsert({
     *   create: {
     *     // ... data to create a CandidateAnswer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CandidateAnswer we want to update
     *   }
     * })
     */
    upsert<T extends CandidateAnswerUpsertArgs>(args: SelectSubset<T, CandidateAnswerUpsertArgs<ExtArgs>>): Prisma__CandidateAnswerClient<$Result.GetResult<Prisma.$CandidateAnswerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CandidateAnswers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateAnswerCountArgs} args - Arguments to filter CandidateAnswers to count.
     * @example
     * // Count the number of CandidateAnswers
     * const count = await prisma.candidateAnswer.count({
     *   where: {
     *     // ... the filter for the CandidateAnswers we want to count
     *   }
     * })
    **/
    count<T extends CandidateAnswerCountArgs>(
      args?: Subset<T, CandidateAnswerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidateAnswerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CandidateAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateAnswerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidateAnswerAggregateArgs>(args: Subset<T, CandidateAnswerAggregateArgs>): Prisma.PrismaPromise<GetCandidateAnswerAggregateType<T>>

    /**
     * Group by CandidateAnswer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateAnswerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidateAnswerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidateAnswerGroupByArgs['orderBy'] }
        : { orderBy?: CandidateAnswerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidateAnswerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateAnswerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CandidateAnswer model
   */
  readonly fields: CandidateAnswerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CandidateAnswer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidateAnswerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    customQuestion<T extends CustomQuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomQuestionDefaultArgs<ExtArgs>>): Prisma__CustomQuestionClient<$Result.GetResult<Prisma.$CustomQuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    candidate<T extends CandidateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateDefaultArgs<ExtArgs>>): Prisma__CandidateClient<$Result.GetResult<Prisma.$CandidatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CandidateAnswer model
   */
  interface CandidateAnswerFieldRefs {
    readonly id: FieldRef<"CandidateAnswer", 'String'>
    readonly applicationId: FieldRef<"CandidateAnswer", 'String'>
    readonly customQuestionId: FieldRef<"CandidateAnswer", 'String'>
    readonly answerText: FieldRef<"CandidateAnswer", 'String'>
    readonly answerFileUrl: FieldRef<"CandidateAnswer", 'String'>
    readonly answeredAt: FieldRef<"CandidateAnswer", 'DateTime'>
    readonly candidateId: FieldRef<"CandidateAnswer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CandidateAnswer findUnique
   */
  export type CandidateAnswerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateAnswer
     */
    select?: CandidateAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateAnswer
     */
    omit?: CandidateAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateAnswerInclude<ExtArgs> | null
    /**
     * Filter, which CandidateAnswer to fetch.
     */
    where: CandidateAnswerWhereUniqueInput
  }

  /**
   * CandidateAnswer findUniqueOrThrow
   */
  export type CandidateAnswerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateAnswer
     */
    select?: CandidateAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateAnswer
     */
    omit?: CandidateAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateAnswerInclude<ExtArgs> | null
    /**
     * Filter, which CandidateAnswer to fetch.
     */
    where: CandidateAnswerWhereUniqueInput
  }

  /**
   * CandidateAnswer findFirst
   */
  export type CandidateAnswerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateAnswer
     */
    select?: CandidateAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateAnswer
     */
    omit?: CandidateAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateAnswerInclude<ExtArgs> | null
    /**
     * Filter, which CandidateAnswer to fetch.
     */
    where?: CandidateAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateAnswers to fetch.
     */
    orderBy?: CandidateAnswerOrderByWithRelationInput | CandidateAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidateAnswers.
     */
    cursor?: CandidateAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidateAnswers.
     */
    distinct?: CandidateAnswerScalarFieldEnum | CandidateAnswerScalarFieldEnum[]
  }

  /**
   * CandidateAnswer findFirstOrThrow
   */
  export type CandidateAnswerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateAnswer
     */
    select?: CandidateAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateAnswer
     */
    omit?: CandidateAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateAnswerInclude<ExtArgs> | null
    /**
     * Filter, which CandidateAnswer to fetch.
     */
    where?: CandidateAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateAnswers to fetch.
     */
    orderBy?: CandidateAnswerOrderByWithRelationInput | CandidateAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidateAnswers.
     */
    cursor?: CandidateAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateAnswers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidateAnswers.
     */
    distinct?: CandidateAnswerScalarFieldEnum | CandidateAnswerScalarFieldEnum[]
  }

  /**
   * CandidateAnswer findMany
   */
  export type CandidateAnswerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateAnswer
     */
    select?: CandidateAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateAnswer
     */
    omit?: CandidateAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateAnswerInclude<ExtArgs> | null
    /**
     * Filter, which CandidateAnswers to fetch.
     */
    where?: CandidateAnswerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateAnswers to fetch.
     */
    orderBy?: CandidateAnswerOrderByWithRelationInput | CandidateAnswerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CandidateAnswers.
     */
    cursor?: CandidateAnswerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateAnswers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateAnswers.
     */
    skip?: number
    distinct?: CandidateAnswerScalarFieldEnum | CandidateAnswerScalarFieldEnum[]
  }

  /**
   * CandidateAnswer create
   */
  export type CandidateAnswerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateAnswer
     */
    select?: CandidateAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateAnswer
     */
    omit?: CandidateAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateAnswerInclude<ExtArgs> | null
    /**
     * The data needed to create a CandidateAnswer.
     */
    data: XOR<CandidateAnswerCreateInput, CandidateAnswerUncheckedCreateInput>
  }

  /**
   * CandidateAnswer createMany
   */
  export type CandidateAnswerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CandidateAnswers.
     */
    data: CandidateAnswerCreateManyInput | CandidateAnswerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CandidateAnswer createManyAndReturn
   */
  export type CandidateAnswerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateAnswer
     */
    select?: CandidateAnswerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateAnswer
     */
    omit?: CandidateAnswerOmit<ExtArgs> | null
    /**
     * The data used to create many CandidateAnswers.
     */
    data: CandidateAnswerCreateManyInput | CandidateAnswerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateAnswerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CandidateAnswer update
   */
  export type CandidateAnswerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateAnswer
     */
    select?: CandidateAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateAnswer
     */
    omit?: CandidateAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateAnswerInclude<ExtArgs> | null
    /**
     * The data needed to update a CandidateAnswer.
     */
    data: XOR<CandidateAnswerUpdateInput, CandidateAnswerUncheckedUpdateInput>
    /**
     * Choose, which CandidateAnswer to update.
     */
    where: CandidateAnswerWhereUniqueInput
  }

  /**
   * CandidateAnswer updateMany
   */
  export type CandidateAnswerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CandidateAnswers.
     */
    data: XOR<CandidateAnswerUpdateManyMutationInput, CandidateAnswerUncheckedUpdateManyInput>
    /**
     * Filter which CandidateAnswers to update
     */
    where?: CandidateAnswerWhereInput
    /**
     * Limit how many CandidateAnswers to update.
     */
    limit?: number
  }

  /**
   * CandidateAnswer updateManyAndReturn
   */
  export type CandidateAnswerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateAnswer
     */
    select?: CandidateAnswerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateAnswer
     */
    omit?: CandidateAnswerOmit<ExtArgs> | null
    /**
     * The data used to update CandidateAnswers.
     */
    data: XOR<CandidateAnswerUpdateManyMutationInput, CandidateAnswerUncheckedUpdateManyInput>
    /**
     * Filter which CandidateAnswers to update
     */
    where?: CandidateAnswerWhereInput
    /**
     * Limit how many CandidateAnswers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateAnswerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CandidateAnswer upsert
   */
  export type CandidateAnswerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateAnswer
     */
    select?: CandidateAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateAnswer
     */
    omit?: CandidateAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateAnswerInclude<ExtArgs> | null
    /**
     * The filter to search for the CandidateAnswer to update in case it exists.
     */
    where: CandidateAnswerWhereUniqueInput
    /**
     * In case the CandidateAnswer found by the `where` argument doesn't exist, create a new CandidateAnswer with this data.
     */
    create: XOR<CandidateAnswerCreateInput, CandidateAnswerUncheckedCreateInput>
    /**
     * In case the CandidateAnswer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidateAnswerUpdateInput, CandidateAnswerUncheckedUpdateInput>
  }

  /**
   * CandidateAnswer delete
   */
  export type CandidateAnswerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateAnswer
     */
    select?: CandidateAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateAnswer
     */
    omit?: CandidateAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateAnswerInclude<ExtArgs> | null
    /**
     * Filter which CandidateAnswer to delete.
     */
    where: CandidateAnswerWhereUniqueInput
  }

  /**
   * CandidateAnswer deleteMany
   */
  export type CandidateAnswerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidateAnswers to delete
     */
    where?: CandidateAnswerWhereInput
    /**
     * Limit how many CandidateAnswers to delete.
     */
    limit?: number
  }

  /**
   * CandidateAnswer without action
   */
  export type CandidateAnswerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateAnswer
     */
    select?: CandidateAnswerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateAnswer
     */
    omit?: CandidateAnswerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateAnswerInclude<ExtArgs> | null
  }


  /**
   * Model WorkflowTemplate
   */

  export type AggregateWorkflowTemplate = {
    _count: WorkflowTemplateCountAggregateOutputType | null
    _min: WorkflowTemplateMinAggregateOutputType | null
    _max: WorkflowTemplateMaxAggregateOutputType | null
  }

  export type WorkflowTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    companyId: string | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkflowTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    companyId: string | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkflowTemplateCountAggregateOutputType = {
    id: number
    name: number
    companyId: number
    isDefault: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkflowTemplateMinAggregateInputType = {
    id?: true
    name?: true
    companyId?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkflowTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    companyId?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkflowTemplateCountAggregateInputType = {
    id?: true
    name?: true
    companyId?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkflowTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowTemplate to aggregate.
     */
    where?: WorkflowTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowTemplates to fetch.
     */
    orderBy?: WorkflowTemplateOrderByWithRelationInput | WorkflowTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkflowTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkflowTemplates
    **/
    _count?: true | WorkflowTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowTemplateMaxAggregateInputType
  }

  export type GetWorkflowTemplateAggregateType<T extends WorkflowTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflowTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflowTemplate[P]>
      : GetScalarType<T[P], AggregateWorkflowTemplate[P]>
  }




  export type WorkflowTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowTemplateWhereInput
    orderBy?: WorkflowTemplateOrderByWithAggregationInput | WorkflowTemplateOrderByWithAggregationInput[]
    by: WorkflowTemplateScalarFieldEnum[] | WorkflowTemplateScalarFieldEnum
    having?: WorkflowTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowTemplateCountAggregateInputType | true
    _min?: WorkflowTemplateMinAggregateInputType
    _max?: WorkflowTemplateMaxAggregateInputType
  }

  export type WorkflowTemplateGroupByOutputType = {
    id: string
    name: string
    companyId: string
    isDefault: boolean
    createdAt: Date
    updatedAt: Date
    _count: WorkflowTemplateCountAggregateOutputType | null
    _min: WorkflowTemplateMinAggregateOutputType | null
    _max: WorkflowTemplateMaxAggregateOutputType | null
  }

  type GetWorkflowTemplateGroupByPayload<T extends WorkflowTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkflowTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowTemplateGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    companyId?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    stages?: boolean | WorkflowTemplate$stagesArgs<ExtArgs>
    jobWorkflows?: boolean | WorkflowTemplate$jobWorkflowsArgs<ExtArgs>
    _count?: boolean | WorkflowTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowTemplate"]>

  export type WorkflowTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    companyId?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowTemplate"]>

  export type WorkflowTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    companyId?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowTemplate"]>

  export type WorkflowTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    companyId?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkflowTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "companyId" | "isDefault" | "createdAt" | "updatedAt", ExtArgs["result"]["workflowTemplate"]>
  export type WorkflowTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    stages?: boolean | WorkflowTemplate$stagesArgs<ExtArgs>
    jobWorkflows?: boolean | WorkflowTemplate$jobWorkflowsArgs<ExtArgs>
    _count?: boolean | WorkflowTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WorkflowTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type WorkflowTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $WorkflowTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkflowTemplate"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      stages: Prisma.$WorkflowStageTemplatePayload<ExtArgs>[]
      jobWorkflows: Prisma.$JobWorkflowPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      companyId: string
      isDefault: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workflowTemplate"]>
    composites: {}
  }

  type WorkflowTemplateGetPayload<S extends boolean | null | undefined | WorkflowTemplateDefaultArgs> = $Result.GetResult<Prisma.$WorkflowTemplatePayload, S>

  type WorkflowTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkflowTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkflowTemplateCountAggregateInputType | true
    }

  export interface WorkflowTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkflowTemplate'], meta: { name: 'WorkflowTemplate' } }
    /**
     * Find zero or one WorkflowTemplate that matches the filter.
     * @param {WorkflowTemplateFindUniqueArgs} args - Arguments to find a WorkflowTemplate
     * @example
     * // Get one WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkflowTemplateFindUniqueArgs>(args: SelectSubset<T, WorkflowTemplateFindUniqueArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkflowTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkflowTemplateFindUniqueOrThrowArgs} args - Arguments to find a WorkflowTemplate
     * @example
     * // Get one WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkflowTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkflowTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkflowTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateFindFirstArgs} args - Arguments to find a WorkflowTemplate
     * @example
     * // Get one WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkflowTemplateFindFirstArgs>(args?: SelectSubset<T, WorkflowTemplateFindFirstArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkflowTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateFindFirstOrThrowArgs} args - Arguments to find a WorkflowTemplate
     * @example
     * // Get one WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkflowTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkflowTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkflowTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkflowTemplates
     * const workflowTemplates = await prisma.workflowTemplate.findMany()
     * 
     * // Get first 10 WorkflowTemplates
     * const workflowTemplates = await prisma.workflowTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowTemplateWithIdOnly = await prisma.workflowTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkflowTemplateFindManyArgs>(args?: SelectSubset<T, WorkflowTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkflowTemplate.
     * @param {WorkflowTemplateCreateArgs} args - Arguments to create a WorkflowTemplate.
     * @example
     * // Create one WorkflowTemplate
     * const WorkflowTemplate = await prisma.workflowTemplate.create({
     *   data: {
     *     // ... data to create a WorkflowTemplate
     *   }
     * })
     * 
     */
    create<T extends WorkflowTemplateCreateArgs>(args: SelectSubset<T, WorkflowTemplateCreateArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkflowTemplates.
     * @param {WorkflowTemplateCreateManyArgs} args - Arguments to create many WorkflowTemplates.
     * @example
     * // Create many WorkflowTemplates
     * const workflowTemplate = await prisma.workflowTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkflowTemplateCreateManyArgs>(args?: SelectSubset<T, WorkflowTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkflowTemplates and returns the data saved in the database.
     * @param {WorkflowTemplateCreateManyAndReturnArgs} args - Arguments to create many WorkflowTemplates.
     * @example
     * // Create many WorkflowTemplates
     * const workflowTemplate = await prisma.workflowTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkflowTemplates and only return the `id`
     * const workflowTemplateWithIdOnly = await prisma.workflowTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkflowTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkflowTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkflowTemplate.
     * @param {WorkflowTemplateDeleteArgs} args - Arguments to delete one WorkflowTemplate.
     * @example
     * // Delete one WorkflowTemplate
     * const WorkflowTemplate = await prisma.workflowTemplate.delete({
     *   where: {
     *     // ... filter to delete one WorkflowTemplate
     *   }
     * })
     * 
     */
    delete<T extends WorkflowTemplateDeleteArgs>(args: SelectSubset<T, WorkflowTemplateDeleteArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkflowTemplate.
     * @param {WorkflowTemplateUpdateArgs} args - Arguments to update one WorkflowTemplate.
     * @example
     * // Update one WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkflowTemplateUpdateArgs>(args: SelectSubset<T, WorkflowTemplateUpdateArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkflowTemplates.
     * @param {WorkflowTemplateDeleteManyArgs} args - Arguments to filter WorkflowTemplates to delete.
     * @example
     * // Delete a few WorkflowTemplates
     * const { count } = await prisma.workflowTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkflowTemplateDeleteManyArgs>(args?: SelectSubset<T, WorkflowTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkflowTemplates
     * const workflowTemplate = await prisma.workflowTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkflowTemplateUpdateManyArgs>(args: SelectSubset<T, WorkflowTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowTemplates and returns the data updated in the database.
     * @param {WorkflowTemplateUpdateManyAndReturnArgs} args - Arguments to update many WorkflowTemplates.
     * @example
     * // Update many WorkflowTemplates
     * const workflowTemplate = await prisma.workflowTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkflowTemplates and only return the `id`
     * const workflowTemplateWithIdOnly = await prisma.workflowTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkflowTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkflowTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkflowTemplate.
     * @param {WorkflowTemplateUpsertArgs} args - Arguments to update or create a WorkflowTemplate.
     * @example
     * // Update or create a WorkflowTemplate
     * const workflowTemplate = await prisma.workflowTemplate.upsert({
     *   create: {
     *     // ... data to create a WorkflowTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkflowTemplate we want to update
     *   }
     * })
     */
    upsert<T extends WorkflowTemplateUpsertArgs>(args: SelectSubset<T, WorkflowTemplateUpsertArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkflowTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateCountArgs} args - Arguments to filter WorkflowTemplates to count.
     * @example
     * // Count the number of WorkflowTemplates
     * const count = await prisma.workflowTemplate.count({
     *   where: {
     *     // ... the filter for the WorkflowTemplates we want to count
     *   }
     * })
    **/
    count<T extends WorkflowTemplateCountArgs>(
      args?: Subset<T, WorkflowTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkflowTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowTemplateAggregateArgs>(args: Subset<T, WorkflowTemplateAggregateArgs>): Prisma.PrismaPromise<GetWorkflowTemplateAggregateType<T>>

    /**
     * Group by WorkflowTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowTemplateGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkflowTemplate model
   */
  readonly fields: WorkflowTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkflowTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkflowTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    stages<T extends WorkflowTemplate$stagesArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowTemplate$stagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStageTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jobWorkflows<T extends WorkflowTemplate$jobWorkflowsArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowTemplate$jobWorkflowsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobWorkflowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkflowTemplate model
   */
  interface WorkflowTemplateFieldRefs {
    readonly id: FieldRef<"WorkflowTemplate", 'String'>
    readonly name: FieldRef<"WorkflowTemplate", 'String'>
    readonly companyId: FieldRef<"WorkflowTemplate", 'String'>
    readonly isDefault: FieldRef<"WorkflowTemplate", 'Boolean'>
    readonly createdAt: FieldRef<"WorkflowTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkflowTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkflowTemplate findUnique
   */
  export type WorkflowTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowTemplate to fetch.
     */
    where: WorkflowTemplateWhereUniqueInput
  }

  /**
   * WorkflowTemplate findUniqueOrThrow
   */
  export type WorkflowTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowTemplate to fetch.
     */
    where: WorkflowTemplateWhereUniqueInput
  }

  /**
   * WorkflowTemplate findFirst
   */
  export type WorkflowTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowTemplate to fetch.
     */
    where?: WorkflowTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowTemplates to fetch.
     */
    orderBy?: WorkflowTemplateOrderByWithRelationInput | WorkflowTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowTemplates.
     */
    cursor?: WorkflowTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowTemplates.
     */
    distinct?: WorkflowTemplateScalarFieldEnum | WorkflowTemplateScalarFieldEnum[]
  }

  /**
   * WorkflowTemplate findFirstOrThrow
   */
  export type WorkflowTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowTemplate to fetch.
     */
    where?: WorkflowTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowTemplates to fetch.
     */
    orderBy?: WorkflowTemplateOrderByWithRelationInput | WorkflowTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowTemplates.
     */
    cursor?: WorkflowTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowTemplates.
     */
    distinct?: WorkflowTemplateScalarFieldEnum | WorkflowTemplateScalarFieldEnum[]
  }

  /**
   * WorkflowTemplate findMany
   */
  export type WorkflowTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowTemplates to fetch.
     */
    where?: WorkflowTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowTemplates to fetch.
     */
    orderBy?: WorkflowTemplateOrderByWithRelationInput | WorkflowTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkflowTemplates.
     */
    cursor?: WorkflowTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowTemplates.
     */
    skip?: number
    distinct?: WorkflowTemplateScalarFieldEnum | WorkflowTemplateScalarFieldEnum[]
  }

  /**
   * WorkflowTemplate create
   */
  export type WorkflowTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkflowTemplate.
     */
    data: XOR<WorkflowTemplateCreateInput, WorkflowTemplateUncheckedCreateInput>
  }

  /**
   * WorkflowTemplate createMany
   */
  export type WorkflowTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkflowTemplates.
     */
    data: WorkflowTemplateCreateManyInput | WorkflowTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkflowTemplate createManyAndReturn
   */
  export type WorkflowTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many WorkflowTemplates.
     */
    data: WorkflowTemplateCreateManyInput | WorkflowTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowTemplate update
   */
  export type WorkflowTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkflowTemplate.
     */
    data: XOR<WorkflowTemplateUpdateInput, WorkflowTemplateUncheckedUpdateInput>
    /**
     * Choose, which WorkflowTemplate to update.
     */
    where: WorkflowTemplateWhereUniqueInput
  }

  /**
   * WorkflowTemplate updateMany
   */
  export type WorkflowTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkflowTemplates.
     */
    data: XOR<WorkflowTemplateUpdateManyMutationInput, WorkflowTemplateUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowTemplates to update
     */
    where?: WorkflowTemplateWhereInput
    /**
     * Limit how many WorkflowTemplates to update.
     */
    limit?: number
  }

  /**
   * WorkflowTemplate updateManyAndReturn
   */
  export type WorkflowTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * The data used to update WorkflowTemplates.
     */
    data: XOR<WorkflowTemplateUpdateManyMutationInput, WorkflowTemplateUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowTemplates to update
     */
    where?: WorkflowTemplateWhereInput
    /**
     * Limit how many WorkflowTemplates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowTemplate upsert
   */
  export type WorkflowTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkflowTemplate to update in case it exists.
     */
    where: WorkflowTemplateWhereUniqueInput
    /**
     * In case the WorkflowTemplate found by the `where` argument doesn't exist, create a new WorkflowTemplate with this data.
     */
    create: XOR<WorkflowTemplateCreateInput, WorkflowTemplateUncheckedCreateInput>
    /**
     * In case the WorkflowTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkflowTemplateUpdateInput, WorkflowTemplateUncheckedUpdateInput>
  }

  /**
   * WorkflowTemplate delete
   */
  export type WorkflowTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    /**
     * Filter which WorkflowTemplate to delete.
     */
    where: WorkflowTemplateWhereUniqueInput
  }

  /**
   * WorkflowTemplate deleteMany
   */
  export type WorkflowTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowTemplates to delete
     */
    where?: WorkflowTemplateWhereInput
    /**
     * Limit how many WorkflowTemplates to delete.
     */
    limit?: number
  }

  /**
   * WorkflowTemplate.stages
   */
  export type WorkflowTemplate$stagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStageTemplate
     */
    select?: WorkflowStageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStageTemplate
     */
    omit?: WorkflowStageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStageTemplateInclude<ExtArgs> | null
    where?: WorkflowStageTemplateWhereInput
    orderBy?: WorkflowStageTemplateOrderByWithRelationInput | WorkflowStageTemplateOrderByWithRelationInput[]
    cursor?: WorkflowStageTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowStageTemplateScalarFieldEnum | WorkflowStageTemplateScalarFieldEnum[]
  }

  /**
   * WorkflowTemplate.jobWorkflows
   */
  export type WorkflowTemplate$jobWorkflowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflow
     */
    select?: JobWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflow
     */
    omit?: JobWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowInclude<ExtArgs> | null
    where?: JobWorkflowWhereInput
    orderBy?: JobWorkflowOrderByWithRelationInput | JobWorkflowOrderByWithRelationInput[]
    cursor?: JobWorkflowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobWorkflowScalarFieldEnum | JobWorkflowScalarFieldEnum[]
  }

  /**
   * WorkflowTemplate without action
   */
  export type WorkflowTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
  }


  /**
   * Model WorkflowStageTemplate
   */

  export type AggregateWorkflowStageTemplate = {
    _count: WorkflowStageTemplateCountAggregateOutputType | null
    _avg: WorkflowStageTemplateAvgAggregateOutputType | null
    _sum: WorkflowStageTemplateSumAggregateOutputType | null
    _min: WorkflowStageTemplateMinAggregateOutputType | null
    _max: WorkflowStageTemplateMaxAggregateOutputType | null
  }

  export type WorkflowStageTemplateAvgAggregateOutputType = {
    order: number | null
  }

  export type WorkflowStageTemplateSumAggregateOutputType = {
    order: number | null
  }

  export type WorkflowStageTemplateMinAggregateOutputType = {
    id: string | null
    workflowTemplateId: string | null
    name: string | null
    type: $Enums.StageType | null
    order: number | null
    isDefault: boolean | null
    canBeDeleted: boolean | null
    visibilityToReviewers: boolean | null
  }

  export type WorkflowStageTemplateMaxAggregateOutputType = {
    id: string | null
    workflowTemplateId: string | null
    name: string | null
    type: $Enums.StageType | null
    order: number | null
    isDefault: boolean | null
    canBeDeleted: boolean | null
    visibilityToReviewers: boolean | null
  }

  export type WorkflowStageTemplateCountAggregateOutputType = {
    id: number
    workflowTemplateId: number
    name: number
    type: number
    order: number
    isDefault: number
    canBeDeleted: number
    settings: number
    visibilityToReviewers: number
    _all: number
  }


  export type WorkflowStageTemplateAvgAggregateInputType = {
    order?: true
  }

  export type WorkflowStageTemplateSumAggregateInputType = {
    order?: true
  }

  export type WorkflowStageTemplateMinAggregateInputType = {
    id?: true
    workflowTemplateId?: true
    name?: true
    type?: true
    order?: true
    isDefault?: true
    canBeDeleted?: true
    visibilityToReviewers?: true
  }

  export type WorkflowStageTemplateMaxAggregateInputType = {
    id?: true
    workflowTemplateId?: true
    name?: true
    type?: true
    order?: true
    isDefault?: true
    canBeDeleted?: true
    visibilityToReviewers?: true
  }

  export type WorkflowStageTemplateCountAggregateInputType = {
    id?: true
    workflowTemplateId?: true
    name?: true
    type?: true
    order?: true
    isDefault?: true
    canBeDeleted?: true
    settings?: true
    visibilityToReviewers?: true
    _all?: true
  }

  export type WorkflowStageTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowStageTemplate to aggregate.
     */
    where?: WorkflowStageTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowStageTemplates to fetch.
     */
    orderBy?: WorkflowStageTemplateOrderByWithRelationInput | WorkflowStageTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkflowStageTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowStageTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowStageTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkflowStageTemplates
    **/
    _count?: true | WorkflowStageTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkflowStageTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkflowStageTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowStageTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowStageTemplateMaxAggregateInputType
  }

  export type GetWorkflowStageTemplateAggregateType<T extends WorkflowStageTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflowStageTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflowStageTemplate[P]>
      : GetScalarType<T[P], AggregateWorkflowStageTemplate[P]>
  }




  export type WorkflowStageTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowStageTemplateWhereInput
    orderBy?: WorkflowStageTemplateOrderByWithAggregationInput | WorkflowStageTemplateOrderByWithAggregationInput[]
    by: WorkflowStageTemplateScalarFieldEnum[] | WorkflowStageTemplateScalarFieldEnum
    having?: WorkflowStageTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowStageTemplateCountAggregateInputType | true
    _avg?: WorkflowStageTemplateAvgAggregateInputType
    _sum?: WorkflowStageTemplateSumAggregateInputType
    _min?: WorkflowStageTemplateMinAggregateInputType
    _max?: WorkflowStageTemplateMaxAggregateInputType
  }

  export type WorkflowStageTemplateGroupByOutputType = {
    id: string
    workflowTemplateId: string
    name: string
    type: $Enums.StageType
    order: number
    isDefault: boolean
    canBeDeleted: boolean
    settings: JsonValue | null
    visibilityToReviewers: boolean
    _count: WorkflowStageTemplateCountAggregateOutputType | null
    _avg: WorkflowStageTemplateAvgAggregateOutputType | null
    _sum: WorkflowStageTemplateSumAggregateOutputType | null
    _min: WorkflowStageTemplateMinAggregateOutputType | null
    _max: WorkflowStageTemplateMaxAggregateOutputType | null
  }

  type GetWorkflowStageTemplateGroupByPayload<T extends WorkflowStageTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkflowStageTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowStageTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowStageTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowStageTemplateGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowStageTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowTemplateId?: boolean
    name?: boolean
    type?: boolean
    order?: boolean
    isDefault?: boolean
    canBeDeleted?: boolean
    settings?: boolean
    visibilityToReviewers?: boolean
    workflowTemplate?: boolean | WorkflowTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowStageTemplate"]>

  export type WorkflowStageTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowTemplateId?: boolean
    name?: boolean
    type?: boolean
    order?: boolean
    isDefault?: boolean
    canBeDeleted?: boolean
    settings?: boolean
    visibilityToReviewers?: boolean
    workflowTemplate?: boolean | WorkflowTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowStageTemplate"]>

  export type WorkflowStageTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    workflowTemplateId?: boolean
    name?: boolean
    type?: boolean
    order?: boolean
    isDefault?: boolean
    canBeDeleted?: boolean
    settings?: boolean
    visibilityToReviewers?: boolean
    workflowTemplate?: boolean | WorkflowTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workflowStageTemplate"]>

  export type WorkflowStageTemplateSelectScalar = {
    id?: boolean
    workflowTemplateId?: boolean
    name?: boolean
    type?: boolean
    order?: boolean
    isDefault?: boolean
    canBeDeleted?: boolean
    settings?: boolean
    visibilityToReviewers?: boolean
  }

  export type WorkflowStageTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "workflowTemplateId" | "name" | "type" | "order" | "isDefault" | "canBeDeleted" | "settings" | "visibilityToReviewers", ExtArgs["result"]["workflowStageTemplate"]>
  export type WorkflowStageTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workflowTemplate?: boolean | WorkflowTemplateDefaultArgs<ExtArgs>
  }
  export type WorkflowStageTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workflowTemplate?: boolean | WorkflowTemplateDefaultArgs<ExtArgs>
  }
  export type WorkflowStageTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    workflowTemplate?: boolean | WorkflowTemplateDefaultArgs<ExtArgs>
  }

  export type $WorkflowStageTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkflowStageTemplate"
    objects: {
      workflowTemplate: Prisma.$WorkflowTemplatePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      workflowTemplateId: string
      name: string
      type: $Enums.StageType
      order: number
      isDefault: boolean
      canBeDeleted: boolean
      settings: Prisma.JsonValue | null
      visibilityToReviewers: boolean
    }, ExtArgs["result"]["workflowStageTemplate"]>
    composites: {}
  }

  type WorkflowStageTemplateGetPayload<S extends boolean | null | undefined | WorkflowStageTemplateDefaultArgs> = $Result.GetResult<Prisma.$WorkflowStageTemplatePayload, S>

  type WorkflowStageTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkflowStageTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkflowStageTemplateCountAggregateInputType | true
    }

  export interface WorkflowStageTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkflowStageTemplate'], meta: { name: 'WorkflowStageTemplate' } }
    /**
     * Find zero or one WorkflowStageTemplate that matches the filter.
     * @param {WorkflowStageTemplateFindUniqueArgs} args - Arguments to find a WorkflowStageTemplate
     * @example
     * // Get one WorkflowStageTemplate
     * const workflowStageTemplate = await prisma.workflowStageTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkflowStageTemplateFindUniqueArgs>(args: SelectSubset<T, WorkflowStageTemplateFindUniqueArgs<ExtArgs>>): Prisma__WorkflowStageTemplateClient<$Result.GetResult<Prisma.$WorkflowStageTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkflowStageTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkflowStageTemplateFindUniqueOrThrowArgs} args - Arguments to find a WorkflowStageTemplate
     * @example
     * // Get one WorkflowStageTemplate
     * const workflowStageTemplate = await prisma.workflowStageTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkflowStageTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkflowStageTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkflowStageTemplateClient<$Result.GetResult<Prisma.$WorkflowStageTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkflowStageTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStageTemplateFindFirstArgs} args - Arguments to find a WorkflowStageTemplate
     * @example
     * // Get one WorkflowStageTemplate
     * const workflowStageTemplate = await prisma.workflowStageTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkflowStageTemplateFindFirstArgs>(args?: SelectSubset<T, WorkflowStageTemplateFindFirstArgs<ExtArgs>>): Prisma__WorkflowStageTemplateClient<$Result.GetResult<Prisma.$WorkflowStageTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkflowStageTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStageTemplateFindFirstOrThrowArgs} args - Arguments to find a WorkflowStageTemplate
     * @example
     * // Get one WorkflowStageTemplate
     * const workflowStageTemplate = await prisma.workflowStageTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkflowStageTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkflowStageTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkflowStageTemplateClient<$Result.GetResult<Prisma.$WorkflowStageTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkflowStageTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStageTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkflowStageTemplates
     * const workflowStageTemplates = await prisma.workflowStageTemplate.findMany()
     * 
     * // Get first 10 WorkflowStageTemplates
     * const workflowStageTemplates = await prisma.workflowStageTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowStageTemplateWithIdOnly = await prisma.workflowStageTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkflowStageTemplateFindManyArgs>(args?: SelectSubset<T, WorkflowStageTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStageTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkflowStageTemplate.
     * @param {WorkflowStageTemplateCreateArgs} args - Arguments to create a WorkflowStageTemplate.
     * @example
     * // Create one WorkflowStageTemplate
     * const WorkflowStageTemplate = await prisma.workflowStageTemplate.create({
     *   data: {
     *     // ... data to create a WorkflowStageTemplate
     *   }
     * })
     * 
     */
    create<T extends WorkflowStageTemplateCreateArgs>(args: SelectSubset<T, WorkflowStageTemplateCreateArgs<ExtArgs>>): Prisma__WorkflowStageTemplateClient<$Result.GetResult<Prisma.$WorkflowStageTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkflowStageTemplates.
     * @param {WorkflowStageTemplateCreateManyArgs} args - Arguments to create many WorkflowStageTemplates.
     * @example
     * // Create many WorkflowStageTemplates
     * const workflowStageTemplate = await prisma.workflowStageTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkflowStageTemplateCreateManyArgs>(args?: SelectSubset<T, WorkflowStageTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkflowStageTemplates and returns the data saved in the database.
     * @param {WorkflowStageTemplateCreateManyAndReturnArgs} args - Arguments to create many WorkflowStageTemplates.
     * @example
     * // Create many WorkflowStageTemplates
     * const workflowStageTemplate = await prisma.workflowStageTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkflowStageTemplates and only return the `id`
     * const workflowStageTemplateWithIdOnly = await prisma.workflowStageTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkflowStageTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkflowStageTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStageTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WorkflowStageTemplate.
     * @param {WorkflowStageTemplateDeleteArgs} args - Arguments to delete one WorkflowStageTemplate.
     * @example
     * // Delete one WorkflowStageTemplate
     * const WorkflowStageTemplate = await prisma.workflowStageTemplate.delete({
     *   where: {
     *     // ... filter to delete one WorkflowStageTemplate
     *   }
     * })
     * 
     */
    delete<T extends WorkflowStageTemplateDeleteArgs>(args: SelectSubset<T, WorkflowStageTemplateDeleteArgs<ExtArgs>>): Prisma__WorkflowStageTemplateClient<$Result.GetResult<Prisma.$WorkflowStageTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkflowStageTemplate.
     * @param {WorkflowStageTemplateUpdateArgs} args - Arguments to update one WorkflowStageTemplate.
     * @example
     * // Update one WorkflowStageTemplate
     * const workflowStageTemplate = await prisma.workflowStageTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkflowStageTemplateUpdateArgs>(args: SelectSubset<T, WorkflowStageTemplateUpdateArgs<ExtArgs>>): Prisma__WorkflowStageTemplateClient<$Result.GetResult<Prisma.$WorkflowStageTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkflowStageTemplates.
     * @param {WorkflowStageTemplateDeleteManyArgs} args - Arguments to filter WorkflowStageTemplates to delete.
     * @example
     * // Delete a few WorkflowStageTemplates
     * const { count } = await prisma.workflowStageTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkflowStageTemplateDeleteManyArgs>(args?: SelectSubset<T, WorkflowStageTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowStageTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStageTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkflowStageTemplates
     * const workflowStageTemplate = await prisma.workflowStageTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkflowStageTemplateUpdateManyArgs>(args: SelectSubset<T, WorkflowStageTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowStageTemplates and returns the data updated in the database.
     * @param {WorkflowStageTemplateUpdateManyAndReturnArgs} args - Arguments to update many WorkflowStageTemplates.
     * @example
     * // Update many WorkflowStageTemplates
     * const workflowStageTemplate = await prisma.workflowStageTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WorkflowStageTemplates and only return the `id`
     * const workflowStageTemplateWithIdOnly = await prisma.workflowStageTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WorkflowStageTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, WorkflowStageTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowStageTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WorkflowStageTemplate.
     * @param {WorkflowStageTemplateUpsertArgs} args - Arguments to update or create a WorkflowStageTemplate.
     * @example
     * // Update or create a WorkflowStageTemplate
     * const workflowStageTemplate = await prisma.workflowStageTemplate.upsert({
     *   create: {
     *     // ... data to create a WorkflowStageTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkflowStageTemplate we want to update
     *   }
     * })
     */
    upsert<T extends WorkflowStageTemplateUpsertArgs>(args: SelectSubset<T, WorkflowStageTemplateUpsertArgs<ExtArgs>>): Prisma__WorkflowStageTemplateClient<$Result.GetResult<Prisma.$WorkflowStageTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkflowStageTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStageTemplateCountArgs} args - Arguments to filter WorkflowStageTemplates to count.
     * @example
     * // Count the number of WorkflowStageTemplates
     * const count = await prisma.workflowStageTemplate.count({
     *   where: {
     *     // ... the filter for the WorkflowStageTemplates we want to count
     *   }
     * })
    **/
    count<T extends WorkflowStageTemplateCountArgs>(
      args?: Subset<T, WorkflowStageTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowStageTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkflowStageTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStageTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowStageTemplateAggregateArgs>(args: Subset<T, WorkflowStageTemplateAggregateArgs>): Prisma.PrismaPromise<GetWorkflowStageTemplateAggregateType<T>>

    /**
     * Group by WorkflowStageTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowStageTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowStageTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowStageTemplateGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowStageTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowStageTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowStageTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkflowStageTemplate model
   */
  readonly fields: WorkflowStageTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkflowStageTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkflowStageTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    workflowTemplate<T extends WorkflowTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowTemplateDefaultArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkflowStageTemplate model
   */
  interface WorkflowStageTemplateFieldRefs {
    readonly id: FieldRef<"WorkflowStageTemplate", 'String'>
    readonly workflowTemplateId: FieldRef<"WorkflowStageTemplate", 'String'>
    readonly name: FieldRef<"WorkflowStageTemplate", 'String'>
    readonly type: FieldRef<"WorkflowStageTemplate", 'StageType'>
    readonly order: FieldRef<"WorkflowStageTemplate", 'Int'>
    readonly isDefault: FieldRef<"WorkflowStageTemplate", 'Boolean'>
    readonly canBeDeleted: FieldRef<"WorkflowStageTemplate", 'Boolean'>
    readonly settings: FieldRef<"WorkflowStageTemplate", 'Json'>
    readonly visibilityToReviewers: FieldRef<"WorkflowStageTemplate", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * WorkflowStageTemplate findUnique
   */
  export type WorkflowStageTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStageTemplate
     */
    select?: WorkflowStageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStageTemplate
     */
    omit?: WorkflowStageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStageTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStageTemplate to fetch.
     */
    where: WorkflowStageTemplateWhereUniqueInput
  }

  /**
   * WorkflowStageTemplate findUniqueOrThrow
   */
  export type WorkflowStageTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStageTemplate
     */
    select?: WorkflowStageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStageTemplate
     */
    omit?: WorkflowStageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStageTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStageTemplate to fetch.
     */
    where: WorkflowStageTemplateWhereUniqueInput
  }

  /**
   * WorkflowStageTemplate findFirst
   */
  export type WorkflowStageTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStageTemplate
     */
    select?: WorkflowStageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStageTemplate
     */
    omit?: WorkflowStageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStageTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStageTemplate to fetch.
     */
    where?: WorkflowStageTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowStageTemplates to fetch.
     */
    orderBy?: WorkflowStageTemplateOrderByWithRelationInput | WorkflowStageTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowStageTemplates.
     */
    cursor?: WorkflowStageTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowStageTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowStageTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowStageTemplates.
     */
    distinct?: WorkflowStageTemplateScalarFieldEnum | WorkflowStageTemplateScalarFieldEnum[]
  }

  /**
   * WorkflowStageTemplate findFirstOrThrow
   */
  export type WorkflowStageTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStageTemplate
     */
    select?: WorkflowStageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStageTemplate
     */
    omit?: WorkflowStageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStageTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStageTemplate to fetch.
     */
    where?: WorkflowStageTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowStageTemplates to fetch.
     */
    orderBy?: WorkflowStageTemplateOrderByWithRelationInput | WorkflowStageTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowStageTemplates.
     */
    cursor?: WorkflowStageTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowStageTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowStageTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowStageTemplates.
     */
    distinct?: WorkflowStageTemplateScalarFieldEnum | WorkflowStageTemplateScalarFieldEnum[]
  }

  /**
   * WorkflowStageTemplate findMany
   */
  export type WorkflowStageTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStageTemplate
     */
    select?: WorkflowStageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStageTemplate
     */
    omit?: WorkflowStageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStageTemplateInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowStageTemplates to fetch.
     */
    where?: WorkflowStageTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowStageTemplates to fetch.
     */
    orderBy?: WorkflowStageTemplateOrderByWithRelationInput | WorkflowStageTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkflowStageTemplates.
     */
    cursor?: WorkflowStageTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowStageTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowStageTemplates.
     */
    skip?: number
    distinct?: WorkflowStageTemplateScalarFieldEnum | WorkflowStageTemplateScalarFieldEnum[]
  }

  /**
   * WorkflowStageTemplate create
   */
  export type WorkflowStageTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStageTemplate
     */
    select?: WorkflowStageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStageTemplate
     */
    omit?: WorkflowStageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStageTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkflowStageTemplate.
     */
    data: XOR<WorkflowStageTemplateCreateInput, WorkflowStageTemplateUncheckedCreateInput>
  }

  /**
   * WorkflowStageTemplate createMany
   */
  export type WorkflowStageTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkflowStageTemplates.
     */
    data: WorkflowStageTemplateCreateManyInput | WorkflowStageTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkflowStageTemplate createManyAndReturn
   */
  export type WorkflowStageTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStageTemplate
     */
    select?: WorkflowStageTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStageTemplate
     */
    omit?: WorkflowStageTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many WorkflowStageTemplates.
     */
    data: WorkflowStageTemplateCreateManyInput | WorkflowStageTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStageTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowStageTemplate update
   */
  export type WorkflowStageTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStageTemplate
     */
    select?: WorkflowStageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStageTemplate
     */
    omit?: WorkflowStageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStageTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkflowStageTemplate.
     */
    data: XOR<WorkflowStageTemplateUpdateInput, WorkflowStageTemplateUncheckedUpdateInput>
    /**
     * Choose, which WorkflowStageTemplate to update.
     */
    where: WorkflowStageTemplateWhereUniqueInput
  }

  /**
   * WorkflowStageTemplate updateMany
   */
  export type WorkflowStageTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkflowStageTemplates.
     */
    data: XOR<WorkflowStageTemplateUpdateManyMutationInput, WorkflowStageTemplateUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowStageTemplates to update
     */
    where?: WorkflowStageTemplateWhereInput
    /**
     * Limit how many WorkflowStageTemplates to update.
     */
    limit?: number
  }

  /**
   * WorkflowStageTemplate updateManyAndReturn
   */
  export type WorkflowStageTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStageTemplate
     */
    select?: WorkflowStageTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStageTemplate
     */
    omit?: WorkflowStageTemplateOmit<ExtArgs> | null
    /**
     * The data used to update WorkflowStageTemplates.
     */
    data: XOR<WorkflowStageTemplateUpdateManyMutationInput, WorkflowStageTemplateUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowStageTemplates to update
     */
    where?: WorkflowStageTemplateWhereInput
    /**
     * Limit how many WorkflowStageTemplates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStageTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowStageTemplate upsert
   */
  export type WorkflowStageTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStageTemplate
     */
    select?: WorkflowStageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStageTemplate
     */
    omit?: WorkflowStageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStageTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkflowStageTemplate to update in case it exists.
     */
    where: WorkflowStageTemplateWhereUniqueInput
    /**
     * In case the WorkflowStageTemplate found by the `where` argument doesn't exist, create a new WorkflowStageTemplate with this data.
     */
    create: XOR<WorkflowStageTemplateCreateInput, WorkflowStageTemplateUncheckedCreateInput>
    /**
     * In case the WorkflowStageTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkflowStageTemplateUpdateInput, WorkflowStageTemplateUncheckedUpdateInput>
  }

  /**
   * WorkflowStageTemplate delete
   */
  export type WorkflowStageTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStageTemplate
     */
    select?: WorkflowStageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStageTemplate
     */
    omit?: WorkflowStageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStageTemplateInclude<ExtArgs> | null
    /**
     * Filter which WorkflowStageTemplate to delete.
     */
    where: WorkflowStageTemplateWhereUniqueInput
  }

  /**
   * WorkflowStageTemplate deleteMany
   */
  export type WorkflowStageTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowStageTemplates to delete
     */
    where?: WorkflowStageTemplateWhereInput
    /**
     * Limit how many WorkflowStageTemplates to delete.
     */
    limit?: number
  }

  /**
   * WorkflowStageTemplate without action
   */
  export type WorkflowStageTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowStageTemplate
     */
    select?: WorkflowStageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowStageTemplate
     */
    omit?: WorkflowStageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowStageTemplateInclude<ExtArgs> | null
  }


  /**
   * Model JobWorkflow
   */

  export type AggregateJobWorkflow = {
    _count: JobWorkflowCountAggregateOutputType | null
    _min: JobWorkflowMinAggregateOutputType | null
    _max: JobWorkflowMaxAggregateOutputType | null
  }

  export type JobWorkflowMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    workflowTemplateId: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobWorkflowMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    workflowTemplateId: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobWorkflowCountAggregateOutputType = {
    id: number
    jobId: number
    workflowTemplateId: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobWorkflowMinAggregateInputType = {
    id?: true
    jobId?: true
    workflowTemplateId?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobWorkflowMaxAggregateInputType = {
    id?: true
    jobId?: true
    workflowTemplateId?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobWorkflowCountAggregateInputType = {
    id?: true
    jobId?: true
    workflowTemplateId?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobWorkflowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobWorkflow to aggregate.
     */
    where?: JobWorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobWorkflows to fetch.
     */
    orderBy?: JobWorkflowOrderByWithRelationInput | JobWorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobWorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobWorkflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobWorkflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobWorkflows
    **/
    _count?: true | JobWorkflowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobWorkflowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobWorkflowMaxAggregateInputType
  }

  export type GetJobWorkflowAggregateType<T extends JobWorkflowAggregateArgs> = {
        [P in keyof T & keyof AggregateJobWorkflow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobWorkflow[P]>
      : GetScalarType<T[P], AggregateJobWorkflow[P]>
  }




  export type JobWorkflowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWorkflowWhereInput
    orderBy?: JobWorkflowOrderByWithAggregationInput | JobWorkflowOrderByWithAggregationInput[]
    by: JobWorkflowScalarFieldEnum[] | JobWorkflowScalarFieldEnum
    having?: JobWorkflowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobWorkflowCountAggregateInputType | true
    _min?: JobWorkflowMinAggregateInputType
    _max?: JobWorkflowMaxAggregateInputType
  }

  export type JobWorkflowGroupByOutputType = {
    id: string
    jobId: string
    workflowTemplateId: string | null
    name: string
    createdAt: Date
    updatedAt: Date
    _count: JobWorkflowCountAggregateOutputType | null
    _min: JobWorkflowMinAggregateOutputType | null
    _max: JobWorkflowMaxAggregateOutputType | null
  }

  type GetJobWorkflowGroupByPayload<T extends JobWorkflowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobWorkflowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobWorkflowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobWorkflowGroupByOutputType[P]>
            : GetScalarType<T[P], JobWorkflowGroupByOutputType[P]>
        }
      >
    >


  export type JobWorkflowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    workflowTemplateId?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    workflowTemplate?: boolean | JobWorkflow$workflowTemplateArgs<ExtArgs>
    stages?: boolean | JobWorkflow$stagesArgs<ExtArgs>
    _count?: boolean | JobWorkflowCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobWorkflow"]>

  export type JobWorkflowSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    workflowTemplateId?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    workflowTemplate?: boolean | JobWorkflow$workflowTemplateArgs<ExtArgs>
  }, ExtArgs["result"]["jobWorkflow"]>

  export type JobWorkflowSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    workflowTemplateId?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    workflowTemplate?: boolean | JobWorkflow$workflowTemplateArgs<ExtArgs>
  }, ExtArgs["result"]["jobWorkflow"]>

  export type JobWorkflowSelectScalar = {
    id?: boolean
    jobId?: boolean
    workflowTemplateId?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JobWorkflowOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "workflowTemplateId" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["jobWorkflow"]>
  export type JobWorkflowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    workflowTemplate?: boolean | JobWorkflow$workflowTemplateArgs<ExtArgs>
    stages?: boolean | JobWorkflow$stagesArgs<ExtArgs>
    _count?: boolean | JobWorkflowCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobWorkflowIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    workflowTemplate?: boolean | JobWorkflow$workflowTemplateArgs<ExtArgs>
  }
  export type JobWorkflowIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    workflowTemplate?: boolean | JobWorkflow$workflowTemplateArgs<ExtArgs>
  }

  export type $JobWorkflowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobWorkflow"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
      workflowTemplate: Prisma.$WorkflowTemplatePayload<ExtArgs> | null
      stages: Prisma.$JobWorkflowStagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      workflowTemplateId: string | null
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["jobWorkflow"]>
    composites: {}
  }

  type JobWorkflowGetPayload<S extends boolean | null | undefined | JobWorkflowDefaultArgs> = $Result.GetResult<Prisma.$JobWorkflowPayload, S>

  type JobWorkflowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobWorkflowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobWorkflowCountAggregateInputType | true
    }

  export interface JobWorkflowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobWorkflow'], meta: { name: 'JobWorkflow' } }
    /**
     * Find zero or one JobWorkflow that matches the filter.
     * @param {JobWorkflowFindUniqueArgs} args - Arguments to find a JobWorkflow
     * @example
     * // Get one JobWorkflow
     * const jobWorkflow = await prisma.jobWorkflow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobWorkflowFindUniqueArgs>(args: SelectSubset<T, JobWorkflowFindUniqueArgs<ExtArgs>>): Prisma__JobWorkflowClient<$Result.GetResult<Prisma.$JobWorkflowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobWorkflow that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobWorkflowFindUniqueOrThrowArgs} args - Arguments to find a JobWorkflow
     * @example
     * // Get one JobWorkflow
     * const jobWorkflow = await prisma.jobWorkflow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobWorkflowFindUniqueOrThrowArgs>(args: SelectSubset<T, JobWorkflowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobWorkflowClient<$Result.GetResult<Prisma.$JobWorkflowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobWorkflow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobWorkflowFindFirstArgs} args - Arguments to find a JobWorkflow
     * @example
     * // Get one JobWorkflow
     * const jobWorkflow = await prisma.jobWorkflow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobWorkflowFindFirstArgs>(args?: SelectSubset<T, JobWorkflowFindFirstArgs<ExtArgs>>): Prisma__JobWorkflowClient<$Result.GetResult<Prisma.$JobWorkflowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobWorkflow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobWorkflowFindFirstOrThrowArgs} args - Arguments to find a JobWorkflow
     * @example
     * // Get one JobWorkflow
     * const jobWorkflow = await prisma.jobWorkflow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobWorkflowFindFirstOrThrowArgs>(args?: SelectSubset<T, JobWorkflowFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobWorkflowClient<$Result.GetResult<Prisma.$JobWorkflowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobWorkflows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobWorkflowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobWorkflows
     * const jobWorkflows = await prisma.jobWorkflow.findMany()
     * 
     * // Get first 10 JobWorkflows
     * const jobWorkflows = await prisma.jobWorkflow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWorkflowWithIdOnly = await prisma.jobWorkflow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobWorkflowFindManyArgs>(args?: SelectSubset<T, JobWorkflowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobWorkflowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobWorkflow.
     * @param {JobWorkflowCreateArgs} args - Arguments to create a JobWorkflow.
     * @example
     * // Create one JobWorkflow
     * const JobWorkflow = await prisma.jobWorkflow.create({
     *   data: {
     *     // ... data to create a JobWorkflow
     *   }
     * })
     * 
     */
    create<T extends JobWorkflowCreateArgs>(args: SelectSubset<T, JobWorkflowCreateArgs<ExtArgs>>): Prisma__JobWorkflowClient<$Result.GetResult<Prisma.$JobWorkflowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobWorkflows.
     * @param {JobWorkflowCreateManyArgs} args - Arguments to create many JobWorkflows.
     * @example
     * // Create many JobWorkflows
     * const jobWorkflow = await prisma.jobWorkflow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobWorkflowCreateManyArgs>(args?: SelectSubset<T, JobWorkflowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobWorkflows and returns the data saved in the database.
     * @param {JobWorkflowCreateManyAndReturnArgs} args - Arguments to create many JobWorkflows.
     * @example
     * // Create many JobWorkflows
     * const jobWorkflow = await prisma.jobWorkflow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobWorkflows and only return the `id`
     * const jobWorkflowWithIdOnly = await prisma.jobWorkflow.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobWorkflowCreateManyAndReturnArgs>(args?: SelectSubset<T, JobWorkflowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobWorkflowPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JobWorkflow.
     * @param {JobWorkflowDeleteArgs} args - Arguments to delete one JobWorkflow.
     * @example
     * // Delete one JobWorkflow
     * const JobWorkflow = await prisma.jobWorkflow.delete({
     *   where: {
     *     // ... filter to delete one JobWorkflow
     *   }
     * })
     * 
     */
    delete<T extends JobWorkflowDeleteArgs>(args: SelectSubset<T, JobWorkflowDeleteArgs<ExtArgs>>): Prisma__JobWorkflowClient<$Result.GetResult<Prisma.$JobWorkflowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobWorkflow.
     * @param {JobWorkflowUpdateArgs} args - Arguments to update one JobWorkflow.
     * @example
     * // Update one JobWorkflow
     * const jobWorkflow = await prisma.jobWorkflow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobWorkflowUpdateArgs>(args: SelectSubset<T, JobWorkflowUpdateArgs<ExtArgs>>): Prisma__JobWorkflowClient<$Result.GetResult<Prisma.$JobWorkflowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobWorkflows.
     * @param {JobWorkflowDeleteManyArgs} args - Arguments to filter JobWorkflows to delete.
     * @example
     * // Delete a few JobWorkflows
     * const { count } = await prisma.jobWorkflow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobWorkflowDeleteManyArgs>(args?: SelectSubset<T, JobWorkflowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobWorkflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobWorkflowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobWorkflows
     * const jobWorkflow = await prisma.jobWorkflow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobWorkflowUpdateManyArgs>(args: SelectSubset<T, JobWorkflowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobWorkflows and returns the data updated in the database.
     * @param {JobWorkflowUpdateManyAndReturnArgs} args - Arguments to update many JobWorkflows.
     * @example
     * // Update many JobWorkflows
     * const jobWorkflow = await prisma.jobWorkflow.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JobWorkflows and only return the `id`
     * const jobWorkflowWithIdOnly = await prisma.jobWorkflow.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobWorkflowUpdateManyAndReturnArgs>(args: SelectSubset<T, JobWorkflowUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobWorkflowPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JobWorkflow.
     * @param {JobWorkflowUpsertArgs} args - Arguments to update or create a JobWorkflow.
     * @example
     * // Update or create a JobWorkflow
     * const jobWorkflow = await prisma.jobWorkflow.upsert({
     *   create: {
     *     // ... data to create a JobWorkflow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobWorkflow we want to update
     *   }
     * })
     */
    upsert<T extends JobWorkflowUpsertArgs>(args: SelectSubset<T, JobWorkflowUpsertArgs<ExtArgs>>): Prisma__JobWorkflowClient<$Result.GetResult<Prisma.$JobWorkflowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobWorkflows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobWorkflowCountArgs} args - Arguments to filter JobWorkflows to count.
     * @example
     * // Count the number of JobWorkflows
     * const count = await prisma.jobWorkflow.count({
     *   where: {
     *     // ... the filter for the JobWorkflows we want to count
     *   }
     * })
    **/
    count<T extends JobWorkflowCountArgs>(
      args?: Subset<T, JobWorkflowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobWorkflowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobWorkflow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobWorkflowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobWorkflowAggregateArgs>(args: Subset<T, JobWorkflowAggregateArgs>): Prisma.PrismaPromise<GetJobWorkflowAggregateType<T>>

    /**
     * Group by JobWorkflow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobWorkflowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobWorkflowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobWorkflowGroupByArgs['orderBy'] }
        : { orderBy?: JobWorkflowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobWorkflowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobWorkflowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobWorkflow model
   */
  readonly fields: JobWorkflowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobWorkflow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobWorkflowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    workflowTemplate<T extends JobWorkflow$workflowTemplateArgs<ExtArgs> = {}>(args?: Subset<T, JobWorkflow$workflowTemplateArgs<ExtArgs>>): Prisma__WorkflowTemplateClient<$Result.GetResult<Prisma.$WorkflowTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    stages<T extends JobWorkflow$stagesArgs<ExtArgs> = {}>(args?: Subset<T, JobWorkflow$stagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobWorkflowStagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobWorkflow model
   */
  interface JobWorkflowFieldRefs {
    readonly id: FieldRef<"JobWorkflow", 'String'>
    readonly jobId: FieldRef<"JobWorkflow", 'String'>
    readonly workflowTemplateId: FieldRef<"JobWorkflow", 'String'>
    readonly name: FieldRef<"JobWorkflow", 'String'>
    readonly createdAt: FieldRef<"JobWorkflow", 'DateTime'>
    readonly updatedAt: FieldRef<"JobWorkflow", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JobWorkflow findUnique
   */
  export type JobWorkflowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflow
     */
    select?: JobWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflow
     */
    omit?: JobWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowInclude<ExtArgs> | null
    /**
     * Filter, which JobWorkflow to fetch.
     */
    where: JobWorkflowWhereUniqueInput
  }

  /**
   * JobWorkflow findUniqueOrThrow
   */
  export type JobWorkflowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflow
     */
    select?: JobWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflow
     */
    omit?: JobWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowInclude<ExtArgs> | null
    /**
     * Filter, which JobWorkflow to fetch.
     */
    where: JobWorkflowWhereUniqueInput
  }

  /**
   * JobWorkflow findFirst
   */
  export type JobWorkflowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflow
     */
    select?: JobWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflow
     */
    omit?: JobWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowInclude<ExtArgs> | null
    /**
     * Filter, which JobWorkflow to fetch.
     */
    where?: JobWorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobWorkflows to fetch.
     */
    orderBy?: JobWorkflowOrderByWithRelationInput | JobWorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobWorkflows.
     */
    cursor?: JobWorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobWorkflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobWorkflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobWorkflows.
     */
    distinct?: JobWorkflowScalarFieldEnum | JobWorkflowScalarFieldEnum[]
  }

  /**
   * JobWorkflow findFirstOrThrow
   */
  export type JobWorkflowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflow
     */
    select?: JobWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflow
     */
    omit?: JobWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowInclude<ExtArgs> | null
    /**
     * Filter, which JobWorkflow to fetch.
     */
    where?: JobWorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobWorkflows to fetch.
     */
    orderBy?: JobWorkflowOrderByWithRelationInput | JobWorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobWorkflows.
     */
    cursor?: JobWorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobWorkflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobWorkflows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobWorkflows.
     */
    distinct?: JobWorkflowScalarFieldEnum | JobWorkflowScalarFieldEnum[]
  }

  /**
   * JobWorkflow findMany
   */
  export type JobWorkflowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflow
     */
    select?: JobWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflow
     */
    omit?: JobWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowInclude<ExtArgs> | null
    /**
     * Filter, which JobWorkflows to fetch.
     */
    where?: JobWorkflowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobWorkflows to fetch.
     */
    orderBy?: JobWorkflowOrderByWithRelationInput | JobWorkflowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobWorkflows.
     */
    cursor?: JobWorkflowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobWorkflows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobWorkflows.
     */
    skip?: number
    distinct?: JobWorkflowScalarFieldEnum | JobWorkflowScalarFieldEnum[]
  }

  /**
   * JobWorkflow create
   */
  export type JobWorkflowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflow
     */
    select?: JobWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflow
     */
    omit?: JobWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowInclude<ExtArgs> | null
    /**
     * The data needed to create a JobWorkflow.
     */
    data: XOR<JobWorkflowCreateInput, JobWorkflowUncheckedCreateInput>
  }

  /**
   * JobWorkflow createMany
   */
  export type JobWorkflowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobWorkflows.
     */
    data: JobWorkflowCreateManyInput | JobWorkflowCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobWorkflow createManyAndReturn
   */
  export type JobWorkflowCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflow
     */
    select?: JobWorkflowSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflow
     */
    omit?: JobWorkflowOmit<ExtArgs> | null
    /**
     * The data used to create many JobWorkflows.
     */
    data: JobWorkflowCreateManyInput | JobWorkflowCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobWorkflow update
   */
  export type JobWorkflowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflow
     */
    select?: JobWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflow
     */
    omit?: JobWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowInclude<ExtArgs> | null
    /**
     * The data needed to update a JobWorkflow.
     */
    data: XOR<JobWorkflowUpdateInput, JobWorkflowUncheckedUpdateInput>
    /**
     * Choose, which JobWorkflow to update.
     */
    where: JobWorkflowWhereUniqueInput
  }

  /**
   * JobWorkflow updateMany
   */
  export type JobWorkflowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobWorkflows.
     */
    data: XOR<JobWorkflowUpdateManyMutationInput, JobWorkflowUncheckedUpdateManyInput>
    /**
     * Filter which JobWorkflows to update
     */
    where?: JobWorkflowWhereInput
    /**
     * Limit how many JobWorkflows to update.
     */
    limit?: number
  }

  /**
   * JobWorkflow updateManyAndReturn
   */
  export type JobWorkflowUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflow
     */
    select?: JobWorkflowSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflow
     */
    omit?: JobWorkflowOmit<ExtArgs> | null
    /**
     * The data used to update JobWorkflows.
     */
    data: XOR<JobWorkflowUpdateManyMutationInput, JobWorkflowUncheckedUpdateManyInput>
    /**
     * Filter which JobWorkflows to update
     */
    where?: JobWorkflowWhereInput
    /**
     * Limit how many JobWorkflows to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobWorkflow upsert
   */
  export type JobWorkflowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflow
     */
    select?: JobWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflow
     */
    omit?: JobWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowInclude<ExtArgs> | null
    /**
     * The filter to search for the JobWorkflow to update in case it exists.
     */
    where: JobWorkflowWhereUniqueInput
    /**
     * In case the JobWorkflow found by the `where` argument doesn't exist, create a new JobWorkflow with this data.
     */
    create: XOR<JobWorkflowCreateInput, JobWorkflowUncheckedCreateInput>
    /**
     * In case the JobWorkflow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobWorkflowUpdateInput, JobWorkflowUncheckedUpdateInput>
  }

  /**
   * JobWorkflow delete
   */
  export type JobWorkflowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflow
     */
    select?: JobWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflow
     */
    omit?: JobWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowInclude<ExtArgs> | null
    /**
     * Filter which JobWorkflow to delete.
     */
    where: JobWorkflowWhereUniqueInput
  }

  /**
   * JobWorkflow deleteMany
   */
  export type JobWorkflowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobWorkflows to delete
     */
    where?: JobWorkflowWhereInput
    /**
     * Limit how many JobWorkflows to delete.
     */
    limit?: number
  }

  /**
   * JobWorkflow.workflowTemplate
   */
  export type JobWorkflow$workflowTemplateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowTemplate
     */
    select?: WorkflowTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkflowTemplate
     */
    omit?: WorkflowTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowTemplateInclude<ExtArgs> | null
    where?: WorkflowTemplateWhereInput
  }

  /**
   * JobWorkflow.stages
   */
  export type JobWorkflow$stagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflowStage
     */
    select?: JobWorkflowStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflowStage
     */
    omit?: JobWorkflowStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowStageInclude<ExtArgs> | null
    where?: JobWorkflowStageWhereInput
    orderBy?: JobWorkflowStageOrderByWithRelationInput | JobWorkflowStageOrderByWithRelationInput[]
    cursor?: JobWorkflowStageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobWorkflowStageScalarFieldEnum | JobWorkflowStageScalarFieldEnum[]
  }

  /**
   * JobWorkflow without action
   */
  export type JobWorkflowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflow
     */
    select?: JobWorkflowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflow
     */
    omit?: JobWorkflowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowInclude<ExtArgs> | null
  }


  /**
   * Model JobWorkflowStage
   */

  export type AggregateJobWorkflowStage = {
    _count: JobWorkflowStageCountAggregateOutputType | null
    _avg: JobWorkflowStageAvgAggregateOutputType | null
    _sum: JobWorkflowStageSumAggregateOutputType | null
    _min: JobWorkflowStageMinAggregateOutputType | null
    _max: JobWorkflowStageMaxAggregateOutputType | null
  }

  export type JobWorkflowStageAvgAggregateOutputType = {
    order: number | null
  }

  export type JobWorkflowStageSumAggregateOutputType = {
    order: number | null
  }

  export type JobWorkflowStageMinAggregateOutputType = {
    id: string | null
    jobWorkflowId: string | null
    name: string | null
    type: $Enums.StageType | null
    order: number | null
  }

  export type JobWorkflowStageMaxAggregateOutputType = {
    id: string | null
    jobWorkflowId: string | null
    name: string | null
    type: $Enums.StageType | null
    order: number | null
  }

  export type JobWorkflowStageCountAggregateOutputType = {
    id: number
    jobWorkflowId: number
    name: number
    type: number
    order: number
    settings: number
    _all: number
  }


  export type JobWorkflowStageAvgAggregateInputType = {
    order?: true
  }

  export type JobWorkflowStageSumAggregateInputType = {
    order?: true
  }

  export type JobWorkflowStageMinAggregateInputType = {
    id?: true
    jobWorkflowId?: true
    name?: true
    type?: true
    order?: true
  }

  export type JobWorkflowStageMaxAggregateInputType = {
    id?: true
    jobWorkflowId?: true
    name?: true
    type?: true
    order?: true
  }

  export type JobWorkflowStageCountAggregateInputType = {
    id?: true
    jobWorkflowId?: true
    name?: true
    type?: true
    order?: true
    settings?: true
    _all?: true
  }

  export type JobWorkflowStageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobWorkflowStage to aggregate.
     */
    where?: JobWorkflowStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobWorkflowStages to fetch.
     */
    orderBy?: JobWorkflowStageOrderByWithRelationInput | JobWorkflowStageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobWorkflowStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobWorkflowStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobWorkflowStages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobWorkflowStages
    **/
    _count?: true | JobWorkflowStageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobWorkflowStageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobWorkflowStageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobWorkflowStageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobWorkflowStageMaxAggregateInputType
  }

  export type GetJobWorkflowStageAggregateType<T extends JobWorkflowStageAggregateArgs> = {
        [P in keyof T & keyof AggregateJobWorkflowStage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobWorkflowStage[P]>
      : GetScalarType<T[P], AggregateJobWorkflowStage[P]>
  }




  export type JobWorkflowStageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWorkflowStageWhereInput
    orderBy?: JobWorkflowStageOrderByWithAggregationInput | JobWorkflowStageOrderByWithAggregationInput[]
    by: JobWorkflowStageScalarFieldEnum[] | JobWorkflowStageScalarFieldEnum
    having?: JobWorkflowStageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobWorkflowStageCountAggregateInputType | true
    _avg?: JobWorkflowStageAvgAggregateInputType
    _sum?: JobWorkflowStageSumAggregateInputType
    _min?: JobWorkflowStageMinAggregateInputType
    _max?: JobWorkflowStageMaxAggregateInputType
  }

  export type JobWorkflowStageGroupByOutputType = {
    id: string
    jobWorkflowId: string
    name: string
    type: $Enums.StageType
    order: number
    settings: JsonValue | null
    _count: JobWorkflowStageCountAggregateOutputType | null
    _avg: JobWorkflowStageAvgAggregateOutputType | null
    _sum: JobWorkflowStageSumAggregateOutputType | null
    _min: JobWorkflowStageMinAggregateOutputType | null
    _max: JobWorkflowStageMaxAggregateOutputType | null
  }

  type GetJobWorkflowStageGroupByPayload<T extends JobWorkflowStageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobWorkflowStageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobWorkflowStageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobWorkflowStageGroupByOutputType[P]>
            : GetScalarType<T[P], JobWorkflowStageGroupByOutputType[P]>
        }
      >
    >


  export type JobWorkflowStageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobWorkflowId?: boolean
    name?: boolean
    type?: boolean
    order?: boolean
    settings?: boolean
    jobWorkflow?: boolean | JobWorkflowDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobWorkflowStage"]>

  export type JobWorkflowStageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobWorkflowId?: boolean
    name?: boolean
    type?: boolean
    order?: boolean
    settings?: boolean
    jobWorkflow?: boolean | JobWorkflowDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobWorkflowStage"]>

  export type JobWorkflowStageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobWorkflowId?: boolean
    name?: boolean
    type?: boolean
    order?: boolean
    settings?: boolean
    jobWorkflow?: boolean | JobWorkflowDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobWorkflowStage"]>

  export type JobWorkflowStageSelectScalar = {
    id?: boolean
    jobWorkflowId?: boolean
    name?: boolean
    type?: boolean
    order?: boolean
    settings?: boolean
  }

  export type JobWorkflowStageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobWorkflowId" | "name" | "type" | "order" | "settings", ExtArgs["result"]["jobWorkflowStage"]>
  export type JobWorkflowStageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobWorkflow?: boolean | JobWorkflowDefaultArgs<ExtArgs>
  }
  export type JobWorkflowStageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobWorkflow?: boolean | JobWorkflowDefaultArgs<ExtArgs>
  }
  export type JobWorkflowStageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobWorkflow?: boolean | JobWorkflowDefaultArgs<ExtArgs>
  }

  export type $JobWorkflowStagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobWorkflowStage"
    objects: {
      jobWorkflow: Prisma.$JobWorkflowPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobWorkflowId: string
      name: string
      type: $Enums.StageType
      order: number
      settings: Prisma.JsonValue | null
    }, ExtArgs["result"]["jobWorkflowStage"]>
    composites: {}
  }

  type JobWorkflowStageGetPayload<S extends boolean | null | undefined | JobWorkflowStageDefaultArgs> = $Result.GetResult<Prisma.$JobWorkflowStagePayload, S>

  type JobWorkflowStageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobWorkflowStageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobWorkflowStageCountAggregateInputType | true
    }

  export interface JobWorkflowStageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobWorkflowStage'], meta: { name: 'JobWorkflowStage' } }
    /**
     * Find zero or one JobWorkflowStage that matches the filter.
     * @param {JobWorkflowStageFindUniqueArgs} args - Arguments to find a JobWorkflowStage
     * @example
     * // Get one JobWorkflowStage
     * const jobWorkflowStage = await prisma.jobWorkflowStage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobWorkflowStageFindUniqueArgs>(args: SelectSubset<T, JobWorkflowStageFindUniqueArgs<ExtArgs>>): Prisma__JobWorkflowStageClient<$Result.GetResult<Prisma.$JobWorkflowStagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobWorkflowStage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobWorkflowStageFindUniqueOrThrowArgs} args - Arguments to find a JobWorkflowStage
     * @example
     * // Get one JobWorkflowStage
     * const jobWorkflowStage = await prisma.jobWorkflowStage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobWorkflowStageFindUniqueOrThrowArgs>(args: SelectSubset<T, JobWorkflowStageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobWorkflowStageClient<$Result.GetResult<Prisma.$JobWorkflowStagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobWorkflowStage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobWorkflowStageFindFirstArgs} args - Arguments to find a JobWorkflowStage
     * @example
     * // Get one JobWorkflowStage
     * const jobWorkflowStage = await prisma.jobWorkflowStage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobWorkflowStageFindFirstArgs>(args?: SelectSubset<T, JobWorkflowStageFindFirstArgs<ExtArgs>>): Prisma__JobWorkflowStageClient<$Result.GetResult<Prisma.$JobWorkflowStagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobWorkflowStage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobWorkflowStageFindFirstOrThrowArgs} args - Arguments to find a JobWorkflowStage
     * @example
     * // Get one JobWorkflowStage
     * const jobWorkflowStage = await prisma.jobWorkflowStage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobWorkflowStageFindFirstOrThrowArgs>(args?: SelectSubset<T, JobWorkflowStageFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobWorkflowStageClient<$Result.GetResult<Prisma.$JobWorkflowStagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobWorkflowStages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobWorkflowStageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobWorkflowStages
     * const jobWorkflowStages = await prisma.jobWorkflowStage.findMany()
     * 
     * // Get first 10 JobWorkflowStages
     * const jobWorkflowStages = await prisma.jobWorkflowStage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWorkflowStageWithIdOnly = await prisma.jobWorkflowStage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobWorkflowStageFindManyArgs>(args?: SelectSubset<T, JobWorkflowStageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobWorkflowStagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobWorkflowStage.
     * @param {JobWorkflowStageCreateArgs} args - Arguments to create a JobWorkflowStage.
     * @example
     * // Create one JobWorkflowStage
     * const JobWorkflowStage = await prisma.jobWorkflowStage.create({
     *   data: {
     *     // ... data to create a JobWorkflowStage
     *   }
     * })
     * 
     */
    create<T extends JobWorkflowStageCreateArgs>(args: SelectSubset<T, JobWorkflowStageCreateArgs<ExtArgs>>): Prisma__JobWorkflowStageClient<$Result.GetResult<Prisma.$JobWorkflowStagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobWorkflowStages.
     * @param {JobWorkflowStageCreateManyArgs} args - Arguments to create many JobWorkflowStages.
     * @example
     * // Create many JobWorkflowStages
     * const jobWorkflowStage = await prisma.jobWorkflowStage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobWorkflowStageCreateManyArgs>(args?: SelectSubset<T, JobWorkflowStageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobWorkflowStages and returns the data saved in the database.
     * @param {JobWorkflowStageCreateManyAndReturnArgs} args - Arguments to create many JobWorkflowStages.
     * @example
     * // Create many JobWorkflowStages
     * const jobWorkflowStage = await prisma.jobWorkflowStage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobWorkflowStages and only return the `id`
     * const jobWorkflowStageWithIdOnly = await prisma.jobWorkflowStage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobWorkflowStageCreateManyAndReturnArgs>(args?: SelectSubset<T, JobWorkflowStageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobWorkflowStagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JobWorkflowStage.
     * @param {JobWorkflowStageDeleteArgs} args - Arguments to delete one JobWorkflowStage.
     * @example
     * // Delete one JobWorkflowStage
     * const JobWorkflowStage = await prisma.jobWorkflowStage.delete({
     *   where: {
     *     // ... filter to delete one JobWorkflowStage
     *   }
     * })
     * 
     */
    delete<T extends JobWorkflowStageDeleteArgs>(args: SelectSubset<T, JobWorkflowStageDeleteArgs<ExtArgs>>): Prisma__JobWorkflowStageClient<$Result.GetResult<Prisma.$JobWorkflowStagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobWorkflowStage.
     * @param {JobWorkflowStageUpdateArgs} args - Arguments to update one JobWorkflowStage.
     * @example
     * // Update one JobWorkflowStage
     * const jobWorkflowStage = await prisma.jobWorkflowStage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobWorkflowStageUpdateArgs>(args: SelectSubset<T, JobWorkflowStageUpdateArgs<ExtArgs>>): Prisma__JobWorkflowStageClient<$Result.GetResult<Prisma.$JobWorkflowStagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobWorkflowStages.
     * @param {JobWorkflowStageDeleteManyArgs} args - Arguments to filter JobWorkflowStages to delete.
     * @example
     * // Delete a few JobWorkflowStages
     * const { count } = await prisma.jobWorkflowStage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobWorkflowStageDeleteManyArgs>(args?: SelectSubset<T, JobWorkflowStageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobWorkflowStages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobWorkflowStageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobWorkflowStages
     * const jobWorkflowStage = await prisma.jobWorkflowStage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobWorkflowStageUpdateManyArgs>(args: SelectSubset<T, JobWorkflowStageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobWorkflowStages and returns the data updated in the database.
     * @param {JobWorkflowStageUpdateManyAndReturnArgs} args - Arguments to update many JobWorkflowStages.
     * @example
     * // Update many JobWorkflowStages
     * const jobWorkflowStage = await prisma.jobWorkflowStage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JobWorkflowStages and only return the `id`
     * const jobWorkflowStageWithIdOnly = await prisma.jobWorkflowStage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobWorkflowStageUpdateManyAndReturnArgs>(args: SelectSubset<T, JobWorkflowStageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobWorkflowStagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JobWorkflowStage.
     * @param {JobWorkflowStageUpsertArgs} args - Arguments to update or create a JobWorkflowStage.
     * @example
     * // Update or create a JobWorkflowStage
     * const jobWorkflowStage = await prisma.jobWorkflowStage.upsert({
     *   create: {
     *     // ... data to create a JobWorkflowStage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobWorkflowStage we want to update
     *   }
     * })
     */
    upsert<T extends JobWorkflowStageUpsertArgs>(args: SelectSubset<T, JobWorkflowStageUpsertArgs<ExtArgs>>): Prisma__JobWorkflowStageClient<$Result.GetResult<Prisma.$JobWorkflowStagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobWorkflowStages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobWorkflowStageCountArgs} args - Arguments to filter JobWorkflowStages to count.
     * @example
     * // Count the number of JobWorkflowStages
     * const count = await prisma.jobWorkflowStage.count({
     *   where: {
     *     // ... the filter for the JobWorkflowStages we want to count
     *   }
     * })
    **/
    count<T extends JobWorkflowStageCountArgs>(
      args?: Subset<T, JobWorkflowStageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobWorkflowStageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobWorkflowStage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobWorkflowStageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobWorkflowStageAggregateArgs>(args: Subset<T, JobWorkflowStageAggregateArgs>): Prisma.PrismaPromise<GetJobWorkflowStageAggregateType<T>>

    /**
     * Group by JobWorkflowStage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobWorkflowStageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobWorkflowStageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobWorkflowStageGroupByArgs['orderBy'] }
        : { orderBy?: JobWorkflowStageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobWorkflowStageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobWorkflowStageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobWorkflowStage model
   */
  readonly fields: JobWorkflowStageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobWorkflowStage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobWorkflowStageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jobWorkflow<T extends JobWorkflowDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobWorkflowDefaultArgs<ExtArgs>>): Prisma__JobWorkflowClient<$Result.GetResult<Prisma.$JobWorkflowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobWorkflowStage model
   */
  interface JobWorkflowStageFieldRefs {
    readonly id: FieldRef<"JobWorkflowStage", 'String'>
    readonly jobWorkflowId: FieldRef<"JobWorkflowStage", 'String'>
    readonly name: FieldRef<"JobWorkflowStage", 'String'>
    readonly type: FieldRef<"JobWorkflowStage", 'StageType'>
    readonly order: FieldRef<"JobWorkflowStage", 'Int'>
    readonly settings: FieldRef<"JobWorkflowStage", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * JobWorkflowStage findUnique
   */
  export type JobWorkflowStageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflowStage
     */
    select?: JobWorkflowStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflowStage
     */
    omit?: JobWorkflowStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowStageInclude<ExtArgs> | null
    /**
     * Filter, which JobWorkflowStage to fetch.
     */
    where: JobWorkflowStageWhereUniqueInput
  }

  /**
   * JobWorkflowStage findUniqueOrThrow
   */
  export type JobWorkflowStageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflowStage
     */
    select?: JobWorkflowStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflowStage
     */
    omit?: JobWorkflowStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowStageInclude<ExtArgs> | null
    /**
     * Filter, which JobWorkflowStage to fetch.
     */
    where: JobWorkflowStageWhereUniqueInput
  }

  /**
   * JobWorkflowStage findFirst
   */
  export type JobWorkflowStageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflowStage
     */
    select?: JobWorkflowStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflowStage
     */
    omit?: JobWorkflowStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowStageInclude<ExtArgs> | null
    /**
     * Filter, which JobWorkflowStage to fetch.
     */
    where?: JobWorkflowStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobWorkflowStages to fetch.
     */
    orderBy?: JobWorkflowStageOrderByWithRelationInput | JobWorkflowStageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobWorkflowStages.
     */
    cursor?: JobWorkflowStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobWorkflowStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobWorkflowStages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobWorkflowStages.
     */
    distinct?: JobWorkflowStageScalarFieldEnum | JobWorkflowStageScalarFieldEnum[]
  }

  /**
   * JobWorkflowStage findFirstOrThrow
   */
  export type JobWorkflowStageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflowStage
     */
    select?: JobWorkflowStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflowStage
     */
    omit?: JobWorkflowStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowStageInclude<ExtArgs> | null
    /**
     * Filter, which JobWorkflowStage to fetch.
     */
    where?: JobWorkflowStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobWorkflowStages to fetch.
     */
    orderBy?: JobWorkflowStageOrderByWithRelationInput | JobWorkflowStageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobWorkflowStages.
     */
    cursor?: JobWorkflowStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobWorkflowStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobWorkflowStages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobWorkflowStages.
     */
    distinct?: JobWorkflowStageScalarFieldEnum | JobWorkflowStageScalarFieldEnum[]
  }

  /**
   * JobWorkflowStage findMany
   */
  export type JobWorkflowStageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflowStage
     */
    select?: JobWorkflowStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflowStage
     */
    omit?: JobWorkflowStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowStageInclude<ExtArgs> | null
    /**
     * Filter, which JobWorkflowStages to fetch.
     */
    where?: JobWorkflowStageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobWorkflowStages to fetch.
     */
    orderBy?: JobWorkflowStageOrderByWithRelationInput | JobWorkflowStageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobWorkflowStages.
     */
    cursor?: JobWorkflowStageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobWorkflowStages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobWorkflowStages.
     */
    skip?: number
    distinct?: JobWorkflowStageScalarFieldEnum | JobWorkflowStageScalarFieldEnum[]
  }

  /**
   * JobWorkflowStage create
   */
  export type JobWorkflowStageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflowStage
     */
    select?: JobWorkflowStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflowStage
     */
    omit?: JobWorkflowStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowStageInclude<ExtArgs> | null
    /**
     * The data needed to create a JobWorkflowStage.
     */
    data: XOR<JobWorkflowStageCreateInput, JobWorkflowStageUncheckedCreateInput>
  }

  /**
   * JobWorkflowStage createMany
   */
  export type JobWorkflowStageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobWorkflowStages.
     */
    data: JobWorkflowStageCreateManyInput | JobWorkflowStageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobWorkflowStage createManyAndReturn
   */
  export type JobWorkflowStageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflowStage
     */
    select?: JobWorkflowStageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflowStage
     */
    omit?: JobWorkflowStageOmit<ExtArgs> | null
    /**
     * The data used to create many JobWorkflowStages.
     */
    data: JobWorkflowStageCreateManyInput | JobWorkflowStageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowStageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobWorkflowStage update
   */
  export type JobWorkflowStageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflowStage
     */
    select?: JobWorkflowStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflowStage
     */
    omit?: JobWorkflowStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowStageInclude<ExtArgs> | null
    /**
     * The data needed to update a JobWorkflowStage.
     */
    data: XOR<JobWorkflowStageUpdateInput, JobWorkflowStageUncheckedUpdateInput>
    /**
     * Choose, which JobWorkflowStage to update.
     */
    where: JobWorkflowStageWhereUniqueInput
  }

  /**
   * JobWorkflowStage updateMany
   */
  export type JobWorkflowStageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobWorkflowStages.
     */
    data: XOR<JobWorkflowStageUpdateManyMutationInput, JobWorkflowStageUncheckedUpdateManyInput>
    /**
     * Filter which JobWorkflowStages to update
     */
    where?: JobWorkflowStageWhereInput
    /**
     * Limit how many JobWorkflowStages to update.
     */
    limit?: number
  }

  /**
   * JobWorkflowStage updateManyAndReturn
   */
  export type JobWorkflowStageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflowStage
     */
    select?: JobWorkflowStageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflowStage
     */
    omit?: JobWorkflowStageOmit<ExtArgs> | null
    /**
     * The data used to update JobWorkflowStages.
     */
    data: XOR<JobWorkflowStageUpdateManyMutationInput, JobWorkflowStageUncheckedUpdateManyInput>
    /**
     * Filter which JobWorkflowStages to update
     */
    where?: JobWorkflowStageWhereInput
    /**
     * Limit how many JobWorkflowStages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowStageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobWorkflowStage upsert
   */
  export type JobWorkflowStageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflowStage
     */
    select?: JobWorkflowStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflowStage
     */
    omit?: JobWorkflowStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowStageInclude<ExtArgs> | null
    /**
     * The filter to search for the JobWorkflowStage to update in case it exists.
     */
    where: JobWorkflowStageWhereUniqueInput
    /**
     * In case the JobWorkflowStage found by the `where` argument doesn't exist, create a new JobWorkflowStage with this data.
     */
    create: XOR<JobWorkflowStageCreateInput, JobWorkflowStageUncheckedCreateInput>
    /**
     * In case the JobWorkflowStage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobWorkflowStageUpdateInput, JobWorkflowStageUncheckedUpdateInput>
  }

  /**
   * JobWorkflowStage delete
   */
  export type JobWorkflowStageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflowStage
     */
    select?: JobWorkflowStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflowStage
     */
    omit?: JobWorkflowStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowStageInclude<ExtArgs> | null
    /**
     * Filter which JobWorkflowStage to delete.
     */
    where: JobWorkflowStageWhereUniqueInput
  }

  /**
   * JobWorkflowStage deleteMany
   */
  export type JobWorkflowStageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobWorkflowStages to delete
     */
    where?: JobWorkflowStageWhereInput
    /**
     * Limit how many JobWorkflowStages to delete.
     */
    limit?: number
  }

  /**
   * JobWorkflowStage without action
   */
  export type JobWorkflowStageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobWorkflowStage
     */
    select?: JobWorkflowStageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobWorkflowStage
     */
    omit?: JobWorkflowStageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobWorkflowStageInclude<ExtArgs> | null
  }


  /**
   * Model JobHiringMember
   */

  export type AggregateJobHiringMember = {
    _count: JobHiringMemberCountAggregateOutputType | null
    _min: JobHiringMemberMinAggregateOutputType | null
    _max: JobHiringMemberMaxAggregateOutputType | null
  }

  export type JobHiringMemberMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    userId: string | null
    role: $Enums.CompanyMemberRole | null
    isExternalRecruiter: boolean | null
    createdAt: Date | null
  }

  export type JobHiringMemberMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    userId: string | null
    role: $Enums.CompanyMemberRole | null
    isExternalRecruiter: boolean | null
    createdAt: Date | null
  }

  export type JobHiringMemberCountAggregateOutputType = {
    id: number
    jobId: number
    userId: number
    role: number
    isExternalRecruiter: number
    createdAt: number
    _all: number
  }


  export type JobHiringMemberMinAggregateInputType = {
    id?: true
    jobId?: true
    userId?: true
    role?: true
    isExternalRecruiter?: true
    createdAt?: true
  }

  export type JobHiringMemberMaxAggregateInputType = {
    id?: true
    jobId?: true
    userId?: true
    role?: true
    isExternalRecruiter?: true
    createdAt?: true
  }

  export type JobHiringMemberCountAggregateInputType = {
    id?: true
    jobId?: true
    userId?: true
    role?: true
    isExternalRecruiter?: true
    createdAt?: true
    _all?: true
  }

  export type JobHiringMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobHiringMember to aggregate.
     */
    where?: JobHiringMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobHiringMembers to fetch.
     */
    orderBy?: JobHiringMemberOrderByWithRelationInput | JobHiringMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobHiringMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobHiringMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobHiringMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobHiringMembers
    **/
    _count?: true | JobHiringMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobHiringMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobHiringMemberMaxAggregateInputType
  }

  export type GetJobHiringMemberAggregateType<T extends JobHiringMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateJobHiringMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobHiringMember[P]>
      : GetScalarType<T[P], AggregateJobHiringMember[P]>
  }




  export type JobHiringMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobHiringMemberWhereInput
    orderBy?: JobHiringMemberOrderByWithAggregationInput | JobHiringMemberOrderByWithAggregationInput[]
    by: JobHiringMemberScalarFieldEnum[] | JobHiringMemberScalarFieldEnum
    having?: JobHiringMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobHiringMemberCountAggregateInputType | true
    _min?: JobHiringMemberMinAggregateInputType
    _max?: JobHiringMemberMaxAggregateInputType
  }

  export type JobHiringMemberGroupByOutputType = {
    id: string
    jobId: string
    userId: string
    role: $Enums.CompanyMemberRole
    isExternalRecruiter: boolean
    createdAt: Date
    _count: JobHiringMemberCountAggregateOutputType | null
    _min: JobHiringMemberMinAggregateOutputType | null
    _max: JobHiringMemberMaxAggregateOutputType | null
  }

  type GetJobHiringMemberGroupByPayload<T extends JobHiringMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobHiringMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobHiringMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobHiringMemberGroupByOutputType[P]>
            : GetScalarType<T[P], JobHiringMemberGroupByOutputType[P]>
        }
      >
    >


  export type JobHiringMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    userId?: boolean
    role?: boolean
    isExternalRecruiter?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobHiringMember"]>

  export type JobHiringMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    userId?: boolean
    role?: boolean
    isExternalRecruiter?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobHiringMember"]>

  export type JobHiringMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    userId?: boolean
    role?: boolean
    isExternalRecruiter?: boolean
    createdAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobHiringMember"]>

  export type JobHiringMemberSelectScalar = {
    id?: boolean
    jobId?: boolean
    userId?: boolean
    role?: boolean
    isExternalRecruiter?: boolean
    createdAt?: boolean
  }

  export type JobHiringMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "userId" | "role" | "isExternalRecruiter" | "createdAt", ExtArgs["result"]["jobHiringMember"]>
  export type JobHiringMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type JobHiringMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type JobHiringMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $JobHiringMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobHiringMember"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      userId: string
      role: $Enums.CompanyMemberRole
      isExternalRecruiter: boolean
      createdAt: Date
    }, ExtArgs["result"]["jobHiringMember"]>
    composites: {}
  }

  type JobHiringMemberGetPayload<S extends boolean | null | undefined | JobHiringMemberDefaultArgs> = $Result.GetResult<Prisma.$JobHiringMemberPayload, S>

  type JobHiringMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobHiringMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobHiringMemberCountAggregateInputType | true
    }

  export interface JobHiringMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobHiringMember'], meta: { name: 'JobHiringMember' } }
    /**
     * Find zero or one JobHiringMember that matches the filter.
     * @param {JobHiringMemberFindUniqueArgs} args - Arguments to find a JobHiringMember
     * @example
     * // Get one JobHiringMember
     * const jobHiringMember = await prisma.jobHiringMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobHiringMemberFindUniqueArgs>(args: SelectSubset<T, JobHiringMemberFindUniqueArgs<ExtArgs>>): Prisma__JobHiringMemberClient<$Result.GetResult<Prisma.$JobHiringMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobHiringMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobHiringMemberFindUniqueOrThrowArgs} args - Arguments to find a JobHiringMember
     * @example
     * // Get one JobHiringMember
     * const jobHiringMember = await prisma.jobHiringMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobHiringMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, JobHiringMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobHiringMemberClient<$Result.GetResult<Prisma.$JobHiringMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobHiringMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobHiringMemberFindFirstArgs} args - Arguments to find a JobHiringMember
     * @example
     * // Get one JobHiringMember
     * const jobHiringMember = await prisma.jobHiringMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobHiringMemberFindFirstArgs>(args?: SelectSubset<T, JobHiringMemberFindFirstArgs<ExtArgs>>): Prisma__JobHiringMemberClient<$Result.GetResult<Prisma.$JobHiringMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobHiringMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobHiringMemberFindFirstOrThrowArgs} args - Arguments to find a JobHiringMember
     * @example
     * // Get one JobHiringMember
     * const jobHiringMember = await prisma.jobHiringMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobHiringMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, JobHiringMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobHiringMemberClient<$Result.GetResult<Prisma.$JobHiringMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobHiringMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobHiringMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobHiringMembers
     * const jobHiringMembers = await prisma.jobHiringMember.findMany()
     * 
     * // Get first 10 JobHiringMembers
     * const jobHiringMembers = await prisma.jobHiringMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobHiringMemberWithIdOnly = await prisma.jobHiringMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobHiringMemberFindManyArgs>(args?: SelectSubset<T, JobHiringMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobHiringMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobHiringMember.
     * @param {JobHiringMemberCreateArgs} args - Arguments to create a JobHiringMember.
     * @example
     * // Create one JobHiringMember
     * const JobHiringMember = await prisma.jobHiringMember.create({
     *   data: {
     *     // ... data to create a JobHiringMember
     *   }
     * })
     * 
     */
    create<T extends JobHiringMemberCreateArgs>(args: SelectSubset<T, JobHiringMemberCreateArgs<ExtArgs>>): Prisma__JobHiringMemberClient<$Result.GetResult<Prisma.$JobHiringMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobHiringMembers.
     * @param {JobHiringMemberCreateManyArgs} args - Arguments to create many JobHiringMembers.
     * @example
     * // Create many JobHiringMembers
     * const jobHiringMember = await prisma.jobHiringMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobHiringMemberCreateManyArgs>(args?: SelectSubset<T, JobHiringMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobHiringMembers and returns the data saved in the database.
     * @param {JobHiringMemberCreateManyAndReturnArgs} args - Arguments to create many JobHiringMembers.
     * @example
     * // Create many JobHiringMembers
     * const jobHiringMember = await prisma.jobHiringMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobHiringMembers and only return the `id`
     * const jobHiringMemberWithIdOnly = await prisma.jobHiringMember.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobHiringMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, JobHiringMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobHiringMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JobHiringMember.
     * @param {JobHiringMemberDeleteArgs} args - Arguments to delete one JobHiringMember.
     * @example
     * // Delete one JobHiringMember
     * const JobHiringMember = await prisma.jobHiringMember.delete({
     *   where: {
     *     // ... filter to delete one JobHiringMember
     *   }
     * })
     * 
     */
    delete<T extends JobHiringMemberDeleteArgs>(args: SelectSubset<T, JobHiringMemberDeleteArgs<ExtArgs>>): Prisma__JobHiringMemberClient<$Result.GetResult<Prisma.$JobHiringMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobHiringMember.
     * @param {JobHiringMemberUpdateArgs} args - Arguments to update one JobHiringMember.
     * @example
     * // Update one JobHiringMember
     * const jobHiringMember = await prisma.jobHiringMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobHiringMemberUpdateArgs>(args: SelectSubset<T, JobHiringMemberUpdateArgs<ExtArgs>>): Prisma__JobHiringMemberClient<$Result.GetResult<Prisma.$JobHiringMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobHiringMembers.
     * @param {JobHiringMemberDeleteManyArgs} args - Arguments to filter JobHiringMembers to delete.
     * @example
     * // Delete a few JobHiringMembers
     * const { count } = await prisma.jobHiringMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobHiringMemberDeleteManyArgs>(args?: SelectSubset<T, JobHiringMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobHiringMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobHiringMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobHiringMembers
     * const jobHiringMember = await prisma.jobHiringMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobHiringMemberUpdateManyArgs>(args: SelectSubset<T, JobHiringMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobHiringMembers and returns the data updated in the database.
     * @param {JobHiringMemberUpdateManyAndReturnArgs} args - Arguments to update many JobHiringMembers.
     * @example
     * // Update many JobHiringMembers
     * const jobHiringMember = await prisma.jobHiringMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JobHiringMembers and only return the `id`
     * const jobHiringMemberWithIdOnly = await prisma.jobHiringMember.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobHiringMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, JobHiringMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobHiringMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JobHiringMember.
     * @param {JobHiringMemberUpsertArgs} args - Arguments to update or create a JobHiringMember.
     * @example
     * // Update or create a JobHiringMember
     * const jobHiringMember = await prisma.jobHiringMember.upsert({
     *   create: {
     *     // ... data to create a JobHiringMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobHiringMember we want to update
     *   }
     * })
     */
    upsert<T extends JobHiringMemberUpsertArgs>(args: SelectSubset<T, JobHiringMemberUpsertArgs<ExtArgs>>): Prisma__JobHiringMemberClient<$Result.GetResult<Prisma.$JobHiringMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobHiringMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobHiringMemberCountArgs} args - Arguments to filter JobHiringMembers to count.
     * @example
     * // Count the number of JobHiringMembers
     * const count = await prisma.jobHiringMember.count({
     *   where: {
     *     // ... the filter for the JobHiringMembers we want to count
     *   }
     * })
    **/
    count<T extends JobHiringMemberCountArgs>(
      args?: Subset<T, JobHiringMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobHiringMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobHiringMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobHiringMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobHiringMemberAggregateArgs>(args: Subset<T, JobHiringMemberAggregateArgs>): Prisma.PrismaPromise<GetJobHiringMemberAggregateType<T>>

    /**
     * Group by JobHiringMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobHiringMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobHiringMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobHiringMemberGroupByArgs['orderBy'] }
        : { orderBy?: JobHiringMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobHiringMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobHiringMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobHiringMember model
   */
  readonly fields: JobHiringMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobHiringMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobHiringMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobHiringMember model
   */
  interface JobHiringMemberFieldRefs {
    readonly id: FieldRef<"JobHiringMember", 'String'>
    readonly jobId: FieldRef<"JobHiringMember", 'String'>
    readonly userId: FieldRef<"JobHiringMember", 'String'>
    readonly role: FieldRef<"JobHiringMember", 'CompanyMemberRole'>
    readonly isExternalRecruiter: FieldRef<"JobHiringMember", 'Boolean'>
    readonly createdAt: FieldRef<"JobHiringMember", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JobHiringMember findUnique
   */
  export type JobHiringMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHiringMember
     */
    select?: JobHiringMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHiringMember
     */
    omit?: JobHiringMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHiringMemberInclude<ExtArgs> | null
    /**
     * Filter, which JobHiringMember to fetch.
     */
    where: JobHiringMemberWhereUniqueInput
  }

  /**
   * JobHiringMember findUniqueOrThrow
   */
  export type JobHiringMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHiringMember
     */
    select?: JobHiringMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHiringMember
     */
    omit?: JobHiringMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHiringMemberInclude<ExtArgs> | null
    /**
     * Filter, which JobHiringMember to fetch.
     */
    where: JobHiringMemberWhereUniqueInput
  }

  /**
   * JobHiringMember findFirst
   */
  export type JobHiringMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHiringMember
     */
    select?: JobHiringMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHiringMember
     */
    omit?: JobHiringMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHiringMemberInclude<ExtArgs> | null
    /**
     * Filter, which JobHiringMember to fetch.
     */
    where?: JobHiringMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobHiringMembers to fetch.
     */
    orderBy?: JobHiringMemberOrderByWithRelationInput | JobHiringMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobHiringMembers.
     */
    cursor?: JobHiringMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobHiringMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobHiringMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobHiringMembers.
     */
    distinct?: JobHiringMemberScalarFieldEnum | JobHiringMemberScalarFieldEnum[]
  }

  /**
   * JobHiringMember findFirstOrThrow
   */
  export type JobHiringMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHiringMember
     */
    select?: JobHiringMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHiringMember
     */
    omit?: JobHiringMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHiringMemberInclude<ExtArgs> | null
    /**
     * Filter, which JobHiringMember to fetch.
     */
    where?: JobHiringMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobHiringMembers to fetch.
     */
    orderBy?: JobHiringMemberOrderByWithRelationInput | JobHiringMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobHiringMembers.
     */
    cursor?: JobHiringMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobHiringMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobHiringMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobHiringMembers.
     */
    distinct?: JobHiringMemberScalarFieldEnum | JobHiringMemberScalarFieldEnum[]
  }

  /**
   * JobHiringMember findMany
   */
  export type JobHiringMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHiringMember
     */
    select?: JobHiringMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHiringMember
     */
    omit?: JobHiringMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHiringMemberInclude<ExtArgs> | null
    /**
     * Filter, which JobHiringMembers to fetch.
     */
    where?: JobHiringMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobHiringMembers to fetch.
     */
    orderBy?: JobHiringMemberOrderByWithRelationInput | JobHiringMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobHiringMembers.
     */
    cursor?: JobHiringMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobHiringMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobHiringMembers.
     */
    skip?: number
    distinct?: JobHiringMemberScalarFieldEnum | JobHiringMemberScalarFieldEnum[]
  }

  /**
   * JobHiringMember create
   */
  export type JobHiringMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHiringMember
     */
    select?: JobHiringMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHiringMember
     */
    omit?: JobHiringMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHiringMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a JobHiringMember.
     */
    data: XOR<JobHiringMemberCreateInput, JobHiringMemberUncheckedCreateInput>
  }

  /**
   * JobHiringMember createMany
   */
  export type JobHiringMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobHiringMembers.
     */
    data: JobHiringMemberCreateManyInput | JobHiringMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobHiringMember createManyAndReturn
   */
  export type JobHiringMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHiringMember
     */
    select?: JobHiringMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobHiringMember
     */
    omit?: JobHiringMemberOmit<ExtArgs> | null
    /**
     * The data used to create many JobHiringMembers.
     */
    data: JobHiringMemberCreateManyInput | JobHiringMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHiringMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobHiringMember update
   */
  export type JobHiringMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHiringMember
     */
    select?: JobHiringMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHiringMember
     */
    omit?: JobHiringMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHiringMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a JobHiringMember.
     */
    data: XOR<JobHiringMemberUpdateInput, JobHiringMemberUncheckedUpdateInput>
    /**
     * Choose, which JobHiringMember to update.
     */
    where: JobHiringMemberWhereUniqueInput
  }

  /**
   * JobHiringMember updateMany
   */
  export type JobHiringMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobHiringMembers.
     */
    data: XOR<JobHiringMemberUpdateManyMutationInput, JobHiringMemberUncheckedUpdateManyInput>
    /**
     * Filter which JobHiringMembers to update
     */
    where?: JobHiringMemberWhereInput
    /**
     * Limit how many JobHiringMembers to update.
     */
    limit?: number
  }

  /**
   * JobHiringMember updateManyAndReturn
   */
  export type JobHiringMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHiringMember
     */
    select?: JobHiringMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobHiringMember
     */
    omit?: JobHiringMemberOmit<ExtArgs> | null
    /**
     * The data used to update JobHiringMembers.
     */
    data: XOR<JobHiringMemberUpdateManyMutationInput, JobHiringMemberUncheckedUpdateManyInput>
    /**
     * Filter which JobHiringMembers to update
     */
    where?: JobHiringMemberWhereInput
    /**
     * Limit how many JobHiringMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHiringMemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobHiringMember upsert
   */
  export type JobHiringMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHiringMember
     */
    select?: JobHiringMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHiringMember
     */
    omit?: JobHiringMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHiringMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the JobHiringMember to update in case it exists.
     */
    where: JobHiringMemberWhereUniqueInput
    /**
     * In case the JobHiringMember found by the `where` argument doesn't exist, create a new JobHiringMember with this data.
     */
    create: XOR<JobHiringMemberCreateInput, JobHiringMemberUncheckedCreateInput>
    /**
     * In case the JobHiringMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobHiringMemberUpdateInput, JobHiringMemberUncheckedUpdateInput>
  }

  /**
   * JobHiringMember delete
   */
  export type JobHiringMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHiringMember
     */
    select?: JobHiringMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHiringMember
     */
    omit?: JobHiringMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHiringMemberInclude<ExtArgs> | null
    /**
     * Filter which JobHiringMember to delete.
     */
    where: JobHiringMemberWhereUniqueInput
  }

  /**
   * JobHiringMember deleteMany
   */
  export type JobHiringMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobHiringMembers to delete
     */
    where?: JobHiringMemberWhereInput
    /**
     * Limit how many JobHiringMembers to delete.
     */
    limit?: number
  }

  /**
   * JobHiringMember without action
   */
  export type JobHiringMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobHiringMember
     */
    select?: JobHiringMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobHiringMember
     */
    omit?: JobHiringMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobHiringMemberInclude<ExtArgs> | null
  }


  /**
   * Model RatingCardTemplate
   */

  export type AggregateRatingCardTemplate = {
    _count: RatingCardTemplateCountAggregateOutputType | null
    _min: RatingCardTemplateMinAggregateOutputType | null
    _max: RatingCardTemplateMaxAggregateOutputType | null
  }

  export type RatingCardTemplateMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    companyId: string | null
    type: $Enums.RatingCardType | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RatingCardTemplateMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    companyId: string | null
    type: $Enums.RatingCardType | null
    isDefault: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RatingCardTemplateCountAggregateOutputType = {
    id: number
    name: number
    description: number
    companyId: number
    type: number
    isDefault: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RatingCardTemplateMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    companyId?: true
    type?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RatingCardTemplateMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    companyId?: true
    type?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RatingCardTemplateCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    companyId?: true
    type?: true
    isDefault?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RatingCardTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RatingCardTemplate to aggregate.
     */
    where?: RatingCardTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RatingCardTemplates to fetch.
     */
    orderBy?: RatingCardTemplateOrderByWithRelationInput | RatingCardTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RatingCardTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RatingCardTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RatingCardTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RatingCardTemplates
    **/
    _count?: true | RatingCardTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingCardTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingCardTemplateMaxAggregateInputType
  }

  export type GetRatingCardTemplateAggregateType<T extends RatingCardTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateRatingCardTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRatingCardTemplate[P]>
      : GetScalarType<T[P], AggregateRatingCardTemplate[P]>
  }




  export type RatingCardTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingCardTemplateWhereInput
    orderBy?: RatingCardTemplateOrderByWithAggregationInput | RatingCardTemplateOrderByWithAggregationInput[]
    by: RatingCardTemplateScalarFieldEnum[] | RatingCardTemplateScalarFieldEnum
    having?: RatingCardTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingCardTemplateCountAggregateInputType | true
    _min?: RatingCardTemplateMinAggregateInputType
    _max?: RatingCardTemplateMaxAggregateInputType
  }

  export type RatingCardTemplateGroupByOutputType = {
    id: string
    name: string
    description: string | null
    companyId: string
    type: $Enums.RatingCardType
    isDefault: boolean
    createdAt: Date
    updatedAt: Date
    _count: RatingCardTemplateCountAggregateOutputType | null
    _min: RatingCardTemplateMinAggregateOutputType | null
    _max: RatingCardTemplateMaxAggregateOutputType | null
  }

  type GetRatingCardTemplateGroupByPayload<T extends RatingCardTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RatingCardTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingCardTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingCardTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], RatingCardTemplateGroupByOutputType[P]>
        }
      >
    >


  export type RatingCardTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    companyId?: boolean
    type?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    categories?: boolean | RatingCardTemplate$categoriesArgs<ExtArgs>
    candidateRatings?: boolean | RatingCardTemplate$candidateRatingsArgs<ExtArgs>
    _count?: boolean | RatingCardTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ratingCardTemplate"]>

  export type RatingCardTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    companyId?: boolean
    type?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ratingCardTemplate"]>

  export type RatingCardTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    companyId?: boolean
    type?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ratingCardTemplate"]>

  export type RatingCardTemplateSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    companyId?: boolean
    type?: boolean
    isDefault?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RatingCardTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "companyId" | "type" | "isDefault" | "createdAt" | "updatedAt", ExtArgs["result"]["ratingCardTemplate"]>
  export type RatingCardTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    categories?: boolean | RatingCardTemplate$categoriesArgs<ExtArgs>
    candidateRatings?: boolean | RatingCardTemplate$candidateRatingsArgs<ExtArgs>
    _count?: boolean | RatingCardTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RatingCardTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type RatingCardTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $RatingCardTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RatingCardTemplate"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      categories: Prisma.$RatingCategoryPayload<ExtArgs>[]
      candidateRatings: Prisma.$CandidateRatingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      companyId: string
      type: $Enums.RatingCardType
      isDefault: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ratingCardTemplate"]>
    composites: {}
  }

  type RatingCardTemplateGetPayload<S extends boolean | null | undefined | RatingCardTemplateDefaultArgs> = $Result.GetResult<Prisma.$RatingCardTemplatePayload, S>

  type RatingCardTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RatingCardTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RatingCardTemplateCountAggregateInputType | true
    }

  export interface RatingCardTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RatingCardTemplate'], meta: { name: 'RatingCardTemplate' } }
    /**
     * Find zero or one RatingCardTemplate that matches the filter.
     * @param {RatingCardTemplateFindUniqueArgs} args - Arguments to find a RatingCardTemplate
     * @example
     * // Get one RatingCardTemplate
     * const ratingCardTemplate = await prisma.ratingCardTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RatingCardTemplateFindUniqueArgs>(args: SelectSubset<T, RatingCardTemplateFindUniqueArgs<ExtArgs>>): Prisma__RatingCardTemplateClient<$Result.GetResult<Prisma.$RatingCardTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RatingCardTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RatingCardTemplateFindUniqueOrThrowArgs} args - Arguments to find a RatingCardTemplate
     * @example
     * // Get one RatingCardTemplate
     * const ratingCardTemplate = await prisma.ratingCardTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RatingCardTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, RatingCardTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RatingCardTemplateClient<$Result.GetResult<Prisma.$RatingCardTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RatingCardTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCardTemplateFindFirstArgs} args - Arguments to find a RatingCardTemplate
     * @example
     * // Get one RatingCardTemplate
     * const ratingCardTemplate = await prisma.ratingCardTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RatingCardTemplateFindFirstArgs>(args?: SelectSubset<T, RatingCardTemplateFindFirstArgs<ExtArgs>>): Prisma__RatingCardTemplateClient<$Result.GetResult<Prisma.$RatingCardTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RatingCardTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCardTemplateFindFirstOrThrowArgs} args - Arguments to find a RatingCardTemplate
     * @example
     * // Get one RatingCardTemplate
     * const ratingCardTemplate = await prisma.ratingCardTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RatingCardTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, RatingCardTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__RatingCardTemplateClient<$Result.GetResult<Prisma.$RatingCardTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RatingCardTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCardTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RatingCardTemplates
     * const ratingCardTemplates = await prisma.ratingCardTemplate.findMany()
     * 
     * // Get first 10 RatingCardTemplates
     * const ratingCardTemplates = await prisma.ratingCardTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingCardTemplateWithIdOnly = await prisma.ratingCardTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RatingCardTemplateFindManyArgs>(args?: SelectSubset<T, RatingCardTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingCardTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RatingCardTemplate.
     * @param {RatingCardTemplateCreateArgs} args - Arguments to create a RatingCardTemplate.
     * @example
     * // Create one RatingCardTemplate
     * const RatingCardTemplate = await prisma.ratingCardTemplate.create({
     *   data: {
     *     // ... data to create a RatingCardTemplate
     *   }
     * })
     * 
     */
    create<T extends RatingCardTemplateCreateArgs>(args: SelectSubset<T, RatingCardTemplateCreateArgs<ExtArgs>>): Prisma__RatingCardTemplateClient<$Result.GetResult<Prisma.$RatingCardTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RatingCardTemplates.
     * @param {RatingCardTemplateCreateManyArgs} args - Arguments to create many RatingCardTemplates.
     * @example
     * // Create many RatingCardTemplates
     * const ratingCardTemplate = await prisma.ratingCardTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RatingCardTemplateCreateManyArgs>(args?: SelectSubset<T, RatingCardTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RatingCardTemplates and returns the data saved in the database.
     * @param {RatingCardTemplateCreateManyAndReturnArgs} args - Arguments to create many RatingCardTemplates.
     * @example
     * // Create many RatingCardTemplates
     * const ratingCardTemplate = await prisma.ratingCardTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RatingCardTemplates and only return the `id`
     * const ratingCardTemplateWithIdOnly = await prisma.ratingCardTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RatingCardTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, RatingCardTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingCardTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RatingCardTemplate.
     * @param {RatingCardTemplateDeleteArgs} args - Arguments to delete one RatingCardTemplate.
     * @example
     * // Delete one RatingCardTemplate
     * const RatingCardTemplate = await prisma.ratingCardTemplate.delete({
     *   where: {
     *     // ... filter to delete one RatingCardTemplate
     *   }
     * })
     * 
     */
    delete<T extends RatingCardTemplateDeleteArgs>(args: SelectSubset<T, RatingCardTemplateDeleteArgs<ExtArgs>>): Prisma__RatingCardTemplateClient<$Result.GetResult<Prisma.$RatingCardTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RatingCardTemplate.
     * @param {RatingCardTemplateUpdateArgs} args - Arguments to update one RatingCardTemplate.
     * @example
     * // Update one RatingCardTemplate
     * const ratingCardTemplate = await prisma.ratingCardTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RatingCardTemplateUpdateArgs>(args: SelectSubset<T, RatingCardTemplateUpdateArgs<ExtArgs>>): Prisma__RatingCardTemplateClient<$Result.GetResult<Prisma.$RatingCardTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RatingCardTemplates.
     * @param {RatingCardTemplateDeleteManyArgs} args - Arguments to filter RatingCardTemplates to delete.
     * @example
     * // Delete a few RatingCardTemplates
     * const { count } = await prisma.ratingCardTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RatingCardTemplateDeleteManyArgs>(args?: SelectSubset<T, RatingCardTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RatingCardTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCardTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RatingCardTemplates
     * const ratingCardTemplate = await prisma.ratingCardTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RatingCardTemplateUpdateManyArgs>(args: SelectSubset<T, RatingCardTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RatingCardTemplates and returns the data updated in the database.
     * @param {RatingCardTemplateUpdateManyAndReturnArgs} args - Arguments to update many RatingCardTemplates.
     * @example
     * // Update many RatingCardTemplates
     * const ratingCardTemplate = await prisma.ratingCardTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RatingCardTemplates and only return the `id`
     * const ratingCardTemplateWithIdOnly = await prisma.ratingCardTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RatingCardTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, RatingCardTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingCardTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RatingCardTemplate.
     * @param {RatingCardTemplateUpsertArgs} args - Arguments to update or create a RatingCardTemplate.
     * @example
     * // Update or create a RatingCardTemplate
     * const ratingCardTemplate = await prisma.ratingCardTemplate.upsert({
     *   create: {
     *     // ... data to create a RatingCardTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RatingCardTemplate we want to update
     *   }
     * })
     */
    upsert<T extends RatingCardTemplateUpsertArgs>(args: SelectSubset<T, RatingCardTemplateUpsertArgs<ExtArgs>>): Prisma__RatingCardTemplateClient<$Result.GetResult<Prisma.$RatingCardTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RatingCardTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCardTemplateCountArgs} args - Arguments to filter RatingCardTemplates to count.
     * @example
     * // Count the number of RatingCardTemplates
     * const count = await prisma.ratingCardTemplate.count({
     *   where: {
     *     // ... the filter for the RatingCardTemplates we want to count
     *   }
     * })
    **/
    count<T extends RatingCardTemplateCountArgs>(
      args?: Subset<T, RatingCardTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCardTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RatingCardTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCardTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingCardTemplateAggregateArgs>(args: Subset<T, RatingCardTemplateAggregateArgs>): Prisma.PrismaPromise<GetRatingCardTemplateAggregateType<T>>

    /**
     * Group by RatingCardTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCardTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RatingCardTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RatingCardTemplateGroupByArgs['orderBy'] }
        : { orderBy?: RatingCardTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RatingCardTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingCardTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RatingCardTemplate model
   */
  readonly fields: RatingCardTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RatingCardTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RatingCardTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    categories<T extends RatingCardTemplate$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, RatingCardTemplate$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    candidateRatings<T extends RatingCardTemplate$candidateRatingsArgs<ExtArgs> = {}>(args?: Subset<T, RatingCardTemplate$candidateRatingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateRatingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RatingCardTemplate model
   */
  interface RatingCardTemplateFieldRefs {
    readonly id: FieldRef<"RatingCardTemplate", 'String'>
    readonly name: FieldRef<"RatingCardTemplate", 'String'>
    readonly description: FieldRef<"RatingCardTemplate", 'String'>
    readonly companyId: FieldRef<"RatingCardTemplate", 'String'>
    readonly type: FieldRef<"RatingCardTemplate", 'RatingCardType'>
    readonly isDefault: FieldRef<"RatingCardTemplate", 'Boolean'>
    readonly createdAt: FieldRef<"RatingCardTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"RatingCardTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RatingCardTemplate findUnique
   */
  export type RatingCardTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCardTemplate
     */
    select?: RatingCardTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCardTemplate
     */
    omit?: RatingCardTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCardTemplateInclude<ExtArgs> | null
    /**
     * Filter, which RatingCardTemplate to fetch.
     */
    where: RatingCardTemplateWhereUniqueInput
  }

  /**
   * RatingCardTemplate findUniqueOrThrow
   */
  export type RatingCardTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCardTemplate
     */
    select?: RatingCardTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCardTemplate
     */
    omit?: RatingCardTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCardTemplateInclude<ExtArgs> | null
    /**
     * Filter, which RatingCardTemplate to fetch.
     */
    where: RatingCardTemplateWhereUniqueInput
  }

  /**
   * RatingCardTemplate findFirst
   */
  export type RatingCardTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCardTemplate
     */
    select?: RatingCardTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCardTemplate
     */
    omit?: RatingCardTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCardTemplateInclude<ExtArgs> | null
    /**
     * Filter, which RatingCardTemplate to fetch.
     */
    where?: RatingCardTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RatingCardTemplates to fetch.
     */
    orderBy?: RatingCardTemplateOrderByWithRelationInput | RatingCardTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RatingCardTemplates.
     */
    cursor?: RatingCardTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RatingCardTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RatingCardTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RatingCardTemplates.
     */
    distinct?: RatingCardTemplateScalarFieldEnum | RatingCardTemplateScalarFieldEnum[]
  }

  /**
   * RatingCardTemplate findFirstOrThrow
   */
  export type RatingCardTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCardTemplate
     */
    select?: RatingCardTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCardTemplate
     */
    omit?: RatingCardTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCardTemplateInclude<ExtArgs> | null
    /**
     * Filter, which RatingCardTemplate to fetch.
     */
    where?: RatingCardTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RatingCardTemplates to fetch.
     */
    orderBy?: RatingCardTemplateOrderByWithRelationInput | RatingCardTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RatingCardTemplates.
     */
    cursor?: RatingCardTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RatingCardTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RatingCardTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RatingCardTemplates.
     */
    distinct?: RatingCardTemplateScalarFieldEnum | RatingCardTemplateScalarFieldEnum[]
  }

  /**
   * RatingCardTemplate findMany
   */
  export type RatingCardTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCardTemplate
     */
    select?: RatingCardTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCardTemplate
     */
    omit?: RatingCardTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCardTemplateInclude<ExtArgs> | null
    /**
     * Filter, which RatingCardTemplates to fetch.
     */
    where?: RatingCardTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RatingCardTemplates to fetch.
     */
    orderBy?: RatingCardTemplateOrderByWithRelationInput | RatingCardTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RatingCardTemplates.
     */
    cursor?: RatingCardTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RatingCardTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RatingCardTemplates.
     */
    skip?: number
    distinct?: RatingCardTemplateScalarFieldEnum | RatingCardTemplateScalarFieldEnum[]
  }

  /**
   * RatingCardTemplate create
   */
  export type RatingCardTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCardTemplate
     */
    select?: RatingCardTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCardTemplate
     */
    omit?: RatingCardTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCardTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a RatingCardTemplate.
     */
    data: XOR<RatingCardTemplateCreateInput, RatingCardTemplateUncheckedCreateInput>
  }

  /**
   * RatingCardTemplate createMany
   */
  export type RatingCardTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RatingCardTemplates.
     */
    data: RatingCardTemplateCreateManyInput | RatingCardTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RatingCardTemplate createManyAndReturn
   */
  export type RatingCardTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCardTemplate
     */
    select?: RatingCardTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCardTemplate
     */
    omit?: RatingCardTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many RatingCardTemplates.
     */
    data: RatingCardTemplateCreateManyInput | RatingCardTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCardTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RatingCardTemplate update
   */
  export type RatingCardTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCardTemplate
     */
    select?: RatingCardTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCardTemplate
     */
    omit?: RatingCardTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCardTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a RatingCardTemplate.
     */
    data: XOR<RatingCardTemplateUpdateInput, RatingCardTemplateUncheckedUpdateInput>
    /**
     * Choose, which RatingCardTemplate to update.
     */
    where: RatingCardTemplateWhereUniqueInput
  }

  /**
   * RatingCardTemplate updateMany
   */
  export type RatingCardTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RatingCardTemplates.
     */
    data: XOR<RatingCardTemplateUpdateManyMutationInput, RatingCardTemplateUncheckedUpdateManyInput>
    /**
     * Filter which RatingCardTemplates to update
     */
    where?: RatingCardTemplateWhereInput
    /**
     * Limit how many RatingCardTemplates to update.
     */
    limit?: number
  }

  /**
   * RatingCardTemplate updateManyAndReturn
   */
  export type RatingCardTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCardTemplate
     */
    select?: RatingCardTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCardTemplate
     */
    omit?: RatingCardTemplateOmit<ExtArgs> | null
    /**
     * The data used to update RatingCardTemplates.
     */
    data: XOR<RatingCardTemplateUpdateManyMutationInput, RatingCardTemplateUncheckedUpdateManyInput>
    /**
     * Filter which RatingCardTemplates to update
     */
    where?: RatingCardTemplateWhereInput
    /**
     * Limit how many RatingCardTemplates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCardTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RatingCardTemplate upsert
   */
  export type RatingCardTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCardTemplate
     */
    select?: RatingCardTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCardTemplate
     */
    omit?: RatingCardTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCardTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the RatingCardTemplate to update in case it exists.
     */
    where: RatingCardTemplateWhereUniqueInput
    /**
     * In case the RatingCardTemplate found by the `where` argument doesn't exist, create a new RatingCardTemplate with this data.
     */
    create: XOR<RatingCardTemplateCreateInput, RatingCardTemplateUncheckedCreateInput>
    /**
     * In case the RatingCardTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RatingCardTemplateUpdateInput, RatingCardTemplateUncheckedUpdateInput>
  }

  /**
   * RatingCardTemplate delete
   */
  export type RatingCardTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCardTemplate
     */
    select?: RatingCardTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCardTemplate
     */
    omit?: RatingCardTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCardTemplateInclude<ExtArgs> | null
    /**
     * Filter which RatingCardTemplate to delete.
     */
    where: RatingCardTemplateWhereUniqueInput
  }

  /**
   * RatingCardTemplate deleteMany
   */
  export type RatingCardTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RatingCardTemplates to delete
     */
    where?: RatingCardTemplateWhereInput
    /**
     * Limit how many RatingCardTemplates to delete.
     */
    limit?: number
  }

  /**
   * RatingCardTemplate.categories
   */
  export type RatingCardTemplate$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCategory
     */
    select?: RatingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCategory
     */
    omit?: RatingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCategoryInclude<ExtArgs> | null
    where?: RatingCategoryWhereInput
    orderBy?: RatingCategoryOrderByWithRelationInput | RatingCategoryOrderByWithRelationInput[]
    cursor?: RatingCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingCategoryScalarFieldEnum | RatingCategoryScalarFieldEnum[]
  }

  /**
   * RatingCardTemplate.candidateRatings
   */
  export type RatingCardTemplate$candidateRatingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateRating
     */
    select?: CandidateRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateRating
     */
    omit?: CandidateRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateRatingInclude<ExtArgs> | null
    where?: CandidateRatingWhereInput
    orderBy?: CandidateRatingOrderByWithRelationInput | CandidateRatingOrderByWithRelationInput[]
    cursor?: CandidateRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CandidateRatingScalarFieldEnum | CandidateRatingScalarFieldEnum[]
  }

  /**
   * RatingCardTemplate without action
   */
  export type RatingCardTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCardTemplate
     */
    select?: RatingCardTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCardTemplate
     */
    omit?: RatingCardTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCardTemplateInclude<ExtArgs> | null
  }


  /**
   * Model RatingCategory
   */

  export type AggregateRatingCategory = {
    _count: RatingCategoryCountAggregateOutputType | null
    _avg: RatingCategoryAvgAggregateOutputType | null
    _sum: RatingCategorySumAggregateOutputType | null
    _min: RatingCategoryMinAggregateOutputType | null
    _max: RatingCategoryMaxAggregateOutputType | null
  }

  export type RatingCategoryAvgAggregateOutputType = {
    order: number | null
  }

  export type RatingCategorySumAggregateOutputType = {
    order: number | null
  }

  export type RatingCategoryMinAggregateOutputType = {
    id: string | null
    ratingCardTemplateId: string | null
    name: string | null
    description: string | null
    order: number | null
  }

  export type RatingCategoryMaxAggregateOutputType = {
    id: string | null
    ratingCardTemplateId: string | null
    name: string | null
    description: string | null
    order: number | null
  }

  export type RatingCategoryCountAggregateOutputType = {
    id: number
    ratingCardTemplateId: number
    name: number
    description: number
    order: number
    _all: number
  }


  export type RatingCategoryAvgAggregateInputType = {
    order?: true
  }

  export type RatingCategorySumAggregateInputType = {
    order?: true
  }

  export type RatingCategoryMinAggregateInputType = {
    id?: true
    ratingCardTemplateId?: true
    name?: true
    description?: true
    order?: true
  }

  export type RatingCategoryMaxAggregateInputType = {
    id?: true
    ratingCardTemplateId?: true
    name?: true
    description?: true
    order?: true
  }

  export type RatingCategoryCountAggregateInputType = {
    id?: true
    ratingCardTemplateId?: true
    name?: true
    description?: true
    order?: true
    _all?: true
  }

  export type RatingCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RatingCategory to aggregate.
     */
    where?: RatingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RatingCategories to fetch.
     */
    orderBy?: RatingCategoryOrderByWithRelationInput | RatingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RatingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RatingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RatingCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RatingCategories
    **/
    _count?: true | RatingCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RatingCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RatingCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingCategoryMaxAggregateInputType
  }

  export type GetRatingCategoryAggregateType<T extends RatingCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateRatingCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRatingCategory[P]>
      : GetScalarType<T[P], AggregateRatingCategory[P]>
  }




  export type RatingCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingCategoryWhereInput
    orderBy?: RatingCategoryOrderByWithAggregationInput | RatingCategoryOrderByWithAggregationInput[]
    by: RatingCategoryScalarFieldEnum[] | RatingCategoryScalarFieldEnum
    having?: RatingCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingCategoryCountAggregateInputType | true
    _avg?: RatingCategoryAvgAggregateInputType
    _sum?: RatingCategorySumAggregateInputType
    _min?: RatingCategoryMinAggregateInputType
    _max?: RatingCategoryMaxAggregateInputType
  }

  export type RatingCategoryGroupByOutputType = {
    id: string
    ratingCardTemplateId: string
    name: string
    description: string | null
    order: number
    _count: RatingCategoryCountAggregateOutputType | null
    _avg: RatingCategoryAvgAggregateOutputType | null
    _sum: RatingCategorySumAggregateOutputType | null
    _min: RatingCategoryMinAggregateOutputType | null
    _max: RatingCategoryMaxAggregateOutputType | null
  }

  type GetRatingCategoryGroupByPayload<T extends RatingCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RatingCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], RatingCategoryGroupByOutputType[P]>
        }
      >
    >


  export type RatingCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ratingCardTemplateId?: boolean
    name?: boolean
    description?: boolean
    order?: boolean
    ratingCardTemplate?: boolean | RatingCardTemplateDefaultArgs<ExtArgs>
    categoryScores?: boolean | RatingCategory$categoryScoresArgs<ExtArgs>
    _count?: boolean | RatingCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ratingCategory"]>

  export type RatingCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ratingCardTemplateId?: boolean
    name?: boolean
    description?: boolean
    order?: boolean
    ratingCardTemplate?: boolean | RatingCardTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ratingCategory"]>

  export type RatingCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ratingCardTemplateId?: boolean
    name?: boolean
    description?: boolean
    order?: boolean
    ratingCardTemplate?: boolean | RatingCardTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ratingCategory"]>

  export type RatingCategorySelectScalar = {
    id?: boolean
    ratingCardTemplateId?: boolean
    name?: boolean
    description?: boolean
    order?: boolean
  }

  export type RatingCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "ratingCardTemplateId" | "name" | "description" | "order", ExtArgs["result"]["ratingCategory"]>
  export type RatingCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ratingCardTemplate?: boolean | RatingCardTemplateDefaultArgs<ExtArgs>
    categoryScores?: boolean | RatingCategory$categoryScoresArgs<ExtArgs>
    _count?: boolean | RatingCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RatingCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ratingCardTemplate?: boolean | RatingCardTemplateDefaultArgs<ExtArgs>
  }
  export type RatingCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ratingCardTemplate?: boolean | RatingCardTemplateDefaultArgs<ExtArgs>
  }

  export type $RatingCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RatingCategory"
    objects: {
      ratingCardTemplate: Prisma.$RatingCardTemplatePayload<ExtArgs>
      categoryScores: Prisma.$CategoryScorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ratingCardTemplateId: string
      name: string
      description: string | null
      order: number
    }, ExtArgs["result"]["ratingCategory"]>
    composites: {}
  }

  type RatingCategoryGetPayload<S extends boolean | null | undefined | RatingCategoryDefaultArgs> = $Result.GetResult<Prisma.$RatingCategoryPayload, S>

  type RatingCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RatingCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RatingCategoryCountAggregateInputType | true
    }

  export interface RatingCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RatingCategory'], meta: { name: 'RatingCategory' } }
    /**
     * Find zero or one RatingCategory that matches the filter.
     * @param {RatingCategoryFindUniqueArgs} args - Arguments to find a RatingCategory
     * @example
     * // Get one RatingCategory
     * const ratingCategory = await prisma.ratingCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RatingCategoryFindUniqueArgs>(args: SelectSubset<T, RatingCategoryFindUniqueArgs<ExtArgs>>): Prisma__RatingCategoryClient<$Result.GetResult<Prisma.$RatingCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RatingCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RatingCategoryFindUniqueOrThrowArgs} args - Arguments to find a RatingCategory
     * @example
     * // Get one RatingCategory
     * const ratingCategory = await prisma.ratingCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RatingCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, RatingCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RatingCategoryClient<$Result.GetResult<Prisma.$RatingCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RatingCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCategoryFindFirstArgs} args - Arguments to find a RatingCategory
     * @example
     * // Get one RatingCategory
     * const ratingCategory = await prisma.ratingCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RatingCategoryFindFirstArgs>(args?: SelectSubset<T, RatingCategoryFindFirstArgs<ExtArgs>>): Prisma__RatingCategoryClient<$Result.GetResult<Prisma.$RatingCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RatingCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCategoryFindFirstOrThrowArgs} args - Arguments to find a RatingCategory
     * @example
     * // Get one RatingCategory
     * const ratingCategory = await prisma.ratingCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RatingCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, RatingCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__RatingCategoryClient<$Result.GetResult<Prisma.$RatingCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RatingCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RatingCategories
     * const ratingCategories = await prisma.ratingCategory.findMany()
     * 
     * // Get first 10 RatingCategories
     * const ratingCategories = await prisma.ratingCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingCategoryWithIdOnly = await prisma.ratingCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RatingCategoryFindManyArgs>(args?: SelectSubset<T, RatingCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RatingCategory.
     * @param {RatingCategoryCreateArgs} args - Arguments to create a RatingCategory.
     * @example
     * // Create one RatingCategory
     * const RatingCategory = await prisma.ratingCategory.create({
     *   data: {
     *     // ... data to create a RatingCategory
     *   }
     * })
     * 
     */
    create<T extends RatingCategoryCreateArgs>(args: SelectSubset<T, RatingCategoryCreateArgs<ExtArgs>>): Prisma__RatingCategoryClient<$Result.GetResult<Prisma.$RatingCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RatingCategories.
     * @param {RatingCategoryCreateManyArgs} args - Arguments to create many RatingCategories.
     * @example
     * // Create many RatingCategories
     * const ratingCategory = await prisma.ratingCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RatingCategoryCreateManyArgs>(args?: SelectSubset<T, RatingCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RatingCategories and returns the data saved in the database.
     * @param {RatingCategoryCreateManyAndReturnArgs} args - Arguments to create many RatingCategories.
     * @example
     * // Create many RatingCategories
     * const ratingCategory = await prisma.ratingCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RatingCategories and only return the `id`
     * const ratingCategoryWithIdOnly = await prisma.ratingCategory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RatingCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, RatingCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a RatingCategory.
     * @param {RatingCategoryDeleteArgs} args - Arguments to delete one RatingCategory.
     * @example
     * // Delete one RatingCategory
     * const RatingCategory = await prisma.ratingCategory.delete({
     *   where: {
     *     // ... filter to delete one RatingCategory
     *   }
     * })
     * 
     */
    delete<T extends RatingCategoryDeleteArgs>(args: SelectSubset<T, RatingCategoryDeleteArgs<ExtArgs>>): Prisma__RatingCategoryClient<$Result.GetResult<Prisma.$RatingCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RatingCategory.
     * @param {RatingCategoryUpdateArgs} args - Arguments to update one RatingCategory.
     * @example
     * // Update one RatingCategory
     * const ratingCategory = await prisma.ratingCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RatingCategoryUpdateArgs>(args: SelectSubset<T, RatingCategoryUpdateArgs<ExtArgs>>): Prisma__RatingCategoryClient<$Result.GetResult<Prisma.$RatingCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RatingCategories.
     * @param {RatingCategoryDeleteManyArgs} args - Arguments to filter RatingCategories to delete.
     * @example
     * // Delete a few RatingCategories
     * const { count } = await prisma.ratingCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RatingCategoryDeleteManyArgs>(args?: SelectSubset<T, RatingCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RatingCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RatingCategories
     * const ratingCategory = await prisma.ratingCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RatingCategoryUpdateManyArgs>(args: SelectSubset<T, RatingCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RatingCategories and returns the data updated in the database.
     * @param {RatingCategoryUpdateManyAndReturnArgs} args - Arguments to update many RatingCategories.
     * @example
     * // Update many RatingCategories
     * const ratingCategory = await prisma.ratingCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more RatingCategories and only return the `id`
     * const ratingCategoryWithIdOnly = await prisma.ratingCategory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RatingCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, RatingCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one RatingCategory.
     * @param {RatingCategoryUpsertArgs} args - Arguments to update or create a RatingCategory.
     * @example
     * // Update or create a RatingCategory
     * const ratingCategory = await prisma.ratingCategory.upsert({
     *   create: {
     *     // ... data to create a RatingCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RatingCategory we want to update
     *   }
     * })
     */
    upsert<T extends RatingCategoryUpsertArgs>(args: SelectSubset<T, RatingCategoryUpsertArgs<ExtArgs>>): Prisma__RatingCategoryClient<$Result.GetResult<Prisma.$RatingCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of RatingCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCategoryCountArgs} args - Arguments to filter RatingCategories to count.
     * @example
     * // Count the number of RatingCategories
     * const count = await prisma.ratingCategory.count({
     *   where: {
     *     // ... the filter for the RatingCategories we want to count
     *   }
     * })
    **/
    count<T extends RatingCategoryCountArgs>(
      args?: Subset<T, RatingCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RatingCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingCategoryAggregateArgs>(args: Subset<T, RatingCategoryAggregateArgs>): Prisma.PrismaPromise<GetRatingCategoryAggregateType<T>>

    /**
     * Group by RatingCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RatingCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RatingCategoryGroupByArgs['orderBy'] }
        : { orderBy?: RatingCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RatingCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RatingCategory model
   */
  readonly fields: RatingCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RatingCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RatingCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ratingCardTemplate<T extends RatingCardTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RatingCardTemplateDefaultArgs<ExtArgs>>): Prisma__RatingCardTemplateClient<$Result.GetResult<Prisma.$RatingCardTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    categoryScores<T extends RatingCategory$categoryScoresArgs<ExtArgs> = {}>(args?: Subset<T, RatingCategory$categoryScoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RatingCategory model
   */
  interface RatingCategoryFieldRefs {
    readonly id: FieldRef<"RatingCategory", 'String'>
    readonly ratingCardTemplateId: FieldRef<"RatingCategory", 'String'>
    readonly name: FieldRef<"RatingCategory", 'String'>
    readonly description: FieldRef<"RatingCategory", 'String'>
    readonly order: FieldRef<"RatingCategory", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * RatingCategory findUnique
   */
  export type RatingCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCategory
     */
    select?: RatingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCategory
     */
    omit?: RatingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which RatingCategory to fetch.
     */
    where: RatingCategoryWhereUniqueInput
  }

  /**
   * RatingCategory findUniqueOrThrow
   */
  export type RatingCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCategory
     */
    select?: RatingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCategory
     */
    omit?: RatingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which RatingCategory to fetch.
     */
    where: RatingCategoryWhereUniqueInput
  }

  /**
   * RatingCategory findFirst
   */
  export type RatingCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCategory
     */
    select?: RatingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCategory
     */
    omit?: RatingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which RatingCategory to fetch.
     */
    where?: RatingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RatingCategories to fetch.
     */
    orderBy?: RatingCategoryOrderByWithRelationInput | RatingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RatingCategories.
     */
    cursor?: RatingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RatingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RatingCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RatingCategories.
     */
    distinct?: RatingCategoryScalarFieldEnum | RatingCategoryScalarFieldEnum[]
  }

  /**
   * RatingCategory findFirstOrThrow
   */
  export type RatingCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCategory
     */
    select?: RatingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCategory
     */
    omit?: RatingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which RatingCategory to fetch.
     */
    where?: RatingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RatingCategories to fetch.
     */
    orderBy?: RatingCategoryOrderByWithRelationInput | RatingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RatingCategories.
     */
    cursor?: RatingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RatingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RatingCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RatingCategories.
     */
    distinct?: RatingCategoryScalarFieldEnum | RatingCategoryScalarFieldEnum[]
  }

  /**
   * RatingCategory findMany
   */
  export type RatingCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCategory
     */
    select?: RatingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCategory
     */
    omit?: RatingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCategoryInclude<ExtArgs> | null
    /**
     * Filter, which RatingCategories to fetch.
     */
    where?: RatingCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RatingCategories to fetch.
     */
    orderBy?: RatingCategoryOrderByWithRelationInput | RatingCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RatingCategories.
     */
    cursor?: RatingCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RatingCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RatingCategories.
     */
    skip?: number
    distinct?: RatingCategoryScalarFieldEnum | RatingCategoryScalarFieldEnum[]
  }

  /**
   * RatingCategory create
   */
  export type RatingCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCategory
     */
    select?: RatingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCategory
     */
    omit?: RatingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a RatingCategory.
     */
    data: XOR<RatingCategoryCreateInput, RatingCategoryUncheckedCreateInput>
  }

  /**
   * RatingCategory createMany
   */
  export type RatingCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RatingCategories.
     */
    data: RatingCategoryCreateManyInput | RatingCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RatingCategory createManyAndReturn
   */
  export type RatingCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCategory
     */
    select?: RatingCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCategory
     */
    omit?: RatingCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many RatingCategories.
     */
    data: RatingCategoryCreateManyInput | RatingCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RatingCategory update
   */
  export type RatingCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCategory
     */
    select?: RatingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCategory
     */
    omit?: RatingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a RatingCategory.
     */
    data: XOR<RatingCategoryUpdateInput, RatingCategoryUncheckedUpdateInput>
    /**
     * Choose, which RatingCategory to update.
     */
    where: RatingCategoryWhereUniqueInput
  }

  /**
   * RatingCategory updateMany
   */
  export type RatingCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RatingCategories.
     */
    data: XOR<RatingCategoryUpdateManyMutationInput, RatingCategoryUncheckedUpdateManyInput>
    /**
     * Filter which RatingCategories to update
     */
    where?: RatingCategoryWhereInput
    /**
     * Limit how many RatingCategories to update.
     */
    limit?: number
  }

  /**
   * RatingCategory updateManyAndReturn
   */
  export type RatingCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCategory
     */
    select?: RatingCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCategory
     */
    omit?: RatingCategoryOmit<ExtArgs> | null
    /**
     * The data used to update RatingCategories.
     */
    data: XOR<RatingCategoryUpdateManyMutationInput, RatingCategoryUncheckedUpdateManyInput>
    /**
     * Filter which RatingCategories to update
     */
    where?: RatingCategoryWhereInput
    /**
     * Limit how many RatingCategories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCategoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * RatingCategory upsert
   */
  export type RatingCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCategory
     */
    select?: RatingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCategory
     */
    omit?: RatingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the RatingCategory to update in case it exists.
     */
    where: RatingCategoryWhereUniqueInput
    /**
     * In case the RatingCategory found by the `where` argument doesn't exist, create a new RatingCategory with this data.
     */
    create: XOR<RatingCategoryCreateInput, RatingCategoryUncheckedCreateInput>
    /**
     * In case the RatingCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RatingCategoryUpdateInput, RatingCategoryUncheckedUpdateInput>
  }

  /**
   * RatingCategory delete
   */
  export type RatingCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCategory
     */
    select?: RatingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCategory
     */
    omit?: RatingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCategoryInclude<ExtArgs> | null
    /**
     * Filter which RatingCategory to delete.
     */
    where: RatingCategoryWhereUniqueInput
  }

  /**
   * RatingCategory deleteMany
   */
  export type RatingCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RatingCategories to delete
     */
    where?: RatingCategoryWhereInput
    /**
     * Limit how many RatingCategories to delete.
     */
    limit?: number
  }

  /**
   * RatingCategory.categoryScores
   */
  export type RatingCategory$categoryScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryScore
     */
    select?: CategoryScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryScore
     */
    omit?: CategoryScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryScoreInclude<ExtArgs> | null
    where?: CategoryScoreWhereInput
    orderBy?: CategoryScoreOrderByWithRelationInput | CategoryScoreOrderByWithRelationInput[]
    cursor?: CategoryScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScoreScalarFieldEnum | CategoryScoreScalarFieldEnum[]
  }

  /**
   * RatingCategory without action
   */
  export type RatingCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RatingCategory
     */
    select?: RatingCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the RatingCategory
     */
    omit?: RatingCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingCategoryInclude<ExtArgs> | null
  }


  /**
   * Model CandidateRating
   */

  export type AggregateCandidateRating = {
    _count: CandidateRatingCountAggregateOutputType | null
    _avg: CandidateRatingAvgAggregateOutputType | null
    _sum: CandidateRatingSumAggregateOutputType | null
    _min: CandidateRatingMinAggregateOutputType | null
    _max: CandidateRatingMaxAggregateOutputType | null
  }

  export type CandidateRatingAvgAggregateOutputType = {
    overallScore: number | null
  }

  export type CandidateRatingSumAggregateOutputType = {
    overallScore: number | null
  }

  export type CandidateRatingMinAggregateOutputType = {
    id: string | null
    applicationId: string | null
    jobWorkflowStageId: string | null
    raterId: string | null
    ratingCardTemplateId: string | null
    overallScore: number | null
    comments: string | null
    submittedAt: Date | null
  }

  export type CandidateRatingMaxAggregateOutputType = {
    id: string | null
    applicationId: string | null
    jobWorkflowStageId: string | null
    raterId: string | null
    ratingCardTemplateId: string | null
    overallScore: number | null
    comments: string | null
    submittedAt: Date | null
  }

  export type CandidateRatingCountAggregateOutputType = {
    id: number
    applicationId: number
    jobWorkflowStageId: number
    raterId: number
    ratingCardTemplateId: number
    overallScore: number
    comments: number
    submittedAt: number
    _all: number
  }


  export type CandidateRatingAvgAggregateInputType = {
    overallScore?: true
  }

  export type CandidateRatingSumAggregateInputType = {
    overallScore?: true
  }

  export type CandidateRatingMinAggregateInputType = {
    id?: true
    applicationId?: true
    jobWorkflowStageId?: true
    raterId?: true
    ratingCardTemplateId?: true
    overallScore?: true
    comments?: true
    submittedAt?: true
  }

  export type CandidateRatingMaxAggregateInputType = {
    id?: true
    applicationId?: true
    jobWorkflowStageId?: true
    raterId?: true
    ratingCardTemplateId?: true
    overallScore?: true
    comments?: true
    submittedAt?: true
  }

  export type CandidateRatingCountAggregateInputType = {
    id?: true
    applicationId?: true
    jobWorkflowStageId?: true
    raterId?: true
    ratingCardTemplateId?: true
    overallScore?: true
    comments?: true
    submittedAt?: true
    _all?: true
  }

  export type CandidateRatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidateRating to aggregate.
     */
    where?: CandidateRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateRatings to fetch.
     */
    orderBy?: CandidateRatingOrderByWithRelationInput | CandidateRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CandidateRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CandidateRatings
    **/
    _count?: true | CandidateRatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CandidateRatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CandidateRatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CandidateRatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CandidateRatingMaxAggregateInputType
  }

  export type GetCandidateRatingAggregateType<T extends CandidateRatingAggregateArgs> = {
        [P in keyof T & keyof AggregateCandidateRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCandidateRating[P]>
      : GetScalarType<T[P], AggregateCandidateRating[P]>
  }




  export type CandidateRatingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CandidateRatingWhereInput
    orderBy?: CandidateRatingOrderByWithAggregationInput | CandidateRatingOrderByWithAggregationInput[]
    by: CandidateRatingScalarFieldEnum[] | CandidateRatingScalarFieldEnum
    having?: CandidateRatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CandidateRatingCountAggregateInputType | true
    _avg?: CandidateRatingAvgAggregateInputType
    _sum?: CandidateRatingSumAggregateInputType
    _min?: CandidateRatingMinAggregateInputType
    _max?: CandidateRatingMaxAggregateInputType
  }

  export type CandidateRatingGroupByOutputType = {
    id: string
    applicationId: string
    jobWorkflowStageId: string
    raterId: string
    ratingCardTemplateId: string
    overallScore: number
    comments: string | null
    submittedAt: Date
    _count: CandidateRatingCountAggregateOutputType | null
    _avg: CandidateRatingAvgAggregateOutputType | null
    _sum: CandidateRatingSumAggregateOutputType | null
    _min: CandidateRatingMinAggregateOutputType | null
    _max: CandidateRatingMaxAggregateOutputType | null
  }

  type GetCandidateRatingGroupByPayload<T extends CandidateRatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CandidateRatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CandidateRatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CandidateRatingGroupByOutputType[P]>
            : GetScalarType<T[P], CandidateRatingGroupByOutputType[P]>
        }
      >
    >


  export type CandidateRatingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    jobWorkflowStageId?: boolean
    raterId?: boolean
    ratingCardTemplateId?: boolean
    overallScore?: boolean
    comments?: boolean
    submittedAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    rater?: boolean | UserDefaultArgs<ExtArgs>
    ratingCardTemplate?: boolean | RatingCardTemplateDefaultArgs<ExtArgs>
    categoryScores?: boolean | CandidateRating$categoryScoresArgs<ExtArgs>
    _count?: boolean | CandidateRatingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidateRating"]>

  export type CandidateRatingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    jobWorkflowStageId?: boolean
    raterId?: boolean
    ratingCardTemplateId?: boolean
    overallScore?: boolean
    comments?: boolean
    submittedAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    rater?: boolean | UserDefaultArgs<ExtArgs>
    ratingCardTemplate?: boolean | RatingCardTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidateRating"]>

  export type CandidateRatingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    jobWorkflowStageId?: boolean
    raterId?: boolean
    ratingCardTemplateId?: boolean
    overallScore?: boolean
    comments?: boolean
    submittedAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    rater?: boolean | UserDefaultArgs<ExtArgs>
    ratingCardTemplate?: boolean | RatingCardTemplateDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["candidateRating"]>

  export type CandidateRatingSelectScalar = {
    id?: boolean
    applicationId?: boolean
    jobWorkflowStageId?: boolean
    raterId?: boolean
    ratingCardTemplateId?: boolean
    overallScore?: boolean
    comments?: boolean
    submittedAt?: boolean
  }

  export type CandidateRatingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "applicationId" | "jobWorkflowStageId" | "raterId" | "ratingCardTemplateId" | "overallScore" | "comments" | "submittedAt", ExtArgs["result"]["candidateRating"]>
  export type CandidateRatingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    rater?: boolean | UserDefaultArgs<ExtArgs>
    ratingCardTemplate?: boolean | RatingCardTemplateDefaultArgs<ExtArgs>
    categoryScores?: boolean | CandidateRating$categoryScoresArgs<ExtArgs>
    _count?: boolean | CandidateRatingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CandidateRatingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    rater?: boolean | UserDefaultArgs<ExtArgs>
    ratingCardTemplate?: boolean | RatingCardTemplateDefaultArgs<ExtArgs>
  }
  export type CandidateRatingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    rater?: boolean | UserDefaultArgs<ExtArgs>
    ratingCardTemplate?: boolean | RatingCardTemplateDefaultArgs<ExtArgs>
  }

  export type $CandidateRatingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CandidateRating"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
      rater: Prisma.$UserPayload<ExtArgs>
      ratingCardTemplate: Prisma.$RatingCardTemplatePayload<ExtArgs>
      categoryScores: Prisma.$CategoryScorePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      applicationId: string
      jobWorkflowStageId: string
      raterId: string
      ratingCardTemplateId: string
      overallScore: number
      comments: string | null
      submittedAt: Date
    }, ExtArgs["result"]["candidateRating"]>
    composites: {}
  }

  type CandidateRatingGetPayload<S extends boolean | null | undefined | CandidateRatingDefaultArgs> = $Result.GetResult<Prisma.$CandidateRatingPayload, S>

  type CandidateRatingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CandidateRatingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CandidateRatingCountAggregateInputType | true
    }

  export interface CandidateRatingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CandidateRating'], meta: { name: 'CandidateRating' } }
    /**
     * Find zero or one CandidateRating that matches the filter.
     * @param {CandidateRatingFindUniqueArgs} args - Arguments to find a CandidateRating
     * @example
     * // Get one CandidateRating
     * const candidateRating = await prisma.candidateRating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CandidateRatingFindUniqueArgs>(args: SelectSubset<T, CandidateRatingFindUniqueArgs<ExtArgs>>): Prisma__CandidateRatingClient<$Result.GetResult<Prisma.$CandidateRatingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CandidateRating that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CandidateRatingFindUniqueOrThrowArgs} args - Arguments to find a CandidateRating
     * @example
     * // Get one CandidateRating
     * const candidateRating = await prisma.candidateRating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CandidateRatingFindUniqueOrThrowArgs>(args: SelectSubset<T, CandidateRatingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CandidateRatingClient<$Result.GetResult<Prisma.$CandidateRatingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CandidateRating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateRatingFindFirstArgs} args - Arguments to find a CandidateRating
     * @example
     * // Get one CandidateRating
     * const candidateRating = await prisma.candidateRating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CandidateRatingFindFirstArgs>(args?: SelectSubset<T, CandidateRatingFindFirstArgs<ExtArgs>>): Prisma__CandidateRatingClient<$Result.GetResult<Prisma.$CandidateRatingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CandidateRating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateRatingFindFirstOrThrowArgs} args - Arguments to find a CandidateRating
     * @example
     * // Get one CandidateRating
     * const candidateRating = await prisma.candidateRating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CandidateRatingFindFirstOrThrowArgs>(args?: SelectSubset<T, CandidateRatingFindFirstOrThrowArgs<ExtArgs>>): Prisma__CandidateRatingClient<$Result.GetResult<Prisma.$CandidateRatingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CandidateRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateRatingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CandidateRatings
     * const candidateRatings = await prisma.candidateRating.findMany()
     * 
     * // Get first 10 CandidateRatings
     * const candidateRatings = await prisma.candidateRating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const candidateRatingWithIdOnly = await prisma.candidateRating.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CandidateRatingFindManyArgs>(args?: SelectSubset<T, CandidateRatingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateRatingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CandidateRating.
     * @param {CandidateRatingCreateArgs} args - Arguments to create a CandidateRating.
     * @example
     * // Create one CandidateRating
     * const CandidateRating = await prisma.candidateRating.create({
     *   data: {
     *     // ... data to create a CandidateRating
     *   }
     * })
     * 
     */
    create<T extends CandidateRatingCreateArgs>(args: SelectSubset<T, CandidateRatingCreateArgs<ExtArgs>>): Prisma__CandidateRatingClient<$Result.GetResult<Prisma.$CandidateRatingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CandidateRatings.
     * @param {CandidateRatingCreateManyArgs} args - Arguments to create many CandidateRatings.
     * @example
     * // Create many CandidateRatings
     * const candidateRating = await prisma.candidateRating.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CandidateRatingCreateManyArgs>(args?: SelectSubset<T, CandidateRatingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CandidateRatings and returns the data saved in the database.
     * @param {CandidateRatingCreateManyAndReturnArgs} args - Arguments to create many CandidateRatings.
     * @example
     * // Create many CandidateRatings
     * const candidateRating = await prisma.candidateRating.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CandidateRatings and only return the `id`
     * const candidateRatingWithIdOnly = await prisma.candidateRating.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CandidateRatingCreateManyAndReturnArgs>(args?: SelectSubset<T, CandidateRatingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateRatingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CandidateRating.
     * @param {CandidateRatingDeleteArgs} args - Arguments to delete one CandidateRating.
     * @example
     * // Delete one CandidateRating
     * const CandidateRating = await prisma.candidateRating.delete({
     *   where: {
     *     // ... filter to delete one CandidateRating
     *   }
     * })
     * 
     */
    delete<T extends CandidateRatingDeleteArgs>(args: SelectSubset<T, CandidateRatingDeleteArgs<ExtArgs>>): Prisma__CandidateRatingClient<$Result.GetResult<Prisma.$CandidateRatingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CandidateRating.
     * @param {CandidateRatingUpdateArgs} args - Arguments to update one CandidateRating.
     * @example
     * // Update one CandidateRating
     * const candidateRating = await prisma.candidateRating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CandidateRatingUpdateArgs>(args: SelectSubset<T, CandidateRatingUpdateArgs<ExtArgs>>): Prisma__CandidateRatingClient<$Result.GetResult<Prisma.$CandidateRatingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CandidateRatings.
     * @param {CandidateRatingDeleteManyArgs} args - Arguments to filter CandidateRatings to delete.
     * @example
     * // Delete a few CandidateRatings
     * const { count } = await prisma.candidateRating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CandidateRatingDeleteManyArgs>(args?: SelectSubset<T, CandidateRatingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidateRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateRatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CandidateRatings
     * const candidateRating = await prisma.candidateRating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CandidateRatingUpdateManyArgs>(args: SelectSubset<T, CandidateRatingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CandidateRatings and returns the data updated in the database.
     * @param {CandidateRatingUpdateManyAndReturnArgs} args - Arguments to update many CandidateRatings.
     * @example
     * // Update many CandidateRatings
     * const candidateRating = await prisma.candidateRating.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CandidateRatings and only return the `id`
     * const candidateRatingWithIdOnly = await prisma.candidateRating.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CandidateRatingUpdateManyAndReturnArgs>(args: SelectSubset<T, CandidateRatingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CandidateRatingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CandidateRating.
     * @param {CandidateRatingUpsertArgs} args - Arguments to update or create a CandidateRating.
     * @example
     * // Update or create a CandidateRating
     * const candidateRating = await prisma.candidateRating.upsert({
     *   create: {
     *     // ... data to create a CandidateRating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CandidateRating we want to update
     *   }
     * })
     */
    upsert<T extends CandidateRatingUpsertArgs>(args: SelectSubset<T, CandidateRatingUpsertArgs<ExtArgs>>): Prisma__CandidateRatingClient<$Result.GetResult<Prisma.$CandidateRatingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CandidateRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateRatingCountArgs} args - Arguments to filter CandidateRatings to count.
     * @example
     * // Count the number of CandidateRatings
     * const count = await prisma.candidateRating.count({
     *   where: {
     *     // ... the filter for the CandidateRatings we want to count
     *   }
     * })
    **/
    count<T extends CandidateRatingCountArgs>(
      args?: Subset<T, CandidateRatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CandidateRatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CandidateRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateRatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CandidateRatingAggregateArgs>(args: Subset<T, CandidateRatingAggregateArgs>): Prisma.PrismaPromise<GetCandidateRatingAggregateType<T>>

    /**
     * Group by CandidateRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CandidateRatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CandidateRatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CandidateRatingGroupByArgs['orderBy'] }
        : { orderBy?: CandidateRatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CandidateRatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCandidateRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CandidateRating model
   */
  readonly fields: CandidateRatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CandidateRating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CandidateRatingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rater<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ratingCardTemplate<T extends RatingCardTemplateDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RatingCardTemplateDefaultArgs<ExtArgs>>): Prisma__RatingCardTemplateClient<$Result.GetResult<Prisma.$RatingCardTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    categoryScores<T extends CandidateRating$categoryScoresArgs<ExtArgs> = {}>(args?: Subset<T, CandidateRating$categoryScoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CandidateRating model
   */
  interface CandidateRatingFieldRefs {
    readonly id: FieldRef<"CandidateRating", 'String'>
    readonly applicationId: FieldRef<"CandidateRating", 'String'>
    readonly jobWorkflowStageId: FieldRef<"CandidateRating", 'String'>
    readonly raterId: FieldRef<"CandidateRating", 'String'>
    readonly ratingCardTemplateId: FieldRef<"CandidateRating", 'String'>
    readonly overallScore: FieldRef<"CandidateRating", 'Int'>
    readonly comments: FieldRef<"CandidateRating", 'String'>
    readonly submittedAt: FieldRef<"CandidateRating", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CandidateRating findUnique
   */
  export type CandidateRatingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateRating
     */
    select?: CandidateRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateRating
     */
    omit?: CandidateRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateRatingInclude<ExtArgs> | null
    /**
     * Filter, which CandidateRating to fetch.
     */
    where: CandidateRatingWhereUniqueInput
  }

  /**
   * CandidateRating findUniqueOrThrow
   */
  export type CandidateRatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateRating
     */
    select?: CandidateRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateRating
     */
    omit?: CandidateRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateRatingInclude<ExtArgs> | null
    /**
     * Filter, which CandidateRating to fetch.
     */
    where: CandidateRatingWhereUniqueInput
  }

  /**
   * CandidateRating findFirst
   */
  export type CandidateRatingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateRating
     */
    select?: CandidateRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateRating
     */
    omit?: CandidateRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateRatingInclude<ExtArgs> | null
    /**
     * Filter, which CandidateRating to fetch.
     */
    where?: CandidateRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateRatings to fetch.
     */
    orderBy?: CandidateRatingOrderByWithRelationInput | CandidateRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidateRatings.
     */
    cursor?: CandidateRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidateRatings.
     */
    distinct?: CandidateRatingScalarFieldEnum | CandidateRatingScalarFieldEnum[]
  }

  /**
   * CandidateRating findFirstOrThrow
   */
  export type CandidateRatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateRating
     */
    select?: CandidateRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateRating
     */
    omit?: CandidateRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateRatingInclude<ExtArgs> | null
    /**
     * Filter, which CandidateRating to fetch.
     */
    where?: CandidateRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateRatings to fetch.
     */
    orderBy?: CandidateRatingOrderByWithRelationInput | CandidateRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CandidateRatings.
     */
    cursor?: CandidateRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CandidateRatings.
     */
    distinct?: CandidateRatingScalarFieldEnum | CandidateRatingScalarFieldEnum[]
  }

  /**
   * CandidateRating findMany
   */
  export type CandidateRatingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateRating
     */
    select?: CandidateRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateRating
     */
    omit?: CandidateRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateRatingInclude<ExtArgs> | null
    /**
     * Filter, which CandidateRatings to fetch.
     */
    where?: CandidateRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CandidateRatings to fetch.
     */
    orderBy?: CandidateRatingOrderByWithRelationInput | CandidateRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CandidateRatings.
     */
    cursor?: CandidateRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CandidateRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CandidateRatings.
     */
    skip?: number
    distinct?: CandidateRatingScalarFieldEnum | CandidateRatingScalarFieldEnum[]
  }

  /**
   * CandidateRating create
   */
  export type CandidateRatingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateRating
     */
    select?: CandidateRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateRating
     */
    omit?: CandidateRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateRatingInclude<ExtArgs> | null
    /**
     * The data needed to create a CandidateRating.
     */
    data: XOR<CandidateRatingCreateInput, CandidateRatingUncheckedCreateInput>
  }

  /**
   * CandidateRating createMany
   */
  export type CandidateRatingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CandidateRatings.
     */
    data: CandidateRatingCreateManyInput | CandidateRatingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CandidateRating createManyAndReturn
   */
  export type CandidateRatingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateRating
     */
    select?: CandidateRatingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateRating
     */
    omit?: CandidateRatingOmit<ExtArgs> | null
    /**
     * The data used to create many CandidateRatings.
     */
    data: CandidateRatingCreateManyInput | CandidateRatingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateRatingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CandidateRating update
   */
  export type CandidateRatingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateRating
     */
    select?: CandidateRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateRating
     */
    omit?: CandidateRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateRatingInclude<ExtArgs> | null
    /**
     * The data needed to update a CandidateRating.
     */
    data: XOR<CandidateRatingUpdateInput, CandidateRatingUncheckedUpdateInput>
    /**
     * Choose, which CandidateRating to update.
     */
    where: CandidateRatingWhereUniqueInput
  }

  /**
   * CandidateRating updateMany
   */
  export type CandidateRatingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CandidateRatings.
     */
    data: XOR<CandidateRatingUpdateManyMutationInput, CandidateRatingUncheckedUpdateManyInput>
    /**
     * Filter which CandidateRatings to update
     */
    where?: CandidateRatingWhereInput
    /**
     * Limit how many CandidateRatings to update.
     */
    limit?: number
  }

  /**
   * CandidateRating updateManyAndReturn
   */
  export type CandidateRatingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateRating
     */
    select?: CandidateRatingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateRating
     */
    omit?: CandidateRatingOmit<ExtArgs> | null
    /**
     * The data used to update CandidateRatings.
     */
    data: XOR<CandidateRatingUpdateManyMutationInput, CandidateRatingUncheckedUpdateManyInput>
    /**
     * Filter which CandidateRatings to update
     */
    where?: CandidateRatingWhereInput
    /**
     * Limit how many CandidateRatings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateRatingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CandidateRating upsert
   */
  export type CandidateRatingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateRating
     */
    select?: CandidateRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateRating
     */
    omit?: CandidateRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateRatingInclude<ExtArgs> | null
    /**
     * The filter to search for the CandidateRating to update in case it exists.
     */
    where: CandidateRatingWhereUniqueInput
    /**
     * In case the CandidateRating found by the `where` argument doesn't exist, create a new CandidateRating with this data.
     */
    create: XOR<CandidateRatingCreateInput, CandidateRatingUncheckedCreateInput>
    /**
     * In case the CandidateRating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CandidateRatingUpdateInput, CandidateRatingUncheckedUpdateInput>
  }

  /**
   * CandidateRating delete
   */
  export type CandidateRatingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateRating
     */
    select?: CandidateRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateRating
     */
    omit?: CandidateRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateRatingInclude<ExtArgs> | null
    /**
     * Filter which CandidateRating to delete.
     */
    where: CandidateRatingWhereUniqueInput
  }

  /**
   * CandidateRating deleteMany
   */
  export type CandidateRatingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CandidateRatings to delete
     */
    where?: CandidateRatingWhereInput
    /**
     * Limit how many CandidateRatings to delete.
     */
    limit?: number
  }

  /**
   * CandidateRating.categoryScores
   */
  export type CandidateRating$categoryScoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryScore
     */
    select?: CategoryScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryScore
     */
    omit?: CategoryScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryScoreInclude<ExtArgs> | null
    where?: CategoryScoreWhereInput
    orderBy?: CategoryScoreOrderByWithRelationInput | CategoryScoreOrderByWithRelationInput[]
    cursor?: CategoryScoreWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScoreScalarFieldEnum | CategoryScoreScalarFieldEnum[]
  }

  /**
   * CandidateRating without action
   */
  export type CandidateRatingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CandidateRating
     */
    select?: CandidateRatingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CandidateRating
     */
    omit?: CandidateRatingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CandidateRatingInclude<ExtArgs> | null
  }


  /**
   * Model CategoryScore
   */

  export type AggregateCategoryScore = {
    _count: CategoryScoreCountAggregateOutputType | null
    _avg: CategoryScoreAvgAggregateOutputType | null
    _sum: CategoryScoreSumAggregateOutputType | null
    _min: CategoryScoreMinAggregateOutputType | null
    _max: CategoryScoreMaxAggregateOutputType | null
  }

  export type CategoryScoreAvgAggregateOutputType = {
    score: number | null
  }

  export type CategoryScoreSumAggregateOutputType = {
    score: number | null
  }

  export type CategoryScoreMinAggregateOutputType = {
    id: string | null
    candidateRatingId: string | null
    ratingCategoryId: string | null
    score: number | null
    comments: string | null
  }

  export type CategoryScoreMaxAggregateOutputType = {
    id: string | null
    candidateRatingId: string | null
    ratingCategoryId: string | null
    score: number | null
    comments: string | null
  }

  export type CategoryScoreCountAggregateOutputType = {
    id: number
    candidateRatingId: number
    ratingCategoryId: number
    score: number
    comments: number
    _all: number
  }


  export type CategoryScoreAvgAggregateInputType = {
    score?: true
  }

  export type CategoryScoreSumAggregateInputType = {
    score?: true
  }

  export type CategoryScoreMinAggregateInputType = {
    id?: true
    candidateRatingId?: true
    ratingCategoryId?: true
    score?: true
    comments?: true
  }

  export type CategoryScoreMaxAggregateInputType = {
    id?: true
    candidateRatingId?: true
    ratingCategoryId?: true
    score?: true
    comments?: true
  }

  export type CategoryScoreCountAggregateInputType = {
    id?: true
    candidateRatingId?: true
    ratingCategoryId?: true
    score?: true
    comments?: true
    _all?: true
  }

  export type CategoryScoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoryScore to aggregate.
     */
    where?: CategoryScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryScores to fetch.
     */
    orderBy?: CategoryScoreOrderByWithRelationInput | CategoryScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CategoryScores
    **/
    _count?: true | CategoryScoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryScoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoryScoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryScoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryScoreMaxAggregateInputType
  }

  export type GetCategoryScoreAggregateType<T extends CategoryScoreAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoryScore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoryScore[P]>
      : GetScalarType<T[P], AggregateCategoryScore[P]>
  }




  export type CategoryScoreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryScoreWhereInput
    orderBy?: CategoryScoreOrderByWithAggregationInput | CategoryScoreOrderByWithAggregationInput[]
    by: CategoryScoreScalarFieldEnum[] | CategoryScoreScalarFieldEnum
    having?: CategoryScoreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryScoreCountAggregateInputType | true
    _avg?: CategoryScoreAvgAggregateInputType
    _sum?: CategoryScoreSumAggregateInputType
    _min?: CategoryScoreMinAggregateInputType
    _max?: CategoryScoreMaxAggregateInputType
  }

  export type CategoryScoreGroupByOutputType = {
    id: string
    candidateRatingId: string
    ratingCategoryId: string
    score: number
    comments: string | null
    _count: CategoryScoreCountAggregateOutputType | null
    _avg: CategoryScoreAvgAggregateOutputType | null
    _sum: CategoryScoreSumAggregateOutputType | null
    _min: CategoryScoreMinAggregateOutputType | null
    _max: CategoryScoreMaxAggregateOutputType | null
  }

  type GetCategoryScoreGroupByPayload<T extends CategoryScoreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryScoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryScoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryScoreGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryScoreGroupByOutputType[P]>
        }
      >
    >


  export type CategoryScoreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateRatingId?: boolean
    ratingCategoryId?: boolean
    score?: boolean
    comments?: boolean
    candidateRating?: boolean | CandidateRatingDefaultArgs<ExtArgs>
    ratingCategory?: boolean | RatingCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoryScore"]>

  export type CategoryScoreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateRatingId?: boolean
    ratingCategoryId?: boolean
    score?: boolean
    comments?: boolean
    candidateRating?: boolean | CandidateRatingDefaultArgs<ExtArgs>
    ratingCategory?: boolean | RatingCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoryScore"]>

  export type CategoryScoreSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    candidateRatingId?: boolean
    ratingCategoryId?: boolean
    score?: boolean
    comments?: boolean
    candidateRating?: boolean | CandidateRatingDefaultArgs<ExtArgs>
    ratingCategory?: boolean | RatingCategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoryScore"]>

  export type CategoryScoreSelectScalar = {
    id?: boolean
    candidateRatingId?: boolean
    ratingCategoryId?: boolean
    score?: boolean
    comments?: boolean
  }

  export type CategoryScoreOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "candidateRatingId" | "ratingCategoryId" | "score" | "comments", ExtArgs["result"]["categoryScore"]>
  export type CategoryScoreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidateRating?: boolean | CandidateRatingDefaultArgs<ExtArgs>
    ratingCategory?: boolean | RatingCategoryDefaultArgs<ExtArgs>
  }
  export type CategoryScoreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidateRating?: boolean | CandidateRatingDefaultArgs<ExtArgs>
    ratingCategory?: boolean | RatingCategoryDefaultArgs<ExtArgs>
  }
  export type CategoryScoreIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    candidateRating?: boolean | CandidateRatingDefaultArgs<ExtArgs>
    ratingCategory?: boolean | RatingCategoryDefaultArgs<ExtArgs>
  }

  export type $CategoryScorePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CategoryScore"
    objects: {
      candidateRating: Prisma.$CandidateRatingPayload<ExtArgs>
      ratingCategory: Prisma.$RatingCategoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      candidateRatingId: string
      ratingCategoryId: string
      score: number
      comments: string | null
    }, ExtArgs["result"]["categoryScore"]>
    composites: {}
  }

  type CategoryScoreGetPayload<S extends boolean | null | undefined | CategoryScoreDefaultArgs> = $Result.GetResult<Prisma.$CategoryScorePayload, S>

  type CategoryScoreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryScoreFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryScoreCountAggregateInputType | true
    }

  export interface CategoryScoreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CategoryScore'], meta: { name: 'CategoryScore' } }
    /**
     * Find zero or one CategoryScore that matches the filter.
     * @param {CategoryScoreFindUniqueArgs} args - Arguments to find a CategoryScore
     * @example
     * // Get one CategoryScore
     * const categoryScore = await prisma.categoryScore.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryScoreFindUniqueArgs>(args: SelectSubset<T, CategoryScoreFindUniqueArgs<ExtArgs>>): Prisma__CategoryScoreClient<$Result.GetResult<Prisma.$CategoryScorePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CategoryScore that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryScoreFindUniqueOrThrowArgs} args - Arguments to find a CategoryScore
     * @example
     * // Get one CategoryScore
     * const categoryScore = await prisma.categoryScore.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryScoreFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryScoreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryScoreClient<$Result.GetResult<Prisma.$CategoryScorePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CategoryScore that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryScoreFindFirstArgs} args - Arguments to find a CategoryScore
     * @example
     * // Get one CategoryScore
     * const categoryScore = await prisma.categoryScore.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryScoreFindFirstArgs>(args?: SelectSubset<T, CategoryScoreFindFirstArgs<ExtArgs>>): Prisma__CategoryScoreClient<$Result.GetResult<Prisma.$CategoryScorePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CategoryScore that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryScoreFindFirstOrThrowArgs} args - Arguments to find a CategoryScore
     * @example
     * // Get one CategoryScore
     * const categoryScore = await prisma.categoryScore.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryScoreFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryScoreFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryScoreClient<$Result.GetResult<Prisma.$CategoryScorePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CategoryScores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryScoreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategoryScores
     * const categoryScores = await prisma.categoryScore.findMany()
     * 
     * // Get first 10 CategoryScores
     * const categoryScores = await prisma.categoryScore.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryScoreWithIdOnly = await prisma.categoryScore.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryScoreFindManyArgs>(args?: SelectSubset<T, CategoryScoreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryScorePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CategoryScore.
     * @param {CategoryScoreCreateArgs} args - Arguments to create a CategoryScore.
     * @example
     * // Create one CategoryScore
     * const CategoryScore = await prisma.categoryScore.create({
     *   data: {
     *     // ... data to create a CategoryScore
     *   }
     * })
     * 
     */
    create<T extends CategoryScoreCreateArgs>(args: SelectSubset<T, CategoryScoreCreateArgs<ExtArgs>>): Prisma__CategoryScoreClient<$Result.GetResult<Prisma.$CategoryScorePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CategoryScores.
     * @param {CategoryScoreCreateManyArgs} args - Arguments to create many CategoryScores.
     * @example
     * // Create many CategoryScores
     * const categoryScore = await prisma.categoryScore.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryScoreCreateManyArgs>(args?: SelectSubset<T, CategoryScoreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CategoryScores and returns the data saved in the database.
     * @param {CategoryScoreCreateManyAndReturnArgs} args - Arguments to create many CategoryScores.
     * @example
     * // Create many CategoryScores
     * const categoryScore = await prisma.categoryScore.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CategoryScores and only return the `id`
     * const categoryScoreWithIdOnly = await prisma.categoryScore.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryScoreCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryScoreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryScorePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CategoryScore.
     * @param {CategoryScoreDeleteArgs} args - Arguments to delete one CategoryScore.
     * @example
     * // Delete one CategoryScore
     * const CategoryScore = await prisma.categoryScore.delete({
     *   where: {
     *     // ... filter to delete one CategoryScore
     *   }
     * })
     * 
     */
    delete<T extends CategoryScoreDeleteArgs>(args: SelectSubset<T, CategoryScoreDeleteArgs<ExtArgs>>): Prisma__CategoryScoreClient<$Result.GetResult<Prisma.$CategoryScorePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CategoryScore.
     * @param {CategoryScoreUpdateArgs} args - Arguments to update one CategoryScore.
     * @example
     * // Update one CategoryScore
     * const categoryScore = await prisma.categoryScore.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryScoreUpdateArgs>(args: SelectSubset<T, CategoryScoreUpdateArgs<ExtArgs>>): Prisma__CategoryScoreClient<$Result.GetResult<Prisma.$CategoryScorePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CategoryScores.
     * @param {CategoryScoreDeleteManyArgs} args - Arguments to filter CategoryScores to delete.
     * @example
     * // Delete a few CategoryScores
     * const { count } = await prisma.categoryScore.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryScoreDeleteManyArgs>(args?: SelectSubset<T, CategoryScoreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoryScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryScoreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategoryScores
     * const categoryScore = await prisma.categoryScore.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryScoreUpdateManyArgs>(args: SelectSubset<T, CategoryScoreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoryScores and returns the data updated in the database.
     * @param {CategoryScoreUpdateManyAndReturnArgs} args - Arguments to update many CategoryScores.
     * @example
     * // Update many CategoryScores
     * const categoryScore = await prisma.categoryScore.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CategoryScores and only return the `id`
     * const categoryScoreWithIdOnly = await prisma.categoryScore.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryScoreUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryScoreUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryScorePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CategoryScore.
     * @param {CategoryScoreUpsertArgs} args - Arguments to update or create a CategoryScore.
     * @example
     * // Update or create a CategoryScore
     * const categoryScore = await prisma.categoryScore.upsert({
     *   create: {
     *     // ... data to create a CategoryScore
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategoryScore we want to update
     *   }
     * })
     */
    upsert<T extends CategoryScoreUpsertArgs>(args: SelectSubset<T, CategoryScoreUpsertArgs<ExtArgs>>): Prisma__CategoryScoreClient<$Result.GetResult<Prisma.$CategoryScorePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CategoryScores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryScoreCountArgs} args - Arguments to filter CategoryScores to count.
     * @example
     * // Count the number of CategoryScores
     * const count = await prisma.categoryScore.count({
     *   where: {
     *     // ... the filter for the CategoryScores we want to count
     *   }
     * })
    **/
    count<T extends CategoryScoreCountArgs>(
      args?: Subset<T, CategoryScoreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryScoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategoryScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryScoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryScoreAggregateArgs>(args: Subset<T, CategoryScoreAggregateArgs>): Prisma.PrismaPromise<GetCategoryScoreAggregateType<T>>

    /**
     * Group by CategoryScore.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryScoreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryScoreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryScoreGroupByArgs['orderBy'] }
        : { orderBy?: CategoryScoreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryScoreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryScoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CategoryScore model
   */
  readonly fields: CategoryScoreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CategoryScore.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryScoreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    candidateRating<T extends CandidateRatingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CandidateRatingDefaultArgs<ExtArgs>>): Prisma__CandidateRatingClient<$Result.GetResult<Prisma.$CandidateRatingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    ratingCategory<T extends RatingCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RatingCategoryDefaultArgs<ExtArgs>>): Prisma__RatingCategoryClient<$Result.GetResult<Prisma.$RatingCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CategoryScore model
   */
  interface CategoryScoreFieldRefs {
    readonly id: FieldRef<"CategoryScore", 'String'>
    readonly candidateRatingId: FieldRef<"CategoryScore", 'String'>
    readonly ratingCategoryId: FieldRef<"CategoryScore", 'String'>
    readonly score: FieldRef<"CategoryScore", 'Int'>
    readonly comments: FieldRef<"CategoryScore", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CategoryScore findUnique
   */
  export type CategoryScoreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryScore
     */
    select?: CategoryScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryScore
     */
    omit?: CategoryScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryScoreInclude<ExtArgs> | null
    /**
     * Filter, which CategoryScore to fetch.
     */
    where: CategoryScoreWhereUniqueInput
  }

  /**
   * CategoryScore findUniqueOrThrow
   */
  export type CategoryScoreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryScore
     */
    select?: CategoryScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryScore
     */
    omit?: CategoryScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryScoreInclude<ExtArgs> | null
    /**
     * Filter, which CategoryScore to fetch.
     */
    where: CategoryScoreWhereUniqueInput
  }

  /**
   * CategoryScore findFirst
   */
  export type CategoryScoreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryScore
     */
    select?: CategoryScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryScore
     */
    omit?: CategoryScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryScoreInclude<ExtArgs> | null
    /**
     * Filter, which CategoryScore to fetch.
     */
    where?: CategoryScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryScores to fetch.
     */
    orderBy?: CategoryScoreOrderByWithRelationInput | CategoryScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoryScores.
     */
    cursor?: CategoryScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoryScores.
     */
    distinct?: CategoryScoreScalarFieldEnum | CategoryScoreScalarFieldEnum[]
  }

  /**
   * CategoryScore findFirstOrThrow
   */
  export type CategoryScoreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryScore
     */
    select?: CategoryScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryScore
     */
    omit?: CategoryScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryScoreInclude<ExtArgs> | null
    /**
     * Filter, which CategoryScore to fetch.
     */
    where?: CategoryScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryScores to fetch.
     */
    orderBy?: CategoryScoreOrderByWithRelationInput | CategoryScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoryScores.
     */
    cursor?: CategoryScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryScores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoryScores.
     */
    distinct?: CategoryScoreScalarFieldEnum | CategoryScoreScalarFieldEnum[]
  }

  /**
   * CategoryScore findMany
   */
  export type CategoryScoreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryScore
     */
    select?: CategoryScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryScore
     */
    omit?: CategoryScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryScoreInclude<ExtArgs> | null
    /**
     * Filter, which CategoryScores to fetch.
     */
    where?: CategoryScoreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryScores to fetch.
     */
    orderBy?: CategoryScoreOrderByWithRelationInput | CategoryScoreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CategoryScores.
     */
    cursor?: CategoryScoreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryScores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryScores.
     */
    skip?: number
    distinct?: CategoryScoreScalarFieldEnum | CategoryScoreScalarFieldEnum[]
  }

  /**
   * CategoryScore create
   */
  export type CategoryScoreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryScore
     */
    select?: CategoryScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryScore
     */
    omit?: CategoryScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryScoreInclude<ExtArgs> | null
    /**
     * The data needed to create a CategoryScore.
     */
    data: XOR<CategoryScoreCreateInput, CategoryScoreUncheckedCreateInput>
  }

  /**
   * CategoryScore createMany
   */
  export type CategoryScoreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CategoryScores.
     */
    data: CategoryScoreCreateManyInput | CategoryScoreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CategoryScore createManyAndReturn
   */
  export type CategoryScoreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryScore
     */
    select?: CategoryScoreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryScore
     */
    omit?: CategoryScoreOmit<ExtArgs> | null
    /**
     * The data used to create many CategoryScores.
     */
    data: CategoryScoreCreateManyInput | CategoryScoreCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryScoreIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CategoryScore update
   */
  export type CategoryScoreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryScore
     */
    select?: CategoryScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryScore
     */
    omit?: CategoryScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryScoreInclude<ExtArgs> | null
    /**
     * The data needed to update a CategoryScore.
     */
    data: XOR<CategoryScoreUpdateInput, CategoryScoreUncheckedUpdateInput>
    /**
     * Choose, which CategoryScore to update.
     */
    where: CategoryScoreWhereUniqueInput
  }

  /**
   * CategoryScore updateMany
   */
  export type CategoryScoreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CategoryScores.
     */
    data: XOR<CategoryScoreUpdateManyMutationInput, CategoryScoreUncheckedUpdateManyInput>
    /**
     * Filter which CategoryScores to update
     */
    where?: CategoryScoreWhereInput
    /**
     * Limit how many CategoryScores to update.
     */
    limit?: number
  }

  /**
   * CategoryScore updateManyAndReturn
   */
  export type CategoryScoreUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryScore
     */
    select?: CategoryScoreSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryScore
     */
    omit?: CategoryScoreOmit<ExtArgs> | null
    /**
     * The data used to update CategoryScores.
     */
    data: XOR<CategoryScoreUpdateManyMutationInput, CategoryScoreUncheckedUpdateManyInput>
    /**
     * Filter which CategoryScores to update
     */
    where?: CategoryScoreWhereInput
    /**
     * Limit how many CategoryScores to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryScoreIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CategoryScore upsert
   */
  export type CategoryScoreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryScore
     */
    select?: CategoryScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryScore
     */
    omit?: CategoryScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryScoreInclude<ExtArgs> | null
    /**
     * The filter to search for the CategoryScore to update in case it exists.
     */
    where: CategoryScoreWhereUniqueInput
    /**
     * In case the CategoryScore found by the `where` argument doesn't exist, create a new CategoryScore with this data.
     */
    create: XOR<CategoryScoreCreateInput, CategoryScoreUncheckedCreateInput>
    /**
     * In case the CategoryScore was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryScoreUpdateInput, CategoryScoreUncheckedUpdateInput>
  }

  /**
   * CategoryScore delete
   */
  export type CategoryScoreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryScore
     */
    select?: CategoryScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryScore
     */
    omit?: CategoryScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryScoreInclude<ExtArgs> | null
    /**
     * Filter which CategoryScore to delete.
     */
    where: CategoryScoreWhereUniqueInput
  }

  /**
   * CategoryScore deleteMany
   */
  export type CategoryScoreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoryScores to delete
     */
    where?: CategoryScoreWhereInput
    /**
     * Limit how many CategoryScores to delete.
     */
    limit?: number
  }

  /**
   * CategoryScore without action
   */
  export type CategoryScoreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryScore
     */
    select?: CategoryScoreSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryScore
     */
    omit?: CategoryScoreOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryScoreInclude<ExtArgs> | null
  }


  /**
   * Model MessageThread
   */

  export type AggregateMessageThread = {
    _count: MessageThreadCountAggregateOutputType | null
    _min: MessageThreadMinAggregateOutputType | null
    _max: MessageThreadMaxAggregateOutputType | null
  }

  export type MessageThreadMinAggregateOutputType = {
    id: string | null
    applicationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MessageThreadMaxAggregateOutputType = {
    id: string | null
    applicationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MessageThreadCountAggregateOutputType = {
    id: number
    applicationId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MessageThreadMinAggregateInputType = {
    id?: true
    applicationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MessageThreadMaxAggregateInputType = {
    id?: true
    applicationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MessageThreadCountAggregateInputType = {
    id?: true
    applicationId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MessageThreadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageThread to aggregate.
     */
    where?: MessageThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageThreads to fetch.
     */
    orderBy?: MessageThreadOrderByWithRelationInput | MessageThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageThreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessageThreads
    **/
    _count?: true | MessageThreadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageThreadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageThreadMaxAggregateInputType
  }

  export type GetMessageThreadAggregateType<T extends MessageThreadAggregateArgs> = {
        [P in keyof T & keyof AggregateMessageThread]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessageThread[P]>
      : GetScalarType<T[P], AggregateMessageThread[P]>
  }




  export type MessageThreadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageThreadWhereInput
    orderBy?: MessageThreadOrderByWithAggregationInput | MessageThreadOrderByWithAggregationInput[]
    by: MessageThreadScalarFieldEnum[] | MessageThreadScalarFieldEnum
    having?: MessageThreadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageThreadCountAggregateInputType | true
    _min?: MessageThreadMinAggregateInputType
    _max?: MessageThreadMaxAggregateInputType
  }

  export type MessageThreadGroupByOutputType = {
    id: string
    applicationId: string
    createdAt: Date
    updatedAt: Date
    _count: MessageThreadCountAggregateOutputType | null
    _min: MessageThreadMinAggregateOutputType | null
    _max: MessageThreadMaxAggregateOutputType | null
  }

  type GetMessageThreadGroupByPayload<T extends MessageThreadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageThreadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageThreadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageThreadGroupByOutputType[P]>
            : GetScalarType<T[P], MessageThreadGroupByOutputType[P]>
        }
      >
    >


  export type MessageThreadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    messages?: boolean | MessageThread$messagesArgs<ExtArgs>
    _count?: boolean | MessageThreadCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageThread"]>

  export type MessageThreadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageThread"]>

  export type MessageThreadSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageThread"]>

  export type MessageThreadSelectScalar = {
    id?: boolean
    applicationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MessageThreadOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "applicationId" | "createdAt" | "updatedAt", ExtArgs["result"]["messageThread"]>
  export type MessageThreadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    messages?: boolean | MessageThread$messagesArgs<ExtArgs>
    _count?: boolean | MessageThreadCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MessageThreadIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }
  export type MessageThreadIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
  }

  export type $MessageThreadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MessageThread"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
      messages: Prisma.$MessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      applicationId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["messageThread"]>
    composites: {}
  }

  type MessageThreadGetPayload<S extends boolean | null | undefined | MessageThreadDefaultArgs> = $Result.GetResult<Prisma.$MessageThreadPayload, S>

  type MessageThreadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageThreadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageThreadCountAggregateInputType | true
    }

  export interface MessageThreadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageThread'], meta: { name: 'MessageThread' } }
    /**
     * Find zero or one MessageThread that matches the filter.
     * @param {MessageThreadFindUniqueArgs} args - Arguments to find a MessageThread
     * @example
     * // Get one MessageThread
     * const messageThread = await prisma.messageThread.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageThreadFindUniqueArgs>(args: SelectSubset<T, MessageThreadFindUniqueArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MessageThread that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageThreadFindUniqueOrThrowArgs} args - Arguments to find a MessageThread
     * @example
     * // Get one MessageThread
     * const messageThread = await prisma.messageThread.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageThreadFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageThreadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageThread that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageThreadFindFirstArgs} args - Arguments to find a MessageThread
     * @example
     * // Get one MessageThread
     * const messageThread = await prisma.messageThread.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageThreadFindFirstArgs>(args?: SelectSubset<T, MessageThreadFindFirstArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageThread that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageThreadFindFirstOrThrowArgs} args - Arguments to find a MessageThread
     * @example
     * // Get one MessageThread
     * const messageThread = await prisma.messageThread.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageThreadFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageThreadFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MessageThreads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageThreadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessageThreads
     * const messageThreads = await prisma.messageThread.findMany()
     * 
     * // Get first 10 MessageThreads
     * const messageThreads = await prisma.messageThread.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageThreadWithIdOnly = await prisma.messageThread.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageThreadFindManyArgs>(args?: SelectSubset<T, MessageThreadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MessageThread.
     * @param {MessageThreadCreateArgs} args - Arguments to create a MessageThread.
     * @example
     * // Create one MessageThread
     * const MessageThread = await prisma.messageThread.create({
     *   data: {
     *     // ... data to create a MessageThread
     *   }
     * })
     * 
     */
    create<T extends MessageThreadCreateArgs>(args: SelectSubset<T, MessageThreadCreateArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MessageThreads.
     * @param {MessageThreadCreateManyArgs} args - Arguments to create many MessageThreads.
     * @example
     * // Create many MessageThreads
     * const messageThread = await prisma.messageThread.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageThreadCreateManyArgs>(args?: SelectSubset<T, MessageThreadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MessageThreads and returns the data saved in the database.
     * @param {MessageThreadCreateManyAndReturnArgs} args - Arguments to create many MessageThreads.
     * @example
     * // Create many MessageThreads
     * const messageThread = await prisma.messageThread.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MessageThreads and only return the `id`
     * const messageThreadWithIdOnly = await prisma.messageThread.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageThreadCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageThreadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MessageThread.
     * @param {MessageThreadDeleteArgs} args - Arguments to delete one MessageThread.
     * @example
     * // Delete one MessageThread
     * const MessageThread = await prisma.messageThread.delete({
     *   where: {
     *     // ... filter to delete one MessageThread
     *   }
     * })
     * 
     */
    delete<T extends MessageThreadDeleteArgs>(args: SelectSubset<T, MessageThreadDeleteArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MessageThread.
     * @param {MessageThreadUpdateArgs} args - Arguments to update one MessageThread.
     * @example
     * // Update one MessageThread
     * const messageThread = await prisma.messageThread.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageThreadUpdateArgs>(args: SelectSubset<T, MessageThreadUpdateArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MessageThreads.
     * @param {MessageThreadDeleteManyArgs} args - Arguments to filter MessageThreads to delete.
     * @example
     * // Delete a few MessageThreads
     * const { count } = await prisma.messageThread.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageThreadDeleteManyArgs>(args?: SelectSubset<T, MessageThreadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageThreads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageThreadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessageThreads
     * const messageThread = await prisma.messageThread.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageThreadUpdateManyArgs>(args: SelectSubset<T, MessageThreadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageThreads and returns the data updated in the database.
     * @param {MessageThreadUpdateManyAndReturnArgs} args - Arguments to update many MessageThreads.
     * @example
     * // Update many MessageThreads
     * const messageThread = await prisma.messageThread.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MessageThreads and only return the `id`
     * const messageThreadWithIdOnly = await prisma.messageThread.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageThreadUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageThreadUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MessageThread.
     * @param {MessageThreadUpsertArgs} args - Arguments to update or create a MessageThread.
     * @example
     * // Update or create a MessageThread
     * const messageThread = await prisma.messageThread.upsert({
     *   create: {
     *     // ... data to create a MessageThread
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessageThread we want to update
     *   }
     * })
     */
    upsert<T extends MessageThreadUpsertArgs>(args: SelectSubset<T, MessageThreadUpsertArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MessageThreads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageThreadCountArgs} args - Arguments to filter MessageThreads to count.
     * @example
     * // Count the number of MessageThreads
     * const count = await prisma.messageThread.count({
     *   where: {
     *     // ... the filter for the MessageThreads we want to count
     *   }
     * })
    **/
    count<T extends MessageThreadCountArgs>(
      args?: Subset<T, MessageThreadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageThreadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessageThread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageThreadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageThreadAggregateArgs>(args: Subset<T, MessageThreadAggregateArgs>): Prisma.PrismaPromise<GetMessageThreadAggregateType<T>>

    /**
     * Group by MessageThread.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageThreadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageThreadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageThreadGroupByArgs['orderBy'] }
        : { orderBy?: MessageThreadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageThreadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageThreadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MessageThread model
   */
  readonly fields: MessageThreadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MessageThread.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageThreadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    messages<T extends MessageThread$messagesArgs<ExtArgs> = {}>(args?: Subset<T, MessageThread$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MessageThread model
   */
  interface MessageThreadFieldRefs {
    readonly id: FieldRef<"MessageThread", 'String'>
    readonly applicationId: FieldRef<"MessageThread", 'String'>
    readonly createdAt: FieldRef<"MessageThread", 'DateTime'>
    readonly updatedAt: FieldRef<"MessageThread", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MessageThread findUnique
   */
  export type MessageThreadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * Filter, which MessageThread to fetch.
     */
    where: MessageThreadWhereUniqueInput
  }

  /**
   * MessageThread findUniqueOrThrow
   */
  export type MessageThreadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * Filter, which MessageThread to fetch.
     */
    where: MessageThreadWhereUniqueInput
  }

  /**
   * MessageThread findFirst
   */
  export type MessageThreadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * Filter, which MessageThread to fetch.
     */
    where?: MessageThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageThreads to fetch.
     */
    orderBy?: MessageThreadOrderByWithRelationInput | MessageThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageThreads.
     */
    cursor?: MessageThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageThreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageThreads.
     */
    distinct?: MessageThreadScalarFieldEnum | MessageThreadScalarFieldEnum[]
  }

  /**
   * MessageThread findFirstOrThrow
   */
  export type MessageThreadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * Filter, which MessageThread to fetch.
     */
    where?: MessageThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageThreads to fetch.
     */
    orderBy?: MessageThreadOrderByWithRelationInput | MessageThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageThreads.
     */
    cursor?: MessageThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageThreads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageThreads.
     */
    distinct?: MessageThreadScalarFieldEnum | MessageThreadScalarFieldEnum[]
  }

  /**
   * MessageThread findMany
   */
  export type MessageThreadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * Filter, which MessageThreads to fetch.
     */
    where?: MessageThreadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageThreads to fetch.
     */
    orderBy?: MessageThreadOrderByWithRelationInput | MessageThreadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessageThreads.
     */
    cursor?: MessageThreadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageThreads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageThreads.
     */
    skip?: number
    distinct?: MessageThreadScalarFieldEnum | MessageThreadScalarFieldEnum[]
  }

  /**
   * MessageThread create
   */
  export type MessageThreadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * The data needed to create a MessageThread.
     */
    data: XOR<MessageThreadCreateInput, MessageThreadUncheckedCreateInput>
  }

  /**
   * MessageThread createMany
   */
  export type MessageThreadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MessageThreads.
     */
    data: MessageThreadCreateManyInput | MessageThreadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MessageThread createManyAndReturn
   */
  export type MessageThreadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * The data used to create many MessageThreads.
     */
    data: MessageThreadCreateManyInput | MessageThreadCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageThread update
   */
  export type MessageThreadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * The data needed to update a MessageThread.
     */
    data: XOR<MessageThreadUpdateInput, MessageThreadUncheckedUpdateInput>
    /**
     * Choose, which MessageThread to update.
     */
    where: MessageThreadWhereUniqueInput
  }

  /**
   * MessageThread updateMany
   */
  export type MessageThreadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MessageThreads.
     */
    data: XOR<MessageThreadUpdateManyMutationInput, MessageThreadUncheckedUpdateManyInput>
    /**
     * Filter which MessageThreads to update
     */
    where?: MessageThreadWhereInput
    /**
     * Limit how many MessageThreads to update.
     */
    limit?: number
  }

  /**
   * MessageThread updateManyAndReturn
   */
  export type MessageThreadUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * The data used to update MessageThreads.
     */
    data: XOR<MessageThreadUpdateManyMutationInput, MessageThreadUncheckedUpdateManyInput>
    /**
     * Filter which MessageThreads to update
     */
    where?: MessageThreadWhereInput
    /**
     * Limit how many MessageThreads to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageThread upsert
   */
  export type MessageThreadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * The filter to search for the MessageThread to update in case it exists.
     */
    where: MessageThreadWhereUniqueInput
    /**
     * In case the MessageThread found by the `where` argument doesn't exist, create a new MessageThread with this data.
     */
    create: XOR<MessageThreadCreateInput, MessageThreadUncheckedCreateInput>
    /**
     * In case the MessageThread was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageThreadUpdateInput, MessageThreadUncheckedUpdateInput>
  }

  /**
   * MessageThread delete
   */
  export type MessageThreadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
    /**
     * Filter which MessageThread to delete.
     */
    where: MessageThreadWhereUniqueInput
  }

  /**
   * MessageThread deleteMany
   */
  export type MessageThreadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageThreads to delete
     */
    where?: MessageThreadWhereInput
    /**
     * Limit how many MessageThreads to delete.
     */
    limit?: number
  }

  /**
   * MessageThread.messages
   */
  export type MessageThread$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * MessageThread without action
   */
  export type MessageThreadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageThread
     */
    select?: MessageThreadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageThread
     */
    omit?: MessageThreadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageThreadInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    threadId: string | null
    senderId: string | null
    content: string | null
    sentAt: Date | null
    isInternalNote: boolean | null
    visibility: $Enums.CommentVisibility | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    threadId: string | null
    senderId: string | null
    content: string | null
    sentAt: Date | null
    isInternalNote: boolean | null
    visibility: $Enums.CommentVisibility | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    threadId: number
    senderId: number
    content: number
    sentAt: number
    isInternalNote: number
    visibility: number
    attachments: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    threadId?: true
    senderId?: true
    content?: true
    sentAt?: true
    isInternalNote?: true
    visibility?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    threadId?: true
    senderId?: true
    content?: true
    sentAt?: true
    isInternalNote?: true
    visibility?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    threadId?: true
    senderId?: true
    content?: true
    sentAt?: true
    isInternalNote?: true
    visibility?: true
    attachments?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    threadId: string
    senderId: string
    content: string
    sentAt: Date
    isInternalNote: boolean
    visibility: $Enums.CommentVisibility | null
    attachments: JsonValue | null
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    threadId?: boolean
    senderId?: boolean
    content?: boolean
    sentAt?: boolean
    isInternalNote?: boolean
    visibility?: boolean
    attachments?: boolean
    thread?: boolean | MessageThreadDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    threadId?: boolean
    senderId?: boolean
    content?: boolean
    sentAt?: boolean
    isInternalNote?: boolean
    visibility?: boolean
    attachments?: boolean
    thread?: boolean | MessageThreadDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    threadId?: boolean
    senderId?: boolean
    content?: boolean
    sentAt?: boolean
    isInternalNote?: boolean
    visibility?: boolean
    attachments?: boolean
    thread?: boolean | MessageThreadDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    threadId?: boolean
    senderId?: boolean
    content?: boolean
    sentAt?: boolean
    isInternalNote?: boolean
    visibility?: boolean
    attachments?: boolean
  }

  export type MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "threadId" | "senderId" | "content" | "sentAt" | "isInternalNote" | "visibility" | "attachments", ExtArgs["result"]["message"]>
  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thread?: boolean | MessageThreadDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thread?: boolean | MessageThreadDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    thread?: boolean | MessageThreadDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      thread: Prisma.$MessageThreadPayload<ExtArgs>
      sender: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      threadId: string
      senderId: string
      content: string
      sentAt: Date
      isInternalNote: boolean
      visibility: $Enums.CommentVisibility | null
      attachments: Prisma.JsonValue | null
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {MessageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    thread<T extends MessageThreadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MessageThreadDefaultArgs<ExtArgs>>): Prisma__MessageThreadClient<$Result.GetResult<Prisma.$MessageThreadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly threadId: FieldRef<"Message", 'String'>
    readonly senderId: FieldRef<"Message", 'String'>
    readonly content: FieldRef<"Message", 'String'>
    readonly sentAt: FieldRef<"Message", 'DateTime'>
    readonly isInternalNote: FieldRef<"Message", 'Boolean'>
    readonly visibility: FieldRef<"Message", 'CommentVisibility'>
    readonly attachments: FieldRef<"Message", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Message updateManyAndReturn
   */
  export type MessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model Meeting
   */

  export type AggregateMeeting = {
    _count: MeetingCountAggregateOutputType | null
    _min: MeetingMinAggregateOutputType | null
    _max: MeetingMaxAggregateOutputType | null
  }

  export type MeetingMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    startTime: Date | null
    endTime: Date | null
    type: $Enums.MeetingType | null
    location: string | null
    videoCallLink: string | null
    jobId: string | null
    applicationId: string | null
    organizerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    meetingTemplateId: string | null
  }

  export type MeetingMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    startTime: Date | null
    endTime: Date | null
    type: $Enums.MeetingType | null
    location: string | null
    videoCallLink: string | null
    jobId: string | null
    applicationId: string | null
    organizerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    meetingTemplateId: string | null
  }

  export type MeetingCountAggregateOutputType = {
    id: number
    title: number
    description: number
    startTime: number
    endTime: number
    type: number
    location: number
    videoCallLink: number
    jobId: number
    applicationId: number
    organizerId: number
    createdAt: number
    updatedAt: number
    meetingTemplateId: number
    _all: number
  }


  export type MeetingMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startTime?: true
    endTime?: true
    type?: true
    location?: true
    videoCallLink?: true
    jobId?: true
    applicationId?: true
    organizerId?: true
    createdAt?: true
    updatedAt?: true
    meetingTemplateId?: true
  }

  export type MeetingMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startTime?: true
    endTime?: true
    type?: true
    location?: true
    videoCallLink?: true
    jobId?: true
    applicationId?: true
    organizerId?: true
    createdAt?: true
    updatedAt?: true
    meetingTemplateId?: true
  }

  export type MeetingCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    startTime?: true
    endTime?: true
    type?: true
    location?: true
    videoCallLink?: true
    jobId?: true
    applicationId?: true
    organizerId?: true
    createdAt?: true
    updatedAt?: true
    meetingTemplateId?: true
    _all?: true
  }

  export type MeetingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meeting to aggregate.
     */
    where?: MeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetings to fetch.
     */
    orderBy?: MeetingOrderByWithRelationInput | MeetingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Meetings
    **/
    _count?: true | MeetingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetingMaxAggregateInputType
  }

  export type GetMeetingAggregateType<T extends MeetingAggregateArgs> = {
        [P in keyof T & keyof AggregateMeeting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeeting[P]>
      : GetScalarType<T[P], AggregateMeeting[P]>
  }




  export type MeetingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetingWhereInput
    orderBy?: MeetingOrderByWithAggregationInput | MeetingOrderByWithAggregationInput[]
    by: MeetingScalarFieldEnum[] | MeetingScalarFieldEnum
    having?: MeetingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetingCountAggregateInputType | true
    _min?: MeetingMinAggregateInputType
    _max?: MeetingMaxAggregateInputType
  }

  export type MeetingGroupByOutputType = {
    id: string
    title: string
    description: string | null
    startTime: Date
    endTime: Date
    type: $Enums.MeetingType
    location: string | null
    videoCallLink: string | null
    jobId: string | null
    applicationId: string | null
    organizerId: string
    createdAt: Date
    updatedAt: Date
    meetingTemplateId: string | null
    _count: MeetingCountAggregateOutputType | null
    _min: MeetingMinAggregateOutputType | null
    _max: MeetingMaxAggregateOutputType | null
  }

  type GetMeetingGroupByPayload<T extends MeetingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeetingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetingGroupByOutputType[P]>
            : GetScalarType<T[P], MeetingGroupByOutputType[P]>
        }
      >
    >


  export type MeetingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    type?: boolean
    location?: boolean
    videoCallLink?: boolean
    jobId?: boolean
    applicationId?: boolean
    organizerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meetingTemplateId?: boolean
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    attendees?: boolean | Meeting$attendeesArgs<ExtArgs>
    meetingTemplate?: boolean | Meeting$meetingTemplateArgs<ExtArgs>
    aiNoteTakingConfig?: boolean | Meeting$aiNoteTakingConfigArgs<ExtArgs>
    _count?: boolean | MeetingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meeting"]>

  export type MeetingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    type?: boolean
    location?: boolean
    videoCallLink?: boolean
    jobId?: boolean
    applicationId?: boolean
    organizerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meetingTemplateId?: boolean
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    meetingTemplate?: boolean | Meeting$meetingTemplateArgs<ExtArgs>
  }, ExtArgs["result"]["meeting"]>

  export type MeetingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    type?: boolean
    location?: boolean
    videoCallLink?: boolean
    jobId?: boolean
    applicationId?: boolean
    organizerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meetingTemplateId?: boolean
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    meetingTemplate?: boolean | Meeting$meetingTemplateArgs<ExtArgs>
  }, ExtArgs["result"]["meeting"]>

  export type MeetingSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    startTime?: boolean
    endTime?: boolean
    type?: boolean
    location?: boolean
    videoCallLink?: boolean
    jobId?: boolean
    applicationId?: boolean
    organizerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meetingTemplateId?: boolean
  }

  export type MeetingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "startTime" | "endTime" | "type" | "location" | "videoCallLink" | "jobId" | "applicationId" | "organizerId" | "createdAt" | "updatedAt" | "meetingTemplateId", ExtArgs["result"]["meeting"]>
  export type MeetingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    attendees?: boolean | Meeting$attendeesArgs<ExtArgs>
    meetingTemplate?: boolean | Meeting$meetingTemplateArgs<ExtArgs>
    aiNoteTakingConfig?: boolean | Meeting$aiNoteTakingConfigArgs<ExtArgs>
    _count?: boolean | MeetingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MeetingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    meetingTemplate?: boolean | Meeting$meetingTemplateArgs<ExtArgs>
  }
  export type MeetingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organizer?: boolean | UserDefaultArgs<ExtArgs>
    meetingTemplate?: boolean | Meeting$meetingTemplateArgs<ExtArgs>
  }

  export type $MeetingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Meeting"
    objects: {
      organizer: Prisma.$UserPayload<ExtArgs>
      attendees: Prisma.$MeetingAttendeePayload<ExtArgs>[]
      meetingTemplate: Prisma.$MeetingTemplatePayload<ExtArgs> | null
      aiNoteTakingConfig: Prisma.$AINoteTakingConfigPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      startTime: Date
      endTime: Date
      type: $Enums.MeetingType
      location: string | null
      videoCallLink: string | null
      jobId: string | null
      applicationId: string | null
      organizerId: string
      createdAt: Date
      updatedAt: Date
      meetingTemplateId: string | null
    }, ExtArgs["result"]["meeting"]>
    composites: {}
  }

  type MeetingGetPayload<S extends boolean | null | undefined | MeetingDefaultArgs> = $Result.GetResult<Prisma.$MeetingPayload, S>

  type MeetingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MeetingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MeetingCountAggregateInputType | true
    }

  export interface MeetingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Meeting'], meta: { name: 'Meeting' } }
    /**
     * Find zero or one Meeting that matches the filter.
     * @param {MeetingFindUniqueArgs} args - Arguments to find a Meeting
     * @example
     * // Get one Meeting
     * const meeting = await prisma.meeting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeetingFindUniqueArgs>(args: SelectSubset<T, MeetingFindUniqueArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Meeting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MeetingFindUniqueOrThrowArgs} args - Arguments to find a Meeting
     * @example
     * // Get one Meeting
     * const meeting = await prisma.meeting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeetingFindUniqueOrThrowArgs>(args: SelectSubset<T, MeetingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Meeting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingFindFirstArgs} args - Arguments to find a Meeting
     * @example
     * // Get one Meeting
     * const meeting = await prisma.meeting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeetingFindFirstArgs>(args?: SelectSubset<T, MeetingFindFirstArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Meeting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingFindFirstOrThrowArgs} args - Arguments to find a Meeting
     * @example
     * // Get one Meeting
     * const meeting = await prisma.meeting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeetingFindFirstOrThrowArgs>(args?: SelectSubset<T, MeetingFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Meetings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Meetings
     * const meetings = await prisma.meeting.findMany()
     * 
     * // Get first 10 Meetings
     * const meetings = await prisma.meeting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetingWithIdOnly = await prisma.meeting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeetingFindManyArgs>(args?: SelectSubset<T, MeetingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Meeting.
     * @param {MeetingCreateArgs} args - Arguments to create a Meeting.
     * @example
     * // Create one Meeting
     * const Meeting = await prisma.meeting.create({
     *   data: {
     *     // ... data to create a Meeting
     *   }
     * })
     * 
     */
    create<T extends MeetingCreateArgs>(args: SelectSubset<T, MeetingCreateArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Meetings.
     * @param {MeetingCreateManyArgs} args - Arguments to create many Meetings.
     * @example
     * // Create many Meetings
     * const meeting = await prisma.meeting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeetingCreateManyArgs>(args?: SelectSubset<T, MeetingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Meetings and returns the data saved in the database.
     * @param {MeetingCreateManyAndReturnArgs} args - Arguments to create many Meetings.
     * @example
     * // Create many Meetings
     * const meeting = await prisma.meeting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Meetings and only return the `id`
     * const meetingWithIdOnly = await prisma.meeting.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MeetingCreateManyAndReturnArgs>(args?: SelectSubset<T, MeetingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Meeting.
     * @param {MeetingDeleteArgs} args - Arguments to delete one Meeting.
     * @example
     * // Delete one Meeting
     * const Meeting = await prisma.meeting.delete({
     *   where: {
     *     // ... filter to delete one Meeting
     *   }
     * })
     * 
     */
    delete<T extends MeetingDeleteArgs>(args: SelectSubset<T, MeetingDeleteArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Meeting.
     * @param {MeetingUpdateArgs} args - Arguments to update one Meeting.
     * @example
     * // Update one Meeting
     * const meeting = await prisma.meeting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeetingUpdateArgs>(args: SelectSubset<T, MeetingUpdateArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Meetings.
     * @param {MeetingDeleteManyArgs} args - Arguments to filter Meetings to delete.
     * @example
     * // Delete a few Meetings
     * const { count } = await prisma.meeting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeetingDeleteManyArgs>(args?: SelectSubset<T, MeetingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Meetings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Meetings
     * const meeting = await prisma.meeting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeetingUpdateManyArgs>(args: SelectSubset<T, MeetingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Meetings and returns the data updated in the database.
     * @param {MeetingUpdateManyAndReturnArgs} args - Arguments to update many Meetings.
     * @example
     * // Update many Meetings
     * const meeting = await prisma.meeting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Meetings and only return the `id`
     * const meetingWithIdOnly = await prisma.meeting.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MeetingUpdateManyAndReturnArgs>(args: SelectSubset<T, MeetingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Meeting.
     * @param {MeetingUpsertArgs} args - Arguments to update or create a Meeting.
     * @example
     * // Update or create a Meeting
     * const meeting = await prisma.meeting.upsert({
     *   create: {
     *     // ... data to create a Meeting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Meeting we want to update
     *   }
     * })
     */
    upsert<T extends MeetingUpsertArgs>(args: SelectSubset<T, MeetingUpsertArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Meetings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingCountArgs} args - Arguments to filter Meetings to count.
     * @example
     * // Count the number of Meetings
     * const count = await prisma.meeting.count({
     *   where: {
     *     // ... the filter for the Meetings we want to count
     *   }
     * })
    **/
    count<T extends MeetingCountArgs>(
      args?: Subset<T, MeetingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Meeting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetingAggregateArgs>(args: Subset<T, MeetingAggregateArgs>): Prisma.PrismaPromise<GetMeetingAggregateType<T>>

    /**
     * Group by Meeting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetingGroupByArgs['orderBy'] }
        : { orderBy?: MeetingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Meeting model
   */
  readonly fields: MeetingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Meeting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeetingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organizer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    attendees<T extends Meeting$attendeesArgs<ExtArgs> = {}>(args?: Subset<T, Meeting$attendeesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingAttendeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    meetingTemplate<T extends Meeting$meetingTemplateArgs<ExtArgs> = {}>(args?: Subset<T, Meeting$meetingTemplateArgs<ExtArgs>>): Prisma__MeetingTemplateClient<$Result.GetResult<Prisma.$MeetingTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    aiNoteTakingConfig<T extends Meeting$aiNoteTakingConfigArgs<ExtArgs> = {}>(args?: Subset<T, Meeting$aiNoteTakingConfigArgs<ExtArgs>>): Prisma__AINoteTakingConfigClient<$Result.GetResult<Prisma.$AINoteTakingConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Meeting model
   */
  interface MeetingFieldRefs {
    readonly id: FieldRef<"Meeting", 'String'>
    readonly title: FieldRef<"Meeting", 'String'>
    readonly description: FieldRef<"Meeting", 'String'>
    readonly startTime: FieldRef<"Meeting", 'DateTime'>
    readonly endTime: FieldRef<"Meeting", 'DateTime'>
    readonly type: FieldRef<"Meeting", 'MeetingType'>
    readonly location: FieldRef<"Meeting", 'String'>
    readonly videoCallLink: FieldRef<"Meeting", 'String'>
    readonly jobId: FieldRef<"Meeting", 'String'>
    readonly applicationId: FieldRef<"Meeting", 'String'>
    readonly organizerId: FieldRef<"Meeting", 'String'>
    readonly createdAt: FieldRef<"Meeting", 'DateTime'>
    readonly updatedAt: FieldRef<"Meeting", 'DateTime'>
    readonly meetingTemplateId: FieldRef<"Meeting", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Meeting findUnique
   */
  export type MeetingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meeting
     */
    omit?: MeetingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * Filter, which Meeting to fetch.
     */
    where: MeetingWhereUniqueInput
  }

  /**
   * Meeting findUniqueOrThrow
   */
  export type MeetingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meeting
     */
    omit?: MeetingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * Filter, which Meeting to fetch.
     */
    where: MeetingWhereUniqueInput
  }

  /**
   * Meeting findFirst
   */
  export type MeetingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meeting
     */
    omit?: MeetingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * Filter, which Meeting to fetch.
     */
    where?: MeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetings to fetch.
     */
    orderBy?: MeetingOrderByWithRelationInput | MeetingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meetings.
     */
    cursor?: MeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meetings.
     */
    distinct?: MeetingScalarFieldEnum | MeetingScalarFieldEnum[]
  }

  /**
   * Meeting findFirstOrThrow
   */
  export type MeetingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meeting
     */
    omit?: MeetingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * Filter, which Meeting to fetch.
     */
    where?: MeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetings to fetch.
     */
    orderBy?: MeetingOrderByWithRelationInput | MeetingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meetings.
     */
    cursor?: MeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meetings.
     */
    distinct?: MeetingScalarFieldEnum | MeetingScalarFieldEnum[]
  }

  /**
   * Meeting findMany
   */
  export type MeetingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meeting
     */
    omit?: MeetingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * Filter, which Meetings to fetch.
     */
    where?: MeetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetings to fetch.
     */
    orderBy?: MeetingOrderByWithRelationInput | MeetingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Meetings.
     */
    cursor?: MeetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetings.
     */
    skip?: number
    distinct?: MeetingScalarFieldEnum | MeetingScalarFieldEnum[]
  }

  /**
   * Meeting create
   */
  export type MeetingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meeting
     */
    omit?: MeetingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * The data needed to create a Meeting.
     */
    data: XOR<MeetingCreateInput, MeetingUncheckedCreateInput>
  }

  /**
   * Meeting createMany
   */
  export type MeetingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Meetings.
     */
    data: MeetingCreateManyInput | MeetingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Meeting createManyAndReturn
   */
  export type MeetingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Meeting
     */
    omit?: MeetingOmit<ExtArgs> | null
    /**
     * The data used to create many Meetings.
     */
    data: MeetingCreateManyInput | MeetingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Meeting update
   */
  export type MeetingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meeting
     */
    omit?: MeetingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * The data needed to update a Meeting.
     */
    data: XOR<MeetingUpdateInput, MeetingUncheckedUpdateInput>
    /**
     * Choose, which Meeting to update.
     */
    where: MeetingWhereUniqueInput
  }

  /**
   * Meeting updateMany
   */
  export type MeetingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Meetings.
     */
    data: XOR<MeetingUpdateManyMutationInput, MeetingUncheckedUpdateManyInput>
    /**
     * Filter which Meetings to update
     */
    where?: MeetingWhereInput
    /**
     * Limit how many Meetings to update.
     */
    limit?: number
  }

  /**
   * Meeting updateManyAndReturn
   */
  export type MeetingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Meeting
     */
    omit?: MeetingOmit<ExtArgs> | null
    /**
     * The data used to update Meetings.
     */
    data: XOR<MeetingUpdateManyMutationInput, MeetingUncheckedUpdateManyInput>
    /**
     * Filter which Meetings to update
     */
    where?: MeetingWhereInput
    /**
     * Limit how many Meetings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Meeting upsert
   */
  export type MeetingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meeting
     */
    omit?: MeetingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * The filter to search for the Meeting to update in case it exists.
     */
    where: MeetingWhereUniqueInput
    /**
     * In case the Meeting found by the `where` argument doesn't exist, create a new Meeting with this data.
     */
    create: XOR<MeetingCreateInput, MeetingUncheckedCreateInput>
    /**
     * In case the Meeting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetingUpdateInput, MeetingUncheckedUpdateInput>
  }

  /**
   * Meeting delete
   */
  export type MeetingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meeting
     */
    omit?: MeetingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    /**
     * Filter which Meeting to delete.
     */
    where: MeetingWhereUniqueInput
  }

  /**
   * Meeting deleteMany
   */
  export type MeetingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meetings to delete
     */
    where?: MeetingWhereInput
    /**
     * Limit how many Meetings to delete.
     */
    limit?: number
  }

  /**
   * Meeting.attendees
   */
  export type Meeting$attendeesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingAttendee
     */
    select?: MeetingAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingAttendee
     */
    omit?: MeetingAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingAttendeeInclude<ExtArgs> | null
    where?: MeetingAttendeeWhereInput
    orderBy?: MeetingAttendeeOrderByWithRelationInput | MeetingAttendeeOrderByWithRelationInput[]
    cursor?: MeetingAttendeeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetingAttendeeScalarFieldEnum | MeetingAttendeeScalarFieldEnum[]
  }

  /**
   * Meeting.meetingTemplate
   */
  export type Meeting$meetingTemplateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingTemplate
     */
    select?: MeetingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingTemplate
     */
    omit?: MeetingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingTemplateInclude<ExtArgs> | null
    where?: MeetingTemplateWhereInput
  }

  /**
   * Meeting.aiNoteTakingConfig
   */
  export type Meeting$aiNoteTakingConfigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AINoteTakingConfig
     */
    select?: AINoteTakingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AINoteTakingConfig
     */
    omit?: AINoteTakingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AINoteTakingConfigInclude<ExtArgs> | null
    where?: AINoteTakingConfigWhereInput
  }

  /**
   * Meeting without action
   */
  export type MeetingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meeting
     */
    omit?: MeetingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
  }


  /**
   * Model MeetingAttendee
   */

  export type AggregateMeetingAttendee = {
    _count: MeetingAttendeeCountAggregateOutputType | null
    _min: MeetingAttendeeMinAggregateOutputType | null
    _max: MeetingAttendeeMaxAggregateOutputType | null
  }

  export type MeetingAttendeeMinAggregateOutputType = {
    id: string | null
    meetingId: string | null
    userId: string | null
    candidateId: string | null
    email: string | null
    name: string | null
    status: $Enums.AttendeeStatus | null
    isCandidate: boolean | null
  }

  export type MeetingAttendeeMaxAggregateOutputType = {
    id: string | null
    meetingId: string | null
    userId: string | null
    candidateId: string | null
    email: string | null
    name: string | null
    status: $Enums.AttendeeStatus | null
    isCandidate: boolean | null
  }

  export type MeetingAttendeeCountAggregateOutputType = {
    id: number
    meetingId: number
    userId: number
    candidateId: number
    email: number
    name: number
    status: number
    isCandidate: number
    _all: number
  }


  export type MeetingAttendeeMinAggregateInputType = {
    id?: true
    meetingId?: true
    userId?: true
    candidateId?: true
    email?: true
    name?: true
    status?: true
    isCandidate?: true
  }

  export type MeetingAttendeeMaxAggregateInputType = {
    id?: true
    meetingId?: true
    userId?: true
    candidateId?: true
    email?: true
    name?: true
    status?: true
    isCandidate?: true
  }

  export type MeetingAttendeeCountAggregateInputType = {
    id?: true
    meetingId?: true
    userId?: true
    candidateId?: true
    email?: true
    name?: true
    status?: true
    isCandidate?: true
    _all?: true
  }

  export type MeetingAttendeeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetingAttendee to aggregate.
     */
    where?: MeetingAttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingAttendees to fetch.
     */
    orderBy?: MeetingAttendeeOrderByWithRelationInput | MeetingAttendeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetingAttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingAttendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingAttendees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeetingAttendees
    **/
    _count?: true | MeetingAttendeeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetingAttendeeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetingAttendeeMaxAggregateInputType
  }

  export type GetMeetingAttendeeAggregateType<T extends MeetingAttendeeAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetingAttendee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetingAttendee[P]>
      : GetScalarType<T[P], AggregateMeetingAttendee[P]>
  }




  export type MeetingAttendeeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetingAttendeeWhereInput
    orderBy?: MeetingAttendeeOrderByWithAggregationInput | MeetingAttendeeOrderByWithAggregationInput[]
    by: MeetingAttendeeScalarFieldEnum[] | MeetingAttendeeScalarFieldEnum
    having?: MeetingAttendeeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetingAttendeeCountAggregateInputType | true
    _min?: MeetingAttendeeMinAggregateInputType
    _max?: MeetingAttendeeMaxAggregateInputType
  }

  export type MeetingAttendeeGroupByOutputType = {
    id: string
    meetingId: string
    userId: string | null
    candidateId: string | null
    email: string
    name: string | null
    status: $Enums.AttendeeStatus
    isCandidate: boolean
    _count: MeetingAttendeeCountAggregateOutputType | null
    _min: MeetingAttendeeMinAggregateOutputType | null
    _max: MeetingAttendeeMaxAggregateOutputType | null
  }

  type GetMeetingAttendeeGroupByPayload<T extends MeetingAttendeeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeetingAttendeeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetingAttendeeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetingAttendeeGroupByOutputType[P]>
            : GetScalarType<T[P], MeetingAttendeeGroupByOutputType[P]>
        }
      >
    >


  export type MeetingAttendeeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    meetingId?: boolean
    userId?: boolean
    candidateId?: boolean
    email?: boolean
    name?: boolean
    status?: boolean
    isCandidate?: boolean
    meeting?: boolean | MeetingDefaultArgs<ExtArgs>
    user?: boolean | MeetingAttendee$userArgs<ExtArgs>
  }, ExtArgs["result"]["meetingAttendee"]>

  export type MeetingAttendeeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    meetingId?: boolean
    userId?: boolean
    candidateId?: boolean
    email?: boolean
    name?: boolean
    status?: boolean
    isCandidate?: boolean
    meeting?: boolean | MeetingDefaultArgs<ExtArgs>
    user?: boolean | MeetingAttendee$userArgs<ExtArgs>
  }, ExtArgs["result"]["meetingAttendee"]>

  export type MeetingAttendeeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    meetingId?: boolean
    userId?: boolean
    candidateId?: boolean
    email?: boolean
    name?: boolean
    status?: boolean
    isCandidate?: boolean
    meeting?: boolean | MeetingDefaultArgs<ExtArgs>
    user?: boolean | MeetingAttendee$userArgs<ExtArgs>
  }, ExtArgs["result"]["meetingAttendee"]>

  export type MeetingAttendeeSelectScalar = {
    id?: boolean
    meetingId?: boolean
    userId?: boolean
    candidateId?: boolean
    email?: boolean
    name?: boolean
    status?: boolean
    isCandidate?: boolean
  }

  export type MeetingAttendeeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "meetingId" | "userId" | "candidateId" | "email" | "name" | "status" | "isCandidate", ExtArgs["result"]["meetingAttendee"]>
  export type MeetingAttendeeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meeting?: boolean | MeetingDefaultArgs<ExtArgs>
    user?: boolean | MeetingAttendee$userArgs<ExtArgs>
  }
  export type MeetingAttendeeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meeting?: boolean | MeetingDefaultArgs<ExtArgs>
    user?: boolean | MeetingAttendee$userArgs<ExtArgs>
  }
  export type MeetingAttendeeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meeting?: boolean | MeetingDefaultArgs<ExtArgs>
    user?: boolean | MeetingAttendee$userArgs<ExtArgs>
  }

  export type $MeetingAttendeePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MeetingAttendee"
    objects: {
      meeting: Prisma.$MeetingPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      meetingId: string
      userId: string | null
      candidateId: string | null
      email: string
      name: string | null
      status: $Enums.AttendeeStatus
      isCandidate: boolean
    }, ExtArgs["result"]["meetingAttendee"]>
    composites: {}
  }

  type MeetingAttendeeGetPayload<S extends boolean | null | undefined | MeetingAttendeeDefaultArgs> = $Result.GetResult<Prisma.$MeetingAttendeePayload, S>

  type MeetingAttendeeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MeetingAttendeeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MeetingAttendeeCountAggregateInputType | true
    }

  export interface MeetingAttendeeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MeetingAttendee'], meta: { name: 'MeetingAttendee' } }
    /**
     * Find zero or one MeetingAttendee that matches the filter.
     * @param {MeetingAttendeeFindUniqueArgs} args - Arguments to find a MeetingAttendee
     * @example
     * // Get one MeetingAttendee
     * const meetingAttendee = await prisma.meetingAttendee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeetingAttendeeFindUniqueArgs>(args: SelectSubset<T, MeetingAttendeeFindUniqueArgs<ExtArgs>>): Prisma__MeetingAttendeeClient<$Result.GetResult<Prisma.$MeetingAttendeePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MeetingAttendee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MeetingAttendeeFindUniqueOrThrowArgs} args - Arguments to find a MeetingAttendee
     * @example
     * // Get one MeetingAttendee
     * const meetingAttendee = await prisma.meetingAttendee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeetingAttendeeFindUniqueOrThrowArgs>(args: SelectSubset<T, MeetingAttendeeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeetingAttendeeClient<$Result.GetResult<Prisma.$MeetingAttendeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetingAttendee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingAttendeeFindFirstArgs} args - Arguments to find a MeetingAttendee
     * @example
     * // Get one MeetingAttendee
     * const meetingAttendee = await prisma.meetingAttendee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeetingAttendeeFindFirstArgs>(args?: SelectSubset<T, MeetingAttendeeFindFirstArgs<ExtArgs>>): Prisma__MeetingAttendeeClient<$Result.GetResult<Prisma.$MeetingAttendeePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetingAttendee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingAttendeeFindFirstOrThrowArgs} args - Arguments to find a MeetingAttendee
     * @example
     * // Get one MeetingAttendee
     * const meetingAttendee = await prisma.meetingAttendee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeetingAttendeeFindFirstOrThrowArgs>(args?: SelectSubset<T, MeetingAttendeeFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeetingAttendeeClient<$Result.GetResult<Prisma.$MeetingAttendeePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MeetingAttendees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingAttendeeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeetingAttendees
     * const meetingAttendees = await prisma.meetingAttendee.findMany()
     * 
     * // Get first 10 MeetingAttendees
     * const meetingAttendees = await prisma.meetingAttendee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetingAttendeeWithIdOnly = await prisma.meetingAttendee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeetingAttendeeFindManyArgs>(args?: SelectSubset<T, MeetingAttendeeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingAttendeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MeetingAttendee.
     * @param {MeetingAttendeeCreateArgs} args - Arguments to create a MeetingAttendee.
     * @example
     * // Create one MeetingAttendee
     * const MeetingAttendee = await prisma.meetingAttendee.create({
     *   data: {
     *     // ... data to create a MeetingAttendee
     *   }
     * })
     * 
     */
    create<T extends MeetingAttendeeCreateArgs>(args: SelectSubset<T, MeetingAttendeeCreateArgs<ExtArgs>>): Prisma__MeetingAttendeeClient<$Result.GetResult<Prisma.$MeetingAttendeePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MeetingAttendees.
     * @param {MeetingAttendeeCreateManyArgs} args - Arguments to create many MeetingAttendees.
     * @example
     * // Create many MeetingAttendees
     * const meetingAttendee = await prisma.meetingAttendee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeetingAttendeeCreateManyArgs>(args?: SelectSubset<T, MeetingAttendeeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MeetingAttendees and returns the data saved in the database.
     * @param {MeetingAttendeeCreateManyAndReturnArgs} args - Arguments to create many MeetingAttendees.
     * @example
     * // Create many MeetingAttendees
     * const meetingAttendee = await prisma.meetingAttendee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MeetingAttendees and only return the `id`
     * const meetingAttendeeWithIdOnly = await prisma.meetingAttendee.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MeetingAttendeeCreateManyAndReturnArgs>(args?: SelectSubset<T, MeetingAttendeeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingAttendeePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MeetingAttendee.
     * @param {MeetingAttendeeDeleteArgs} args - Arguments to delete one MeetingAttendee.
     * @example
     * // Delete one MeetingAttendee
     * const MeetingAttendee = await prisma.meetingAttendee.delete({
     *   where: {
     *     // ... filter to delete one MeetingAttendee
     *   }
     * })
     * 
     */
    delete<T extends MeetingAttendeeDeleteArgs>(args: SelectSubset<T, MeetingAttendeeDeleteArgs<ExtArgs>>): Prisma__MeetingAttendeeClient<$Result.GetResult<Prisma.$MeetingAttendeePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MeetingAttendee.
     * @param {MeetingAttendeeUpdateArgs} args - Arguments to update one MeetingAttendee.
     * @example
     * // Update one MeetingAttendee
     * const meetingAttendee = await prisma.meetingAttendee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeetingAttendeeUpdateArgs>(args: SelectSubset<T, MeetingAttendeeUpdateArgs<ExtArgs>>): Prisma__MeetingAttendeeClient<$Result.GetResult<Prisma.$MeetingAttendeePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MeetingAttendees.
     * @param {MeetingAttendeeDeleteManyArgs} args - Arguments to filter MeetingAttendees to delete.
     * @example
     * // Delete a few MeetingAttendees
     * const { count } = await prisma.meetingAttendee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeetingAttendeeDeleteManyArgs>(args?: SelectSubset<T, MeetingAttendeeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetingAttendees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingAttendeeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeetingAttendees
     * const meetingAttendee = await prisma.meetingAttendee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeetingAttendeeUpdateManyArgs>(args: SelectSubset<T, MeetingAttendeeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetingAttendees and returns the data updated in the database.
     * @param {MeetingAttendeeUpdateManyAndReturnArgs} args - Arguments to update many MeetingAttendees.
     * @example
     * // Update many MeetingAttendees
     * const meetingAttendee = await prisma.meetingAttendee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MeetingAttendees and only return the `id`
     * const meetingAttendeeWithIdOnly = await prisma.meetingAttendee.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MeetingAttendeeUpdateManyAndReturnArgs>(args: SelectSubset<T, MeetingAttendeeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingAttendeePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MeetingAttendee.
     * @param {MeetingAttendeeUpsertArgs} args - Arguments to update or create a MeetingAttendee.
     * @example
     * // Update or create a MeetingAttendee
     * const meetingAttendee = await prisma.meetingAttendee.upsert({
     *   create: {
     *     // ... data to create a MeetingAttendee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeetingAttendee we want to update
     *   }
     * })
     */
    upsert<T extends MeetingAttendeeUpsertArgs>(args: SelectSubset<T, MeetingAttendeeUpsertArgs<ExtArgs>>): Prisma__MeetingAttendeeClient<$Result.GetResult<Prisma.$MeetingAttendeePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MeetingAttendees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingAttendeeCountArgs} args - Arguments to filter MeetingAttendees to count.
     * @example
     * // Count the number of MeetingAttendees
     * const count = await prisma.meetingAttendee.count({
     *   where: {
     *     // ... the filter for the MeetingAttendees we want to count
     *   }
     * })
    **/
    count<T extends MeetingAttendeeCountArgs>(
      args?: Subset<T, MeetingAttendeeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetingAttendeeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeetingAttendee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingAttendeeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetingAttendeeAggregateArgs>(args: Subset<T, MeetingAttendeeAggregateArgs>): Prisma.PrismaPromise<GetMeetingAttendeeAggregateType<T>>

    /**
     * Group by MeetingAttendee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingAttendeeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetingAttendeeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetingAttendeeGroupByArgs['orderBy'] }
        : { orderBy?: MeetingAttendeeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetingAttendeeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingAttendeeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MeetingAttendee model
   */
  readonly fields: MeetingAttendeeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MeetingAttendee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeetingAttendeeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meeting<T extends MeetingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeetingDefaultArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends MeetingAttendee$userArgs<ExtArgs> = {}>(args?: Subset<T, MeetingAttendee$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MeetingAttendee model
   */
  interface MeetingAttendeeFieldRefs {
    readonly id: FieldRef<"MeetingAttendee", 'String'>
    readonly meetingId: FieldRef<"MeetingAttendee", 'String'>
    readonly userId: FieldRef<"MeetingAttendee", 'String'>
    readonly candidateId: FieldRef<"MeetingAttendee", 'String'>
    readonly email: FieldRef<"MeetingAttendee", 'String'>
    readonly name: FieldRef<"MeetingAttendee", 'String'>
    readonly status: FieldRef<"MeetingAttendee", 'AttendeeStatus'>
    readonly isCandidate: FieldRef<"MeetingAttendee", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * MeetingAttendee findUnique
   */
  export type MeetingAttendeeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingAttendee
     */
    select?: MeetingAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingAttendee
     */
    omit?: MeetingAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingAttendeeInclude<ExtArgs> | null
    /**
     * Filter, which MeetingAttendee to fetch.
     */
    where: MeetingAttendeeWhereUniqueInput
  }

  /**
   * MeetingAttendee findUniqueOrThrow
   */
  export type MeetingAttendeeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingAttendee
     */
    select?: MeetingAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingAttendee
     */
    omit?: MeetingAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingAttendeeInclude<ExtArgs> | null
    /**
     * Filter, which MeetingAttendee to fetch.
     */
    where: MeetingAttendeeWhereUniqueInput
  }

  /**
   * MeetingAttendee findFirst
   */
  export type MeetingAttendeeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingAttendee
     */
    select?: MeetingAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingAttendee
     */
    omit?: MeetingAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingAttendeeInclude<ExtArgs> | null
    /**
     * Filter, which MeetingAttendee to fetch.
     */
    where?: MeetingAttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingAttendees to fetch.
     */
    orderBy?: MeetingAttendeeOrderByWithRelationInput | MeetingAttendeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingAttendees.
     */
    cursor?: MeetingAttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingAttendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingAttendees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingAttendees.
     */
    distinct?: MeetingAttendeeScalarFieldEnum | MeetingAttendeeScalarFieldEnum[]
  }

  /**
   * MeetingAttendee findFirstOrThrow
   */
  export type MeetingAttendeeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingAttendee
     */
    select?: MeetingAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingAttendee
     */
    omit?: MeetingAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingAttendeeInclude<ExtArgs> | null
    /**
     * Filter, which MeetingAttendee to fetch.
     */
    where?: MeetingAttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingAttendees to fetch.
     */
    orderBy?: MeetingAttendeeOrderByWithRelationInput | MeetingAttendeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingAttendees.
     */
    cursor?: MeetingAttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingAttendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingAttendees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingAttendees.
     */
    distinct?: MeetingAttendeeScalarFieldEnum | MeetingAttendeeScalarFieldEnum[]
  }

  /**
   * MeetingAttendee findMany
   */
  export type MeetingAttendeeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingAttendee
     */
    select?: MeetingAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingAttendee
     */
    omit?: MeetingAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingAttendeeInclude<ExtArgs> | null
    /**
     * Filter, which MeetingAttendees to fetch.
     */
    where?: MeetingAttendeeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingAttendees to fetch.
     */
    orderBy?: MeetingAttendeeOrderByWithRelationInput | MeetingAttendeeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeetingAttendees.
     */
    cursor?: MeetingAttendeeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingAttendees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingAttendees.
     */
    skip?: number
    distinct?: MeetingAttendeeScalarFieldEnum | MeetingAttendeeScalarFieldEnum[]
  }

  /**
   * MeetingAttendee create
   */
  export type MeetingAttendeeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingAttendee
     */
    select?: MeetingAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingAttendee
     */
    omit?: MeetingAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingAttendeeInclude<ExtArgs> | null
    /**
     * The data needed to create a MeetingAttendee.
     */
    data: XOR<MeetingAttendeeCreateInput, MeetingAttendeeUncheckedCreateInput>
  }

  /**
   * MeetingAttendee createMany
   */
  export type MeetingAttendeeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MeetingAttendees.
     */
    data: MeetingAttendeeCreateManyInput | MeetingAttendeeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MeetingAttendee createManyAndReturn
   */
  export type MeetingAttendeeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingAttendee
     */
    select?: MeetingAttendeeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingAttendee
     */
    omit?: MeetingAttendeeOmit<ExtArgs> | null
    /**
     * The data used to create many MeetingAttendees.
     */
    data: MeetingAttendeeCreateManyInput | MeetingAttendeeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingAttendeeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MeetingAttendee update
   */
  export type MeetingAttendeeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingAttendee
     */
    select?: MeetingAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingAttendee
     */
    omit?: MeetingAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingAttendeeInclude<ExtArgs> | null
    /**
     * The data needed to update a MeetingAttendee.
     */
    data: XOR<MeetingAttendeeUpdateInput, MeetingAttendeeUncheckedUpdateInput>
    /**
     * Choose, which MeetingAttendee to update.
     */
    where: MeetingAttendeeWhereUniqueInput
  }

  /**
   * MeetingAttendee updateMany
   */
  export type MeetingAttendeeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MeetingAttendees.
     */
    data: XOR<MeetingAttendeeUpdateManyMutationInput, MeetingAttendeeUncheckedUpdateManyInput>
    /**
     * Filter which MeetingAttendees to update
     */
    where?: MeetingAttendeeWhereInput
    /**
     * Limit how many MeetingAttendees to update.
     */
    limit?: number
  }

  /**
   * MeetingAttendee updateManyAndReturn
   */
  export type MeetingAttendeeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingAttendee
     */
    select?: MeetingAttendeeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingAttendee
     */
    omit?: MeetingAttendeeOmit<ExtArgs> | null
    /**
     * The data used to update MeetingAttendees.
     */
    data: XOR<MeetingAttendeeUpdateManyMutationInput, MeetingAttendeeUncheckedUpdateManyInput>
    /**
     * Filter which MeetingAttendees to update
     */
    where?: MeetingAttendeeWhereInput
    /**
     * Limit how many MeetingAttendees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingAttendeeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MeetingAttendee upsert
   */
  export type MeetingAttendeeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingAttendee
     */
    select?: MeetingAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingAttendee
     */
    omit?: MeetingAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingAttendeeInclude<ExtArgs> | null
    /**
     * The filter to search for the MeetingAttendee to update in case it exists.
     */
    where: MeetingAttendeeWhereUniqueInput
    /**
     * In case the MeetingAttendee found by the `where` argument doesn't exist, create a new MeetingAttendee with this data.
     */
    create: XOR<MeetingAttendeeCreateInput, MeetingAttendeeUncheckedCreateInput>
    /**
     * In case the MeetingAttendee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetingAttendeeUpdateInput, MeetingAttendeeUncheckedUpdateInput>
  }

  /**
   * MeetingAttendee delete
   */
  export type MeetingAttendeeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingAttendee
     */
    select?: MeetingAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingAttendee
     */
    omit?: MeetingAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingAttendeeInclude<ExtArgs> | null
    /**
     * Filter which MeetingAttendee to delete.
     */
    where: MeetingAttendeeWhereUniqueInput
  }

  /**
   * MeetingAttendee deleteMany
   */
  export type MeetingAttendeeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetingAttendees to delete
     */
    where?: MeetingAttendeeWhereInput
    /**
     * Limit how many MeetingAttendees to delete.
     */
    limit?: number
  }

  /**
   * MeetingAttendee.user
   */
  export type MeetingAttendee$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * MeetingAttendee without action
   */
  export type MeetingAttendeeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingAttendee
     */
    select?: MeetingAttendeeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingAttendee
     */
    omit?: MeetingAttendeeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingAttendeeInclude<ExtArgs> | null
  }


  /**
   * Model MeetingTemplate
   */

  export type AggregateMeetingTemplate = {
    _count: MeetingTemplateCountAggregateOutputType | null
    _avg: MeetingTemplateAvgAggregateOutputType | null
    _sum: MeetingTemplateSumAggregateOutputType | null
    _min: MeetingTemplateMinAggregateOutputType | null
    _max: MeetingTemplateMaxAggregateOutputType | null
  }

  export type MeetingTemplateAvgAggregateOutputType = {
    duration: number | null
  }

  export type MeetingTemplateSumAggregateOutputType = {
    duration: number | null
  }

  export type MeetingTemplateMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    name: string | null
    title: string | null
    duration: number | null
    meetingType: $Enums.MeetingType | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetingTemplateMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    name: string | null
    title: string | null
    duration: number | null
    meetingType: $Enums.MeetingType | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetingTemplateCountAggregateOutputType = {
    id: number
    companyId: number
    name: number
    title: number
    duration: number
    meetingType: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MeetingTemplateAvgAggregateInputType = {
    duration?: true
  }

  export type MeetingTemplateSumAggregateInputType = {
    duration?: true
  }

  export type MeetingTemplateMinAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    title?: true
    duration?: true
    meetingType?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetingTemplateMaxAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    title?: true
    duration?: true
    meetingType?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetingTemplateCountAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    title?: true
    duration?: true
    meetingType?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MeetingTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetingTemplate to aggregate.
     */
    where?: MeetingTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingTemplates to fetch.
     */
    orderBy?: MeetingTemplateOrderByWithRelationInput | MeetingTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetingTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeetingTemplates
    **/
    _count?: true | MeetingTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeetingTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeetingTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetingTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetingTemplateMaxAggregateInputType
  }

  export type GetMeetingTemplateAggregateType<T extends MeetingTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetingTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetingTemplate[P]>
      : GetScalarType<T[P], AggregateMeetingTemplate[P]>
  }




  export type MeetingTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetingTemplateWhereInput
    orderBy?: MeetingTemplateOrderByWithAggregationInput | MeetingTemplateOrderByWithAggregationInput[]
    by: MeetingTemplateScalarFieldEnum[] | MeetingTemplateScalarFieldEnum
    having?: MeetingTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetingTemplateCountAggregateInputType | true
    _avg?: MeetingTemplateAvgAggregateInputType
    _sum?: MeetingTemplateSumAggregateInputType
    _min?: MeetingTemplateMinAggregateInputType
    _max?: MeetingTemplateMaxAggregateInputType
  }

  export type MeetingTemplateGroupByOutputType = {
    id: string
    companyId: string
    name: string
    title: string
    duration: number
    meetingType: $Enums.MeetingType
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: MeetingTemplateCountAggregateOutputType | null
    _avg: MeetingTemplateAvgAggregateOutputType | null
    _sum: MeetingTemplateSumAggregateOutputType | null
    _min: MeetingTemplateMinAggregateOutputType | null
    _max: MeetingTemplateMaxAggregateOutputType | null
  }

  type GetMeetingTemplateGroupByPayload<T extends MeetingTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeetingTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetingTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetingTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], MeetingTemplateGroupByOutputType[P]>
        }
      >
    >


  export type MeetingTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    title?: boolean
    duration?: boolean
    meetingType?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meetings?: boolean | MeetingTemplate$meetingsArgs<ExtArgs>
    _count?: boolean | MeetingTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meetingTemplate"]>

  export type MeetingTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    title?: boolean
    duration?: boolean
    meetingType?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["meetingTemplate"]>

  export type MeetingTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    title?: boolean
    duration?: boolean
    meetingType?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["meetingTemplate"]>

  export type MeetingTemplateSelectScalar = {
    id?: boolean
    companyId?: boolean
    name?: boolean
    title?: boolean
    duration?: boolean
    meetingType?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MeetingTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "name" | "title" | "duration" | "meetingType" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["meetingTemplate"]>
  export type MeetingTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetings?: boolean | MeetingTemplate$meetingsArgs<ExtArgs>
    _count?: boolean | MeetingTemplateCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MeetingTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type MeetingTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MeetingTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MeetingTemplate"
    objects: {
      meetings: Prisma.$MeetingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      name: string
      title: string
      duration: number
      meetingType: $Enums.MeetingType
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["meetingTemplate"]>
    composites: {}
  }

  type MeetingTemplateGetPayload<S extends boolean | null | undefined | MeetingTemplateDefaultArgs> = $Result.GetResult<Prisma.$MeetingTemplatePayload, S>

  type MeetingTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MeetingTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MeetingTemplateCountAggregateInputType | true
    }

  export interface MeetingTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MeetingTemplate'], meta: { name: 'MeetingTemplate' } }
    /**
     * Find zero or one MeetingTemplate that matches the filter.
     * @param {MeetingTemplateFindUniqueArgs} args - Arguments to find a MeetingTemplate
     * @example
     * // Get one MeetingTemplate
     * const meetingTemplate = await prisma.meetingTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeetingTemplateFindUniqueArgs>(args: SelectSubset<T, MeetingTemplateFindUniqueArgs<ExtArgs>>): Prisma__MeetingTemplateClient<$Result.GetResult<Prisma.$MeetingTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MeetingTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MeetingTemplateFindUniqueOrThrowArgs} args - Arguments to find a MeetingTemplate
     * @example
     * // Get one MeetingTemplate
     * const meetingTemplate = await prisma.meetingTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeetingTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, MeetingTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeetingTemplateClient<$Result.GetResult<Prisma.$MeetingTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetingTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingTemplateFindFirstArgs} args - Arguments to find a MeetingTemplate
     * @example
     * // Get one MeetingTemplate
     * const meetingTemplate = await prisma.meetingTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeetingTemplateFindFirstArgs>(args?: SelectSubset<T, MeetingTemplateFindFirstArgs<ExtArgs>>): Prisma__MeetingTemplateClient<$Result.GetResult<Prisma.$MeetingTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetingTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingTemplateFindFirstOrThrowArgs} args - Arguments to find a MeetingTemplate
     * @example
     * // Get one MeetingTemplate
     * const meetingTemplate = await prisma.meetingTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeetingTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, MeetingTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeetingTemplateClient<$Result.GetResult<Prisma.$MeetingTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MeetingTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeetingTemplates
     * const meetingTemplates = await prisma.meetingTemplate.findMany()
     * 
     * // Get first 10 MeetingTemplates
     * const meetingTemplates = await prisma.meetingTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetingTemplateWithIdOnly = await prisma.meetingTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeetingTemplateFindManyArgs>(args?: SelectSubset<T, MeetingTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MeetingTemplate.
     * @param {MeetingTemplateCreateArgs} args - Arguments to create a MeetingTemplate.
     * @example
     * // Create one MeetingTemplate
     * const MeetingTemplate = await prisma.meetingTemplate.create({
     *   data: {
     *     // ... data to create a MeetingTemplate
     *   }
     * })
     * 
     */
    create<T extends MeetingTemplateCreateArgs>(args: SelectSubset<T, MeetingTemplateCreateArgs<ExtArgs>>): Prisma__MeetingTemplateClient<$Result.GetResult<Prisma.$MeetingTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MeetingTemplates.
     * @param {MeetingTemplateCreateManyArgs} args - Arguments to create many MeetingTemplates.
     * @example
     * // Create many MeetingTemplates
     * const meetingTemplate = await prisma.meetingTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeetingTemplateCreateManyArgs>(args?: SelectSubset<T, MeetingTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MeetingTemplates and returns the data saved in the database.
     * @param {MeetingTemplateCreateManyAndReturnArgs} args - Arguments to create many MeetingTemplates.
     * @example
     * // Create many MeetingTemplates
     * const meetingTemplate = await prisma.meetingTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MeetingTemplates and only return the `id`
     * const meetingTemplateWithIdOnly = await prisma.meetingTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MeetingTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, MeetingTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MeetingTemplate.
     * @param {MeetingTemplateDeleteArgs} args - Arguments to delete one MeetingTemplate.
     * @example
     * // Delete one MeetingTemplate
     * const MeetingTemplate = await prisma.meetingTemplate.delete({
     *   where: {
     *     // ... filter to delete one MeetingTemplate
     *   }
     * })
     * 
     */
    delete<T extends MeetingTemplateDeleteArgs>(args: SelectSubset<T, MeetingTemplateDeleteArgs<ExtArgs>>): Prisma__MeetingTemplateClient<$Result.GetResult<Prisma.$MeetingTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MeetingTemplate.
     * @param {MeetingTemplateUpdateArgs} args - Arguments to update one MeetingTemplate.
     * @example
     * // Update one MeetingTemplate
     * const meetingTemplate = await prisma.meetingTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeetingTemplateUpdateArgs>(args: SelectSubset<T, MeetingTemplateUpdateArgs<ExtArgs>>): Prisma__MeetingTemplateClient<$Result.GetResult<Prisma.$MeetingTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MeetingTemplates.
     * @param {MeetingTemplateDeleteManyArgs} args - Arguments to filter MeetingTemplates to delete.
     * @example
     * // Delete a few MeetingTemplates
     * const { count } = await prisma.meetingTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeetingTemplateDeleteManyArgs>(args?: SelectSubset<T, MeetingTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetingTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeetingTemplates
     * const meetingTemplate = await prisma.meetingTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeetingTemplateUpdateManyArgs>(args: SelectSubset<T, MeetingTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetingTemplates and returns the data updated in the database.
     * @param {MeetingTemplateUpdateManyAndReturnArgs} args - Arguments to update many MeetingTemplates.
     * @example
     * // Update many MeetingTemplates
     * const meetingTemplate = await prisma.meetingTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MeetingTemplates and only return the `id`
     * const meetingTemplateWithIdOnly = await prisma.meetingTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MeetingTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, MeetingTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MeetingTemplate.
     * @param {MeetingTemplateUpsertArgs} args - Arguments to update or create a MeetingTemplate.
     * @example
     * // Update or create a MeetingTemplate
     * const meetingTemplate = await prisma.meetingTemplate.upsert({
     *   create: {
     *     // ... data to create a MeetingTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeetingTemplate we want to update
     *   }
     * })
     */
    upsert<T extends MeetingTemplateUpsertArgs>(args: SelectSubset<T, MeetingTemplateUpsertArgs<ExtArgs>>): Prisma__MeetingTemplateClient<$Result.GetResult<Prisma.$MeetingTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MeetingTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingTemplateCountArgs} args - Arguments to filter MeetingTemplates to count.
     * @example
     * // Count the number of MeetingTemplates
     * const count = await prisma.meetingTemplate.count({
     *   where: {
     *     // ... the filter for the MeetingTemplates we want to count
     *   }
     * })
    **/
    count<T extends MeetingTemplateCountArgs>(
      args?: Subset<T, MeetingTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetingTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeetingTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetingTemplateAggregateArgs>(args: Subset<T, MeetingTemplateAggregateArgs>): Prisma.PrismaPromise<GetMeetingTemplateAggregateType<T>>

    /**
     * Group by MeetingTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetingTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetingTemplateGroupByArgs['orderBy'] }
        : { orderBy?: MeetingTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetingTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MeetingTemplate model
   */
  readonly fields: MeetingTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MeetingTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeetingTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meetings<T extends MeetingTemplate$meetingsArgs<ExtArgs> = {}>(args?: Subset<T, MeetingTemplate$meetingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MeetingTemplate model
   */
  interface MeetingTemplateFieldRefs {
    readonly id: FieldRef<"MeetingTemplate", 'String'>
    readonly companyId: FieldRef<"MeetingTemplate", 'String'>
    readonly name: FieldRef<"MeetingTemplate", 'String'>
    readonly title: FieldRef<"MeetingTemplate", 'String'>
    readonly duration: FieldRef<"MeetingTemplate", 'Int'>
    readonly meetingType: FieldRef<"MeetingTemplate", 'MeetingType'>
    readonly description: FieldRef<"MeetingTemplate", 'String'>
    readonly createdAt: FieldRef<"MeetingTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"MeetingTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MeetingTemplate findUnique
   */
  export type MeetingTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingTemplate
     */
    select?: MeetingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingTemplate
     */
    omit?: MeetingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingTemplateInclude<ExtArgs> | null
    /**
     * Filter, which MeetingTemplate to fetch.
     */
    where: MeetingTemplateWhereUniqueInput
  }

  /**
   * MeetingTemplate findUniqueOrThrow
   */
  export type MeetingTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingTemplate
     */
    select?: MeetingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingTemplate
     */
    omit?: MeetingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingTemplateInclude<ExtArgs> | null
    /**
     * Filter, which MeetingTemplate to fetch.
     */
    where: MeetingTemplateWhereUniqueInput
  }

  /**
   * MeetingTemplate findFirst
   */
  export type MeetingTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingTemplate
     */
    select?: MeetingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingTemplate
     */
    omit?: MeetingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingTemplateInclude<ExtArgs> | null
    /**
     * Filter, which MeetingTemplate to fetch.
     */
    where?: MeetingTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingTemplates to fetch.
     */
    orderBy?: MeetingTemplateOrderByWithRelationInput | MeetingTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingTemplates.
     */
    cursor?: MeetingTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingTemplates.
     */
    distinct?: MeetingTemplateScalarFieldEnum | MeetingTemplateScalarFieldEnum[]
  }

  /**
   * MeetingTemplate findFirstOrThrow
   */
  export type MeetingTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingTemplate
     */
    select?: MeetingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingTemplate
     */
    omit?: MeetingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingTemplateInclude<ExtArgs> | null
    /**
     * Filter, which MeetingTemplate to fetch.
     */
    where?: MeetingTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingTemplates to fetch.
     */
    orderBy?: MeetingTemplateOrderByWithRelationInput | MeetingTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingTemplates.
     */
    cursor?: MeetingTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingTemplates.
     */
    distinct?: MeetingTemplateScalarFieldEnum | MeetingTemplateScalarFieldEnum[]
  }

  /**
   * MeetingTemplate findMany
   */
  export type MeetingTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingTemplate
     */
    select?: MeetingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingTemplate
     */
    omit?: MeetingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingTemplateInclude<ExtArgs> | null
    /**
     * Filter, which MeetingTemplates to fetch.
     */
    where?: MeetingTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingTemplates to fetch.
     */
    orderBy?: MeetingTemplateOrderByWithRelationInput | MeetingTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeetingTemplates.
     */
    cursor?: MeetingTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingTemplates.
     */
    skip?: number
    distinct?: MeetingTemplateScalarFieldEnum | MeetingTemplateScalarFieldEnum[]
  }

  /**
   * MeetingTemplate create
   */
  export type MeetingTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingTemplate
     */
    select?: MeetingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingTemplate
     */
    omit?: MeetingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a MeetingTemplate.
     */
    data: XOR<MeetingTemplateCreateInput, MeetingTemplateUncheckedCreateInput>
  }

  /**
   * MeetingTemplate createMany
   */
  export type MeetingTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MeetingTemplates.
     */
    data: MeetingTemplateCreateManyInput | MeetingTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MeetingTemplate createManyAndReturn
   */
  export type MeetingTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingTemplate
     */
    select?: MeetingTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingTemplate
     */
    omit?: MeetingTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many MeetingTemplates.
     */
    data: MeetingTemplateCreateManyInput | MeetingTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MeetingTemplate update
   */
  export type MeetingTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingTemplate
     */
    select?: MeetingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingTemplate
     */
    omit?: MeetingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a MeetingTemplate.
     */
    data: XOR<MeetingTemplateUpdateInput, MeetingTemplateUncheckedUpdateInput>
    /**
     * Choose, which MeetingTemplate to update.
     */
    where: MeetingTemplateWhereUniqueInput
  }

  /**
   * MeetingTemplate updateMany
   */
  export type MeetingTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MeetingTemplates.
     */
    data: XOR<MeetingTemplateUpdateManyMutationInput, MeetingTemplateUncheckedUpdateManyInput>
    /**
     * Filter which MeetingTemplates to update
     */
    where?: MeetingTemplateWhereInput
    /**
     * Limit how many MeetingTemplates to update.
     */
    limit?: number
  }

  /**
   * MeetingTemplate updateManyAndReturn
   */
  export type MeetingTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingTemplate
     */
    select?: MeetingTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingTemplate
     */
    omit?: MeetingTemplateOmit<ExtArgs> | null
    /**
     * The data used to update MeetingTemplates.
     */
    data: XOR<MeetingTemplateUpdateManyMutationInput, MeetingTemplateUncheckedUpdateManyInput>
    /**
     * Filter which MeetingTemplates to update
     */
    where?: MeetingTemplateWhereInput
    /**
     * Limit how many MeetingTemplates to update.
     */
    limit?: number
  }

  /**
   * MeetingTemplate upsert
   */
  export type MeetingTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingTemplate
     */
    select?: MeetingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingTemplate
     */
    omit?: MeetingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the MeetingTemplate to update in case it exists.
     */
    where: MeetingTemplateWhereUniqueInput
    /**
     * In case the MeetingTemplate found by the `where` argument doesn't exist, create a new MeetingTemplate with this data.
     */
    create: XOR<MeetingTemplateCreateInput, MeetingTemplateUncheckedCreateInput>
    /**
     * In case the MeetingTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetingTemplateUpdateInput, MeetingTemplateUncheckedUpdateInput>
  }

  /**
   * MeetingTemplate delete
   */
  export type MeetingTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingTemplate
     */
    select?: MeetingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingTemplate
     */
    omit?: MeetingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingTemplateInclude<ExtArgs> | null
    /**
     * Filter which MeetingTemplate to delete.
     */
    where: MeetingTemplateWhereUniqueInput
  }

  /**
   * MeetingTemplate deleteMany
   */
  export type MeetingTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetingTemplates to delete
     */
    where?: MeetingTemplateWhereInput
    /**
     * Limit how many MeetingTemplates to delete.
     */
    limit?: number
  }

  /**
   * MeetingTemplate.meetings
   */
  export type MeetingTemplate$meetingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meeting
     */
    select?: MeetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meeting
     */
    omit?: MeetingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingInclude<ExtArgs> | null
    where?: MeetingWhereInput
    orderBy?: MeetingOrderByWithRelationInput | MeetingOrderByWithRelationInput[]
    cursor?: MeetingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetingScalarFieldEnum | MeetingScalarFieldEnum[]
  }

  /**
   * MeetingTemplate without action
   */
  export type MeetingTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetingTemplate
     */
    select?: MeetingTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetingTemplate
     */
    omit?: MeetingTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetingTemplateInclude<ExtArgs> | null
  }


  /**
   * Model CareersPageSetting
   */

  export type AggregateCareersPageSetting = {
    _count: CareersPageSettingCountAggregateOutputType | null
    _min: CareersPageSettingMinAggregateOutputType | null
    _max: CareersPageSettingMaxAggregateOutputType | null
  }

  export type CareersPageSettingMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    logoUrl: string | null
    primaryColor: string | null
    focusColor: string | null
    hyperlinkColor: string | null
    googleAnalyticsId: string | null
    trackingPixelUrl: string | null
    embedJobsCode: string | null
    customCSS: string | null
    updatedAt: Date | null
  }

  export type CareersPageSettingMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    logoUrl: string | null
    primaryColor: string | null
    focusColor: string | null
    hyperlinkColor: string | null
    googleAnalyticsId: string | null
    trackingPixelUrl: string | null
    embedJobsCode: string | null
    customCSS: string | null
    updatedAt: Date | null
  }

  export type CareersPageSettingCountAggregateOutputType = {
    id: number
    companyId: number
    logoUrl: number
    primaryColor: number
    focusColor: number
    hyperlinkColor: number
    googleAnalyticsId: number
    trackingPixelUrl: number
    embedJobsCode: number
    customCSS: number
    updatedAt: number
    _all: number
  }


  export type CareersPageSettingMinAggregateInputType = {
    id?: true
    companyId?: true
    logoUrl?: true
    primaryColor?: true
    focusColor?: true
    hyperlinkColor?: true
    googleAnalyticsId?: true
    trackingPixelUrl?: true
    embedJobsCode?: true
    customCSS?: true
    updatedAt?: true
  }

  export type CareersPageSettingMaxAggregateInputType = {
    id?: true
    companyId?: true
    logoUrl?: true
    primaryColor?: true
    focusColor?: true
    hyperlinkColor?: true
    googleAnalyticsId?: true
    trackingPixelUrl?: true
    embedJobsCode?: true
    customCSS?: true
    updatedAt?: true
  }

  export type CareersPageSettingCountAggregateInputType = {
    id?: true
    companyId?: true
    logoUrl?: true
    primaryColor?: true
    focusColor?: true
    hyperlinkColor?: true
    googleAnalyticsId?: true
    trackingPixelUrl?: true
    embedJobsCode?: true
    customCSS?: true
    updatedAt?: true
    _all?: true
  }

  export type CareersPageSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CareersPageSetting to aggregate.
     */
    where?: CareersPageSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CareersPageSettings to fetch.
     */
    orderBy?: CareersPageSettingOrderByWithRelationInput | CareersPageSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CareersPageSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CareersPageSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CareersPageSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CareersPageSettings
    **/
    _count?: true | CareersPageSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CareersPageSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CareersPageSettingMaxAggregateInputType
  }

  export type GetCareersPageSettingAggregateType<T extends CareersPageSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateCareersPageSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCareersPageSetting[P]>
      : GetScalarType<T[P], AggregateCareersPageSetting[P]>
  }




  export type CareersPageSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CareersPageSettingWhereInput
    orderBy?: CareersPageSettingOrderByWithAggregationInput | CareersPageSettingOrderByWithAggregationInput[]
    by: CareersPageSettingScalarFieldEnum[] | CareersPageSettingScalarFieldEnum
    having?: CareersPageSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CareersPageSettingCountAggregateInputType | true
    _min?: CareersPageSettingMinAggregateInputType
    _max?: CareersPageSettingMaxAggregateInputType
  }

  export type CareersPageSettingGroupByOutputType = {
    id: string
    companyId: string
    logoUrl: string | null
    primaryColor: string | null
    focusColor: string | null
    hyperlinkColor: string | null
    googleAnalyticsId: string | null
    trackingPixelUrl: string | null
    embedJobsCode: string | null
    customCSS: string | null
    updatedAt: Date
    _count: CareersPageSettingCountAggregateOutputType | null
    _min: CareersPageSettingMinAggregateOutputType | null
    _max: CareersPageSettingMaxAggregateOutputType | null
  }

  type GetCareersPageSettingGroupByPayload<T extends CareersPageSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CareersPageSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CareersPageSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CareersPageSettingGroupByOutputType[P]>
            : GetScalarType<T[P], CareersPageSettingGroupByOutputType[P]>
        }
      >
    >


  export type CareersPageSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    logoUrl?: boolean
    primaryColor?: boolean
    focusColor?: boolean
    hyperlinkColor?: boolean
    googleAnalyticsId?: boolean
    trackingPixelUrl?: boolean
    embedJobsCode?: boolean
    customCSS?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["careersPageSetting"]>

  export type CareersPageSettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    logoUrl?: boolean
    primaryColor?: boolean
    focusColor?: boolean
    hyperlinkColor?: boolean
    googleAnalyticsId?: boolean
    trackingPixelUrl?: boolean
    embedJobsCode?: boolean
    customCSS?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["careersPageSetting"]>

  export type CareersPageSettingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    logoUrl?: boolean
    primaryColor?: boolean
    focusColor?: boolean
    hyperlinkColor?: boolean
    googleAnalyticsId?: boolean
    trackingPixelUrl?: boolean
    embedJobsCode?: boolean
    customCSS?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["careersPageSetting"]>

  export type CareersPageSettingSelectScalar = {
    id?: boolean
    companyId?: boolean
    logoUrl?: boolean
    primaryColor?: boolean
    focusColor?: boolean
    hyperlinkColor?: boolean
    googleAnalyticsId?: boolean
    trackingPixelUrl?: boolean
    embedJobsCode?: boolean
    customCSS?: boolean
    updatedAt?: boolean
  }

  export type CareersPageSettingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "logoUrl" | "primaryColor" | "focusColor" | "hyperlinkColor" | "googleAnalyticsId" | "trackingPixelUrl" | "embedJobsCode" | "customCSS" | "updatedAt", ExtArgs["result"]["careersPageSetting"]>
  export type CareersPageSettingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type CareersPageSettingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type CareersPageSettingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $CareersPageSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CareersPageSetting"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      logoUrl: string | null
      primaryColor: string | null
      focusColor: string | null
      hyperlinkColor: string | null
      googleAnalyticsId: string | null
      trackingPixelUrl: string | null
      embedJobsCode: string | null
      customCSS: string | null
      updatedAt: Date
    }, ExtArgs["result"]["careersPageSetting"]>
    composites: {}
  }

  type CareersPageSettingGetPayload<S extends boolean | null | undefined | CareersPageSettingDefaultArgs> = $Result.GetResult<Prisma.$CareersPageSettingPayload, S>

  type CareersPageSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CareersPageSettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CareersPageSettingCountAggregateInputType | true
    }

  export interface CareersPageSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CareersPageSetting'], meta: { name: 'CareersPageSetting' } }
    /**
     * Find zero or one CareersPageSetting that matches the filter.
     * @param {CareersPageSettingFindUniqueArgs} args - Arguments to find a CareersPageSetting
     * @example
     * // Get one CareersPageSetting
     * const careersPageSetting = await prisma.careersPageSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CareersPageSettingFindUniqueArgs>(args: SelectSubset<T, CareersPageSettingFindUniqueArgs<ExtArgs>>): Prisma__CareersPageSettingClient<$Result.GetResult<Prisma.$CareersPageSettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CareersPageSetting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CareersPageSettingFindUniqueOrThrowArgs} args - Arguments to find a CareersPageSetting
     * @example
     * // Get one CareersPageSetting
     * const careersPageSetting = await prisma.careersPageSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CareersPageSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, CareersPageSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CareersPageSettingClient<$Result.GetResult<Prisma.$CareersPageSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CareersPageSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareersPageSettingFindFirstArgs} args - Arguments to find a CareersPageSetting
     * @example
     * // Get one CareersPageSetting
     * const careersPageSetting = await prisma.careersPageSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CareersPageSettingFindFirstArgs>(args?: SelectSubset<T, CareersPageSettingFindFirstArgs<ExtArgs>>): Prisma__CareersPageSettingClient<$Result.GetResult<Prisma.$CareersPageSettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CareersPageSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareersPageSettingFindFirstOrThrowArgs} args - Arguments to find a CareersPageSetting
     * @example
     * // Get one CareersPageSetting
     * const careersPageSetting = await prisma.careersPageSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CareersPageSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, CareersPageSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__CareersPageSettingClient<$Result.GetResult<Prisma.$CareersPageSettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CareersPageSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareersPageSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CareersPageSettings
     * const careersPageSettings = await prisma.careersPageSetting.findMany()
     * 
     * // Get first 10 CareersPageSettings
     * const careersPageSettings = await prisma.careersPageSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const careersPageSettingWithIdOnly = await prisma.careersPageSetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CareersPageSettingFindManyArgs>(args?: SelectSubset<T, CareersPageSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CareersPageSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CareersPageSetting.
     * @param {CareersPageSettingCreateArgs} args - Arguments to create a CareersPageSetting.
     * @example
     * // Create one CareersPageSetting
     * const CareersPageSetting = await prisma.careersPageSetting.create({
     *   data: {
     *     // ... data to create a CareersPageSetting
     *   }
     * })
     * 
     */
    create<T extends CareersPageSettingCreateArgs>(args: SelectSubset<T, CareersPageSettingCreateArgs<ExtArgs>>): Prisma__CareersPageSettingClient<$Result.GetResult<Prisma.$CareersPageSettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CareersPageSettings.
     * @param {CareersPageSettingCreateManyArgs} args - Arguments to create many CareersPageSettings.
     * @example
     * // Create many CareersPageSettings
     * const careersPageSetting = await prisma.careersPageSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CareersPageSettingCreateManyArgs>(args?: SelectSubset<T, CareersPageSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CareersPageSettings and returns the data saved in the database.
     * @param {CareersPageSettingCreateManyAndReturnArgs} args - Arguments to create many CareersPageSettings.
     * @example
     * // Create many CareersPageSettings
     * const careersPageSetting = await prisma.careersPageSetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CareersPageSettings and only return the `id`
     * const careersPageSettingWithIdOnly = await prisma.careersPageSetting.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CareersPageSettingCreateManyAndReturnArgs>(args?: SelectSubset<T, CareersPageSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CareersPageSettingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CareersPageSetting.
     * @param {CareersPageSettingDeleteArgs} args - Arguments to delete one CareersPageSetting.
     * @example
     * // Delete one CareersPageSetting
     * const CareersPageSetting = await prisma.careersPageSetting.delete({
     *   where: {
     *     // ... filter to delete one CareersPageSetting
     *   }
     * })
     * 
     */
    delete<T extends CareersPageSettingDeleteArgs>(args: SelectSubset<T, CareersPageSettingDeleteArgs<ExtArgs>>): Prisma__CareersPageSettingClient<$Result.GetResult<Prisma.$CareersPageSettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CareersPageSetting.
     * @param {CareersPageSettingUpdateArgs} args - Arguments to update one CareersPageSetting.
     * @example
     * // Update one CareersPageSetting
     * const careersPageSetting = await prisma.careersPageSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CareersPageSettingUpdateArgs>(args: SelectSubset<T, CareersPageSettingUpdateArgs<ExtArgs>>): Prisma__CareersPageSettingClient<$Result.GetResult<Prisma.$CareersPageSettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CareersPageSettings.
     * @param {CareersPageSettingDeleteManyArgs} args - Arguments to filter CareersPageSettings to delete.
     * @example
     * // Delete a few CareersPageSettings
     * const { count } = await prisma.careersPageSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CareersPageSettingDeleteManyArgs>(args?: SelectSubset<T, CareersPageSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CareersPageSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareersPageSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CareersPageSettings
     * const careersPageSetting = await prisma.careersPageSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CareersPageSettingUpdateManyArgs>(args: SelectSubset<T, CareersPageSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CareersPageSettings and returns the data updated in the database.
     * @param {CareersPageSettingUpdateManyAndReturnArgs} args - Arguments to update many CareersPageSettings.
     * @example
     * // Update many CareersPageSettings
     * const careersPageSetting = await prisma.careersPageSetting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CareersPageSettings and only return the `id`
     * const careersPageSettingWithIdOnly = await prisma.careersPageSetting.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CareersPageSettingUpdateManyAndReturnArgs>(args: SelectSubset<T, CareersPageSettingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CareersPageSettingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CareersPageSetting.
     * @param {CareersPageSettingUpsertArgs} args - Arguments to update or create a CareersPageSetting.
     * @example
     * // Update or create a CareersPageSetting
     * const careersPageSetting = await prisma.careersPageSetting.upsert({
     *   create: {
     *     // ... data to create a CareersPageSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CareersPageSetting we want to update
     *   }
     * })
     */
    upsert<T extends CareersPageSettingUpsertArgs>(args: SelectSubset<T, CareersPageSettingUpsertArgs<ExtArgs>>): Prisma__CareersPageSettingClient<$Result.GetResult<Prisma.$CareersPageSettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CareersPageSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareersPageSettingCountArgs} args - Arguments to filter CareersPageSettings to count.
     * @example
     * // Count the number of CareersPageSettings
     * const count = await prisma.careersPageSetting.count({
     *   where: {
     *     // ... the filter for the CareersPageSettings we want to count
     *   }
     * })
    **/
    count<T extends CareersPageSettingCountArgs>(
      args?: Subset<T, CareersPageSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CareersPageSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CareersPageSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareersPageSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CareersPageSettingAggregateArgs>(args: Subset<T, CareersPageSettingAggregateArgs>): Prisma.PrismaPromise<GetCareersPageSettingAggregateType<T>>

    /**
     * Group by CareersPageSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CareersPageSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CareersPageSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CareersPageSettingGroupByArgs['orderBy'] }
        : { orderBy?: CareersPageSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CareersPageSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCareersPageSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CareersPageSetting model
   */
  readonly fields: CareersPageSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CareersPageSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CareersPageSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CareersPageSetting model
   */
  interface CareersPageSettingFieldRefs {
    readonly id: FieldRef<"CareersPageSetting", 'String'>
    readonly companyId: FieldRef<"CareersPageSetting", 'String'>
    readonly logoUrl: FieldRef<"CareersPageSetting", 'String'>
    readonly primaryColor: FieldRef<"CareersPageSetting", 'String'>
    readonly focusColor: FieldRef<"CareersPageSetting", 'String'>
    readonly hyperlinkColor: FieldRef<"CareersPageSetting", 'String'>
    readonly googleAnalyticsId: FieldRef<"CareersPageSetting", 'String'>
    readonly trackingPixelUrl: FieldRef<"CareersPageSetting", 'String'>
    readonly embedJobsCode: FieldRef<"CareersPageSetting", 'String'>
    readonly customCSS: FieldRef<"CareersPageSetting", 'String'>
    readonly updatedAt: FieldRef<"CareersPageSetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CareersPageSetting findUnique
   */
  export type CareersPageSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareersPageSetting
     */
    select?: CareersPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareersPageSetting
     */
    omit?: CareersPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareersPageSettingInclude<ExtArgs> | null
    /**
     * Filter, which CareersPageSetting to fetch.
     */
    where: CareersPageSettingWhereUniqueInput
  }

  /**
   * CareersPageSetting findUniqueOrThrow
   */
  export type CareersPageSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareersPageSetting
     */
    select?: CareersPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareersPageSetting
     */
    omit?: CareersPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareersPageSettingInclude<ExtArgs> | null
    /**
     * Filter, which CareersPageSetting to fetch.
     */
    where: CareersPageSettingWhereUniqueInput
  }

  /**
   * CareersPageSetting findFirst
   */
  export type CareersPageSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareersPageSetting
     */
    select?: CareersPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareersPageSetting
     */
    omit?: CareersPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareersPageSettingInclude<ExtArgs> | null
    /**
     * Filter, which CareersPageSetting to fetch.
     */
    where?: CareersPageSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CareersPageSettings to fetch.
     */
    orderBy?: CareersPageSettingOrderByWithRelationInput | CareersPageSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CareersPageSettings.
     */
    cursor?: CareersPageSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CareersPageSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CareersPageSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CareersPageSettings.
     */
    distinct?: CareersPageSettingScalarFieldEnum | CareersPageSettingScalarFieldEnum[]
  }

  /**
   * CareersPageSetting findFirstOrThrow
   */
  export type CareersPageSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareersPageSetting
     */
    select?: CareersPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareersPageSetting
     */
    omit?: CareersPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareersPageSettingInclude<ExtArgs> | null
    /**
     * Filter, which CareersPageSetting to fetch.
     */
    where?: CareersPageSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CareersPageSettings to fetch.
     */
    orderBy?: CareersPageSettingOrderByWithRelationInput | CareersPageSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CareersPageSettings.
     */
    cursor?: CareersPageSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CareersPageSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CareersPageSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CareersPageSettings.
     */
    distinct?: CareersPageSettingScalarFieldEnum | CareersPageSettingScalarFieldEnum[]
  }

  /**
   * CareersPageSetting findMany
   */
  export type CareersPageSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareersPageSetting
     */
    select?: CareersPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareersPageSetting
     */
    omit?: CareersPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareersPageSettingInclude<ExtArgs> | null
    /**
     * Filter, which CareersPageSettings to fetch.
     */
    where?: CareersPageSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CareersPageSettings to fetch.
     */
    orderBy?: CareersPageSettingOrderByWithRelationInput | CareersPageSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CareersPageSettings.
     */
    cursor?: CareersPageSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CareersPageSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CareersPageSettings.
     */
    skip?: number
    distinct?: CareersPageSettingScalarFieldEnum | CareersPageSettingScalarFieldEnum[]
  }

  /**
   * CareersPageSetting create
   */
  export type CareersPageSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareersPageSetting
     */
    select?: CareersPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareersPageSetting
     */
    omit?: CareersPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareersPageSettingInclude<ExtArgs> | null
    /**
     * The data needed to create a CareersPageSetting.
     */
    data: XOR<CareersPageSettingCreateInput, CareersPageSettingUncheckedCreateInput>
  }

  /**
   * CareersPageSetting createMany
   */
  export type CareersPageSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CareersPageSettings.
     */
    data: CareersPageSettingCreateManyInput | CareersPageSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CareersPageSetting createManyAndReturn
   */
  export type CareersPageSettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareersPageSetting
     */
    select?: CareersPageSettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CareersPageSetting
     */
    omit?: CareersPageSettingOmit<ExtArgs> | null
    /**
     * The data used to create many CareersPageSettings.
     */
    data: CareersPageSettingCreateManyInput | CareersPageSettingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareersPageSettingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CareersPageSetting update
   */
  export type CareersPageSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareersPageSetting
     */
    select?: CareersPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareersPageSetting
     */
    omit?: CareersPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareersPageSettingInclude<ExtArgs> | null
    /**
     * The data needed to update a CareersPageSetting.
     */
    data: XOR<CareersPageSettingUpdateInput, CareersPageSettingUncheckedUpdateInput>
    /**
     * Choose, which CareersPageSetting to update.
     */
    where: CareersPageSettingWhereUniqueInput
  }

  /**
   * CareersPageSetting updateMany
   */
  export type CareersPageSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CareersPageSettings.
     */
    data: XOR<CareersPageSettingUpdateManyMutationInput, CareersPageSettingUncheckedUpdateManyInput>
    /**
     * Filter which CareersPageSettings to update
     */
    where?: CareersPageSettingWhereInput
    /**
     * Limit how many CareersPageSettings to update.
     */
    limit?: number
  }

  /**
   * CareersPageSetting updateManyAndReturn
   */
  export type CareersPageSettingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareersPageSetting
     */
    select?: CareersPageSettingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CareersPageSetting
     */
    omit?: CareersPageSettingOmit<ExtArgs> | null
    /**
     * The data used to update CareersPageSettings.
     */
    data: XOR<CareersPageSettingUpdateManyMutationInput, CareersPageSettingUncheckedUpdateManyInput>
    /**
     * Filter which CareersPageSettings to update
     */
    where?: CareersPageSettingWhereInput
    /**
     * Limit how many CareersPageSettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareersPageSettingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CareersPageSetting upsert
   */
  export type CareersPageSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareersPageSetting
     */
    select?: CareersPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareersPageSetting
     */
    omit?: CareersPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareersPageSettingInclude<ExtArgs> | null
    /**
     * The filter to search for the CareersPageSetting to update in case it exists.
     */
    where: CareersPageSettingWhereUniqueInput
    /**
     * In case the CareersPageSetting found by the `where` argument doesn't exist, create a new CareersPageSetting with this data.
     */
    create: XOR<CareersPageSettingCreateInput, CareersPageSettingUncheckedCreateInput>
    /**
     * In case the CareersPageSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CareersPageSettingUpdateInput, CareersPageSettingUncheckedUpdateInput>
  }

  /**
   * CareersPageSetting delete
   */
  export type CareersPageSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareersPageSetting
     */
    select?: CareersPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareersPageSetting
     */
    omit?: CareersPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareersPageSettingInclude<ExtArgs> | null
    /**
     * Filter which CareersPageSetting to delete.
     */
    where: CareersPageSettingWhereUniqueInput
  }

  /**
   * CareersPageSetting deleteMany
   */
  export type CareersPageSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CareersPageSettings to delete
     */
    where?: CareersPageSettingWhereInput
    /**
     * Limit how many CareersPageSettings to delete.
     */
    limit?: number
  }

  /**
   * CareersPageSetting without action
   */
  export type CareersPageSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CareersPageSetting
     */
    select?: CareersPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CareersPageSetting
     */
    omit?: CareersPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CareersPageSettingInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.NotificationType | null
    message: string | null
    link: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.NotificationType | null
    message: string | null
    link: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    message: number
    link: number
    isRead: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    message?: true
    link?: true
    isRead?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    message?: true
    link?: true
    isRead?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    message?: true
    link?: true
    isRead?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    type: $Enums.NotificationType
    message: string
    link: string | null
    isRead: boolean
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    message?: boolean
    link?: boolean
    isRead?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    message?: boolean
    link?: boolean
    isRead?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    message?: boolean
    link?: boolean
    isRead?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    message?: boolean
    link?: boolean
    isRead?: boolean
    createdAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "message" | "link" | "isRead" | "createdAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: $Enums.NotificationType
      message: string
      link: string | null
      isRead: boolean
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly link: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model AIScreeningConfig
   */

  export type AggregateAIScreeningConfig = {
    _count: AIScreeningConfigCountAggregateOutputType | null
    _min: AIScreeningConfigMinAggregateOutputType | null
    _max: AIScreeningConfigMaxAggregateOutputType | null
  }

  export type AIScreeningConfigMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    isEnabled: boolean | null
    guidance: string | null
    updatedAt: Date | null
  }

  export type AIScreeningConfigMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    isEnabled: boolean | null
    guidance: string | null
    updatedAt: Date | null
  }

  export type AIScreeningConfigCountAggregateOutputType = {
    id: number
    jobId: number
    isEnabled: number
    guidance: number
    updatedAt: number
    _all: number
  }


  export type AIScreeningConfigMinAggregateInputType = {
    id?: true
    jobId?: true
    isEnabled?: true
    guidance?: true
    updatedAt?: true
  }

  export type AIScreeningConfigMaxAggregateInputType = {
    id?: true
    jobId?: true
    isEnabled?: true
    guidance?: true
    updatedAt?: true
  }

  export type AIScreeningConfigCountAggregateInputType = {
    id?: true
    jobId?: true
    isEnabled?: true
    guidance?: true
    updatedAt?: true
    _all?: true
  }

  export type AIScreeningConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIScreeningConfig to aggregate.
     */
    where?: AIScreeningConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIScreeningConfigs to fetch.
     */
    orderBy?: AIScreeningConfigOrderByWithRelationInput | AIScreeningConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AIScreeningConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIScreeningConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIScreeningConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AIScreeningConfigs
    **/
    _count?: true | AIScreeningConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AIScreeningConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AIScreeningConfigMaxAggregateInputType
  }

  export type GetAIScreeningConfigAggregateType<T extends AIScreeningConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateAIScreeningConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAIScreeningConfig[P]>
      : GetScalarType<T[P], AggregateAIScreeningConfig[P]>
  }




  export type AIScreeningConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AIScreeningConfigWhereInput
    orderBy?: AIScreeningConfigOrderByWithAggregationInput | AIScreeningConfigOrderByWithAggregationInput[]
    by: AIScreeningConfigScalarFieldEnum[] | AIScreeningConfigScalarFieldEnum
    having?: AIScreeningConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AIScreeningConfigCountAggregateInputType | true
    _min?: AIScreeningConfigMinAggregateInputType
    _max?: AIScreeningConfigMaxAggregateInputType
  }

  export type AIScreeningConfigGroupByOutputType = {
    id: string
    jobId: string
    isEnabled: boolean
    guidance: string | null
    updatedAt: Date
    _count: AIScreeningConfigCountAggregateOutputType | null
    _min: AIScreeningConfigMinAggregateOutputType | null
    _max: AIScreeningConfigMaxAggregateOutputType | null
  }

  type GetAIScreeningConfigGroupByPayload<T extends AIScreeningConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AIScreeningConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AIScreeningConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AIScreeningConfigGroupByOutputType[P]>
            : GetScalarType<T[P], AIScreeningConfigGroupByOutputType[P]>
        }
      >
    >


  export type AIScreeningConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    isEnabled?: boolean
    guidance?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aIScreeningConfig"]>

  export type AIScreeningConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    isEnabled?: boolean
    guidance?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aIScreeningConfig"]>

  export type AIScreeningConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    isEnabled?: boolean
    guidance?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aIScreeningConfig"]>

  export type AIScreeningConfigSelectScalar = {
    id?: boolean
    jobId?: boolean
    isEnabled?: boolean
    guidance?: boolean
    updatedAt?: boolean
  }

  export type AIScreeningConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "isEnabled" | "guidance" | "updatedAt", ExtArgs["result"]["aIScreeningConfig"]>
  export type AIScreeningConfigInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type AIScreeningConfigIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type AIScreeningConfigIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }

  export type $AIScreeningConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AIScreeningConfig"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      isEnabled: boolean
      guidance: string | null
      updatedAt: Date
    }, ExtArgs["result"]["aIScreeningConfig"]>
    composites: {}
  }

  type AIScreeningConfigGetPayload<S extends boolean | null | undefined | AIScreeningConfigDefaultArgs> = $Result.GetResult<Prisma.$AIScreeningConfigPayload, S>

  type AIScreeningConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AIScreeningConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AIScreeningConfigCountAggregateInputType | true
    }

  export interface AIScreeningConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AIScreeningConfig'], meta: { name: 'AIScreeningConfig' } }
    /**
     * Find zero or one AIScreeningConfig that matches the filter.
     * @param {AIScreeningConfigFindUniqueArgs} args - Arguments to find a AIScreeningConfig
     * @example
     * // Get one AIScreeningConfig
     * const aIScreeningConfig = await prisma.aIScreeningConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AIScreeningConfigFindUniqueArgs>(args: SelectSubset<T, AIScreeningConfigFindUniqueArgs<ExtArgs>>): Prisma__AIScreeningConfigClient<$Result.GetResult<Prisma.$AIScreeningConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AIScreeningConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AIScreeningConfigFindUniqueOrThrowArgs} args - Arguments to find a AIScreeningConfig
     * @example
     * // Get one AIScreeningConfig
     * const aIScreeningConfig = await prisma.aIScreeningConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AIScreeningConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, AIScreeningConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AIScreeningConfigClient<$Result.GetResult<Prisma.$AIScreeningConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AIScreeningConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIScreeningConfigFindFirstArgs} args - Arguments to find a AIScreeningConfig
     * @example
     * // Get one AIScreeningConfig
     * const aIScreeningConfig = await prisma.aIScreeningConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AIScreeningConfigFindFirstArgs>(args?: SelectSubset<T, AIScreeningConfigFindFirstArgs<ExtArgs>>): Prisma__AIScreeningConfigClient<$Result.GetResult<Prisma.$AIScreeningConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AIScreeningConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIScreeningConfigFindFirstOrThrowArgs} args - Arguments to find a AIScreeningConfig
     * @example
     * // Get one AIScreeningConfig
     * const aIScreeningConfig = await prisma.aIScreeningConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AIScreeningConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, AIScreeningConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__AIScreeningConfigClient<$Result.GetResult<Prisma.$AIScreeningConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AIScreeningConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIScreeningConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AIScreeningConfigs
     * const aIScreeningConfigs = await prisma.aIScreeningConfig.findMany()
     * 
     * // Get first 10 AIScreeningConfigs
     * const aIScreeningConfigs = await prisma.aIScreeningConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aIScreeningConfigWithIdOnly = await prisma.aIScreeningConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AIScreeningConfigFindManyArgs>(args?: SelectSubset<T, AIScreeningConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIScreeningConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AIScreeningConfig.
     * @param {AIScreeningConfigCreateArgs} args - Arguments to create a AIScreeningConfig.
     * @example
     * // Create one AIScreeningConfig
     * const AIScreeningConfig = await prisma.aIScreeningConfig.create({
     *   data: {
     *     // ... data to create a AIScreeningConfig
     *   }
     * })
     * 
     */
    create<T extends AIScreeningConfigCreateArgs>(args: SelectSubset<T, AIScreeningConfigCreateArgs<ExtArgs>>): Prisma__AIScreeningConfigClient<$Result.GetResult<Prisma.$AIScreeningConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AIScreeningConfigs.
     * @param {AIScreeningConfigCreateManyArgs} args - Arguments to create many AIScreeningConfigs.
     * @example
     * // Create many AIScreeningConfigs
     * const aIScreeningConfig = await prisma.aIScreeningConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AIScreeningConfigCreateManyArgs>(args?: SelectSubset<T, AIScreeningConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AIScreeningConfigs and returns the data saved in the database.
     * @param {AIScreeningConfigCreateManyAndReturnArgs} args - Arguments to create many AIScreeningConfigs.
     * @example
     * // Create many AIScreeningConfigs
     * const aIScreeningConfig = await prisma.aIScreeningConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AIScreeningConfigs and only return the `id`
     * const aIScreeningConfigWithIdOnly = await prisma.aIScreeningConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AIScreeningConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, AIScreeningConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIScreeningConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AIScreeningConfig.
     * @param {AIScreeningConfigDeleteArgs} args - Arguments to delete one AIScreeningConfig.
     * @example
     * // Delete one AIScreeningConfig
     * const AIScreeningConfig = await prisma.aIScreeningConfig.delete({
     *   where: {
     *     // ... filter to delete one AIScreeningConfig
     *   }
     * })
     * 
     */
    delete<T extends AIScreeningConfigDeleteArgs>(args: SelectSubset<T, AIScreeningConfigDeleteArgs<ExtArgs>>): Prisma__AIScreeningConfigClient<$Result.GetResult<Prisma.$AIScreeningConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AIScreeningConfig.
     * @param {AIScreeningConfigUpdateArgs} args - Arguments to update one AIScreeningConfig.
     * @example
     * // Update one AIScreeningConfig
     * const aIScreeningConfig = await prisma.aIScreeningConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AIScreeningConfigUpdateArgs>(args: SelectSubset<T, AIScreeningConfigUpdateArgs<ExtArgs>>): Prisma__AIScreeningConfigClient<$Result.GetResult<Prisma.$AIScreeningConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AIScreeningConfigs.
     * @param {AIScreeningConfigDeleteManyArgs} args - Arguments to filter AIScreeningConfigs to delete.
     * @example
     * // Delete a few AIScreeningConfigs
     * const { count } = await prisma.aIScreeningConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AIScreeningConfigDeleteManyArgs>(args?: SelectSubset<T, AIScreeningConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AIScreeningConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIScreeningConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AIScreeningConfigs
     * const aIScreeningConfig = await prisma.aIScreeningConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AIScreeningConfigUpdateManyArgs>(args: SelectSubset<T, AIScreeningConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AIScreeningConfigs and returns the data updated in the database.
     * @param {AIScreeningConfigUpdateManyAndReturnArgs} args - Arguments to update many AIScreeningConfigs.
     * @example
     * // Update many AIScreeningConfigs
     * const aIScreeningConfig = await prisma.aIScreeningConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AIScreeningConfigs and only return the `id`
     * const aIScreeningConfigWithIdOnly = await prisma.aIScreeningConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AIScreeningConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, AIScreeningConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIScreeningConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AIScreeningConfig.
     * @param {AIScreeningConfigUpsertArgs} args - Arguments to update or create a AIScreeningConfig.
     * @example
     * // Update or create a AIScreeningConfig
     * const aIScreeningConfig = await prisma.aIScreeningConfig.upsert({
     *   create: {
     *     // ... data to create a AIScreeningConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AIScreeningConfig we want to update
     *   }
     * })
     */
    upsert<T extends AIScreeningConfigUpsertArgs>(args: SelectSubset<T, AIScreeningConfigUpsertArgs<ExtArgs>>): Prisma__AIScreeningConfigClient<$Result.GetResult<Prisma.$AIScreeningConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AIScreeningConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIScreeningConfigCountArgs} args - Arguments to filter AIScreeningConfigs to count.
     * @example
     * // Count the number of AIScreeningConfigs
     * const count = await prisma.aIScreeningConfig.count({
     *   where: {
     *     // ... the filter for the AIScreeningConfigs we want to count
     *   }
     * })
    **/
    count<T extends AIScreeningConfigCountArgs>(
      args?: Subset<T, AIScreeningConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AIScreeningConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AIScreeningConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIScreeningConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AIScreeningConfigAggregateArgs>(args: Subset<T, AIScreeningConfigAggregateArgs>): Prisma.PrismaPromise<GetAIScreeningConfigAggregateType<T>>

    /**
     * Group by AIScreeningConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIScreeningConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AIScreeningConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AIScreeningConfigGroupByArgs['orderBy'] }
        : { orderBy?: AIScreeningConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AIScreeningConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAIScreeningConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AIScreeningConfig model
   */
  readonly fields: AIScreeningConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AIScreeningConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AIScreeningConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AIScreeningConfig model
   */
  interface AIScreeningConfigFieldRefs {
    readonly id: FieldRef<"AIScreeningConfig", 'String'>
    readonly jobId: FieldRef<"AIScreeningConfig", 'String'>
    readonly isEnabled: FieldRef<"AIScreeningConfig", 'Boolean'>
    readonly guidance: FieldRef<"AIScreeningConfig", 'String'>
    readonly updatedAt: FieldRef<"AIScreeningConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AIScreeningConfig findUnique
   */
  export type AIScreeningConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIScreeningConfig
     */
    select?: AIScreeningConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIScreeningConfig
     */
    omit?: AIScreeningConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIScreeningConfigInclude<ExtArgs> | null
    /**
     * Filter, which AIScreeningConfig to fetch.
     */
    where: AIScreeningConfigWhereUniqueInput
  }

  /**
   * AIScreeningConfig findUniqueOrThrow
   */
  export type AIScreeningConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIScreeningConfig
     */
    select?: AIScreeningConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIScreeningConfig
     */
    omit?: AIScreeningConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIScreeningConfigInclude<ExtArgs> | null
    /**
     * Filter, which AIScreeningConfig to fetch.
     */
    where: AIScreeningConfigWhereUniqueInput
  }

  /**
   * AIScreeningConfig findFirst
   */
  export type AIScreeningConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIScreeningConfig
     */
    select?: AIScreeningConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIScreeningConfig
     */
    omit?: AIScreeningConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIScreeningConfigInclude<ExtArgs> | null
    /**
     * Filter, which AIScreeningConfig to fetch.
     */
    where?: AIScreeningConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIScreeningConfigs to fetch.
     */
    orderBy?: AIScreeningConfigOrderByWithRelationInput | AIScreeningConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIScreeningConfigs.
     */
    cursor?: AIScreeningConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIScreeningConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIScreeningConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIScreeningConfigs.
     */
    distinct?: AIScreeningConfigScalarFieldEnum | AIScreeningConfigScalarFieldEnum[]
  }

  /**
   * AIScreeningConfig findFirstOrThrow
   */
  export type AIScreeningConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIScreeningConfig
     */
    select?: AIScreeningConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIScreeningConfig
     */
    omit?: AIScreeningConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIScreeningConfigInclude<ExtArgs> | null
    /**
     * Filter, which AIScreeningConfig to fetch.
     */
    where?: AIScreeningConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIScreeningConfigs to fetch.
     */
    orderBy?: AIScreeningConfigOrderByWithRelationInput | AIScreeningConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIScreeningConfigs.
     */
    cursor?: AIScreeningConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIScreeningConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIScreeningConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIScreeningConfigs.
     */
    distinct?: AIScreeningConfigScalarFieldEnum | AIScreeningConfigScalarFieldEnum[]
  }

  /**
   * AIScreeningConfig findMany
   */
  export type AIScreeningConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIScreeningConfig
     */
    select?: AIScreeningConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIScreeningConfig
     */
    omit?: AIScreeningConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIScreeningConfigInclude<ExtArgs> | null
    /**
     * Filter, which AIScreeningConfigs to fetch.
     */
    where?: AIScreeningConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIScreeningConfigs to fetch.
     */
    orderBy?: AIScreeningConfigOrderByWithRelationInput | AIScreeningConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AIScreeningConfigs.
     */
    cursor?: AIScreeningConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIScreeningConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIScreeningConfigs.
     */
    skip?: number
    distinct?: AIScreeningConfigScalarFieldEnum | AIScreeningConfigScalarFieldEnum[]
  }

  /**
   * AIScreeningConfig create
   */
  export type AIScreeningConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIScreeningConfig
     */
    select?: AIScreeningConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIScreeningConfig
     */
    omit?: AIScreeningConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIScreeningConfigInclude<ExtArgs> | null
    /**
     * The data needed to create a AIScreeningConfig.
     */
    data: XOR<AIScreeningConfigCreateInput, AIScreeningConfigUncheckedCreateInput>
  }

  /**
   * AIScreeningConfig createMany
   */
  export type AIScreeningConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AIScreeningConfigs.
     */
    data: AIScreeningConfigCreateManyInput | AIScreeningConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AIScreeningConfig createManyAndReturn
   */
  export type AIScreeningConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIScreeningConfig
     */
    select?: AIScreeningConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AIScreeningConfig
     */
    omit?: AIScreeningConfigOmit<ExtArgs> | null
    /**
     * The data used to create many AIScreeningConfigs.
     */
    data: AIScreeningConfigCreateManyInput | AIScreeningConfigCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIScreeningConfigIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AIScreeningConfig update
   */
  export type AIScreeningConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIScreeningConfig
     */
    select?: AIScreeningConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIScreeningConfig
     */
    omit?: AIScreeningConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIScreeningConfigInclude<ExtArgs> | null
    /**
     * The data needed to update a AIScreeningConfig.
     */
    data: XOR<AIScreeningConfigUpdateInput, AIScreeningConfigUncheckedUpdateInput>
    /**
     * Choose, which AIScreeningConfig to update.
     */
    where: AIScreeningConfigWhereUniqueInput
  }

  /**
   * AIScreeningConfig updateMany
   */
  export type AIScreeningConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AIScreeningConfigs.
     */
    data: XOR<AIScreeningConfigUpdateManyMutationInput, AIScreeningConfigUncheckedUpdateManyInput>
    /**
     * Filter which AIScreeningConfigs to update
     */
    where?: AIScreeningConfigWhereInput
    /**
     * Limit how many AIScreeningConfigs to update.
     */
    limit?: number
  }

  /**
   * AIScreeningConfig updateManyAndReturn
   */
  export type AIScreeningConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIScreeningConfig
     */
    select?: AIScreeningConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AIScreeningConfig
     */
    omit?: AIScreeningConfigOmit<ExtArgs> | null
    /**
     * The data used to update AIScreeningConfigs.
     */
    data: XOR<AIScreeningConfigUpdateManyMutationInput, AIScreeningConfigUncheckedUpdateManyInput>
    /**
     * Filter which AIScreeningConfigs to update
     */
    where?: AIScreeningConfigWhereInput
    /**
     * Limit how many AIScreeningConfigs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIScreeningConfigIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AIScreeningConfig upsert
   */
  export type AIScreeningConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIScreeningConfig
     */
    select?: AIScreeningConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIScreeningConfig
     */
    omit?: AIScreeningConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIScreeningConfigInclude<ExtArgs> | null
    /**
     * The filter to search for the AIScreeningConfig to update in case it exists.
     */
    where: AIScreeningConfigWhereUniqueInput
    /**
     * In case the AIScreeningConfig found by the `where` argument doesn't exist, create a new AIScreeningConfig with this data.
     */
    create: XOR<AIScreeningConfigCreateInput, AIScreeningConfigUncheckedCreateInput>
    /**
     * In case the AIScreeningConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AIScreeningConfigUpdateInput, AIScreeningConfigUncheckedUpdateInput>
  }

  /**
   * AIScreeningConfig delete
   */
  export type AIScreeningConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIScreeningConfig
     */
    select?: AIScreeningConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIScreeningConfig
     */
    omit?: AIScreeningConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIScreeningConfigInclude<ExtArgs> | null
    /**
     * Filter which AIScreeningConfig to delete.
     */
    where: AIScreeningConfigWhereUniqueInput
  }

  /**
   * AIScreeningConfig deleteMany
   */
  export type AIScreeningConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIScreeningConfigs to delete
     */
    where?: AIScreeningConfigWhereInput
    /**
     * Limit how many AIScreeningConfigs to delete.
     */
    limit?: number
  }

  /**
   * AIScreeningConfig without action
   */
  export type AIScreeningConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIScreeningConfig
     */
    select?: AIScreeningConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIScreeningConfig
     */
    omit?: AIScreeningConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIScreeningConfigInclude<ExtArgs> | null
  }


  /**
   * Model AISchedulingConfig
   */

  export type AggregateAISchedulingConfig = {
    _count: AISchedulingConfigCountAggregateOutputType | null
    _min: AISchedulingConfigMinAggregateOutputType | null
    _max: AISchedulingConfigMaxAggregateOutputType | null
  }

  export type AISchedulingConfigMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    isEnabled: boolean | null
    updatedAt: Date | null
  }

  export type AISchedulingConfigMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    isEnabled: boolean | null
    updatedAt: Date | null
  }

  export type AISchedulingConfigCountAggregateOutputType = {
    id: number
    jobId: number
    isEnabled: number
    updatedAt: number
    _all: number
  }


  export type AISchedulingConfigMinAggregateInputType = {
    id?: true
    jobId?: true
    isEnabled?: true
    updatedAt?: true
  }

  export type AISchedulingConfigMaxAggregateInputType = {
    id?: true
    jobId?: true
    isEnabled?: true
    updatedAt?: true
  }

  export type AISchedulingConfigCountAggregateInputType = {
    id?: true
    jobId?: true
    isEnabled?: true
    updatedAt?: true
    _all?: true
  }

  export type AISchedulingConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AISchedulingConfig to aggregate.
     */
    where?: AISchedulingConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AISchedulingConfigs to fetch.
     */
    orderBy?: AISchedulingConfigOrderByWithRelationInput | AISchedulingConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AISchedulingConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AISchedulingConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AISchedulingConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AISchedulingConfigs
    **/
    _count?: true | AISchedulingConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AISchedulingConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AISchedulingConfigMaxAggregateInputType
  }

  export type GetAISchedulingConfigAggregateType<T extends AISchedulingConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateAISchedulingConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAISchedulingConfig[P]>
      : GetScalarType<T[P], AggregateAISchedulingConfig[P]>
  }




  export type AISchedulingConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AISchedulingConfigWhereInput
    orderBy?: AISchedulingConfigOrderByWithAggregationInput | AISchedulingConfigOrderByWithAggregationInput[]
    by: AISchedulingConfigScalarFieldEnum[] | AISchedulingConfigScalarFieldEnum
    having?: AISchedulingConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AISchedulingConfigCountAggregateInputType | true
    _min?: AISchedulingConfigMinAggregateInputType
    _max?: AISchedulingConfigMaxAggregateInputType
  }

  export type AISchedulingConfigGroupByOutputType = {
    id: string
    jobId: string
    isEnabled: boolean
    updatedAt: Date
    _count: AISchedulingConfigCountAggregateOutputType | null
    _min: AISchedulingConfigMinAggregateOutputType | null
    _max: AISchedulingConfigMaxAggregateOutputType | null
  }

  type GetAISchedulingConfigGroupByPayload<T extends AISchedulingConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AISchedulingConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AISchedulingConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AISchedulingConfigGroupByOutputType[P]>
            : GetScalarType<T[P], AISchedulingConfigGroupByOutputType[P]>
        }
      >
    >


  export type AISchedulingConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    isEnabled?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aISchedulingConfig"]>

  export type AISchedulingConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    isEnabled?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aISchedulingConfig"]>

  export type AISchedulingConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    isEnabled?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aISchedulingConfig"]>

  export type AISchedulingConfigSelectScalar = {
    id?: boolean
    jobId?: boolean
    isEnabled?: boolean
    updatedAt?: boolean
  }

  export type AISchedulingConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "isEnabled" | "updatedAt", ExtArgs["result"]["aISchedulingConfig"]>
  export type AISchedulingConfigInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type AISchedulingConfigIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type AISchedulingConfigIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }

  export type $AISchedulingConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AISchedulingConfig"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      isEnabled: boolean
      updatedAt: Date
    }, ExtArgs["result"]["aISchedulingConfig"]>
    composites: {}
  }

  type AISchedulingConfigGetPayload<S extends boolean | null | undefined | AISchedulingConfigDefaultArgs> = $Result.GetResult<Prisma.$AISchedulingConfigPayload, S>

  type AISchedulingConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AISchedulingConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AISchedulingConfigCountAggregateInputType | true
    }

  export interface AISchedulingConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AISchedulingConfig'], meta: { name: 'AISchedulingConfig' } }
    /**
     * Find zero or one AISchedulingConfig that matches the filter.
     * @param {AISchedulingConfigFindUniqueArgs} args - Arguments to find a AISchedulingConfig
     * @example
     * // Get one AISchedulingConfig
     * const aISchedulingConfig = await prisma.aISchedulingConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AISchedulingConfigFindUniqueArgs>(args: SelectSubset<T, AISchedulingConfigFindUniqueArgs<ExtArgs>>): Prisma__AISchedulingConfigClient<$Result.GetResult<Prisma.$AISchedulingConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AISchedulingConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AISchedulingConfigFindUniqueOrThrowArgs} args - Arguments to find a AISchedulingConfig
     * @example
     * // Get one AISchedulingConfig
     * const aISchedulingConfig = await prisma.aISchedulingConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AISchedulingConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, AISchedulingConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AISchedulingConfigClient<$Result.GetResult<Prisma.$AISchedulingConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AISchedulingConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AISchedulingConfigFindFirstArgs} args - Arguments to find a AISchedulingConfig
     * @example
     * // Get one AISchedulingConfig
     * const aISchedulingConfig = await prisma.aISchedulingConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AISchedulingConfigFindFirstArgs>(args?: SelectSubset<T, AISchedulingConfigFindFirstArgs<ExtArgs>>): Prisma__AISchedulingConfigClient<$Result.GetResult<Prisma.$AISchedulingConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AISchedulingConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AISchedulingConfigFindFirstOrThrowArgs} args - Arguments to find a AISchedulingConfig
     * @example
     * // Get one AISchedulingConfig
     * const aISchedulingConfig = await prisma.aISchedulingConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AISchedulingConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, AISchedulingConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__AISchedulingConfigClient<$Result.GetResult<Prisma.$AISchedulingConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AISchedulingConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AISchedulingConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AISchedulingConfigs
     * const aISchedulingConfigs = await prisma.aISchedulingConfig.findMany()
     * 
     * // Get first 10 AISchedulingConfigs
     * const aISchedulingConfigs = await prisma.aISchedulingConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aISchedulingConfigWithIdOnly = await prisma.aISchedulingConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AISchedulingConfigFindManyArgs>(args?: SelectSubset<T, AISchedulingConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AISchedulingConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AISchedulingConfig.
     * @param {AISchedulingConfigCreateArgs} args - Arguments to create a AISchedulingConfig.
     * @example
     * // Create one AISchedulingConfig
     * const AISchedulingConfig = await prisma.aISchedulingConfig.create({
     *   data: {
     *     // ... data to create a AISchedulingConfig
     *   }
     * })
     * 
     */
    create<T extends AISchedulingConfigCreateArgs>(args: SelectSubset<T, AISchedulingConfigCreateArgs<ExtArgs>>): Prisma__AISchedulingConfigClient<$Result.GetResult<Prisma.$AISchedulingConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AISchedulingConfigs.
     * @param {AISchedulingConfigCreateManyArgs} args - Arguments to create many AISchedulingConfigs.
     * @example
     * // Create many AISchedulingConfigs
     * const aISchedulingConfig = await prisma.aISchedulingConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AISchedulingConfigCreateManyArgs>(args?: SelectSubset<T, AISchedulingConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AISchedulingConfigs and returns the data saved in the database.
     * @param {AISchedulingConfigCreateManyAndReturnArgs} args - Arguments to create many AISchedulingConfigs.
     * @example
     * // Create many AISchedulingConfigs
     * const aISchedulingConfig = await prisma.aISchedulingConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AISchedulingConfigs and only return the `id`
     * const aISchedulingConfigWithIdOnly = await prisma.aISchedulingConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AISchedulingConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, AISchedulingConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AISchedulingConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AISchedulingConfig.
     * @param {AISchedulingConfigDeleteArgs} args - Arguments to delete one AISchedulingConfig.
     * @example
     * // Delete one AISchedulingConfig
     * const AISchedulingConfig = await prisma.aISchedulingConfig.delete({
     *   where: {
     *     // ... filter to delete one AISchedulingConfig
     *   }
     * })
     * 
     */
    delete<T extends AISchedulingConfigDeleteArgs>(args: SelectSubset<T, AISchedulingConfigDeleteArgs<ExtArgs>>): Prisma__AISchedulingConfigClient<$Result.GetResult<Prisma.$AISchedulingConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AISchedulingConfig.
     * @param {AISchedulingConfigUpdateArgs} args - Arguments to update one AISchedulingConfig.
     * @example
     * // Update one AISchedulingConfig
     * const aISchedulingConfig = await prisma.aISchedulingConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AISchedulingConfigUpdateArgs>(args: SelectSubset<T, AISchedulingConfigUpdateArgs<ExtArgs>>): Prisma__AISchedulingConfigClient<$Result.GetResult<Prisma.$AISchedulingConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AISchedulingConfigs.
     * @param {AISchedulingConfigDeleteManyArgs} args - Arguments to filter AISchedulingConfigs to delete.
     * @example
     * // Delete a few AISchedulingConfigs
     * const { count } = await prisma.aISchedulingConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AISchedulingConfigDeleteManyArgs>(args?: SelectSubset<T, AISchedulingConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AISchedulingConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AISchedulingConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AISchedulingConfigs
     * const aISchedulingConfig = await prisma.aISchedulingConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AISchedulingConfigUpdateManyArgs>(args: SelectSubset<T, AISchedulingConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AISchedulingConfigs and returns the data updated in the database.
     * @param {AISchedulingConfigUpdateManyAndReturnArgs} args - Arguments to update many AISchedulingConfigs.
     * @example
     * // Update many AISchedulingConfigs
     * const aISchedulingConfig = await prisma.aISchedulingConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AISchedulingConfigs and only return the `id`
     * const aISchedulingConfigWithIdOnly = await prisma.aISchedulingConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AISchedulingConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, AISchedulingConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AISchedulingConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AISchedulingConfig.
     * @param {AISchedulingConfigUpsertArgs} args - Arguments to update or create a AISchedulingConfig.
     * @example
     * // Update or create a AISchedulingConfig
     * const aISchedulingConfig = await prisma.aISchedulingConfig.upsert({
     *   create: {
     *     // ... data to create a AISchedulingConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AISchedulingConfig we want to update
     *   }
     * })
     */
    upsert<T extends AISchedulingConfigUpsertArgs>(args: SelectSubset<T, AISchedulingConfigUpsertArgs<ExtArgs>>): Prisma__AISchedulingConfigClient<$Result.GetResult<Prisma.$AISchedulingConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AISchedulingConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AISchedulingConfigCountArgs} args - Arguments to filter AISchedulingConfigs to count.
     * @example
     * // Count the number of AISchedulingConfigs
     * const count = await prisma.aISchedulingConfig.count({
     *   where: {
     *     // ... the filter for the AISchedulingConfigs we want to count
     *   }
     * })
    **/
    count<T extends AISchedulingConfigCountArgs>(
      args?: Subset<T, AISchedulingConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AISchedulingConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AISchedulingConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AISchedulingConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AISchedulingConfigAggregateArgs>(args: Subset<T, AISchedulingConfigAggregateArgs>): Prisma.PrismaPromise<GetAISchedulingConfigAggregateType<T>>

    /**
     * Group by AISchedulingConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AISchedulingConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AISchedulingConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AISchedulingConfigGroupByArgs['orderBy'] }
        : { orderBy?: AISchedulingConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AISchedulingConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAISchedulingConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AISchedulingConfig model
   */
  readonly fields: AISchedulingConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AISchedulingConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AISchedulingConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AISchedulingConfig model
   */
  interface AISchedulingConfigFieldRefs {
    readonly id: FieldRef<"AISchedulingConfig", 'String'>
    readonly jobId: FieldRef<"AISchedulingConfig", 'String'>
    readonly isEnabled: FieldRef<"AISchedulingConfig", 'Boolean'>
    readonly updatedAt: FieldRef<"AISchedulingConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AISchedulingConfig findUnique
   */
  export type AISchedulingConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AISchedulingConfig
     */
    select?: AISchedulingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AISchedulingConfig
     */
    omit?: AISchedulingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AISchedulingConfigInclude<ExtArgs> | null
    /**
     * Filter, which AISchedulingConfig to fetch.
     */
    where: AISchedulingConfigWhereUniqueInput
  }

  /**
   * AISchedulingConfig findUniqueOrThrow
   */
  export type AISchedulingConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AISchedulingConfig
     */
    select?: AISchedulingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AISchedulingConfig
     */
    omit?: AISchedulingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AISchedulingConfigInclude<ExtArgs> | null
    /**
     * Filter, which AISchedulingConfig to fetch.
     */
    where: AISchedulingConfigWhereUniqueInput
  }

  /**
   * AISchedulingConfig findFirst
   */
  export type AISchedulingConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AISchedulingConfig
     */
    select?: AISchedulingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AISchedulingConfig
     */
    omit?: AISchedulingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AISchedulingConfigInclude<ExtArgs> | null
    /**
     * Filter, which AISchedulingConfig to fetch.
     */
    where?: AISchedulingConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AISchedulingConfigs to fetch.
     */
    orderBy?: AISchedulingConfigOrderByWithRelationInput | AISchedulingConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AISchedulingConfigs.
     */
    cursor?: AISchedulingConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AISchedulingConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AISchedulingConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AISchedulingConfigs.
     */
    distinct?: AISchedulingConfigScalarFieldEnum | AISchedulingConfigScalarFieldEnum[]
  }

  /**
   * AISchedulingConfig findFirstOrThrow
   */
  export type AISchedulingConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AISchedulingConfig
     */
    select?: AISchedulingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AISchedulingConfig
     */
    omit?: AISchedulingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AISchedulingConfigInclude<ExtArgs> | null
    /**
     * Filter, which AISchedulingConfig to fetch.
     */
    where?: AISchedulingConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AISchedulingConfigs to fetch.
     */
    orderBy?: AISchedulingConfigOrderByWithRelationInput | AISchedulingConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AISchedulingConfigs.
     */
    cursor?: AISchedulingConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AISchedulingConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AISchedulingConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AISchedulingConfigs.
     */
    distinct?: AISchedulingConfigScalarFieldEnum | AISchedulingConfigScalarFieldEnum[]
  }

  /**
   * AISchedulingConfig findMany
   */
  export type AISchedulingConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AISchedulingConfig
     */
    select?: AISchedulingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AISchedulingConfig
     */
    omit?: AISchedulingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AISchedulingConfigInclude<ExtArgs> | null
    /**
     * Filter, which AISchedulingConfigs to fetch.
     */
    where?: AISchedulingConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AISchedulingConfigs to fetch.
     */
    orderBy?: AISchedulingConfigOrderByWithRelationInput | AISchedulingConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AISchedulingConfigs.
     */
    cursor?: AISchedulingConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AISchedulingConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AISchedulingConfigs.
     */
    skip?: number
    distinct?: AISchedulingConfigScalarFieldEnum | AISchedulingConfigScalarFieldEnum[]
  }

  /**
   * AISchedulingConfig create
   */
  export type AISchedulingConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AISchedulingConfig
     */
    select?: AISchedulingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AISchedulingConfig
     */
    omit?: AISchedulingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AISchedulingConfigInclude<ExtArgs> | null
    /**
     * The data needed to create a AISchedulingConfig.
     */
    data: XOR<AISchedulingConfigCreateInput, AISchedulingConfigUncheckedCreateInput>
  }

  /**
   * AISchedulingConfig createMany
   */
  export type AISchedulingConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AISchedulingConfigs.
     */
    data: AISchedulingConfigCreateManyInput | AISchedulingConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AISchedulingConfig createManyAndReturn
   */
  export type AISchedulingConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AISchedulingConfig
     */
    select?: AISchedulingConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AISchedulingConfig
     */
    omit?: AISchedulingConfigOmit<ExtArgs> | null
    /**
     * The data used to create many AISchedulingConfigs.
     */
    data: AISchedulingConfigCreateManyInput | AISchedulingConfigCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AISchedulingConfigIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AISchedulingConfig update
   */
  export type AISchedulingConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AISchedulingConfig
     */
    select?: AISchedulingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AISchedulingConfig
     */
    omit?: AISchedulingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AISchedulingConfigInclude<ExtArgs> | null
    /**
     * The data needed to update a AISchedulingConfig.
     */
    data: XOR<AISchedulingConfigUpdateInput, AISchedulingConfigUncheckedUpdateInput>
    /**
     * Choose, which AISchedulingConfig to update.
     */
    where: AISchedulingConfigWhereUniqueInput
  }

  /**
   * AISchedulingConfig updateMany
   */
  export type AISchedulingConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AISchedulingConfigs.
     */
    data: XOR<AISchedulingConfigUpdateManyMutationInput, AISchedulingConfigUncheckedUpdateManyInput>
    /**
     * Filter which AISchedulingConfigs to update
     */
    where?: AISchedulingConfigWhereInput
    /**
     * Limit how many AISchedulingConfigs to update.
     */
    limit?: number
  }

  /**
   * AISchedulingConfig updateManyAndReturn
   */
  export type AISchedulingConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AISchedulingConfig
     */
    select?: AISchedulingConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AISchedulingConfig
     */
    omit?: AISchedulingConfigOmit<ExtArgs> | null
    /**
     * The data used to update AISchedulingConfigs.
     */
    data: XOR<AISchedulingConfigUpdateManyMutationInput, AISchedulingConfigUncheckedUpdateManyInput>
    /**
     * Filter which AISchedulingConfigs to update
     */
    where?: AISchedulingConfigWhereInput
    /**
     * Limit how many AISchedulingConfigs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AISchedulingConfigIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AISchedulingConfig upsert
   */
  export type AISchedulingConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AISchedulingConfig
     */
    select?: AISchedulingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AISchedulingConfig
     */
    omit?: AISchedulingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AISchedulingConfigInclude<ExtArgs> | null
    /**
     * The filter to search for the AISchedulingConfig to update in case it exists.
     */
    where: AISchedulingConfigWhereUniqueInput
    /**
     * In case the AISchedulingConfig found by the `where` argument doesn't exist, create a new AISchedulingConfig with this data.
     */
    create: XOR<AISchedulingConfigCreateInput, AISchedulingConfigUncheckedCreateInput>
    /**
     * In case the AISchedulingConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AISchedulingConfigUpdateInput, AISchedulingConfigUncheckedUpdateInput>
  }

  /**
   * AISchedulingConfig delete
   */
  export type AISchedulingConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AISchedulingConfig
     */
    select?: AISchedulingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AISchedulingConfig
     */
    omit?: AISchedulingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AISchedulingConfigInclude<ExtArgs> | null
    /**
     * Filter which AISchedulingConfig to delete.
     */
    where: AISchedulingConfigWhereUniqueInput
  }

  /**
   * AISchedulingConfig deleteMany
   */
  export type AISchedulingConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AISchedulingConfigs to delete
     */
    where?: AISchedulingConfigWhereInput
    /**
     * Limit how many AISchedulingConfigs to delete.
     */
    limit?: number
  }

  /**
   * AISchedulingConfig without action
   */
  export type AISchedulingConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AISchedulingConfig
     */
    select?: AISchedulingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AISchedulingConfig
     */
    omit?: AISchedulingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AISchedulingConfigInclude<ExtArgs> | null
  }


  /**
   * Model AINoteTakingConfig
   */

  export type AggregateAINoteTakingConfig = {
    _count: AINoteTakingConfigCountAggregateOutputType | null
    _min: AINoteTakingConfigMinAggregateOutputType | null
    _max: AINoteTakingConfigMaxAggregateOutputType | null
  }

  export type AINoteTakingConfigMinAggregateOutputType = {
    id: string | null
    meetingId: string | null
    isEnabled: boolean | null
    transcript: string | null
    summary: string | null
    updatedAt: Date | null
  }

  export type AINoteTakingConfigMaxAggregateOutputType = {
    id: string | null
    meetingId: string | null
    isEnabled: boolean | null
    transcript: string | null
    summary: string | null
    updatedAt: Date | null
  }

  export type AINoteTakingConfigCountAggregateOutputType = {
    id: number
    meetingId: number
    isEnabled: number
    transcript: number
    summary: number
    actionItems: number
    updatedAt: number
    _all: number
  }


  export type AINoteTakingConfigMinAggregateInputType = {
    id?: true
    meetingId?: true
    isEnabled?: true
    transcript?: true
    summary?: true
    updatedAt?: true
  }

  export type AINoteTakingConfigMaxAggregateInputType = {
    id?: true
    meetingId?: true
    isEnabled?: true
    transcript?: true
    summary?: true
    updatedAt?: true
  }

  export type AINoteTakingConfigCountAggregateInputType = {
    id?: true
    meetingId?: true
    isEnabled?: true
    transcript?: true
    summary?: true
    actionItems?: true
    updatedAt?: true
    _all?: true
  }

  export type AINoteTakingConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AINoteTakingConfig to aggregate.
     */
    where?: AINoteTakingConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AINoteTakingConfigs to fetch.
     */
    orderBy?: AINoteTakingConfigOrderByWithRelationInput | AINoteTakingConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AINoteTakingConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AINoteTakingConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AINoteTakingConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AINoteTakingConfigs
    **/
    _count?: true | AINoteTakingConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AINoteTakingConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AINoteTakingConfigMaxAggregateInputType
  }

  export type GetAINoteTakingConfigAggregateType<T extends AINoteTakingConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateAINoteTakingConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAINoteTakingConfig[P]>
      : GetScalarType<T[P], AggregateAINoteTakingConfig[P]>
  }




  export type AINoteTakingConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AINoteTakingConfigWhereInput
    orderBy?: AINoteTakingConfigOrderByWithAggregationInput | AINoteTakingConfigOrderByWithAggregationInput[]
    by: AINoteTakingConfigScalarFieldEnum[] | AINoteTakingConfigScalarFieldEnum
    having?: AINoteTakingConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AINoteTakingConfigCountAggregateInputType | true
    _min?: AINoteTakingConfigMinAggregateInputType
    _max?: AINoteTakingConfigMaxAggregateInputType
  }

  export type AINoteTakingConfigGroupByOutputType = {
    id: string
    meetingId: string
    isEnabled: boolean
    transcript: string | null
    summary: string | null
    actionItems: JsonValue | null
    updatedAt: Date
    _count: AINoteTakingConfigCountAggregateOutputType | null
    _min: AINoteTakingConfigMinAggregateOutputType | null
    _max: AINoteTakingConfigMaxAggregateOutputType | null
  }

  type GetAINoteTakingConfigGroupByPayload<T extends AINoteTakingConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AINoteTakingConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AINoteTakingConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AINoteTakingConfigGroupByOutputType[P]>
            : GetScalarType<T[P], AINoteTakingConfigGroupByOutputType[P]>
        }
      >
    >


  export type AINoteTakingConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    meetingId?: boolean
    isEnabled?: boolean
    transcript?: boolean
    summary?: boolean
    actionItems?: boolean
    updatedAt?: boolean
    meeting?: boolean | MeetingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aINoteTakingConfig"]>

  export type AINoteTakingConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    meetingId?: boolean
    isEnabled?: boolean
    transcript?: boolean
    summary?: boolean
    actionItems?: boolean
    updatedAt?: boolean
    meeting?: boolean | MeetingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aINoteTakingConfig"]>

  export type AINoteTakingConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    meetingId?: boolean
    isEnabled?: boolean
    transcript?: boolean
    summary?: boolean
    actionItems?: boolean
    updatedAt?: boolean
    meeting?: boolean | MeetingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aINoteTakingConfig"]>

  export type AINoteTakingConfigSelectScalar = {
    id?: boolean
    meetingId?: boolean
    isEnabled?: boolean
    transcript?: boolean
    summary?: boolean
    actionItems?: boolean
    updatedAt?: boolean
  }

  export type AINoteTakingConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "meetingId" | "isEnabled" | "transcript" | "summary" | "actionItems" | "updatedAt", ExtArgs["result"]["aINoteTakingConfig"]>
  export type AINoteTakingConfigInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meeting?: boolean | MeetingDefaultArgs<ExtArgs>
  }
  export type AINoteTakingConfigIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meeting?: boolean | MeetingDefaultArgs<ExtArgs>
  }
  export type AINoteTakingConfigIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meeting?: boolean | MeetingDefaultArgs<ExtArgs>
  }

  export type $AINoteTakingConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AINoteTakingConfig"
    objects: {
      meeting: Prisma.$MeetingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      meetingId: string
      isEnabled: boolean
      transcript: string | null
      summary: string | null
      actionItems: Prisma.JsonValue | null
      updatedAt: Date
    }, ExtArgs["result"]["aINoteTakingConfig"]>
    composites: {}
  }

  type AINoteTakingConfigGetPayload<S extends boolean | null | undefined | AINoteTakingConfigDefaultArgs> = $Result.GetResult<Prisma.$AINoteTakingConfigPayload, S>

  type AINoteTakingConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AINoteTakingConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AINoteTakingConfigCountAggregateInputType | true
    }

  export interface AINoteTakingConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AINoteTakingConfig'], meta: { name: 'AINoteTakingConfig' } }
    /**
     * Find zero or one AINoteTakingConfig that matches the filter.
     * @param {AINoteTakingConfigFindUniqueArgs} args - Arguments to find a AINoteTakingConfig
     * @example
     * // Get one AINoteTakingConfig
     * const aINoteTakingConfig = await prisma.aINoteTakingConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AINoteTakingConfigFindUniqueArgs>(args: SelectSubset<T, AINoteTakingConfigFindUniqueArgs<ExtArgs>>): Prisma__AINoteTakingConfigClient<$Result.GetResult<Prisma.$AINoteTakingConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AINoteTakingConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AINoteTakingConfigFindUniqueOrThrowArgs} args - Arguments to find a AINoteTakingConfig
     * @example
     * // Get one AINoteTakingConfig
     * const aINoteTakingConfig = await prisma.aINoteTakingConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AINoteTakingConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, AINoteTakingConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AINoteTakingConfigClient<$Result.GetResult<Prisma.$AINoteTakingConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AINoteTakingConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AINoteTakingConfigFindFirstArgs} args - Arguments to find a AINoteTakingConfig
     * @example
     * // Get one AINoteTakingConfig
     * const aINoteTakingConfig = await prisma.aINoteTakingConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AINoteTakingConfigFindFirstArgs>(args?: SelectSubset<T, AINoteTakingConfigFindFirstArgs<ExtArgs>>): Prisma__AINoteTakingConfigClient<$Result.GetResult<Prisma.$AINoteTakingConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AINoteTakingConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AINoteTakingConfigFindFirstOrThrowArgs} args - Arguments to find a AINoteTakingConfig
     * @example
     * // Get one AINoteTakingConfig
     * const aINoteTakingConfig = await prisma.aINoteTakingConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AINoteTakingConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, AINoteTakingConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__AINoteTakingConfigClient<$Result.GetResult<Prisma.$AINoteTakingConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AINoteTakingConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AINoteTakingConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AINoteTakingConfigs
     * const aINoteTakingConfigs = await prisma.aINoteTakingConfig.findMany()
     * 
     * // Get first 10 AINoteTakingConfigs
     * const aINoteTakingConfigs = await prisma.aINoteTakingConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aINoteTakingConfigWithIdOnly = await prisma.aINoteTakingConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AINoteTakingConfigFindManyArgs>(args?: SelectSubset<T, AINoteTakingConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AINoteTakingConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AINoteTakingConfig.
     * @param {AINoteTakingConfigCreateArgs} args - Arguments to create a AINoteTakingConfig.
     * @example
     * // Create one AINoteTakingConfig
     * const AINoteTakingConfig = await prisma.aINoteTakingConfig.create({
     *   data: {
     *     // ... data to create a AINoteTakingConfig
     *   }
     * })
     * 
     */
    create<T extends AINoteTakingConfigCreateArgs>(args: SelectSubset<T, AINoteTakingConfigCreateArgs<ExtArgs>>): Prisma__AINoteTakingConfigClient<$Result.GetResult<Prisma.$AINoteTakingConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AINoteTakingConfigs.
     * @param {AINoteTakingConfigCreateManyArgs} args - Arguments to create many AINoteTakingConfigs.
     * @example
     * // Create many AINoteTakingConfigs
     * const aINoteTakingConfig = await prisma.aINoteTakingConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AINoteTakingConfigCreateManyArgs>(args?: SelectSubset<T, AINoteTakingConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AINoteTakingConfigs and returns the data saved in the database.
     * @param {AINoteTakingConfigCreateManyAndReturnArgs} args - Arguments to create many AINoteTakingConfigs.
     * @example
     * // Create many AINoteTakingConfigs
     * const aINoteTakingConfig = await prisma.aINoteTakingConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AINoteTakingConfigs and only return the `id`
     * const aINoteTakingConfigWithIdOnly = await prisma.aINoteTakingConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AINoteTakingConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, AINoteTakingConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AINoteTakingConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AINoteTakingConfig.
     * @param {AINoteTakingConfigDeleteArgs} args - Arguments to delete one AINoteTakingConfig.
     * @example
     * // Delete one AINoteTakingConfig
     * const AINoteTakingConfig = await prisma.aINoteTakingConfig.delete({
     *   where: {
     *     // ... filter to delete one AINoteTakingConfig
     *   }
     * })
     * 
     */
    delete<T extends AINoteTakingConfigDeleteArgs>(args: SelectSubset<T, AINoteTakingConfigDeleteArgs<ExtArgs>>): Prisma__AINoteTakingConfigClient<$Result.GetResult<Prisma.$AINoteTakingConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AINoteTakingConfig.
     * @param {AINoteTakingConfigUpdateArgs} args - Arguments to update one AINoteTakingConfig.
     * @example
     * // Update one AINoteTakingConfig
     * const aINoteTakingConfig = await prisma.aINoteTakingConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AINoteTakingConfigUpdateArgs>(args: SelectSubset<T, AINoteTakingConfigUpdateArgs<ExtArgs>>): Prisma__AINoteTakingConfigClient<$Result.GetResult<Prisma.$AINoteTakingConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AINoteTakingConfigs.
     * @param {AINoteTakingConfigDeleteManyArgs} args - Arguments to filter AINoteTakingConfigs to delete.
     * @example
     * // Delete a few AINoteTakingConfigs
     * const { count } = await prisma.aINoteTakingConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AINoteTakingConfigDeleteManyArgs>(args?: SelectSubset<T, AINoteTakingConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AINoteTakingConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AINoteTakingConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AINoteTakingConfigs
     * const aINoteTakingConfig = await prisma.aINoteTakingConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AINoteTakingConfigUpdateManyArgs>(args: SelectSubset<T, AINoteTakingConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AINoteTakingConfigs and returns the data updated in the database.
     * @param {AINoteTakingConfigUpdateManyAndReturnArgs} args - Arguments to update many AINoteTakingConfigs.
     * @example
     * // Update many AINoteTakingConfigs
     * const aINoteTakingConfig = await prisma.aINoteTakingConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AINoteTakingConfigs and only return the `id`
     * const aINoteTakingConfigWithIdOnly = await prisma.aINoteTakingConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AINoteTakingConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, AINoteTakingConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AINoteTakingConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AINoteTakingConfig.
     * @param {AINoteTakingConfigUpsertArgs} args - Arguments to update or create a AINoteTakingConfig.
     * @example
     * // Update or create a AINoteTakingConfig
     * const aINoteTakingConfig = await prisma.aINoteTakingConfig.upsert({
     *   create: {
     *     // ... data to create a AINoteTakingConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AINoteTakingConfig we want to update
     *   }
     * })
     */
    upsert<T extends AINoteTakingConfigUpsertArgs>(args: SelectSubset<T, AINoteTakingConfigUpsertArgs<ExtArgs>>): Prisma__AINoteTakingConfigClient<$Result.GetResult<Prisma.$AINoteTakingConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AINoteTakingConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AINoteTakingConfigCountArgs} args - Arguments to filter AINoteTakingConfigs to count.
     * @example
     * // Count the number of AINoteTakingConfigs
     * const count = await prisma.aINoteTakingConfig.count({
     *   where: {
     *     // ... the filter for the AINoteTakingConfigs we want to count
     *   }
     * })
    **/
    count<T extends AINoteTakingConfigCountArgs>(
      args?: Subset<T, AINoteTakingConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AINoteTakingConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AINoteTakingConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AINoteTakingConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AINoteTakingConfigAggregateArgs>(args: Subset<T, AINoteTakingConfigAggregateArgs>): Prisma.PrismaPromise<GetAINoteTakingConfigAggregateType<T>>

    /**
     * Group by AINoteTakingConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AINoteTakingConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AINoteTakingConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AINoteTakingConfigGroupByArgs['orderBy'] }
        : { orderBy?: AINoteTakingConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AINoteTakingConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAINoteTakingConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AINoteTakingConfig model
   */
  readonly fields: AINoteTakingConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AINoteTakingConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AINoteTakingConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meeting<T extends MeetingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeetingDefaultArgs<ExtArgs>>): Prisma__MeetingClient<$Result.GetResult<Prisma.$MeetingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AINoteTakingConfig model
   */
  interface AINoteTakingConfigFieldRefs {
    readonly id: FieldRef<"AINoteTakingConfig", 'String'>
    readonly meetingId: FieldRef<"AINoteTakingConfig", 'String'>
    readonly isEnabled: FieldRef<"AINoteTakingConfig", 'Boolean'>
    readonly transcript: FieldRef<"AINoteTakingConfig", 'String'>
    readonly summary: FieldRef<"AINoteTakingConfig", 'String'>
    readonly actionItems: FieldRef<"AINoteTakingConfig", 'Json'>
    readonly updatedAt: FieldRef<"AINoteTakingConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AINoteTakingConfig findUnique
   */
  export type AINoteTakingConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AINoteTakingConfig
     */
    select?: AINoteTakingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AINoteTakingConfig
     */
    omit?: AINoteTakingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AINoteTakingConfigInclude<ExtArgs> | null
    /**
     * Filter, which AINoteTakingConfig to fetch.
     */
    where: AINoteTakingConfigWhereUniqueInput
  }

  /**
   * AINoteTakingConfig findUniqueOrThrow
   */
  export type AINoteTakingConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AINoteTakingConfig
     */
    select?: AINoteTakingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AINoteTakingConfig
     */
    omit?: AINoteTakingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AINoteTakingConfigInclude<ExtArgs> | null
    /**
     * Filter, which AINoteTakingConfig to fetch.
     */
    where: AINoteTakingConfigWhereUniqueInput
  }

  /**
   * AINoteTakingConfig findFirst
   */
  export type AINoteTakingConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AINoteTakingConfig
     */
    select?: AINoteTakingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AINoteTakingConfig
     */
    omit?: AINoteTakingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AINoteTakingConfigInclude<ExtArgs> | null
    /**
     * Filter, which AINoteTakingConfig to fetch.
     */
    where?: AINoteTakingConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AINoteTakingConfigs to fetch.
     */
    orderBy?: AINoteTakingConfigOrderByWithRelationInput | AINoteTakingConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AINoteTakingConfigs.
     */
    cursor?: AINoteTakingConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AINoteTakingConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AINoteTakingConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AINoteTakingConfigs.
     */
    distinct?: AINoteTakingConfigScalarFieldEnum | AINoteTakingConfigScalarFieldEnum[]
  }

  /**
   * AINoteTakingConfig findFirstOrThrow
   */
  export type AINoteTakingConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AINoteTakingConfig
     */
    select?: AINoteTakingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AINoteTakingConfig
     */
    omit?: AINoteTakingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AINoteTakingConfigInclude<ExtArgs> | null
    /**
     * Filter, which AINoteTakingConfig to fetch.
     */
    where?: AINoteTakingConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AINoteTakingConfigs to fetch.
     */
    orderBy?: AINoteTakingConfigOrderByWithRelationInput | AINoteTakingConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AINoteTakingConfigs.
     */
    cursor?: AINoteTakingConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AINoteTakingConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AINoteTakingConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AINoteTakingConfigs.
     */
    distinct?: AINoteTakingConfigScalarFieldEnum | AINoteTakingConfigScalarFieldEnum[]
  }

  /**
   * AINoteTakingConfig findMany
   */
  export type AINoteTakingConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AINoteTakingConfig
     */
    select?: AINoteTakingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AINoteTakingConfig
     */
    omit?: AINoteTakingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AINoteTakingConfigInclude<ExtArgs> | null
    /**
     * Filter, which AINoteTakingConfigs to fetch.
     */
    where?: AINoteTakingConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AINoteTakingConfigs to fetch.
     */
    orderBy?: AINoteTakingConfigOrderByWithRelationInput | AINoteTakingConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AINoteTakingConfigs.
     */
    cursor?: AINoteTakingConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AINoteTakingConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AINoteTakingConfigs.
     */
    skip?: number
    distinct?: AINoteTakingConfigScalarFieldEnum | AINoteTakingConfigScalarFieldEnum[]
  }

  /**
   * AINoteTakingConfig create
   */
  export type AINoteTakingConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AINoteTakingConfig
     */
    select?: AINoteTakingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AINoteTakingConfig
     */
    omit?: AINoteTakingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AINoteTakingConfigInclude<ExtArgs> | null
    /**
     * The data needed to create a AINoteTakingConfig.
     */
    data: XOR<AINoteTakingConfigCreateInput, AINoteTakingConfigUncheckedCreateInput>
  }

  /**
   * AINoteTakingConfig createMany
   */
  export type AINoteTakingConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AINoteTakingConfigs.
     */
    data: AINoteTakingConfigCreateManyInput | AINoteTakingConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AINoteTakingConfig createManyAndReturn
   */
  export type AINoteTakingConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AINoteTakingConfig
     */
    select?: AINoteTakingConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AINoteTakingConfig
     */
    omit?: AINoteTakingConfigOmit<ExtArgs> | null
    /**
     * The data used to create many AINoteTakingConfigs.
     */
    data: AINoteTakingConfigCreateManyInput | AINoteTakingConfigCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AINoteTakingConfigIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AINoteTakingConfig update
   */
  export type AINoteTakingConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AINoteTakingConfig
     */
    select?: AINoteTakingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AINoteTakingConfig
     */
    omit?: AINoteTakingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AINoteTakingConfigInclude<ExtArgs> | null
    /**
     * The data needed to update a AINoteTakingConfig.
     */
    data: XOR<AINoteTakingConfigUpdateInput, AINoteTakingConfigUncheckedUpdateInput>
    /**
     * Choose, which AINoteTakingConfig to update.
     */
    where: AINoteTakingConfigWhereUniqueInput
  }

  /**
   * AINoteTakingConfig updateMany
   */
  export type AINoteTakingConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AINoteTakingConfigs.
     */
    data: XOR<AINoteTakingConfigUpdateManyMutationInput, AINoteTakingConfigUncheckedUpdateManyInput>
    /**
     * Filter which AINoteTakingConfigs to update
     */
    where?: AINoteTakingConfigWhereInput
    /**
     * Limit how many AINoteTakingConfigs to update.
     */
    limit?: number
  }

  /**
   * AINoteTakingConfig updateManyAndReturn
   */
  export type AINoteTakingConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AINoteTakingConfig
     */
    select?: AINoteTakingConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AINoteTakingConfig
     */
    omit?: AINoteTakingConfigOmit<ExtArgs> | null
    /**
     * The data used to update AINoteTakingConfigs.
     */
    data: XOR<AINoteTakingConfigUpdateManyMutationInput, AINoteTakingConfigUncheckedUpdateManyInput>
    /**
     * Filter which AINoteTakingConfigs to update
     */
    where?: AINoteTakingConfigWhereInput
    /**
     * Limit how many AINoteTakingConfigs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AINoteTakingConfigIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AINoteTakingConfig upsert
   */
  export type AINoteTakingConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AINoteTakingConfig
     */
    select?: AINoteTakingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AINoteTakingConfig
     */
    omit?: AINoteTakingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AINoteTakingConfigInclude<ExtArgs> | null
    /**
     * The filter to search for the AINoteTakingConfig to update in case it exists.
     */
    where: AINoteTakingConfigWhereUniqueInput
    /**
     * In case the AINoteTakingConfig found by the `where` argument doesn't exist, create a new AINoteTakingConfig with this data.
     */
    create: XOR<AINoteTakingConfigCreateInput, AINoteTakingConfigUncheckedCreateInput>
    /**
     * In case the AINoteTakingConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AINoteTakingConfigUpdateInput, AINoteTakingConfigUncheckedUpdateInput>
  }

  /**
   * AINoteTakingConfig delete
   */
  export type AINoteTakingConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AINoteTakingConfig
     */
    select?: AINoteTakingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AINoteTakingConfig
     */
    omit?: AINoteTakingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AINoteTakingConfigInclude<ExtArgs> | null
    /**
     * Filter which AINoteTakingConfig to delete.
     */
    where: AINoteTakingConfigWhereUniqueInput
  }

  /**
   * AINoteTakingConfig deleteMany
   */
  export type AINoteTakingConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AINoteTakingConfigs to delete
     */
    where?: AINoteTakingConfigWhereInput
    /**
     * Limit how many AINoteTakingConfigs to delete.
     */
    limit?: number
  }

  /**
   * AINoteTakingConfig without action
   */
  export type AINoteTakingConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AINoteTakingConfig
     */
    select?: AINoteTakingConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AINoteTakingConfig
     */
    omit?: AINoteTakingConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AINoteTakingConfigInclude<ExtArgs> | null
  }


  /**
   * Model AIInteractionLog
   */

  export type AggregateAIInteractionLog = {
    _count: AIInteractionLogCountAggregateOutputType | null
    _min: AIInteractionLogMinAggregateOutputType | null
    _max: AIInteractionLogMaxAggregateOutputType | null
  }

  export type AIInteractionLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    inputType: string | null
    input: string | null
    output: string | null
    timestamp: Date | null
  }

  export type AIInteractionLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    inputType: string | null
    input: string | null
    output: string | null
    timestamp: Date | null
  }

  export type AIInteractionLogCountAggregateOutputType = {
    id: number
    userId: number
    inputType: number
    input: number
    output: number
    timestamp: number
    _all: number
  }


  export type AIInteractionLogMinAggregateInputType = {
    id?: true
    userId?: true
    inputType?: true
    input?: true
    output?: true
    timestamp?: true
  }

  export type AIInteractionLogMaxAggregateInputType = {
    id?: true
    userId?: true
    inputType?: true
    input?: true
    output?: true
    timestamp?: true
  }

  export type AIInteractionLogCountAggregateInputType = {
    id?: true
    userId?: true
    inputType?: true
    input?: true
    output?: true
    timestamp?: true
    _all?: true
  }

  export type AIInteractionLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIInteractionLog to aggregate.
     */
    where?: AIInteractionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIInteractionLogs to fetch.
     */
    orderBy?: AIInteractionLogOrderByWithRelationInput | AIInteractionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AIInteractionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIInteractionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIInteractionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AIInteractionLogs
    **/
    _count?: true | AIInteractionLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AIInteractionLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AIInteractionLogMaxAggregateInputType
  }

  export type GetAIInteractionLogAggregateType<T extends AIInteractionLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAIInteractionLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAIInteractionLog[P]>
      : GetScalarType<T[P], AggregateAIInteractionLog[P]>
  }




  export type AIInteractionLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AIInteractionLogWhereInput
    orderBy?: AIInteractionLogOrderByWithAggregationInput | AIInteractionLogOrderByWithAggregationInput[]
    by: AIInteractionLogScalarFieldEnum[] | AIInteractionLogScalarFieldEnum
    having?: AIInteractionLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AIInteractionLogCountAggregateInputType | true
    _min?: AIInteractionLogMinAggregateInputType
    _max?: AIInteractionLogMaxAggregateInputType
  }

  export type AIInteractionLogGroupByOutputType = {
    id: string
    userId: string | null
    inputType: string
    input: string
    output: string | null
    timestamp: Date
    _count: AIInteractionLogCountAggregateOutputType | null
    _min: AIInteractionLogMinAggregateOutputType | null
    _max: AIInteractionLogMaxAggregateOutputType | null
  }

  type GetAIInteractionLogGroupByPayload<T extends AIInteractionLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AIInteractionLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AIInteractionLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AIInteractionLogGroupByOutputType[P]>
            : GetScalarType<T[P], AIInteractionLogGroupByOutputType[P]>
        }
      >
    >


  export type AIInteractionLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    inputType?: boolean
    input?: boolean
    output?: boolean
    timestamp?: boolean
    user?: boolean | AIInteractionLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["aIInteractionLog"]>

  export type AIInteractionLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    inputType?: boolean
    input?: boolean
    output?: boolean
    timestamp?: boolean
    user?: boolean | AIInteractionLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["aIInteractionLog"]>

  export type AIInteractionLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    inputType?: boolean
    input?: boolean
    output?: boolean
    timestamp?: boolean
    user?: boolean | AIInteractionLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["aIInteractionLog"]>

  export type AIInteractionLogSelectScalar = {
    id?: boolean
    userId?: boolean
    inputType?: boolean
    input?: boolean
    output?: boolean
    timestamp?: boolean
  }

  export type AIInteractionLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "inputType" | "input" | "output" | "timestamp", ExtArgs["result"]["aIInteractionLog"]>
  export type AIInteractionLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AIInteractionLog$userArgs<ExtArgs>
  }
  export type AIInteractionLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AIInteractionLog$userArgs<ExtArgs>
  }
  export type AIInteractionLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AIInteractionLog$userArgs<ExtArgs>
  }

  export type $AIInteractionLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AIInteractionLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      inputType: string
      input: string
      output: string | null
      timestamp: Date
    }, ExtArgs["result"]["aIInteractionLog"]>
    composites: {}
  }

  type AIInteractionLogGetPayload<S extends boolean | null | undefined | AIInteractionLogDefaultArgs> = $Result.GetResult<Prisma.$AIInteractionLogPayload, S>

  type AIInteractionLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AIInteractionLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AIInteractionLogCountAggregateInputType | true
    }

  export interface AIInteractionLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AIInteractionLog'], meta: { name: 'AIInteractionLog' } }
    /**
     * Find zero or one AIInteractionLog that matches the filter.
     * @param {AIInteractionLogFindUniqueArgs} args - Arguments to find a AIInteractionLog
     * @example
     * // Get one AIInteractionLog
     * const aIInteractionLog = await prisma.aIInteractionLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AIInteractionLogFindUniqueArgs>(args: SelectSubset<T, AIInteractionLogFindUniqueArgs<ExtArgs>>): Prisma__AIInteractionLogClient<$Result.GetResult<Prisma.$AIInteractionLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AIInteractionLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AIInteractionLogFindUniqueOrThrowArgs} args - Arguments to find a AIInteractionLog
     * @example
     * // Get one AIInteractionLog
     * const aIInteractionLog = await prisma.aIInteractionLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AIInteractionLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AIInteractionLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AIInteractionLogClient<$Result.GetResult<Prisma.$AIInteractionLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AIInteractionLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInteractionLogFindFirstArgs} args - Arguments to find a AIInteractionLog
     * @example
     * // Get one AIInteractionLog
     * const aIInteractionLog = await prisma.aIInteractionLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AIInteractionLogFindFirstArgs>(args?: SelectSubset<T, AIInteractionLogFindFirstArgs<ExtArgs>>): Prisma__AIInteractionLogClient<$Result.GetResult<Prisma.$AIInteractionLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AIInteractionLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInteractionLogFindFirstOrThrowArgs} args - Arguments to find a AIInteractionLog
     * @example
     * // Get one AIInteractionLog
     * const aIInteractionLog = await prisma.aIInteractionLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AIInteractionLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AIInteractionLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AIInteractionLogClient<$Result.GetResult<Prisma.$AIInteractionLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AIInteractionLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInteractionLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AIInteractionLogs
     * const aIInteractionLogs = await prisma.aIInteractionLog.findMany()
     * 
     * // Get first 10 AIInteractionLogs
     * const aIInteractionLogs = await prisma.aIInteractionLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aIInteractionLogWithIdOnly = await prisma.aIInteractionLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AIInteractionLogFindManyArgs>(args?: SelectSubset<T, AIInteractionLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIInteractionLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AIInteractionLog.
     * @param {AIInteractionLogCreateArgs} args - Arguments to create a AIInteractionLog.
     * @example
     * // Create one AIInteractionLog
     * const AIInteractionLog = await prisma.aIInteractionLog.create({
     *   data: {
     *     // ... data to create a AIInteractionLog
     *   }
     * })
     * 
     */
    create<T extends AIInteractionLogCreateArgs>(args: SelectSubset<T, AIInteractionLogCreateArgs<ExtArgs>>): Prisma__AIInteractionLogClient<$Result.GetResult<Prisma.$AIInteractionLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AIInteractionLogs.
     * @param {AIInteractionLogCreateManyArgs} args - Arguments to create many AIInteractionLogs.
     * @example
     * // Create many AIInteractionLogs
     * const aIInteractionLog = await prisma.aIInteractionLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AIInteractionLogCreateManyArgs>(args?: SelectSubset<T, AIInteractionLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AIInteractionLogs and returns the data saved in the database.
     * @param {AIInteractionLogCreateManyAndReturnArgs} args - Arguments to create many AIInteractionLogs.
     * @example
     * // Create many AIInteractionLogs
     * const aIInteractionLog = await prisma.aIInteractionLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AIInteractionLogs and only return the `id`
     * const aIInteractionLogWithIdOnly = await prisma.aIInteractionLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AIInteractionLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AIInteractionLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIInteractionLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AIInteractionLog.
     * @param {AIInteractionLogDeleteArgs} args - Arguments to delete one AIInteractionLog.
     * @example
     * // Delete one AIInteractionLog
     * const AIInteractionLog = await prisma.aIInteractionLog.delete({
     *   where: {
     *     // ... filter to delete one AIInteractionLog
     *   }
     * })
     * 
     */
    delete<T extends AIInteractionLogDeleteArgs>(args: SelectSubset<T, AIInteractionLogDeleteArgs<ExtArgs>>): Prisma__AIInteractionLogClient<$Result.GetResult<Prisma.$AIInteractionLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AIInteractionLog.
     * @param {AIInteractionLogUpdateArgs} args - Arguments to update one AIInteractionLog.
     * @example
     * // Update one AIInteractionLog
     * const aIInteractionLog = await prisma.aIInteractionLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AIInteractionLogUpdateArgs>(args: SelectSubset<T, AIInteractionLogUpdateArgs<ExtArgs>>): Prisma__AIInteractionLogClient<$Result.GetResult<Prisma.$AIInteractionLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AIInteractionLogs.
     * @param {AIInteractionLogDeleteManyArgs} args - Arguments to filter AIInteractionLogs to delete.
     * @example
     * // Delete a few AIInteractionLogs
     * const { count } = await prisma.aIInteractionLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AIInteractionLogDeleteManyArgs>(args?: SelectSubset<T, AIInteractionLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AIInteractionLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInteractionLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AIInteractionLogs
     * const aIInteractionLog = await prisma.aIInteractionLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AIInteractionLogUpdateManyArgs>(args: SelectSubset<T, AIInteractionLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AIInteractionLogs and returns the data updated in the database.
     * @param {AIInteractionLogUpdateManyAndReturnArgs} args - Arguments to update many AIInteractionLogs.
     * @example
     * // Update many AIInteractionLogs
     * const aIInteractionLog = await prisma.aIInteractionLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AIInteractionLogs and only return the `id`
     * const aIInteractionLogWithIdOnly = await prisma.aIInteractionLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AIInteractionLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AIInteractionLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIInteractionLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AIInteractionLog.
     * @param {AIInteractionLogUpsertArgs} args - Arguments to update or create a AIInteractionLog.
     * @example
     * // Update or create a AIInteractionLog
     * const aIInteractionLog = await prisma.aIInteractionLog.upsert({
     *   create: {
     *     // ... data to create a AIInteractionLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AIInteractionLog we want to update
     *   }
     * })
     */
    upsert<T extends AIInteractionLogUpsertArgs>(args: SelectSubset<T, AIInteractionLogUpsertArgs<ExtArgs>>): Prisma__AIInteractionLogClient<$Result.GetResult<Prisma.$AIInteractionLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AIInteractionLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInteractionLogCountArgs} args - Arguments to filter AIInteractionLogs to count.
     * @example
     * // Count the number of AIInteractionLogs
     * const count = await prisma.aIInteractionLog.count({
     *   where: {
     *     // ... the filter for the AIInteractionLogs we want to count
     *   }
     * })
    **/
    count<T extends AIInteractionLogCountArgs>(
      args?: Subset<T, AIInteractionLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AIInteractionLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AIInteractionLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInteractionLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AIInteractionLogAggregateArgs>(args: Subset<T, AIInteractionLogAggregateArgs>): Prisma.PrismaPromise<GetAIInteractionLogAggregateType<T>>

    /**
     * Group by AIInteractionLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIInteractionLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AIInteractionLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AIInteractionLogGroupByArgs['orderBy'] }
        : { orderBy?: AIInteractionLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AIInteractionLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAIInteractionLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AIInteractionLog model
   */
  readonly fields: AIInteractionLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AIInteractionLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AIInteractionLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends AIInteractionLog$userArgs<ExtArgs> = {}>(args?: Subset<T, AIInteractionLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AIInteractionLog model
   */
  interface AIInteractionLogFieldRefs {
    readonly id: FieldRef<"AIInteractionLog", 'String'>
    readonly userId: FieldRef<"AIInteractionLog", 'String'>
    readonly inputType: FieldRef<"AIInteractionLog", 'String'>
    readonly input: FieldRef<"AIInteractionLog", 'String'>
    readonly output: FieldRef<"AIInteractionLog", 'String'>
    readonly timestamp: FieldRef<"AIInteractionLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AIInteractionLog findUnique
   */
  export type AIInteractionLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteractionLog
     */
    select?: AIInteractionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIInteractionLog
     */
    omit?: AIInteractionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIInteractionLogInclude<ExtArgs> | null
    /**
     * Filter, which AIInteractionLog to fetch.
     */
    where: AIInteractionLogWhereUniqueInput
  }

  /**
   * AIInteractionLog findUniqueOrThrow
   */
  export type AIInteractionLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteractionLog
     */
    select?: AIInteractionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIInteractionLog
     */
    omit?: AIInteractionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIInteractionLogInclude<ExtArgs> | null
    /**
     * Filter, which AIInteractionLog to fetch.
     */
    where: AIInteractionLogWhereUniqueInput
  }

  /**
   * AIInteractionLog findFirst
   */
  export type AIInteractionLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteractionLog
     */
    select?: AIInteractionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIInteractionLog
     */
    omit?: AIInteractionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIInteractionLogInclude<ExtArgs> | null
    /**
     * Filter, which AIInteractionLog to fetch.
     */
    where?: AIInteractionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIInteractionLogs to fetch.
     */
    orderBy?: AIInteractionLogOrderByWithRelationInput | AIInteractionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIInteractionLogs.
     */
    cursor?: AIInteractionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIInteractionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIInteractionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIInteractionLogs.
     */
    distinct?: AIInteractionLogScalarFieldEnum | AIInteractionLogScalarFieldEnum[]
  }

  /**
   * AIInteractionLog findFirstOrThrow
   */
  export type AIInteractionLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteractionLog
     */
    select?: AIInteractionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIInteractionLog
     */
    omit?: AIInteractionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIInteractionLogInclude<ExtArgs> | null
    /**
     * Filter, which AIInteractionLog to fetch.
     */
    where?: AIInteractionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIInteractionLogs to fetch.
     */
    orderBy?: AIInteractionLogOrderByWithRelationInput | AIInteractionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIInteractionLogs.
     */
    cursor?: AIInteractionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIInteractionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIInteractionLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIInteractionLogs.
     */
    distinct?: AIInteractionLogScalarFieldEnum | AIInteractionLogScalarFieldEnum[]
  }

  /**
   * AIInteractionLog findMany
   */
  export type AIInteractionLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteractionLog
     */
    select?: AIInteractionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIInteractionLog
     */
    omit?: AIInteractionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIInteractionLogInclude<ExtArgs> | null
    /**
     * Filter, which AIInteractionLogs to fetch.
     */
    where?: AIInteractionLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIInteractionLogs to fetch.
     */
    orderBy?: AIInteractionLogOrderByWithRelationInput | AIInteractionLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AIInteractionLogs.
     */
    cursor?: AIInteractionLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIInteractionLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIInteractionLogs.
     */
    skip?: number
    distinct?: AIInteractionLogScalarFieldEnum | AIInteractionLogScalarFieldEnum[]
  }

  /**
   * AIInteractionLog create
   */
  export type AIInteractionLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteractionLog
     */
    select?: AIInteractionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIInteractionLog
     */
    omit?: AIInteractionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIInteractionLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AIInteractionLog.
     */
    data: XOR<AIInteractionLogCreateInput, AIInteractionLogUncheckedCreateInput>
  }

  /**
   * AIInteractionLog createMany
   */
  export type AIInteractionLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AIInteractionLogs.
     */
    data: AIInteractionLogCreateManyInput | AIInteractionLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AIInteractionLog createManyAndReturn
   */
  export type AIInteractionLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteractionLog
     */
    select?: AIInteractionLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AIInteractionLog
     */
    omit?: AIInteractionLogOmit<ExtArgs> | null
    /**
     * The data used to create many AIInteractionLogs.
     */
    data: AIInteractionLogCreateManyInput | AIInteractionLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIInteractionLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AIInteractionLog update
   */
  export type AIInteractionLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteractionLog
     */
    select?: AIInteractionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIInteractionLog
     */
    omit?: AIInteractionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIInteractionLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AIInteractionLog.
     */
    data: XOR<AIInteractionLogUpdateInput, AIInteractionLogUncheckedUpdateInput>
    /**
     * Choose, which AIInteractionLog to update.
     */
    where: AIInteractionLogWhereUniqueInput
  }

  /**
   * AIInteractionLog updateMany
   */
  export type AIInteractionLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AIInteractionLogs.
     */
    data: XOR<AIInteractionLogUpdateManyMutationInput, AIInteractionLogUncheckedUpdateManyInput>
    /**
     * Filter which AIInteractionLogs to update
     */
    where?: AIInteractionLogWhereInput
    /**
     * Limit how many AIInteractionLogs to update.
     */
    limit?: number
  }

  /**
   * AIInteractionLog updateManyAndReturn
   */
  export type AIInteractionLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteractionLog
     */
    select?: AIInteractionLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AIInteractionLog
     */
    omit?: AIInteractionLogOmit<ExtArgs> | null
    /**
     * The data used to update AIInteractionLogs.
     */
    data: XOR<AIInteractionLogUpdateManyMutationInput, AIInteractionLogUncheckedUpdateManyInput>
    /**
     * Filter which AIInteractionLogs to update
     */
    where?: AIInteractionLogWhereInput
    /**
     * Limit how many AIInteractionLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIInteractionLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AIInteractionLog upsert
   */
  export type AIInteractionLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteractionLog
     */
    select?: AIInteractionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIInteractionLog
     */
    omit?: AIInteractionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIInteractionLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AIInteractionLog to update in case it exists.
     */
    where: AIInteractionLogWhereUniqueInput
    /**
     * In case the AIInteractionLog found by the `where` argument doesn't exist, create a new AIInteractionLog with this data.
     */
    create: XOR<AIInteractionLogCreateInput, AIInteractionLogUncheckedCreateInput>
    /**
     * In case the AIInteractionLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AIInteractionLogUpdateInput, AIInteractionLogUncheckedUpdateInput>
  }

  /**
   * AIInteractionLog delete
   */
  export type AIInteractionLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteractionLog
     */
    select?: AIInteractionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIInteractionLog
     */
    omit?: AIInteractionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIInteractionLogInclude<ExtArgs> | null
    /**
     * Filter which AIInteractionLog to delete.
     */
    where: AIInteractionLogWhereUniqueInput
  }

  /**
   * AIInteractionLog deleteMany
   */
  export type AIInteractionLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIInteractionLogs to delete
     */
    where?: AIInteractionLogWhereInput
    /**
     * Limit how many AIInteractionLogs to delete.
     */
    limit?: number
  }

  /**
   * AIInteractionLog.user
   */
  export type AIInteractionLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AIInteractionLog without action
   */
  export type AIInteractionLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIInteractionLog
     */
    select?: AIInteractionLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIInteractionLog
     */
    omit?: AIInteractionLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AIInteractionLogInclude<ExtArgs> | null
  }


  /**
   * Model AIBusinessPreference
   */

  export type AggregateAIBusinessPreference = {
    _count: AIBusinessPreferenceCountAggregateOutputType | null
    _min: AIBusinessPreferenceMinAggregateOutputType | null
    _max: AIBusinessPreferenceMaxAggregateOutputType | null
  }

  export type AIBusinessPreferenceMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    businessOverview: string | null
    businessCulture: string | null
    businessValues: string | null
    businessMission: string | null
    updatedAt: Date | null
  }

  export type AIBusinessPreferenceMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    businessOverview: string | null
    businessCulture: string | null
    businessValues: string | null
    businessMission: string | null
    updatedAt: Date | null
  }

  export type AIBusinessPreferenceCountAggregateOutputType = {
    id: number
    companyId: number
    businessOverview: number
    businessCulture: number
    businessValues: number
    businessMission: number
    updatedAt: number
    _all: number
  }


  export type AIBusinessPreferenceMinAggregateInputType = {
    id?: true
    companyId?: true
    businessOverview?: true
    businessCulture?: true
    businessValues?: true
    businessMission?: true
    updatedAt?: true
  }

  export type AIBusinessPreferenceMaxAggregateInputType = {
    id?: true
    companyId?: true
    businessOverview?: true
    businessCulture?: true
    businessValues?: true
    businessMission?: true
    updatedAt?: true
  }

  export type AIBusinessPreferenceCountAggregateInputType = {
    id?: true
    companyId?: true
    businessOverview?: true
    businessCulture?: true
    businessValues?: true
    businessMission?: true
    updatedAt?: true
    _all?: true
  }

  export type AIBusinessPreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIBusinessPreference to aggregate.
     */
    where?: AIBusinessPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIBusinessPreferences to fetch.
     */
    orderBy?: AIBusinessPreferenceOrderByWithRelationInput | AIBusinessPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AIBusinessPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIBusinessPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIBusinessPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AIBusinessPreferences
    **/
    _count?: true | AIBusinessPreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AIBusinessPreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AIBusinessPreferenceMaxAggregateInputType
  }

  export type GetAIBusinessPreferenceAggregateType<T extends AIBusinessPreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateAIBusinessPreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAIBusinessPreference[P]>
      : GetScalarType<T[P], AggregateAIBusinessPreference[P]>
  }




  export type AIBusinessPreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AIBusinessPreferenceWhereInput
    orderBy?: AIBusinessPreferenceOrderByWithAggregationInput | AIBusinessPreferenceOrderByWithAggregationInput[]
    by: AIBusinessPreferenceScalarFieldEnum[] | AIBusinessPreferenceScalarFieldEnum
    having?: AIBusinessPreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AIBusinessPreferenceCountAggregateInputType | true
    _min?: AIBusinessPreferenceMinAggregateInputType
    _max?: AIBusinessPreferenceMaxAggregateInputType
  }

  export type AIBusinessPreferenceGroupByOutputType = {
    id: string
    companyId: string
    businessOverview: string | null
    businessCulture: string | null
    businessValues: string | null
    businessMission: string | null
    updatedAt: Date
    _count: AIBusinessPreferenceCountAggregateOutputType | null
    _min: AIBusinessPreferenceMinAggregateOutputType | null
    _max: AIBusinessPreferenceMaxAggregateOutputType | null
  }

  type GetAIBusinessPreferenceGroupByPayload<T extends AIBusinessPreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AIBusinessPreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AIBusinessPreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AIBusinessPreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], AIBusinessPreferenceGroupByOutputType[P]>
        }
      >
    >


  export type AIBusinessPreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    businessOverview?: boolean
    businessCulture?: boolean
    businessValues?: boolean
    businessMission?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["aIBusinessPreference"]>

  export type AIBusinessPreferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    businessOverview?: boolean
    businessCulture?: boolean
    businessValues?: boolean
    businessMission?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["aIBusinessPreference"]>

  export type AIBusinessPreferenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    businessOverview?: boolean
    businessCulture?: boolean
    businessValues?: boolean
    businessMission?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["aIBusinessPreference"]>

  export type AIBusinessPreferenceSelectScalar = {
    id?: boolean
    companyId?: boolean
    businessOverview?: boolean
    businessCulture?: boolean
    businessValues?: boolean
    businessMission?: boolean
    updatedAt?: boolean
  }

  export type AIBusinessPreferenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "businessOverview" | "businessCulture" | "businessValues" | "businessMission" | "updatedAt", ExtArgs["result"]["aIBusinessPreference"]>

  export type $AIBusinessPreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AIBusinessPreference"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      businessOverview: string | null
      businessCulture: string | null
      businessValues: string | null
      businessMission: string | null
      updatedAt: Date
    }, ExtArgs["result"]["aIBusinessPreference"]>
    composites: {}
  }

  type AIBusinessPreferenceGetPayload<S extends boolean | null | undefined | AIBusinessPreferenceDefaultArgs> = $Result.GetResult<Prisma.$AIBusinessPreferencePayload, S>

  type AIBusinessPreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AIBusinessPreferenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AIBusinessPreferenceCountAggregateInputType | true
    }

  export interface AIBusinessPreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AIBusinessPreference'], meta: { name: 'AIBusinessPreference' } }
    /**
     * Find zero or one AIBusinessPreference that matches the filter.
     * @param {AIBusinessPreferenceFindUniqueArgs} args - Arguments to find a AIBusinessPreference
     * @example
     * // Get one AIBusinessPreference
     * const aIBusinessPreference = await prisma.aIBusinessPreference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AIBusinessPreferenceFindUniqueArgs>(args: SelectSubset<T, AIBusinessPreferenceFindUniqueArgs<ExtArgs>>): Prisma__AIBusinessPreferenceClient<$Result.GetResult<Prisma.$AIBusinessPreferencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AIBusinessPreference that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AIBusinessPreferenceFindUniqueOrThrowArgs} args - Arguments to find a AIBusinessPreference
     * @example
     * // Get one AIBusinessPreference
     * const aIBusinessPreference = await prisma.aIBusinessPreference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AIBusinessPreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, AIBusinessPreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AIBusinessPreferenceClient<$Result.GetResult<Prisma.$AIBusinessPreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AIBusinessPreference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIBusinessPreferenceFindFirstArgs} args - Arguments to find a AIBusinessPreference
     * @example
     * // Get one AIBusinessPreference
     * const aIBusinessPreference = await prisma.aIBusinessPreference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AIBusinessPreferenceFindFirstArgs>(args?: SelectSubset<T, AIBusinessPreferenceFindFirstArgs<ExtArgs>>): Prisma__AIBusinessPreferenceClient<$Result.GetResult<Prisma.$AIBusinessPreferencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AIBusinessPreference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIBusinessPreferenceFindFirstOrThrowArgs} args - Arguments to find a AIBusinessPreference
     * @example
     * // Get one AIBusinessPreference
     * const aIBusinessPreference = await prisma.aIBusinessPreference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AIBusinessPreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, AIBusinessPreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AIBusinessPreferenceClient<$Result.GetResult<Prisma.$AIBusinessPreferencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AIBusinessPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIBusinessPreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AIBusinessPreferences
     * const aIBusinessPreferences = await prisma.aIBusinessPreference.findMany()
     * 
     * // Get first 10 AIBusinessPreferences
     * const aIBusinessPreferences = await prisma.aIBusinessPreference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aIBusinessPreferenceWithIdOnly = await prisma.aIBusinessPreference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AIBusinessPreferenceFindManyArgs>(args?: SelectSubset<T, AIBusinessPreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIBusinessPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AIBusinessPreference.
     * @param {AIBusinessPreferenceCreateArgs} args - Arguments to create a AIBusinessPreference.
     * @example
     * // Create one AIBusinessPreference
     * const AIBusinessPreference = await prisma.aIBusinessPreference.create({
     *   data: {
     *     // ... data to create a AIBusinessPreference
     *   }
     * })
     * 
     */
    create<T extends AIBusinessPreferenceCreateArgs>(args: SelectSubset<T, AIBusinessPreferenceCreateArgs<ExtArgs>>): Prisma__AIBusinessPreferenceClient<$Result.GetResult<Prisma.$AIBusinessPreferencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AIBusinessPreferences.
     * @param {AIBusinessPreferenceCreateManyArgs} args - Arguments to create many AIBusinessPreferences.
     * @example
     * // Create many AIBusinessPreferences
     * const aIBusinessPreference = await prisma.aIBusinessPreference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AIBusinessPreferenceCreateManyArgs>(args?: SelectSubset<T, AIBusinessPreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AIBusinessPreferences and returns the data saved in the database.
     * @param {AIBusinessPreferenceCreateManyAndReturnArgs} args - Arguments to create many AIBusinessPreferences.
     * @example
     * // Create many AIBusinessPreferences
     * const aIBusinessPreference = await prisma.aIBusinessPreference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AIBusinessPreferences and only return the `id`
     * const aIBusinessPreferenceWithIdOnly = await prisma.aIBusinessPreference.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AIBusinessPreferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, AIBusinessPreferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIBusinessPreferencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AIBusinessPreference.
     * @param {AIBusinessPreferenceDeleteArgs} args - Arguments to delete one AIBusinessPreference.
     * @example
     * // Delete one AIBusinessPreference
     * const AIBusinessPreference = await prisma.aIBusinessPreference.delete({
     *   where: {
     *     // ... filter to delete one AIBusinessPreference
     *   }
     * })
     * 
     */
    delete<T extends AIBusinessPreferenceDeleteArgs>(args: SelectSubset<T, AIBusinessPreferenceDeleteArgs<ExtArgs>>): Prisma__AIBusinessPreferenceClient<$Result.GetResult<Prisma.$AIBusinessPreferencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AIBusinessPreference.
     * @param {AIBusinessPreferenceUpdateArgs} args - Arguments to update one AIBusinessPreference.
     * @example
     * // Update one AIBusinessPreference
     * const aIBusinessPreference = await prisma.aIBusinessPreference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AIBusinessPreferenceUpdateArgs>(args: SelectSubset<T, AIBusinessPreferenceUpdateArgs<ExtArgs>>): Prisma__AIBusinessPreferenceClient<$Result.GetResult<Prisma.$AIBusinessPreferencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AIBusinessPreferences.
     * @param {AIBusinessPreferenceDeleteManyArgs} args - Arguments to filter AIBusinessPreferences to delete.
     * @example
     * // Delete a few AIBusinessPreferences
     * const { count } = await prisma.aIBusinessPreference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AIBusinessPreferenceDeleteManyArgs>(args?: SelectSubset<T, AIBusinessPreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AIBusinessPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIBusinessPreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AIBusinessPreferences
     * const aIBusinessPreference = await prisma.aIBusinessPreference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AIBusinessPreferenceUpdateManyArgs>(args: SelectSubset<T, AIBusinessPreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AIBusinessPreferences and returns the data updated in the database.
     * @param {AIBusinessPreferenceUpdateManyAndReturnArgs} args - Arguments to update many AIBusinessPreferences.
     * @example
     * // Update many AIBusinessPreferences
     * const aIBusinessPreference = await prisma.aIBusinessPreference.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AIBusinessPreferences and only return the `id`
     * const aIBusinessPreferenceWithIdOnly = await prisma.aIBusinessPreference.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AIBusinessPreferenceUpdateManyAndReturnArgs>(args: SelectSubset<T, AIBusinessPreferenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AIBusinessPreferencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AIBusinessPreference.
     * @param {AIBusinessPreferenceUpsertArgs} args - Arguments to update or create a AIBusinessPreference.
     * @example
     * // Update or create a AIBusinessPreference
     * const aIBusinessPreference = await prisma.aIBusinessPreference.upsert({
     *   create: {
     *     // ... data to create a AIBusinessPreference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AIBusinessPreference we want to update
     *   }
     * })
     */
    upsert<T extends AIBusinessPreferenceUpsertArgs>(args: SelectSubset<T, AIBusinessPreferenceUpsertArgs<ExtArgs>>): Prisma__AIBusinessPreferenceClient<$Result.GetResult<Prisma.$AIBusinessPreferencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AIBusinessPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIBusinessPreferenceCountArgs} args - Arguments to filter AIBusinessPreferences to count.
     * @example
     * // Count the number of AIBusinessPreferences
     * const count = await prisma.aIBusinessPreference.count({
     *   where: {
     *     // ... the filter for the AIBusinessPreferences we want to count
     *   }
     * })
    **/
    count<T extends AIBusinessPreferenceCountArgs>(
      args?: Subset<T, AIBusinessPreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AIBusinessPreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AIBusinessPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIBusinessPreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AIBusinessPreferenceAggregateArgs>(args: Subset<T, AIBusinessPreferenceAggregateArgs>): Prisma.PrismaPromise<GetAIBusinessPreferenceAggregateType<T>>

    /**
     * Group by AIBusinessPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AIBusinessPreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AIBusinessPreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AIBusinessPreferenceGroupByArgs['orderBy'] }
        : { orderBy?: AIBusinessPreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AIBusinessPreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAIBusinessPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AIBusinessPreference model
   */
  readonly fields: AIBusinessPreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AIBusinessPreference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AIBusinessPreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AIBusinessPreference model
   */
  interface AIBusinessPreferenceFieldRefs {
    readonly id: FieldRef<"AIBusinessPreference", 'String'>
    readonly companyId: FieldRef<"AIBusinessPreference", 'String'>
    readonly businessOverview: FieldRef<"AIBusinessPreference", 'String'>
    readonly businessCulture: FieldRef<"AIBusinessPreference", 'String'>
    readonly businessValues: FieldRef<"AIBusinessPreference", 'String'>
    readonly businessMission: FieldRef<"AIBusinessPreference", 'String'>
    readonly updatedAt: FieldRef<"AIBusinessPreference", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AIBusinessPreference findUnique
   */
  export type AIBusinessPreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIBusinessPreference
     */
    select?: AIBusinessPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIBusinessPreference
     */
    omit?: AIBusinessPreferenceOmit<ExtArgs> | null
    /**
     * Filter, which AIBusinessPreference to fetch.
     */
    where: AIBusinessPreferenceWhereUniqueInput
  }

  /**
   * AIBusinessPreference findUniqueOrThrow
   */
  export type AIBusinessPreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIBusinessPreference
     */
    select?: AIBusinessPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIBusinessPreference
     */
    omit?: AIBusinessPreferenceOmit<ExtArgs> | null
    /**
     * Filter, which AIBusinessPreference to fetch.
     */
    where: AIBusinessPreferenceWhereUniqueInput
  }

  /**
   * AIBusinessPreference findFirst
   */
  export type AIBusinessPreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIBusinessPreference
     */
    select?: AIBusinessPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIBusinessPreference
     */
    omit?: AIBusinessPreferenceOmit<ExtArgs> | null
    /**
     * Filter, which AIBusinessPreference to fetch.
     */
    where?: AIBusinessPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIBusinessPreferences to fetch.
     */
    orderBy?: AIBusinessPreferenceOrderByWithRelationInput | AIBusinessPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIBusinessPreferences.
     */
    cursor?: AIBusinessPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIBusinessPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIBusinessPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIBusinessPreferences.
     */
    distinct?: AIBusinessPreferenceScalarFieldEnum | AIBusinessPreferenceScalarFieldEnum[]
  }

  /**
   * AIBusinessPreference findFirstOrThrow
   */
  export type AIBusinessPreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIBusinessPreference
     */
    select?: AIBusinessPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIBusinessPreference
     */
    omit?: AIBusinessPreferenceOmit<ExtArgs> | null
    /**
     * Filter, which AIBusinessPreference to fetch.
     */
    where?: AIBusinessPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIBusinessPreferences to fetch.
     */
    orderBy?: AIBusinessPreferenceOrderByWithRelationInput | AIBusinessPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AIBusinessPreferences.
     */
    cursor?: AIBusinessPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIBusinessPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIBusinessPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AIBusinessPreferences.
     */
    distinct?: AIBusinessPreferenceScalarFieldEnum | AIBusinessPreferenceScalarFieldEnum[]
  }

  /**
   * AIBusinessPreference findMany
   */
  export type AIBusinessPreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIBusinessPreference
     */
    select?: AIBusinessPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIBusinessPreference
     */
    omit?: AIBusinessPreferenceOmit<ExtArgs> | null
    /**
     * Filter, which AIBusinessPreferences to fetch.
     */
    where?: AIBusinessPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AIBusinessPreferences to fetch.
     */
    orderBy?: AIBusinessPreferenceOrderByWithRelationInput | AIBusinessPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AIBusinessPreferences.
     */
    cursor?: AIBusinessPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AIBusinessPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AIBusinessPreferences.
     */
    skip?: number
    distinct?: AIBusinessPreferenceScalarFieldEnum | AIBusinessPreferenceScalarFieldEnum[]
  }

  /**
   * AIBusinessPreference create
   */
  export type AIBusinessPreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIBusinessPreference
     */
    select?: AIBusinessPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIBusinessPreference
     */
    omit?: AIBusinessPreferenceOmit<ExtArgs> | null
    /**
     * The data needed to create a AIBusinessPreference.
     */
    data: XOR<AIBusinessPreferenceCreateInput, AIBusinessPreferenceUncheckedCreateInput>
  }

  /**
   * AIBusinessPreference createMany
   */
  export type AIBusinessPreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AIBusinessPreferences.
     */
    data: AIBusinessPreferenceCreateManyInput | AIBusinessPreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AIBusinessPreference createManyAndReturn
   */
  export type AIBusinessPreferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIBusinessPreference
     */
    select?: AIBusinessPreferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AIBusinessPreference
     */
    omit?: AIBusinessPreferenceOmit<ExtArgs> | null
    /**
     * The data used to create many AIBusinessPreferences.
     */
    data: AIBusinessPreferenceCreateManyInput | AIBusinessPreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AIBusinessPreference update
   */
  export type AIBusinessPreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIBusinessPreference
     */
    select?: AIBusinessPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIBusinessPreference
     */
    omit?: AIBusinessPreferenceOmit<ExtArgs> | null
    /**
     * The data needed to update a AIBusinessPreference.
     */
    data: XOR<AIBusinessPreferenceUpdateInput, AIBusinessPreferenceUncheckedUpdateInput>
    /**
     * Choose, which AIBusinessPreference to update.
     */
    where: AIBusinessPreferenceWhereUniqueInput
  }

  /**
   * AIBusinessPreference updateMany
   */
  export type AIBusinessPreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AIBusinessPreferences.
     */
    data: XOR<AIBusinessPreferenceUpdateManyMutationInput, AIBusinessPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which AIBusinessPreferences to update
     */
    where?: AIBusinessPreferenceWhereInput
    /**
     * Limit how many AIBusinessPreferences to update.
     */
    limit?: number
  }

  /**
   * AIBusinessPreference updateManyAndReturn
   */
  export type AIBusinessPreferenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIBusinessPreference
     */
    select?: AIBusinessPreferenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AIBusinessPreference
     */
    omit?: AIBusinessPreferenceOmit<ExtArgs> | null
    /**
     * The data used to update AIBusinessPreferences.
     */
    data: XOR<AIBusinessPreferenceUpdateManyMutationInput, AIBusinessPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which AIBusinessPreferences to update
     */
    where?: AIBusinessPreferenceWhereInput
    /**
     * Limit how many AIBusinessPreferences to update.
     */
    limit?: number
  }

  /**
   * AIBusinessPreference upsert
   */
  export type AIBusinessPreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIBusinessPreference
     */
    select?: AIBusinessPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIBusinessPreference
     */
    omit?: AIBusinessPreferenceOmit<ExtArgs> | null
    /**
     * The filter to search for the AIBusinessPreference to update in case it exists.
     */
    where: AIBusinessPreferenceWhereUniqueInput
    /**
     * In case the AIBusinessPreference found by the `where` argument doesn't exist, create a new AIBusinessPreference with this data.
     */
    create: XOR<AIBusinessPreferenceCreateInput, AIBusinessPreferenceUncheckedCreateInput>
    /**
     * In case the AIBusinessPreference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AIBusinessPreferenceUpdateInput, AIBusinessPreferenceUncheckedUpdateInput>
  }

  /**
   * AIBusinessPreference delete
   */
  export type AIBusinessPreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIBusinessPreference
     */
    select?: AIBusinessPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIBusinessPreference
     */
    omit?: AIBusinessPreferenceOmit<ExtArgs> | null
    /**
     * Filter which AIBusinessPreference to delete.
     */
    where: AIBusinessPreferenceWhereUniqueInput
  }

  /**
   * AIBusinessPreference deleteMany
   */
  export type AIBusinessPreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AIBusinessPreferences to delete
     */
    where?: AIBusinessPreferenceWhereInput
    /**
     * Limit how many AIBusinessPreferences to delete.
     */
    limit?: number
  }

  /**
   * AIBusinessPreference without action
   */
  export type AIBusinessPreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AIBusinessPreference
     */
    select?: AIBusinessPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AIBusinessPreference
     */
    omit?: AIBusinessPreferenceOmit<ExtArgs> | null
  }


  /**
   * Model AICommunicationPreference
   */

  export type AggregateAICommunicationPreference = {
    _count: AICommunicationPreferenceCountAggregateOutputType | null
    _min: AICommunicationPreferenceMinAggregateOutputType | null
    _max: AICommunicationPreferenceMaxAggregateOutputType | null
  }

  export type AICommunicationPreferenceMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    tone: $Enums.AITone | null
    updatedAt: Date | null
  }

  export type AICommunicationPreferenceMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    tone: $Enums.AITone | null
    updatedAt: Date | null
  }

  export type AICommunicationPreferenceCountAggregateOutputType = {
    id: number
    companyId: number
    tone: number
    blockedTeamTopics: number
    blockedCandidateTopics: number
    updatedAt: number
    _all: number
  }


  export type AICommunicationPreferenceMinAggregateInputType = {
    id?: true
    companyId?: true
    tone?: true
    updatedAt?: true
  }

  export type AICommunicationPreferenceMaxAggregateInputType = {
    id?: true
    companyId?: true
    tone?: true
    updatedAt?: true
  }

  export type AICommunicationPreferenceCountAggregateInputType = {
    id?: true
    companyId?: true
    tone?: true
    blockedTeamTopics?: true
    blockedCandidateTopics?: true
    updatedAt?: true
    _all?: true
  }

  export type AICommunicationPreferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AICommunicationPreference to aggregate.
     */
    where?: AICommunicationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AICommunicationPreferences to fetch.
     */
    orderBy?: AICommunicationPreferenceOrderByWithRelationInput | AICommunicationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AICommunicationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AICommunicationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AICommunicationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AICommunicationPreferences
    **/
    _count?: true | AICommunicationPreferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AICommunicationPreferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AICommunicationPreferenceMaxAggregateInputType
  }

  export type GetAICommunicationPreferenceAggregateType<T extends AICommunicationPreferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateAICommunicationPreference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAICommunicationPreference[P]>
      : GetScalarType<T[P], AggregateAICommunicationPreference[P]>
  }




  export type AICommunicationPreferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AICommunicationPreferenceWhereInput
    orderBy?: AICommunicationPreferenceOrderByWithAggregationInput | AICommunicationPreferenceOrderByWithAggregationInput[]
    by: AICommunicationPreferenceScalarFieldEnum[] | AICommunicationPreferenceScalarFieldEnum
    having?: AICommunicationPreferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AICommunicationPreferenceCountAggregateInputType | true
    _min?: AICommunicationPreferenceMinAggregateInputType
    _max?: AICommunicationPreferenceMaxAggregateInputType
  }

  export type AICommunicationPreferenceGroupByOutputType = {
    id: string
    companyId: string
    tone: $Enums.AITone
    blockedTeamTopics: JsonValue | null
    blockedCandidateTopics: JsonValue | null
    updatedAt: Date
    _count: AICommunicationPreferenceCountAggregateOutputType | null
    _min: AICommunicationPreferenceMinAggregateOutputType | null
    _max: AICommunicationPreferenceMaxAggregateOutputType | null
  }

  type GetAICommunicationPreferenceGroupByPayload<T extends AICommunicationPreferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AICommunicationPreferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AICommunicationPreferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AICommunicationPreferenceGroupByOutputType[P]>
            : GetScalarType<T[P], AICommunicationPreferenceGroupByOutputType[P]>
        }
      >
    >


  export type AICommunicationPreferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    tone?: boolean
    blockedTeamTopics?: boolean
    blockedCandidateTopics?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["aICommunicationPreference"]>

  export type AICommunicationPreferenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    tone?: boolean
    blockedTeamTopics?: boolean
    blockedCandidateTopics?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["aICommunicationPreference"]>

  export type AICommunicationPreferenceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    tone?: boolean
    blockedTeamTopics?: boolean
    blockedCandidateTopics?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["aICommunicationPreference"]>

  export type AICommunicationPreferenceSelectScalar = {
    id?: boolean
    companyId?: boolean
    tone?: boolean
    blockedTeamTopics?: boolean
    blockedCandidateTopics?: boolean
    updatedAt?: boolean
  }

  export type AICommunicationPreferenceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "tone" | "blockedTeamTopics" | "blockedCandidateTopics" | "updatedAt", ExtArgs["result"]["aICommunicationPreference"]>

  export type $AICommunicationPreferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AICommunicationPreference"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      tone: $Enums.AITone
      blockedTeamTopics: Prisma.JsonValue | null
      blockedCandidateTopics: Prisma.JsonValue | null
      updatedAt: Date
    }, ExtArgs["result"]["aICommunicationPreference"]>
    composites: {}
  }

  type AICommunicationPreferenceGetPayload<S extends boolean | null | undefined | AICommunicationPreferenceDefaultArgs> = $Result.GetResult<Prisma.$AICommunicationPreferencePayload, S>

  type AICommunicationPreferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AICommunicationPreferenceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AICommunicationPreferenceCountAggregateInputType | true
    }

  export interface AICommunicationPreferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AICommunicationPreference'], meta: { name: 'AICommunicationPreference' } }
    /**
     * Find zero or one AICommunicationPreference that matches the filter.
     * @param {AICommunicationPreferenceFindUniqueArgs} args - Arguments to find a AICommunicationPreference
     * @example
     * // Get one AICommunicationPreference
     * const aICommunicationPreference = await prisma.aICommunicationPreference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AICommunicationPreferenceFindUniqueArgs>(args: SelectSubset<T, AICommunicationPreferenceFindUniqueArgs<ExtArgs>>): Prisma__AICommunicationPreferenceClient<$Result.GetResult<Prisma.$AICommunicationPreferencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AICommunicationPreference that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AICommunicationPreferenceFindUniqueOrThrowArgs} args - Arguments to find a AICommunicationPreference
     * @example
     * // Get one AICommunicationPreference
     * const aICommunicationPreference = await prisma.aICommunicationPreference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AICommunicationPreferenceFindUniqueOrThrowArgs>(args: SelectSubset<T, AICommunicationPreferenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AICommunicationPreferenceClient<$Result.GetResult<Prisma.$AICommunicationPreferencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AICommunicationPreference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AICommunicationPreferenceFindFirstArgs} args - Arguments to find a AICommunicationPreference
     * @example
     * // Get one AICommunicationPreference
     * const aICommunicationPreference = await prisma.aICommunicationPreference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AICommunicationPreferenceFindFirstArgs>(args?: SelectSubset<T, AICommunicationPreferenceFindFirstArgs<ExtArgs>>): Prisma__AICommunicationPreferenceClient<$Result.GetResult<Prisma.$AICommunicationPreferencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AICommunicationPreference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AICommunicationPreferenceFindFirstOrThrowArgs} args - Arguments to find a AICommunicationPreference
     * @example
     * // Get one AICommunicationPreference
     * const aICommunicationPreference = await prisma.aICommunicationPreference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AICommunicationPreferenceFindFirstOrThrowArgs>(args?: SelectSubset<T, AICommunicationPreferenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__AICommunicationPreferenceClient<$Result.GetResult<Prisma.$AICommunicationPreferencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AICommunicationPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AICommunicationPreferenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AICommunicationPreferences
     * const aICommunicationPreferences = await prisma.aICommunicationPreference.findMany()
     * 
     * // Get first 10 AICommunicationPreferences
     * const aICommunicationPreferences = await prisma.aICommunicationPreference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aICommunicationPreferenceWithIdOnly = await prisma.aICommunicationPreference.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AICommunicationPreferenceFindManyArgs>(args?: SelectSubset<T, AICommunicationPreferenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AICommunicationPreferencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AICommunicationPreference.
     * @param {AICommunicationPreferenceCreateArgs} args - Arguments to create a AICommunicationPreference.
     * @example
     * // Create one AICommunicationPreference
     * const AICommunicationPreference = await prisma.aICommunicationPreference.create({
     *   data: {
     *     // ... data to create a AICommunicationPreference
     *   }
     * })
     * 
     */
    create<T extends AICommunicationPreferenceCreateArgs>(args: SelectSubset<T, AICommunicationPreferenceCreateArgs<ExtArgs>>): Prisma__AICommunicationPreferenceClient<$Result.GetResult<Prisma.$AICommunicationPreferencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AICommunicationPreferences.
     * @param {AICommunicationPreferenceCreateManyArgs} args - Arguments to create many AICommunicationPreferences.
     * @example
     * // Create many AICommunicationPreferences
     * const aICommunicationPreference = await prisma.aICommunicationPreference.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AICommunicationPreferenceCreateManyArgs>(args?: SelectSubset<T, AICommunicationPreferenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AICommunicationPreferences and returns the data saved in the database.
     * @param {AICommunicationPreferenceCreateManyAndReturnArgs} args - Arguments to create many AICommunicationPreferences.
     * @example
     * // Create many AICommunicationPreferences
     * const aICommunicationPreference = await prisma.aICommunicationPreference.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AICommunicationPreferences and only return the `id`
     * const aICommunicationPreferenceWithIdOnly = await prisma.aICommunicationPreference.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AICommunicationPreferenceCreateManyAndReturnArgs>(args?: SelectSubset<T, AICommunicationPreferenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AICommunicationPreferencePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AICommunicationPreference.
     * @param {AICommunicationPreferenceDeleteArgs} args - Arguments to delete one AICommunicationPreference.
     * @example
     * // Delete one AICommunicationPreference
     * const AICommunicationPreference = await prisma.aICommunicationPreference.delete({
     *   where: {
     *     // ... filter to delete one AICommunicationPreference
     *   }
     * })
     * 
     */
    delete<T extends AICommunicationPreferenceDeleteArgs>(args: SelectSubset<T, AICommunicationPreferenceDeleteArgs<ExtArgs>>): Prisma__AICommunicationPreferenceClient<$Result.GetResult<Prisma.$AICommunicationPreferencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AICommunicationPreference.
     * @param {AICommunicationPreferenceUpdateArgs} args - Arguments to update one AICommunicationPreference.
     * @example
     * // Update one AICommunicationPreference
     * const aICommunicationPreference = await prisma.aICommunicationPreference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AICommunicationPreferenceUpdateArgs>(args: SelectSubset<T, AICommunicationPreferenceUpdateArgs<ExtArgs>>): Prisma__AICommunicationPreferenceClient<$Result.GetResult<Prisma.$AICommunicationPreferencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AICommunicationPreferences.
     * @param {AICommunicationPreferenceDeleteManyArgs} args - Arguments to filter AICommunicationPreferences to delete.
     * @example
     * // Delete a few AICommunicationPreferences
     * const { count } = await prisma.aICommunicationPreference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AICommunicationPreferenceDeleteManyArgs>(args?: SelectSubset<T, AICommunicationPreferenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AICommunicationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AICommunicationPreferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AICommunicationPreferences
     * const aICommunicationPreference = await prisma.aICommunicationPreference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AICommunicationPreferenceUpdateManyArgs>(args: SelectSubset<T, AICommunicationPreferenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AICommunicationPreferences and returns the data updated in the database.
     * @param {AICommunicationPreferenceUpdateManyAndReturnArgs} args - Arguments to update many AICommunicationPreferences.
     * @example
     * // Update many AICommunicationPreferences
     * const aICommunicationPreference = await prisma.aICommunicationPreference.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AICommunicationPreferences and only return the `id`
     * const aICommunicationPreferenceWithIdOnly = await prisma.aICommunicationPreference.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AICommunicationPreferenceUpdateManyAndReturnArgs>(args: SelectSubset<T, AICommunicationPreferenceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AICommunicationPreferencePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AICommunicationPreference.
     * @param {AICommunicationPreferenceUpsertArgs} args - Arguments to update or create a AICommunicationPreference.
     * @example
     * // Update or create a AICommunicationPreference
     * const aICommunicationPreference = await prisma.aICommunicationPreference.upsert({
     *   create: {
     *     // ... data to create a AICommunicationPreference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AICommunicationPreference we want to update
     *   }
     * })
     */
    upsert<T extends AICommunicationPreferenceUpsertArgs>(args: SelectSubset<T, AICommunicationPreferenceUpsertArgs<ExtArgs>>): Prisma__AICommunicationPreferenceClient<$Result.GetResult<Prisma.$AICommunicationPreferencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AICommunicationPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AICommunicationPreferenceCountArgs} args - Arguments to filter AICommunicationPreferences to count.
     * @example
     * // Count the number of AICommunicationPreferences
     * const count = await prisma.aICommunicationPreference.count({
     *   where: {
     *     // ... the filter for the AICommunicationPreferences we want to count
     *   }
     * })
    **/
    count<T extends AICommunicationPreferenceCountArgs>(
      args?: Subset<T, AICommunicationPreferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AICommunicationPreferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AICommunicationPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AICommunicationPreferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AICommunicationPreferenceAggregateArgs>(args: Subset<T, AICommunicationPreferenceAggregateArgs>): Prisma.PrismaPromise<GetAICommunicationPreferenceAggregateType<T>>

    /**
     * Group by AICommunicationPreference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AICommunicationPreferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AICommunicationPreferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AICommunicationPreferenceGroupByArgs['orderBy'] }
        : { orderBy?: AICommunicationPreferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AICommunicationPreferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAICommunicationPreferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AICommunicationPreference model
   */
  readonly fields: AICommunicationPreferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AICommunicationPreference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AICommunicationPreferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AICommunicationPreference model
   */
  interface AICommunicationPreferenceFieldRefs {
    readonly id: FieldRef<"AICommunicationPreference", 'String'>
    readonly companyId: FieldRef<"AICommunicationPreference", 'String'>
    readonly tone: FieldRef<"AICommunicationPreference", 'AITone'>
    readonly blockedTeamTopics: FieldRef<"AICommunicationPreference", 'Json'>
    readonly blockedCandidateTopics: FieldRef<"AICommunicationPreference", 'Json'>
    readonly updatedAt: FieldRef<"AICommunicationPreference", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AICommunicationPreference findUnique
   */
  export type AICommunicationPreferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICommunicationPreference
     */
    select?: AICommunicationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AICommunicationPreference
     */
    omit?: AICommunicationPreferenceOmit<ExtArgs> | null
    /**
     * Filter, which AICommunicationPreference to fetch.
     */
    where: AICommunicationPreferenceWhereUniqueInput
  }

  /**
   * AICommunicationPreference findUniqueOrThrow
   */
  export type AICommunicationPreferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICommunicationPreference
     */
    select?: AICommunicationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AICommunicationPreference
     */
    omit?: AICommunicationPreferenceOmit<ExtArgs> | null
    /**
     * Filter, which AICommunicationPreference to fetch.
     */
    where: AICommunicationPreferenceWhereUniqueInput
  }

  /**
   * AICommunicationPreference findFirst
   */
  export type AICommunicationPreferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICommunicationPreference
     */
    select?: AICommunicationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AICommunicationPreference
     */
    omit?: AICommunicationPreferenceOmit<ExtArgs> | null
    /**
     * Filter, which AICommunicationPreference to fetch.
     */
    where?: AICommunicationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AICommunicationPreferences to fetch.
     */
    orderBy?: AICommunicationPreferenceOrderByWithRelationInput | AICommunicationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AICommunicationPreferences.
     */
    cursor?: AICommunicationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AICommunicationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AICommunicationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AICommunicationPreferences.
     */
    distinct?: AICommunicationPreferenceScalarFieldEnum | AICommunicationPreferenceScalarFieldEnum[]
  }

  /**
   * AICommunicationPreference findFirstOrThrow
   */
  export type AICommunicationPreferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICommunicationPreference
     */
    select?: AICommunicationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AICommunicationPreference
     */
    omit?: AICommunicationPreferenceOmit<ExtArgs> | null
    /**
     * Filter, which AICommunicationPreference to fetch.
     */
    where?: AICommunicationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AICommunicationPreferences to fetch.
     */
    orderBy?: AICommunicationPreferenceOrderByWithRelationInput | AICommunicationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AICommunicationPreferences.
     */
    cursor?: AICommunicationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AICommunicationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AICommunicationPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AICommunicationPreferences.
     */
    distinct?: AICommunicationPreferenceScalarFieldEnum | AICommunicationPreferenceScalarFieldEnum[]
  }

  /**
   * AICommunicationPreference findMany
   */
  export type AICommunicationPreferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICommunicationPreference
     */
    select?: AICommunicationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AICommunicationPreference
     */
    omit?: AICommunicationPreferenceOmit<ExtArgs> | null
    /**
     * Filter, which AICommunicationPreferences to fetch.
     */
    where?: AICommunicationPreferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AICommunicationPreferences to fetch.
     */
    orderBy?: AICommunicationPreferenceOrderByWithRelationInput | AICommunicationPreferenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AICommunicationPreferences.
     */
    cursor?: AICommunicationPreferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AICommunicationPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AICommunicationPreferences.
     */
    skip?: number
    distinct?: AICommunicationPreferenceScalarFieldEnum | AICommunicationPreferenceScalarFieldEnum[]
  }

  /**
   * AICommunicationPreference create
   */
  export type AICommunicationPreferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICommunicationPreference
     */
    select?: AICommunicationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AICommunicationPreference
     */
    omit?: AICommunicationPreferenceOmit<ExtArgs> | null
    /**
     * The data needed to create a AICommunicationPreference.
     */
    data: XOR<AICommunicationPreferenceCreateInput, AICommunicationPreferenceUncheckedCreateInput>
  }

  /**
   * AICommunicationPreference createMany
   */
  export type AICommunicationPreferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AICommunicationPreferences.
     */
    data: AICommunicationPreferenceCreateManyInput | AICommunicationPreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AICommunicationPreference createManyAndReturn
   */
  export type AICommunicationPreferenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICommunicationPreference
     */
    select?: AICommunicationPreferenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AICommunicationPreference
     */
    omit?: AICommunicationPreferenceOmit<ExtArgs> | null
    /**
     * The data used to create many AICommunicationPreferences.
     */
    data: AICommunicationPreferenceCreateManyInput | AICommunicationPreferenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AICommunicationPreference update
   */
  export type AICommunicationPreferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICommunicationPreference
     */
    select?: AICommunicationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AICommunicationPreference
     */
    omit?: AICommunicationPreferenceOmit<ExtArgs> | null
    /**
     * The data needed to update a AICommunicationPreference.
     */
    data: XOR<AICommunicationPreferenceUpdateInput, AICommunicationPreferenceUncheckedUpdateInput>
    /**
     * Choose, which AICommunicationPreference to update.
     */
    where: AICommunicationPreferenceWhereUniqueInput
  }

  /**
   * AICommunicationPreference updateMany
   */
  export type AICommunicationPreferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AICommunicationPreferences.
     */
    data: XOR<AICommunicationPreferenceUpdateManyMutationInput, AICommunicationPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which AICommunicationPreferences to update
     */
    where?: AICommunicationPreferenceWhereInput
    /**
     * Limit how many AICommunicationPreferences to update.
     */
    limit?: number
  }

  /**
   * AICommunicationPreference updateManyAndReturn
   */
  export type AICommunicationPreferenceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICommunicationPreference
     */
    select?: AICommunicationPreferenceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AICommunicationPreference
     */
    omit?: AICommunicationPreferenceOmit<ExtArgs> | null
    /**
     * The data used to update AICommunicationPreferences.
     */
    data: XOR<AICommunicationPreferenceUpdateManyMutationInput, AICommunicationPreferenceUncheckedUpdateManyInput>
    /**
     * Filter which AICommunicationPreferences to update
     */
    where?: AICommunicationPreferenceWhereInput
    /**
     * Limit how many AICommunicationPreferences to update.
     */
    limit?: number
  }

  /**
   * AICommunicationPreference upsert
   */
  export type AICommunicationPreferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICommunicationPreference
     */
    select?: AICommunicationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AICommunicationPreference
     */
    omit?: AICommunicationPreferenceOmit<ExtArgs> | null
    /**
     * The filter to search for the AICommunicationPreference to update in case it exists.
     */
    where: AICommunicationPreferenceWhereUniqueInput
    /**
     * In case the AICommunicationPreference found by the `where` argument doesn't exist, create a new AICommunicationPreference with this data.
     */
    create: XOR<AICommunicationPreferenceCreateInput, AICommunicationPreferenceUncheckedCreateInput>
    /**
     * In case the AICommunicationPreference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AICommunicationPreferenceUpdateInput, AICommunicationPreferenceUncheckedUpdateInput>
  }

  /**
   * AICommunicationPreference delete
   */
  export type AICommunicationPreferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICommunicationPreference
     */
    select?: AICommunicationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AICommunicationPreference
     */
    omit?: AICommunicationPreferenceOmit<ExtArgs> | null
    /**
     * Filter which AICommunicationPreference to delete.
     */
    where: AICommunicationPreferenceWhereUniqueInput
  }

  /**
   * AICommunicationPreference deleteMany
   */
  export type AICommunicationPreferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AICommunicationPreferences to delete
     */
    where?: AICommunicationPreferenceWhereInput
    /**
     * Limit how many AICommunicationPreferences to delete.
     */
    limit?: number
  }

  /**
   * AICommunicationPreference without action
   */
  export type AICommunicationPreferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AICommunicationPreference
     */
    select?: AICommunicationPreferenceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AICommunicationPreference
     */
    omit?: AICommunicationPreferenceOmit<ExtArgs> | null
  }


  /**
   * Model CalendarIntegration
   */

  export type AggregateCalendarIntegration = {
    _count: CalendarIntegrationCountAggregateOutputType | null
    _min: CalendarIntegrationMinAggregateOutputType | null
    _max: CalendarIntegrationMaxAggregateOutputType | null
  }

  export type CalendarIntegrationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    provider: $Enums.CalendarProvider | null
    accessToken: string | null
    refreshToken: string | null
    expiresAt: Date | null
    scopes: string | null
    calendarId: string | null
    connectedAt: Date | null
    updatedAt: Date | null
  }

  export type CalendarIntegrationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    provider: $Enums.CalendarProvider | null
    accessToken: string | null
    refreshToken: string | null
    expiresAt: Date | null
    scopes: string | null
    calendarId: string | null
    connectedAt: Date | null
    updatedAt: Date | null
  }

  export type CalendarIntegrationCountAggregateOutputType = {
    id: number
    userId: number
    provider: number
    accessToken: number
    refreshToken: number
    expiresAt: number
    scopes: number
    calendarId: number
    connectedAt: number
    updatedAt: number
    _all: number
  }


  export type CalendarIntegrationMinAggregateInputType = {
    id?: true
    userId?: true
    provider?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    scopes?: true
    calendarId?: true
    connectedAt?: true
    updatedAt?: true
  }

  export type CalendarIntegrationMaxAggregateInputType = {
    id?: true
    userId?: true
    provider?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    scopes?: true
    calendarId?: true
    connectedAt?: true
    updatedAt?: true
  }

  export type CalendarIntegrationCountAggregateInputType = {
    id?: true
    userId?: true
    provider?: true
    accessToken?: true
    refreshToken?: true
    expiresAt?: true
    scopes?: true
    calendarId?: true
    connectedAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CalendarIntegrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalendarIntegration to aggregate.
     */
    where?: CalendarIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarIntegrations to fetch.
     */
    orderBy?: CalendarIntegrationOrderByWithRelationInput | CalendarIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CalendarIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarIntegrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CalendarIntegrations
    **/
    _count?: true | CalendarIntegrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CalendarIntegrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CalendarIntegrationMaxAggregateInputType
  }

  export type GetCalendarIntegrationAggregateType<T extends CalendarIntegrationAggregateArgs> = {
        [P in keyof T & keyof AggregateCalendarIntegration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCalendarIntegration[P]>
      : GetScalarType<T[P], AggregateCalendarIntegration[P]>
  }




  export type CalendarIntegrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalendarIntegrationWhereInput
    orderBy?: CalendarIntegrationOrderByWithAggregationInput | CalendarIntegrationOrderByWithAggregationInput[]
    by: CalendarIntegrationScalarFieldEnum[] | CalendarIntegrationScalarFieldEnum
    having?: CalendarIntegrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CalendarIntegrationCountAggregateInputType | true
    _min?: CalendarIntegrationMinAggregateInputType
    _max?: CalendarIntegrationMaxAggregateInputType
  }

  export type CalendarIntegrationGroupByOutputType = {
    id: string
    userId: string
    provider: $Enums.CalendarProvider
    accessToken: string
    refreshToken: string | null
    expiresAt: Date | null
    scopes: string | null
    calendarId: string | null
    connectedAt: Date
    updatedAt: Date
    _count: CalendarIntegrationCountAggregateOutputType | null
    _min: CalendarIntegrationMinAggregateOutputType | null
    _max: CalendarIntegrationMaxAggregateOutputType | null
  }

  type GetCalendarIntegrationGroupByPayload<T extends CalendarIntegrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CalendarIntegrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CalendarIntegrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CalendarIntegrationGroupByOutputType[P]>
            : GetScalarType<T[P], CalendarIntegrationGroupByOutputType[P]>
        }
      >
    >


  export type CalendarIntegrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    provider?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    scopes?: boolean
    calendarId?: boolean
    connectedAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["calendarIntegration"]>

  export type CalendarIntegrationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    provider?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    scopes?: boolean
    calendarId?: boolean
    connectedAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["calendarIntegration"]>

  export type CalendarIntegrationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    provider?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    scopes?: boolean
    calendarId?: boolean
    connectedAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["calendarIntegration"]>

  export type CalendarIntegrationSelectScalar = {
    id?: boolean
    userId?: boolean
    provider?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    scopes?: boolean
    calendarId?: boolean
    connectedAt?: boolean
    updatedAt?: boolean
  }

  export type CalendarIntegrationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "provider" | "accessToken" | "refreshToken" | "expiresAt" | "scopes" | "calendarId" | "connectedAt" | "updatedAt", ExtArgs["result"]["calendarIntegration"]>
  export type CalendarIntegrationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CalendarIntegrationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CalendarIntegrationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CalendarIntegrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CalendarIntegration"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      provider: $Enums.CalendarProvider
      accessToken: string
      refreshToken: string | null
      expiresAt: Date | null
      scopes: string | null
      calendarId: string | null
      connectedAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["calendarIntegration"]>
    composites: {}
  }

  type CalendarIntegrationGetPayload<S extends boolean | null | undefined | CalendarIntegrationDefaultArgs> = $Result.GetResult<Prisma.$CalendarIntegrationPayload, S>

  type CalendarIntegrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CalendarIntegrationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CalendarIntegrationCountAggregateInputType | true
    }

  export interface CalendarIntegrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CalendarIntegration'], meta: { name: 'CalendarIntegration' } }
    /**
     * Find zero or one CalendarIntegration that matches the filter.
     * @param {CalendarIntegrationFindUniqueArgs} args - Arguments to find a CalendarIntegration
     * @example
     * // Get one CalendarIntegration
     * const calendarIntegration = await prisma.calendarIntegration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CalendarIntegrationFindUniqueArgs>(args: SelectSubset<T, CalendarIntegrationFindUniqueArgs<ExtArgs>>): Prisma__CalendarIntegrationClient<$Result.GetResult<Prisma.$CalendarIntegrationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CalendarIntegration that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CalendarIntegrationFindUniqueOrThrowArgs} args - Arguments to find a CalendarIntegration
     * @example
     * // Get one CalendarIntegration
     * const calendarIntegration = await prisma.calendarIntegration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CalendarIntegrationFindUniqueOrThrowArgs>(args: SelectSubset<T, CalendarIntegrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CalendarIntegrationClient<$Result.GetResult<Prisma.$CalendarIntegrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalendarIntegration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarIntegrationFindFirstArgs} args - Arguments to find a CalendarIntegration
     * @example
     * // Get one CalendarIntegration
     * const calendarIntegration = await prisma.calendarIntegration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CalendarIntegrationFindFirstArgs>(args?: SelectSubset<T, CalendarIntegrationFindFirstArgs<ExtArgs>>): Prisma__CalendarIntegrationClient<$Result.GetResult<Prisma.$CalendarIntegrationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalendarIntegration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarIntegrationFindFirstOrThrowArgs} args - Arguments to find a CalendarIntegration
     * @example
     * // Get one CalendarIntegration
     * const calendarIntegration = await prisma.calendarIntegration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CalendarIntegrationFindFirstOrThrowArgs>(args?: SelectSubset<T, CalendarIntegrationFindFirstOrThrowArgs<ExtArgs>>): Prisma__CalendarIntegrationClient<$Result.GetResult<Prisma.$CalendarIntegrationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CalendarIntegrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarIntegrationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CalendarIntegrations
     * const calendarIntegrations = await prisma.calendarIntegration.findMany()
     * 
     * // Get first 10 CalendarIntegrations
     * const calendarIntegrations = await prisma.calendarIntegration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const calendarIntegrationWithIdOnly = await prisma.calendarIntegration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CalendarIntegrationFindManyArgs>(args?: SelectSubset<T, CalendarIntegrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarIntegrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CalendarIntegration.
     * @param {CalendarIntegrationCreateArgs} args - Arguments to create a CalendarIntegration.
     * @example
     * // Create one CalendarIntegration
     * const CalendarIntegration = await prisma.calendarIntegration.create({
     *   data: {
     *     // ... data to create a CalendarIntegration
     *   }
     * })
     * 
     */
    create<T extends CalendarIntegrationCreateArgs>(args: SelectSubset<T, CalendarIntegrationCreateArgs<ExtArgs>>): Prisma__CalendarIntegrationClient<$Result.GetResult<Prisma.$CalendarIntegrationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CalendarIntegrations.
     * @param {CalendarIntegrationCreateManyArgs} args - Arguments to create many CalendarIntegrations.
     * @example
     * // Create many CalendarIntegrations
     * const calendarIntegration = await prisma.calendarIntegration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CalendarIntegrationCreateManyArgs>(args?: SelectSubset<T, CalendarIntegrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CalendarIntegrations and returns the data saved in the database.
     * @param {CalendarIntegrationCreateManyAndReturnArgs} args - Arguments to create many CalendarIntegrations.
     * @example
     * // Create many CalendarIntegrations
     * const calendarIntegration = await prisma.calendarIntegration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CalendarIntegrations and only return the `id`
     * const calendarIntegrationWithIdOnly = await prisma.calendarIntegration.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CalendarIntegrationCreateManyAndReturnArgs>(args?: SelectSubset<T, CalendarIntegrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarIntegrationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CalendarIntegration.
     * @param {CalendarIntegrationDeleteArgs} args - Arguments to delete one CalendarIntegration.
     * @example
     * // Delete one CalendarIntegration
     * const CalendarIntegration = await prisma.calendarIntegration.delete({
     *   where: {
     *     // ... filter to delete one CalendarIntegration
     *   }
     * })
     * 
     */
    delete<T extends CalendarIntegrationDeleteArgs>(args: SelectSubset<T, CalendarIntegrationDeleteArgs<ExtArgs>>): Prisma__CalendarIntegrationClient<$Result.GetResult<Prisma.$CalendarIntegrationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CalendarIntegration.
     * @param {CalendarIntegrationUpdateArgs} args - Arguments to update one CalendarIntegration.
     * @example
     * // Update one CalendarIntegration
     * const calendarIntegration = await prisma.calendarIntegration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CalendarIntegrationUpdateArgs>(args: SelectSubset<T, CalendarIntegrationUpdateArgs<ExtArgs>>): Prisma__CalendarIntegrationClient<$Result.GetResult<Prisma.$CalendarIntegrationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CalendarIntegrations.
     * @param {CalendarIntegrationDeleteManyArgs} args - Arguments to filter CalendarIntegrations to delete.
     * @example
     * // Delete a few CalendarIntegrations
     * const { count } = await prisma.calendarIntegration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CalendarIntegrationDeleteManyArgs>(args?: SelectSubset<T, CalendarIntegrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalendarIntegrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarIntegrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CalendarIntegrations
     * const calendarIntegration = await prisma.calendarIntegration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CalendarIntegrationUpdateManyArgs>(args: SelectSubset<T, CalendarIntegrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalendarIntegrations and returns the data updated in the database.
     * @param {CalendarIntegrationUpdateManyAndReturnArgs} args - Arguments to update many CalendarIntegrations.
     * @example
     * // Update many CalendarIntegrations
     * const calendarIntegration = await prisma.calendarIntegration.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CalendarIntegrations and only return the `id`
     * const calendarIntegrationWithIdOnly = await prisma.calendarIntegration.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CalendarIntegrationUpdateManyAndReturnArgs>(args: SelectSubset<T, CalendarIntegrationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarIntegrationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CalendarIntegration.
     * @param {CalendarIntegrationUpsertArgs} args - Arguments to update or create a CalendarIntegration.
     * @example
     * // Update or create a CalendarIntegration
     * const calendarIntegration = await prisma.calendarIntegration.upsert({
     *   create: {
     *     // ... data to create a CalendarIntegration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CalendarIntegration we want to update
     *   }
     * })
     */
    upsert<T extends CalendarIntegrationUpsertArgs>(args: SelectSubset<T, CalendarIntegrationUpsertArgs<ExtArgs>>): Prisma__CalendarIntegrationClient<$Result.GetResult<Prisma.$CalendarIntegrationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CalendarIntegrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarIntegrationCountArgs} args - Arguments to filter CalendarIntegrations to count.
     * @example
     * // Count the number of CalendarIntegrations
     * const count = await prisma.calendarIntegration.count({
     *   where: {
     *     // ... the filter for the CalendarIntegrations we want to count
     *   }
     * })
    **/
    count<T extends CalendarIntegrationCountArgs>(
      args?: Subset<T, CalendarIntegrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CalendarIntegrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CalendarIntegration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarIntegrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CalendarIntegrationAggregateArgs>(args: Subset<T, CalendarIntegrationAggregateArgs>): Prisma.PrismaPromise<GetCalendarIntegrationAggregateType<T>>

    /**
     * Group by CalendarIntegration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarIntegrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CalendarIntegrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CalendarIntegrationGroupByArgs['orderBy'] }
        : { orderBy?: CalendarIntegrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CalendarIntegrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCalendarIntegrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CalendarIntegration model
   */
  readonly fields: CalendarIntegrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CalendarIntegration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CalendarIntegrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CalendarIntegration model
   */
  interface CalendarIntegrationFieldRefs {
    readonly id: FieldRef<"CalendarIntegration", 'String'>
    readonly userId: FieldRef<"CalendarIntegration", 'String'>
    readonly provider: FieldRef<"CalendarIntegration", 'CalendarProvider'>
    readonly accessToken: FieldRef<"CalendarIntegration", 'String'>
    readonly refreshToken: FieldRef<"CalendarIntegration", 'String'>
    readonly expiresAt: FieldRef<"CalendarIntegration", 'DateTime'>
    readonly scopes: FieldRef<"CalendarIntegration", 'String'>
    readonly calendarId: FieldRef<"CalendarIntegration", 'String'>
    readonly connectedAt: FieldRef<"CalendarIntegration", 'DateTime'>
    readonly updatedAt: FieldRef<"CalendarIntegration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CalendarIntegration findUnique
   */
  export type CalendarIntegrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarIntegration
     */
    select?: CalendarIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarIntegration
     */
    omit?: CalendarIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which CalendarIntegration to fetch.
     */
    where: CalendarIntegrationWhereUniqueInput
  }

  /**
   * CalendarIntegration findUniqueOrThrow
   */
  export type CalendarIntegrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarIntegration
     */
    select?: CalendarIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarIntegration
     */
    omit?: CalendarIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which CalendarIntegration to fetch.
     */
    where: CalendarIntegrationWhereUniqueInput
  }

  /**
   * CalendarIntegration findFirst
   */
  export type CalendarIntegrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarIntegration
     */
    select?: CalendarIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarIntegration
     */
    omit?: CalendarIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which CalendarIntegration to fetch.
     */
    where?: CalendarIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarIntegrations to fetch.
     */
    orderBy?: CalendarIntegrationOrderByWithRelationInput | CalendarIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalendarIntegrations.
     */
    cursor?: CalendarIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarIntegrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalendarIntegrations.
     */
    distinct?: CalendarIntegrationScalarFieldEnum | CalendarIntegrationScalarFieldEnum[]
  }

  /**
   * CalendarIntegration findFirstOrThrow
   */
  export type CalendarIntegrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarIntegration
     */
    select?: CalendarIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarIntegration
     */
    omit?: CalendarIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which CalendarIntegration to fetch.
     */
    where?: CalendarIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarIntegrations to fetch.
     */
    orderBy?: CalendarIntegrationOrderByWithRelationInput | CalendarIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalendarIntegrations.
     */
    cursor?: CalendarIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarIntegrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalendarIntegrations.
     */
    distinct?: CalendarIntegrationScalarFieldEnum | CalendarIntegrationScalarFieldEnum[]
  }

  /**
   * CalendarIntegration findMany
   */
  export type CalendarIntegrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarIntegration
     */
    select?: CalendarIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarIntegration
     */
    omit?: CalendarIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which CalendarIntegrations to fetch.
     */
    where?: CalendarIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarIntegrations to fetch.
     */
    orderBy?: CalendarIntegrationOrderByWithRelationInput | CalendarIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CalendarIntegrations.
     */
    cursor?: CalendarIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarIntegrations.
     */
    skip?: number
    distinct?: CalendarIntegrationScalarFieldEnum | CalendarIntegrationScalarFieldEnum[]
  }

  /**
   * CalendarIntegration create
   */
  export type CalendarIntegrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarIntegration
     */
    select?: CalendarIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarIntegration
     */
    omit?: CalendarIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarIntegrationInclude<ExtArgs> | null
    /**
     * The data needed to create a CalendarIntegration.
     */
    data: XOR<CalendarIntegrationCreateInput, CalendarIntegrationUncheckedCreateInput>
  }

  /**
   * CalendarIntegration createMany
   */
  export type CalendarIntegrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CalendarIntegrations.
     */
    data: CalendarIntegrationCreateManyInput | CalendarIntegrationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CalendarIntegration createManyAndReturn
   */
  export type CalendarIntegrationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarIntegration
     */
    select?: CalendarIntegrationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarIntegration
     */
    omit?: CalendarIntegrationOmit<ExtArgs> | null
    /**
     * The data used to create many CalendarIntegrations.
     */
    data: CalendarIntegrationCreateManyInput | CalendarIntegrationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarIntegrationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CalendarIntegration update
   */
  export type CalendarIntegrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarIntegration
     */
    select?: CalendarIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarIntegration
     */
    omit?: CalendarIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarIntegrationInclude<ExtArgs> | null
    /**
     * The data needed to update a CalendarIntegration.
     */
    data: XOR<CalendarIntegrationUpdateInput, CalendarIntegrationUncheckedUpdateInput>
    /**
     * Choose, which CalendarIntegration to update.
     */
    where: CalendarIntegrationWhereUniqueInput
  }

  /**
   * CalendarIntegration updateMany
   */
  export type CalendarIntegrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CalendarIntegrations.
     */
    data: XOR<CalendarIntegrationUpdateManyMutationInput, CalendarIntegrationUncheckedUpdateManyInput>
    /**
     * Filter which CalendarIntegrations to update
     */
    where?: CalendarIntegrationWhereInput
    /**
     * Limit how many CalendarIntegrations to update.
     */
    limit?: number
  }

  /**
   * CalendarIntegration updateManyAndReturn
   */
  export type CalendarIntegrationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarIntegration
     */
    select?: CalendarIntegrationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarIntegration
     */
    omit?: CalendarIntegrationOmit<ExtArgs> | null
    /**
     * The data used to update CalendarIntegrations.
     */
    data: XOR<CalendarIntegrationUpdateManyMutationInput, CalendarIntegrationUncheckedUpdateManyInput>
    /**
     * Filter which CalendarIntegrations to update
     */
    where?: CalendarIntegrationWhereInput
    /**
     * Limit how many CalendarIntegrations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarIntegrationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CalendarIntegration upsert
   */
  export type CalendarIntegrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarIntegration
     */
    select?: CalendarIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarIntegration
     */
    omit?: CalendarIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarIntegrationInclude<ExtArgs> | null
    /**
     * The filter to search for the CalendarIntegration to update in case it exists.
     */
    where: CalendarIntegrationWhereUniqueInput
    /**
     * In case the CalendarIntegration found by the `where` argument doesn't exist, create a new CalendarIntegration with this data.
     */
    create: XOR<CalendarIntegrationCreateInput, CalendarIntegrationUncheckedCreateInput>
    /**
     * In case the CalendarIntegration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CalendarIntegrationUpdateInput, CalendarIntegrationUncheckedUpdateInput>
  }

  /**
   * CalendarIntegration delete
   */
  export type CalendarIntegrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarIntegration
     */
    select?: CalendarIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarIntegration
     */
    omit?: CalendarIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarIntegrationInclude<ExtArgs> | null
    /**
     * Filter which CalendarIntegration to delete.
     */
    where: CalendarIntegrationWhereUniqueInput
  }

  /**
   * CalendarIntegration deleteMany
   */
  export type CalendarIntegrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalendarIntegrations to delete
     */
    where?: CalendarIntegrationWhereInput
    /**
     * Limit how many CalendarIntegrations to delete.
     */
    limit?: number
  }

  /**
   * CalendarIntegration without action
   */
  export type CalendarIntegrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarIntegration
     */
    select?: CalendarIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarIntegration
     */
    omit?: CalendarIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CalendarIntegrationInclude<ExtArgs> | null
  }


  /**
   * Model JobBoardIntegration
   */

  export type AggregateJobBoardIntegration = {
    _count: JobBoardIntegrationCountAggregateOutputType | null
    _min: JobBoardIntegrationMinAggregateOutputType | null
    _max: JobBoardIntegrationMaxAggregateOutputType | null
  }

  export type JobBoardIntegrationMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    boardName: string | null
    apiKey: string | null
    isEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobBoardIntegrationMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    boardName: string | null
    apiKey: string | null
    isEnabled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobBoardIntegrationCountAggregateOutputType = {
    id: number
    companyId: number
    boardName: number
    apiKey: number
    config: number
    isEnabled: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobBoardIntegrationMinAggregateInputType = {
    id?: true
    companyId?: true
    boardName?: true
    apiKey?: true
    isEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobBoardIntegrationMaxAggregateInputType = {
    id?: true
    companyId?: true
    boardName?: true
    apiKey?: true
    isEnabled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobBoardIntegrationCountAggregateInputType = {
    id?: true
    companyId?: true
    boardName?: true
    apiKey?: true
    config?: true
    isEnabled?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobBoardIntegrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobBoardIntegration to aggregate.
     */
    where?: JobBoardIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobBoardIntegrations to fetch.
     */
    orderBy?: JobBoardIntegrationOrderByWithRelationInput | JobBoardIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobBoardIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobBoardIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobBoardIntegrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobBoardIntegrations
    **/
    _count?: true | JobBoardIntegrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobBoardIntegrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobBoardIntegrationMaxAggregateInputType
  }

  export type GetJobBoardIntegrationAggregateType<T extends JobBoardIntegrationAggregateArgs> = {
        [P in keyof T & keyof AggregateJobBoardIntegration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobBoardIntegration[P]>
      : GetScalarType<T[P], AggregateJobBoardIntegration[P]>
  }




  export type JobBoardIntegrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobBoardIntegrationWhereInput
    orderBy?: JobBoardIntegrationOrderByWithAggregationInput | JobBoardIntegrationOrderByWithAggregationInput[]
    by: JobBoardIntegrationScalarFieldEnum[] | JobBoardIntegrationScalarFieldEnum
    having?: JobBoardIntegrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobBoardIntegrationCountAggregateInputType | true
    _min?: JobBoardIntegrationMinAggregateInputType
    _max?: JobBoardIntegrationMaxAggregateInputType
  }

  export type JobBoardIntegrationGroupByOutputType = {
    id: string
    companyId: string
    boardName: string
    apiKey: string | null
    config: JsonValue | null
    isEnabled: boolean
    createdAt: Date
    updatedAt: Date
    _count: JobBoardIntegrationCountAggregateOutputType | null
    _min: JobBoardIntegrationMinAggregateOutputType | null
    _max: JobBoardIntegrationMaxAggregateOutputType | null
  }

  type GetJobBoardIntegrationGroupByPayload<T extends JobBoardIntegrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobBoardIntegrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobBoardIntegrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobBoardIntegrationGroupByOutputType[P]>
            : GetScalarType<T[P], JobBoardIntegrationGroupByOutputType[P]>
        }
      >
    >


  export type JobBoardIntegrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    boardName?: boolean
    apiKey?: boolean
    config?: boolean
    isEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobBoardIntegration"]>

  export type JobBoardIntegrationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    boardName?: boolean
    apiKey?: boolean
    config?: boolean
    isEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobBoardIntegration"]>

  export type JobBoardIntegrationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    boardName?: boolean
    apiKey?: boolean
    config?: boolean
    isEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobBoardIntegration"]>

  export type JobBoardIntegrationSelectScalar = {
    id?: boolean
    companyId?: boolean
    boardName?: boolean
    apiKey?: boolean
    config?: boolean
    isEnabled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JobBoardIntegrationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "boardName" | "apiKey" | "config" | "isEnabled" | "createdAt" | "updatedAt", ExtArgs["result"]["jobBoardIntegration"]>
  export type JobBoardIntegrationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type JobBoardIntegrationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type JobBoardIntegrationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $JobBoardIntegrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobBoardIntegration"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      boardName: string
      apiKey: string | null
      config: Prisma.JsonValue | null
      isEnabled: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["jobBoardIntegration"]>
    composites: {}
  }

  type JobBoardIntegrationGetPayload<S extends boolean | null | undefined | JobBoardIntegrationDefaultArgs> = $Result.GetResult<Prisma.$JobBoardIntegrationPayload, S>

  type JobBoardIntegrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobBoardIntegrationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobBoardIntegrationCountAggregateInputType | true
    }

  export interface JobBoardIntegrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobBoardIntegration'], meta: { name: 'JobBoardIntegration' } }
    /**
     * Find zero or one JobBoardIntegration that matches the filter.
     * @param {JobBoardIntegrationFindUniqueArgs} args - Arguments to find a JobBoardIntegration
     * @example
     * // Get one JobBoardIntegration
     * const jobBoardIntegration = await prisma.jobBoardIntegration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobBoardIntegrationFindUniqueArgs>(args: SelectSubset<T, JobBoardIntegrationFindUniqueArgs<ExtArgs>>): Prisma__JobBoardIntegrationClient<$Result.GetResult<Prisma.$JobBoardIntegrationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobBoardIntegration that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobBoardIntegrationFindUniqueOrThrowArgs} args - Arguments to find a JobBoardIntegration
     * @example
     * // Get one JobBoardIntegration
     * const jobBoardIntegration = await prisma.jobBoardIntegration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobBoardIntegrationFindUniqueOrThrowArgs>(args: SelectSubset<T, JobBoardIntegrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobBoardIntegrationClient<$Result.GetResult<Prisma.$JobBoardIntegrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobBoardIntegration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobBoardIntegrationFindFirstArgs} args - Arguments to find a JobBoardIntegration
     * @example
     * // Get one JobBoardIntegration
     * const jobBoardIntegration = await prisma.jobBoardIntegration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobBoardIntegrationFindFirstArgs>(args?: SelectSubset<T, JobBoardIntegrationFindFirstArgs<ExtArgs>>): Prisma__JobBoardIntegrationClient<$Result.GetResult<Prisma.$JobBoardIntegrationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobBoardIntegration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobBoardIntegrationFindFirstOrThrowArgs} args - Arguments to find a JobBoardIntegration
     * @example
     * // Get one JobBoardIntegration
     * const jobBoardIntegration = await prisma.jobBoardIntegration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobBoardIntegrationFindFirstOrThrowArgs>(args?: SelectSubset<T, JobBoardIntegrationFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobBoardIntegrationClient<$Result.GetResult<Prisma.$JobBoardIntegrationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobBoardIntegrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobBoardIntegrationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobBoardIntegrations
     * const jobBoardIntegrations = await prisma.jobBoardIntegration.findMany()
     * 
     * // Get first 10 JobBoardIntegrations
     * const jobBoardIntegrations = await prisma.jobBoardIntegration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobBoardIntegrationWithIdOnly = await prisma.jobBoardIntegration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobBoardIntegrationFindManyArgs>(args?: SelectSubset<T, JobBoardIntegrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobBoardIntegrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobBoardIntegration.
     * @param {JobBoardIntegrationCreateArgs} args - Arguments to create a JobBoardIntegration.
     * @example
     * // Create one JobBoardIntegration
     * const JobBoardIntegration = await prisma.jobBoardIntegration.create({
     *   data: {
     *     // ... data to create a JobBoardIntegration
     *   }
     * })
     * 
     */
    create<T extends JobBoardIntegrationCreateArgs>(args: SelectSubset<T, JobBoardIntegrationCreateArgs<ExtArgs>>): Prisma__JobBoardIntegrationClient<$Result.GetResult<Prisma.$JobBoardIntegrationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobBoardIntegrations.
     * @param {JobBoardIntegrationCreateManyArgs} args - Arguments to create many JobBoardIntegrations.
     * @example
     * // Create many JobBoardIntegrations
     * const jobBoardIntegration = await prisma.jobBoardIntegration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobBoardIntegrationCreateManyArgs>(args?: SelectSubset<T, JobBoardIntegrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JobBoardIntegrations and returns the data saved in the database.
     * @param {JobBoardIntegrationCreateManyAndReturnArgs} args - Arguments to create many JobBoardIntegrations.
     * @example
     * // Create many JobBoardIntegrations
     * const jobBoardIntegration = await prisma.jobBoardIntegration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JobBoardIntegrations and only return the `id`
     * const jobBoardIntegrationWithIdOnly = await prisma.jobBoardIntegration.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobBoardIntegrationCreateManyAndReturnArgs>(args?: SelectSubset<T, JobBoardIntegrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobBoardIntegrationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JobBoardIntegration.
     * @param {JobBoardIntegrationDeleteArgs} args - Arguments to delete one JobBoardIntegration.
     * @example
     * // Delete one JobBoardIntegration
     * const JobBoardIntegration = await prisma.jobBoardIntegration.delete({
     *   where: {
     *     // ... filter to delete one JobBoardIntegration
     *   }
     * })
     * 
     */
    delete<T extends JobBoardIntegrationDeleteArgs>(args: SelectSubset<T, JobBoardIntegrationDeleteArgs<ExtArgs>>): Prisma__JobBoardIntegrationClient<$Result.GetResult<Prisma.$JobBoardIntegrationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobBoardIntegration.
     * @param {JobBoardIntegrationUpdateArgs} args - Arguments to update one JobBoardIntegration.
     * @example
     * // Update one JobBoardIntegration
     * const jobBoardIntegration = await prisma.jobBoardIntegration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobBoardIntegrationUpdateArgs>(args: SelectSubset<T, JobBoardIntegrationUpdateArgs<ExtArgs>>): Prisma__JobBoardIntegrationClient<$Result.GetResult<Prisma.$JobBoardIntegrationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobBoardIntegrations.
     * @param {JobBoardIntegrationDeleteManyArgs} args - Arguments to filter JobBoardIntegrations to delete.
     * @example
     * // Delete a few JobBoardIntegrations
     * const { count } = await prisma.jobBoardIntegration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobBoardIntegrationDeleteManyArgs>(args?: SelectSubset<T, JobBoardIntegrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobBoardIntegrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobBoardIntegrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobBoardIntegrations
     * const jobBoardIntegration = await prisma.jobBoardIntegration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobBoardIntegrationUpdateManyArgs>(args: SelectSubset<T, JobBoardIntegrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobBoardIntegrations and returns the data updated in the database.
     * @param {JobBoardIntegrationUpdateManyAndReturnArgs} args - Arguments to update many JobBoardIntegrations.
     * @example
     * // Update many JobBoardIntegrations
     * const jobBoardIntegration = await prisma.jobBoardIntegration.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JobBoardIntegrations and only return the `id`
     * const jobBoardIntegrationWithIdOnly = await prisma.jobBoardIntegration.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JobBoardIntegrationUpdateManyAndReturnArgs>(args: SelectSubset<T, JobBoardIntegrationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobBoardIntegrationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JobBoardIntegration.
     * @param {JobBoardIntegrationUpsertArgs} args - Arguments to update or create a JobBoardIntegration.
     * @example
     * // Update or create a JobBoardIntegration
     * const jobBoardIntegration = await prisma.jobBoardIntegration.upsert({
     *   create: {
     *     // ... data to create a JobBoardIntegration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobBoardIntegration we want to update
     *   }
     * })
     */
    upsert<T extends JobBoardIntegrationUpsertArgs>(args: SelectSubset<T, JobBoardIntegrationUpsertArgs<ExtArgs>>): Prisma__JobBoardIntegrationClient<$Result.GetResult<Prisma.$JobBoardIntegrationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobBoardIntegrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobBoardIntegrationCountArgs} args - Arguments to filter JobBoardIntegrations to count.
     * @example
     * // Count the number of JobBoardIntegrations
     * const count = await prisma.jobBoardIntegration.count({
     *   where: {
     *     // ... the filter for the JobBoardIntegrations we want to count
     *   }
     * })
    **/
    count<T extends JobBoardIntegrationCountArgs>(
      args?: Subset<T, JobBoardIntegrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobBoardIntegrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobBoardIntegration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobBoardIntegrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobBoardIntegrationAggregateArgs>(args: Subset<T, JobBoardIntegrationAggregateArgs>): Prisma.PrismaPromise<GetJobBoardIntegrationAggregateType<T>>

    /**
     * Group by JobBoardIntegration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobBoardIntegrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobBoardIntegrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobBoardIntegrationGroupByArgs['orderBy'] }
        : { orderBy?: JobBoardIntegrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobBoardIntegrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobBoardIntegrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobBoardIntegration model
   */
  readonly fields: JobBoardIntegrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobBoardIntegration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobBoardIntegrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobBoardIntegration model
   */
  interface JobBoardIntegrationFieldRefs {
    readonly id: FieldRef<"JobBoardIntegration", 'String'>
    readonly companyId: FieldRef<"JobBoardIntegration", 'String'>
    readonly boardName: FieldRef<"JobBoardIntegration", 'String'>
    readonly apiKey: FieldRef<"JobBoardIntegration", 'String'>
    readonly config: FieldRef<"JobBoardIntegration", 'Json'>
    readonly isEnabled: FieldRef<"JobBoardIntegration", 'Boolean'>
    readonly createdAt: FieldRef<"JobBoardIntegration", 'DateTime'>
    readonly updatedAt: FieldRef<"JobBoardIntegration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JobBoardIntegration findUnique
   */
  export type JobBoardIntegrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobBoardIntegration
     */
    select?: JobBoardIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobBoardIntegration
     */
    omit?: JobBoardIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobBoardIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which JobBoardIntegration to fetch.
     */
    where: JobBoardIntegrationWhereUniqueInput
  }

  /**
   * JobBoardIntegration findUniqueOrThrow
   */
  export type JobBoardIntegrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobBoardIntegration
     */
    select?: JobBoardIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobBoardIntegration
     */
    omit?: JobBoardIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobBoardIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which JobBoardIntegration to fetch.
     */
    where: JobBoardIntegrationWhereUniqueInput
  }

  /**
   * JobBoardIntegration findFirst
   */
  export type JobBoardIntegrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobBoardIntegration
     */
    select?: JobBoardIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobBoardIntegration
     */
    omit?: JobBoardIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobBoardIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which JobBoardIntegration to fetch.
     */
    where?: JobBoardIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobBoardIntegrations to fetch.
     */
    orderBy?: JobBoardIntegrationOrderByWithRelationInput | JobBoardIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobBoardIntegrations.
     */
    cursor?: JobBoardIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobBoardIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobBoardIntegrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobBoardIntegrations.
     */
    distinct?: JobBoardIntegrationScalarFieldEnum | JobBoardIntegrationScalarFieldEnum[]
  }

  /**
   * JobBoardIntegration findFirstOrThrow
   */
  export type JobBoardIntegrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobBoardIntegration
     */
    select?: JobBoardIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobBoardIntegration
     */
    omit?: JobBoardIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobBoardIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which JobBoardIntegration to fetch.
     */
    where?: JobBoardIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobBoardIntegrations to fetch.
     */
    orderBy?: JobBoardIntegrationOrderByWithRelationInput | JobBoardIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobBoardIntegrations.
     */
    cursor?: JobBoardIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobBoardIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobBoardIntegrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobBoardIntegrations.
     */
    distinct?: JobBoardIntegrationScalarFieldEnum | JobBoardIntegrationScalarFieldEnum[]
  }

  /**
   * JobBoardIntegration findMany
   */
  export type JobBoardIntegrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobBoardIntegration
     */
    select?: JobBoardIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobBoardIntegration
     */
    omit?: JobBoardIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobBoardIntegrationInclude<ExtArgs> | null
    /**
     * Filter, which JobBoardIntegrations to fetch.
     */
    where?: JobBoardIntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobBoardIntegrations to fetch.
     */
    orderBy?: JobBoardIntegrationOrderByWithRelationInput | JobBoardIntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobBoardIntegrations.
     */
    cursor?: JobBoardIntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobBoardIntegrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobBoardIntegrations.
     */
    skip?: number
    distinct?: JobBoardIntegrationScalarFieldEnum | JobBoardIntegrationScalarFieldEnum[]
  }

  /**
   * JobBoardIntegration create
   */
  export type JobBoardIntegrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobBoardIntegration
     */
    select?: JobBoardIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobBoardIntegration
     */
    omit?: JobBoardIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobBoardIntegrationInclude<ExtArgs> | null
    /**
     * The data needed to create a JobBoardIntegration.
     */
    data: XOR<JobBoardIntegrationCreateInput, JobBoardIntegrationUncheckedCreateInput>
  }

  /**
   * JobBoardIntegration createMany
   */
  export type JobBoardIntegrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobBoardIntegrations.
     */
    data: JobBoardIntegrationCreateManyInput | JobBoardIntegrationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobBoardIntegration createManyAndReturn
   */
  export type JobBoardIntegrationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobBoardIntegration
     */
    select?: JobBoardIntegrationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobBoardIntegration
     */
    omit?: JobBoardIntegrationOmit<ExtArgs> | null
    /**
     * The data used to create many JobBoardIntegrations.
     */
    data: JobBoardIntegrationCreateManyInput | JobBoardIntegrationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobBoardIntegrationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobBoardIntegration update
   */
  export type JobBoardIntegrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobBoardIntegration
     */
    select?: JobBoardIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobBoardIntegration
     */
    omit?: JobBoardIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobBoardIntegrationInclude<ExtArgs> | null
    /**
     * The data needed to update a JobBoardIntegration.
     */
    data: XOR<JobBoardIntegrationUpdateInput, JobBoardIntegrationUncheckedUpdateInput>
    /**
     * Choose, which JobBoardIntegration to update.
     */
    where: JobBoardIntegrationWhereUniqueInput
  }

  /**
   * JobBoardIntegration updateMany
   */
  export type JobBoardIntegrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobBoardIntegrations.
     */
    data: XOR<JobBoardIntegrationUpdateManyMutationInput, JobBoardIntegrationUncheckedUpdateManyInput>
    /**
     * Filter which JobBoardIntegrations to update
     */
    where?: JobBoardIntegrationWhereInput
    /**
     * Limit how many JobBoardIntegrations to update.
     */
    limit?: number
  }

  /**
   * JobBoardIntegration updateManyAndReturn
   */
  export type JobBoardIntegrationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobBoardIntegration
     */
    select?: JobBoardIntegrationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JobBoardIntegration
     */
    omit?: JobBoardIntegrationOmit<ExtArgs> | null
    /**
     * The data used to update JobBoardIntegrations.
     */
    data: XOR<JobBoardIntegrationUpdateManyMutationInput, JobBoardIntegrationUncheckedUpdateManyInput>
    /**
     * Filter which JobBoardIntegrations to update
     */
    where?: JobBoardIntegrationWhereInput
    /**
     * Limit how many JobBoardIntegrations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobBoardIntegrationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JobBoardIntegration upsert
   */
  export type JobBoardIntegrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobBoardIntegration
     */
    select?: JobBoardIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobBoardIntegration
     */
    omit?: JobBoardIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobBoardIntegrationInclude<ExtArgs> | null
    /**
     * The filter to search for the JobBoardIntegration to update in case it exists.
     */
    where: JobBoardIntegrationWhereUniqueInput
    /**
     * In case the JobBoardIntegration found by the `where` argument doesn't exist, create a new JobBoardIntegration with this data.
     */
    create: XOR<JobBoardIntegrationCreateInput, JobBoardIntegrationUncheckedCreateInput>
    /**
     * In case the JobBoardIntegration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobBoardIntegrationUpdateInput, JobBoardIntegrationUncheckedUpdateInput>
  }

  /**
   * JobBoardIntegration delete
   */
  export type JobBoardIntegrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobBoardIntegration
     */
    select?: JobBoardIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobBoardIntegration
     */
    omit?: JobBoardIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobBoardIntegrationInclude<ExtArgs> | null
    /**
     * Filter which JobBoardIntegration to delete.
     */
    where: JobBoardIntegrationWhereUniqueInput
  }

  /**
   * JobBoardIntegration deleteMany
   */
  export type JobBoardIntegrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobBoardIntegrations to delete
     */
    where?: JobBoardIntegrationWhereInput
    /**
     * Limit how many JobBoardIntegrations to delete.
     */
    limit?: number
  }

  /**
   * JobBoardIntegration without action
   */
  export type JobBoardIntegrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobBoardIntegration
     */
    select?: JobBoardIntegrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobBoardIntegration
     */
    omit?: JobBoardIntegrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobBoardIntegrationInclude<ExtArgs> | null
  }


  /**
   * Model MessageTemplate
   */

  export type AggregateMessageTemplate = {
    _count: MessageTemplateCountAggregateOutputType | null
    _min: MessageTemplateMinAggregateOutputType | null
    _max: MessageTemplateMaxAggregateOutputType | null
  }

  export type MessageTemplateMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    name: string | null
    subject: string | null
    content: string | null
    description: string | null
    isRequired: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MessageTemplateMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    name: string | null
    subject: string | null
    content: string | null
    description: string | null
    isRequired: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MessageTemplateCountAggregateOutputType = {
    id: number
    companyId: number
    name: number
    subject: number
    content: number
    description: number
    isRequired: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MessageTemplateMinAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    subject?: true
    content?: true
    description?: true
    isRequired?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MessageTemplateMaxAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    subject?: true
    content?: true
    description?: true
    isRequired?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MessageTemplateCountAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    subject?: true
    content?: true
    description?: true
    isRequired?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MessageTemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageTemplate to aggregate.
     */
    where?: MessageTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageTemplates to fetch.
     */
    orderBy?: MessageTemplateOrderByWithRelationInput | MessageTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessageTemplates
    **/
    _count?: true | MessageTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageTemplateMaxAggregateInputType
  }

  export type GetMessageTemplateAggregateType<T extends MessageTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateMessageTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessageTemplate[P]>
      : GetScalarType<T[P], AggregateMessageTemplate[P]>
  }




  export type MessageTemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageTemplateWhereInput
    orderBy?: MessageTemplateOrderByWithAggregationInput | MessageTemplateOrderByWithAggregationInput[]
    by: MessageTemplateScalarFieldEnum[] | MessageTemplateScalarFieldEnum
    having?: MessageTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageTemplateCountAggregateInputType | true
    _min?: MessageTemplateMinAggregateInputType
    _max?: MessageTemplateMaxAggregateInputType
  }

  export type MessageTemplateGroupByOutputType = {
    id: string
    companyId: string
    name: string
    subject: string
    content: string
    description: string | null
    isRequired: boolean
    createdAt: Date
    updatedAt: Date
    _count: MessageTemplateCountAggregateOutputType | null
    _min: MessageTemplateMinAggregateOutputType | null
    _max: MessageTemplateMaxAggregateOutputType | null
  }

  type GetMessageTemplateGroupByPayload<T extends MessageTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], MessageTemplateGroupByOutputType[P]>
        }
      >
    >


  export type MessageTemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    subject?: boolean
    content?: boolean
    description?: boolean
    isRequired?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageTemplate"]>

  export type MessageTemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    subject?: boolean
    content?: boolean
    description?: boolean
    isRequired?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageTemplate"]>

  export type MessageTemplateSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    subject?: boolean
    content?: boolean
    description?: boolean
    isRequired?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageTemplate"]>

  export type MessageTemplateSelectScalar = {
    id?: boolean
    companyId?: boolean
    name?: boolean
    subject?: boolean
    content?: boolean
    description?: boolean
    isRequired?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MessageTemplateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "name" | "subject" | "content" | "description" | "isRequired" | "createdAt" | "updatedAt", ExtArgs["result"]["messageTemplate"]>
  export type MessageTemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type MessageTemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type MessageTemplateIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $MessageTemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MessageTemplate"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      name: string
      subject: string
      content: string
      description: string | null
      isRequired: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["messageTemplate"]>
    composites: {}
  }

  type MessageTemplateGetPayload<S extends boolean | null | undefined | MessageTemplateDefaultArgs> = $Result.GetResult<Prisma.$MessageTemplatePayload, S>

  type MessageTemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageTemplateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageTemplateCountAggregateInputType | true
    }

  export interface MessageTemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageTemplate'], meta: { name: 'MessageTemplate' } }
    /**
     * Find zero or one MessageTemplate that matches the filter.
     * @param {MessageTemplateFindUniqueArgs} args - Arguments to find a MessageTemplate
     * @example
     * // Get one MessageTemplate
     * const messageTemplate = await prisma.messageTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageTemplateFindUniqueArgs>(args: SelectSubset<T, MessageTemplateFindUniqueArgs<ExtArgs>>): Prisma__MessageTemplateClient<$Result.GetResult<Prisma.$MessageTemplatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MessageTemplate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageTemplateFindUniqueOrThrowArgs} args - Arguments to find a MessageTemplate
     * @example
     * // Get one MessageTemplate
     * const messageTemplate = await prisma.messageTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageTemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageTemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageTemplateClient<$Result.GetResult<Prisma.$MessageTemplatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageTemplateFindFirstArgs} args - Arguments to find a MessageTemplate
     * @example
     * // Get one MessageTemplate
     * const messageTemplate = await prisma.messageTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageTemplateFindFirstArgs>(args?: SelectSubset<T, MessageTemplateFindFirstArgs<ExtArgs>>): Prisma__MessageTemplateClient<$Result.GetResult<Prisma.$MessageTemplatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageTemplate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageTemplateFindFirstOrThrowArgs} args - Arguments to find a MessageTemplate
     * @example
     * // Get one MessageTemplate
     * const messageTemplate = await prisma.messageTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageTemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageTemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageTemplateClient<$Result.GetResult<Prisma.$MessageTemplatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MessageTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageTemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessageTemplates
     * const messageTemplates = await prisma.messageTemplate.findMany()
     * 
     * // Get first 10 MessageTemplates
     * const messageTemplates = await prisma.messageTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageTemplateWithIdOnly = await prisma.messageTemplate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageTemplateFindManyArgs>(args?: SelectSubset<T, MessageTemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageTemplatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MessageTemplate.
     * @param {MessageTemplateCreateArgs} args - Arguments to create a MessageTemplate.
     * @example
     * // Create one MessageTemplate
     * const MessageTemplate = await prisma.messageTemplate.create({
     *   data: {
     *     // ... data to create a MessageTemplate
     *   }
     * })
     * 
     */
    create<T extends MessageTemplateCreateArgs>(args: SelectSubset<T, MessageTemplateCreateArgs<ExtArgs>>): Prisma__MessageTemplateClient<$Result.GetResult<Prisma.$MessageTemplatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MessageTemplates.
     * @param {MessageTemplateCreateManyArgs} args - Arguments to create many MessageTemplates.
     * @example
     * // Create many MessageTemplates
     * const messageTemplate = await prisma.messageTemplate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageTemplateCreateManyArgs>(args?: SelectSubset<T, MessageTemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MessageTemplates and returns the data saved in the database.
     * @param {MessageTemplateCreateManyAndReturnArgs} args - Arguments to create many MessageTemplates.
     * @example
     * // Create many MessageTemplates
     * const messageTemplate = await prisma.messageTemplate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MessageTemplates and only return the `id`
     * const messageTemplateWithIdOnly = await prisma.messageTemplate.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageTemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageTemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageTemplatePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MessageTemplate.
     * @param {MessageTemplateDeleteArgs} args - Arguments to delete one MessageTemplate.
     * @example
     * // Delete one MessageTemplate
     * const MessageTemplate = await prisma.messageTemplate.delete({
     *   where: {
     *     // ... filter to delete one MessageTemplate
     *   }
     * })
     * 
     */
    delete<T extends MessageTemplateDeleteArgs>(args: SelectSubset<T, MessageTemplateDeleteArgs<ExtArgs>>): Prisma__MessageTemplateClient<$Result.GetResult<Prisma.$MessageTemplatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MessageTemplate.
     * @param {MessageTemplateUpdateArgs} args - Arguments to update one MessageTemplate.
     * @example
     * // Update one MessageTemplate
     * const messageTemplate = await prisma.messageTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageTemplateUpdateArgs>(args: SelectSubset<T, MessageTemplateUpdateArgs<ExtArgs>>): Prisma__MessageTemplateClient<$Result.GetResult<Prisma.$MessageTemplatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MessageTemplates.
     * @param {MessageTemplateDeleteManyArgs} args - Arguments to filter MessageTemplates to delete.
     * @example
     * // Delete a few MessageTemplates
     * const { count } = await prisma.messageTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageTemplateDeleteManyArgs>(args?: SelectSubset<T, MessageTemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessageTemplates
     * const messageTemplate = await prisma.messageTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageTemplateUpdateManyArgs>(args: SelectSubset<T, MessageTemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageTemplates and returns the data updated in the database.
     * @param {MessageTemplateUpdateManyAndReturnArgs} args - Arguments to update many MessageTemplates.
     * @example
     * // Update many MessageTemplates
     * const messageTemplate = await prisma.messageTemplate.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MessageTemplates and only return the `id`
     * const messageTemplateWithIdOnly = await prisma.messageTemplate.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageTemplateUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageTemplateUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageTemplatePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MessageTemplate.
     * @param {MessageTemplateUpsertArgs} args - Arguments to update or create a MessageTemplate.
     * @example
     * // Update or create a MessageTemplate
     * const messageTemplate = await prisma.messageTemplate.upsert({
     *   create: {
     *     // ... data to create a MessageTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessageTemplate we want to update
     *   }
     * })
     */
    upsert<T extends MessageTemplateUpsertArgs>(args: SelectSubset<T, MessageTemplateUpsertArgs<ExtArgs>>): Prisma__MessageTemplateClient<$Result.GetResult<Prisma.$MessageTemplatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MessageTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageTemplateCountArgs} args - Arguments to filter MessageTemplates to count.
     * @example
     * // Count the number of MessageTemplates
     * const count = await prisma.messageTemplate.count({
     *   where: {
     *     // ... the filter for the MessageTemplates we want to count
     *   }
     * })
    **/
    count<T extends MessageTemplateCountArgs>(
      args?: Subset<T, MessageTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessageTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageTemplateAggregateArgs>(args: Subset<T, MessageTemplateAggregateArgs>): Prisma.PrismaPromise<GetMessageTemplateAggregateType<T>>

    /**
     * Group by MessageTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageTemplateGroupByArgs['orderBy'] }
        : { orderBy?: MessageTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MessageTemplate model
   */
  readonly fields: MessageTemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MessageTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageTemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MessageTemplate model
   */
  interface MessageTemplateFieldRefs {
    readonly id: FieldRef<"MessageTemplate", 'String'>
    readonly companyId: FieldRef<"MessageTemplate", 'String'>
    readonly name: FieldRef<"MessageTemplate", 'String'>
    readonly subject: FieldRef<"MessageTemplate", 'String'>
    readonly content: FieldRef<"MessageTemplate", 'String'>
    readonly description: FieldRef<"MessageTemplate", 'String'>
    readonly isRequired: FieldRef<"MessageTemplate", 'Boolean'>
    readonly createdAt: FieldRef<"MessageTemplate", 'DateTime'>
    readonly updatedAt: FieldRef<"MessageTemplate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MessageTemplate findUnique
   */
  export type MessageTemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTemplate
     */
    select?: MessageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageTemplate
     */
    omit?: MessageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTemplateInclude<ExtArgs> | null
    /**
     * Filter, which MessageTemplate to fetch.
     */
    where: MessageTemplateWhereUniqueInput
  }

  /**
   * MessageTemplate findUniqueOrThrow
   */
  export type MessageTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTemplate
     */
    select?: MessageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageTemplate
     */
    omit?: MessageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTemplateInclude<ExtArgs> | null
    /**
     * Filter, which MessageTemplate to fetch.
     */
    where: MessageTemplateWhereUniqueInput
  }

  /**
   * MessageTemplate findFirst
   */
  export type MessageTemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTemplate
     */
    select?: MessageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageTemplate
     */
    omit?: MessageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTemplateInclude<ExtArgs> | null
    /**
     * Filter, which MessageTemplate to fetch.
     */
    where?: MessageTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageTemplates to fetch.
     */
    orderBy?: MessageTemplateOrderByWithRelationInput | MessageTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageTemplates.
     */
    cursor?: MessageTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageTemplates.
     */
    distinct?: MessageTemplateScalarFieldEnum | MessageTemplateScalarFieldEnum[]
  }

  /**
   * MessageTemplate findFirstOrThrow
   */
  export type MessageTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTemplate
     */
    select?: MessageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageTemplate
     */
    omit?: MessageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTemplateInclude<ExtArgs> | null
    /**
     * Filter, which MessageTemplate to fetch.
     */
    where?: MessageTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageTemplates to fetch.
     */
    orderBy?: MessageTemplateOrderByWithRelationInput | MessageTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageTemplates.
     */
    cursor?: MessageTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageTemplates.
     */
    distinct?: MessageTemplateScalarFieldEnum | MessageTemplateScalarFieldEnum[]
  }

  /**
   * MessageTemplate findMany
   */
  export type MessageTemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTemplate
     */
    select?: MessageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageTemplate
     */
    omit?: MessageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTemplateInclude<ExtArgs> | null
    /**
     * Filter, which MessageTemplates to fetch.
     */
    where?: MessageTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageTemplates to fetch.
     */
    orderBy?: MessageTemplateOrderByWithRelationInput | MessageTemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessageTemplates.
     */
    cursor?: MessageTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageTemplates.
     */
    skip?: number
    distinct?: MessageTemplateScalarFieldEnum | MessageTemplateScalarFieldEnum[]
  }

  /**
   * MessageTemplate create
   */
  export type MessageTemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTemplate
     */
    select?: MessageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageTemplate
     */
    omit?: MessageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a MessageTemplate.
     */
    data: XOR<MessageTemplateCreateInput, MessageTemplateUncheckedCreateInput>
  }

  /**
   * MessageTemplate createMany
   */
  export type MessageTemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MessageTemplates.
     */
    data: MessageTemplateCreateManyInput | MessageTemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MessageTemplate createManyAndReturn
   */
  export type MessageTemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTemplate
     */
    select?: MessageTemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageTemplate
     */
    omit?: MessageTemplateOmit<ExtArgs> | null
    /**
     * The data used to create many MessageTemplates.
     */
    data: MessageTemplateCreateManyInput | MessageTemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageTemplate update
   */
  export type MessageTemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTemplate
     */
    select?: MessageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageTemplate
     */
    omit?: MessageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a MessageTemplate.
     */
    data: XOR<MessageTemplateUpdateInput, MessageTemplateUncheckedUpdateInput>
    /**
     * Choose, which MessageTemplate to update.
     */
    where: MessageTemplateWhereUniqueInput
  }

  /**
   * MessageTemplate updateMany
   */
  export type MessageTemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MessageTemplates.
     */
    data: XOR<MessageTemplateUpdateManyMutationInput, MessageTemplateUncheckedUpdateManyInput>
    /**
     * Filter which MessageTemplates to update
     */
    where?: MessageTemplateWhereInput
    /**
     * Limit how many MessageTemplates to update.
     */
    limit?: number
  }

  /**
   * MessageTemplate updateManyAndReturn
   */
  export type MessageTemplateUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTemplate
     */
    select?: MessageTemplateSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageTemplate
     */
    omit?: MessageTemplateOmit<ExtArgs> | null
    /**
     * The data used to update MessageTemplates.
     */
    data: XOR<MessageTemplateUpdateManyMutationInput, MessageTemplateUncheckedUpdateManyInput>
    /**
     * Filter which MessageTemplates to update
     */
    where?: MessageTemplateWhereInput
    /**
     * Limit how many MessageTemplates to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTemplateIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageTemplate upsert
   */
  export type MessageTemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTemplate
     */
    select?: MessageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageTemplate
     */
    omit?: MessageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the MessageTemplate to update in case it exists.
     */
    where: MessageTemplateWhereUniqueInput
    /**
     * In case the MessageTemplate found by the `where` argument doesn't exist, create a new MessageTemplate with this data.
     */
    create: XOR<MessageTemplateCreateInput, MessageTemplateUncheckedCreateInput>
    /**
     * In case the MessageTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageTemplateUpdateInput, MessageTemplateUncheckedUpdateInput>
  }

  /**
   * MessageTemplate delete
   */
  export type MessageTemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTemplate
     */
    select?: MessageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageTemplate
     */
    omit?: MessageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTemplateInclude<ExtArgs> | null
    /**
     * Filter which MessageTemplate to delete.
     */
    where: MessageTemplateWhereUniqueInput
  }

  /**
   * MessageTemplate deleteMany
   */
  export type MessageTemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageTemplates to delete
     */
    where?: MessageTemplateWhereInput
    /**
     * Limit how many MessageTemplates to delete.
     */
    limit?: number
  }

  /**
   * MessageTemplate without action
   */
  export type MessageTemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageTemplate
     */
    select?: MessageTemplateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageTemplate
     */
    omit?: MessageTemplateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageTemplateInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    text: string | null
    responseType: string | null
    visibility: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    text: string | null
    responseType: string | null
    visibility: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    companyId: number
    text: number
    responseType: number
    visibility: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuestionMinAggregateInputType = {
    id?: true
    companyId?: true
    text?: true
    responseType?: true
    visibility?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    companyId?: true
    text?: true
    responseType?: true
    visibility?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    companyId?: true
    text?: true
    responseType?: true
    visibility?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: string
    companyId: string
    text: string
    responseType: string
    visibility: string
    createdAt: Date
    updatedAt: Date
    _count: QuestionCountAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    text?: boolean
    responseType?: boolean
    visibility?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    options?: boolean | Question$optionsArgs<ExtArgs>
    questionSets?: boolean | Question$questionSetsArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    text?: boolean
    responseType?: boolean
    visibility?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    text?: boolean
    responseType?: boolean
    visibility?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectScalar = {
    id?: boolean
    companyId?: boolean
    text?: boolean
    responseType?: boolean
    visibility?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuestionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "text" | "responseType" | "visibility" | "createdAt" | "updatedAt", ExtArgs["result"]["question"]>
  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    options?: boolean | Question$optionsArgs<ExtArgs>
    questionSets?: boolean | Question$questionSetsArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      options: Prisma.$QuestionOptionPayload<ExtArgs>[]
      questionSets: Prisma.$QuestionSetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      text: string
      responseType: string
      visibility: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionFindUniqueArgs>(args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionFindFirstArgs>(args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionFindManyArgs>(args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends QuestionCreateArgs>(args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCreateManyArgs>(args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {QuestionCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends QuestionDeleteArgs>(args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionUpdateArgs>(args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionDeleteManyArgs>(args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionUpdateManyArgs>(args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions and returns the data updated in the database.
     * @param {QuestionUpdateManyAndReturnArgs} args - Arguments to update many Questions.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends QuestionUpsertArgs>(args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    options<T extends Question$optionsArgs<ExtArgs> = {}>(args?: Subset<T, Question$optionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    questionSets<T extends Question$questionSetsArgs<ExtArgs> = {}>(args?: Subset<T, Question$questionSetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Question model
   */
  interface QuestionFieldRefs {
    readonly id: FieldRef<"Question", 'String'>
    readonly companyId: FieldRef<"Question", 'String'>
    readonly text: FieldRef<"Question", 'String'>
    readonly responseType: FieldRef<"Question", 'String'>
    readonly visibility: FieldRef<"Question", 'String'>
    readonly createdAt: FieldRef<"Question", 'DateTime'>
    readonly updatedAt: FieldRef<"Question", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Question createManyAndReturn
   */
  export type QuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
  }

  /**
   * Question updateManyAndReturn
   */
  export type QuestionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
    /**
     * Limit how many Questions to delete.
     */
    limit?: number
  }

  /**
   * Question.options
   */
  export type Question$optionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    where?: QuestionOptionWhereInput
    orderBy?: QuestionOptionOrderByWithRelationInput | QuestionOptionOrderByWithRelationInput[]
    cursor?: QuestionOptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionOptionScalarFieldEnum | QuestionOptionScalarFieldEnum[]
  }

  /**
   * Question.questionSets
   */
  export type Question$questionSetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    where?: QuestionSetWhereInput
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    cursor?: QuestionSetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model QuestionOption
   */

  export type AggregateQuestionOption = {
    _count: QuestionOptionCountAggregateOutputType | null
    _min: QuestionOptionMinAggregateOutputType | null
    _max: QuestionOptionMaxAggregateOutputType | null
  }

  export type QuestionOptionMinAggregateOutputType = {
    id: string | null
    questionId: string | null
    value: string | null
  }

  export type QuestionOptionMaxAggregateOutputType = {
    id: string | null
    questionId: string | null
    value: string | null
  }

  export type QuestionOptionCountAggregateOutputType = {
    id: number
    questionId: number
    value: number
    _all: number
  }


  export type QuestionOptionMinAggregateInputType = {
    id?: true
    questionId?: true
    value?: true
  }

  export type QuestionOptionMaxAggregateInputType = {
    id?: true
    questionId?: true
    value?: true
  }

  export type QuestionOptionCountAggregateInputType = {
    id?: true
    questionId?: true
    value?: true
    _all?: true
  }

  export type QuestionOptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionOption to aggregate.
     */
    where?: QuestionOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionOptions to fetch.
     */
    orderBy?: QuestionOptionOrderByWithRelationInput | QuestionOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionOptions
    **/
    _count?: true | QuestionOptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionOptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionOptionMaxAggregateInputType
  }

  export type GetQuestionOptionAggregateType<T extends QuestionOptionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionOption]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionOption[P]>
      : GetScalarType<T[P], AggregateQuestionOption[P]>
  }




  export type QuestionOptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionOptionWhereInput
    orderBy?: QuestionOptionOrderByWithAggregationInput | QuestionOptionOrderByWithAggregationInput[]
    by: QuestionOptionScalarFieldEnum[] | QuestionOptionScalarFieldEnum
    having?: QuestionOptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionOptionCountAggregateInputType | true
    _min?: QuestionOptionMinAggregateInputType
    _max?: QuestionOptionMaxAggregateInputType
  }

  export type QuestionOptionGroupByOutputType = {
    id: string
    questionId: string
    value: string
    _count: QuestionOptionCountAggregateOutputType | null
    _min: QuestionOptionMinAggregateOutputType | null
    _max: QuestionOptionMaxAggregateOutputType | null
  }

  type GetQuestionOptionGroupByPayload<T extends QuestionOptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionOptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionOptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionOptionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionOptionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionOptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    value?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionOption"]>

  export type QuestionOptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    value?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionOption"]>

  export type QuestionOptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    questionId?: boolean
    value?: boolean
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionOption"]>

  export type QuestionOptionSelectScalar = {
    id?: boolean
    questionId?: boolean
    value?: boolean
  }

  export type QuestionOptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "questionId" | "value", ExtArgs["result"]["questionOption"]>
  export type QuestionOptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }
  export type QuestionOptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }
  export type QuestionOptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | QuestionDefaultArgs<ExtArgs>
  }

  export type $QuestionOptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionOption"
    objects: {
      question: Prisma.$QuestionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      questionId: string
      value: string
    }, ExtArgs["result"]["questionOption"]>
    composites: {}
  }

  type QuestionOptionGetPayload<S extends boolean | null | undefined | QuestionOptionDefaultArgs> = $Result.GetResult<Prisma.$QuestionOptionPayload, S>

  type QuestionOptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionOptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionOptionCountAggregateInputType | true
    }

  export interface QuestionOptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionOption'], meta: { name: 'QuestionOption' } }
    /**
     * Find zero or one QuestionOption that matches the filter.
     * @param {QuestionOptionFindUniqueArgs} args - Arguments to find a QuestionOption
     * @example
     * // Get one QuestionOption
     * const questionOption = await prisma.questionOption.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionOptionFindUniqueArgs>(args: SelectSubset<T, QuestionOptionFindUniqueArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionOption that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionOptionFindUniqueOrThrowArgs} args - Arguments to find a QuestionOption
     * @example
     * // Get one QuestionOption
     * const questionOption = await prisma.questionOption.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionOptionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionOptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionOption that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionFindFirstArgs} args - Arguments to find a QuestionOption
     * @example
     * // Get one QuestionOption
     * const questionOption = await prisma.questionOption.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionOptionFindFirstArgs>(args?: SelectSubset<T, QuestionOptionFindFirstArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionOption that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionFindFirstOrThrowArgs} args - Arguments to find a QuestionOption
     * @example
     * // Get one QuestionOption
     * const questionOption = await prisma.questionOption.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionOptionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionOptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionOptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionOptions
     * const questionOptions = await prisma.questionOption.findMany()
     * 
     * // Get first 10 QuestionOptions
     * const questionOptions = await prisma.questionOption.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionOptionWithIdOnly = await prisma.questionOption.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionOptionFindManyArgs>(args?: SelectSubset<T, QuestionOptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionOption.
     * @param {QuestionOptionCreateArgs} args - Arguments to create a QuestionOption.
     * @example
     * // Create one QuestionOption
     * const QuestionOption = await prisma.questionOption.create({
     *   data: {
     *     // ... data to create a QuestionOption
     *   }
     * })
     * 
     */
    create<T extends QuestionOptionCreateArgs>(args: SelectSubset<T, QuestionOptionCreateArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionOptions.
     * @param {QuestionOptionCreateManyArgs} args - Arguments to create many QuestionOptions.
     * @example
     * // Create many QuestionOptions
     * const questionOption = await prisma.questionOption.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionOptionCreateManyArgs>(args?: SelectSubset<T, QuestionOptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionOptions and returns the data saved in the database.
     * @param {QuestionOptionCreateManyAndReturnArgs} args - Arguments to create many QuestionOptions.
     * @example
     * // Create many QuestionOptions
     * const questionOption = await prisma.questionOption.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionOptions and only return the `id`
     * const questionOptionWithIdOnly = await prisma.questionOption.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionOptionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionOptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionOption.
     * @param {QuestionOptionDeleteArgs} args - Arguments to delete one QuestionOption.
     * @example
     * // Delete one QuestionOption
     * const QuestionOption = await prisma.questionOption.delete({
     *   where: {
     *     // ... filter to delete one QuestionOption
     *   }
     * })
     * 
     */
    delete<T extends QuestionOptionDeleteArgs>(args: SelectSubset<T, QuestionOptionDeleteArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionOption.
     * @param {QuestionOptionUpdateArgs} args - Arguments to update one QuestionOption.
     * @example
     * // Update one QuestionOption
     * const questionOption = await prisma.questionOption.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionOptionUpdateArgs>(args: SelectSubset<T, QuestionOptionUpdateArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionOptions.
     * @param {QuestionOptionDeleteManyArgs} args - Arguments to filter QuestionOptions to delete.
     * @example
     * // Delete a few QuestionOptions
     * const { count } = await prisma.questionOption.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionOptionDeleteManyArgs>(args?: SelectSubset<T, QuestionOptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionOptions
     * const questionOption = await prisma.questionOption.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionOptionUpdateManyArgs>(args: SelectSubset<T, QuestionOptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionOptions and returns the data updated in the database.
     * @param {QuestionOptionUpdateManyAndReturnArgs} args - Arguments to update many QuestionOptions.
     * @example
     * // Update many QuestionOptions
     * const questionOption = await prisma.questionOption.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionOptions and only return the `id`
     * const questionOptionWithIdOnly = await prisma.questionOption.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionOptionUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionOptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionOption.
     * @param {QuestionOptionUpsertArgs} args - Arguments to update or create a QuestionOption.
     * @example
     * // Update or create a QuestionOption
     * const questionOption = await prisma.questionOption.upsert({
     *   create: {
     *     // ... data to create a QuestionOption
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionOption we want to update
     *   }
     * })
     */
    upsert<T extends QuestionOptionUpsertArgs>(args: SelectSubset<T, QuestionOptionUpsertArgs<ExtArgs>>): Prisma__QuestionOptionClient<$Result.GetResult<Prisma.$QuestionOptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionOptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionCountArgs} args - Arguments to filter QuestionOptions to count.
     * @example
     * // Count the number of QuestionOptions
     * const count = await prisma.questionOption.count({
     *   where: {
     *     // ... the filter for the QuestionOptions we want to count
     *   }
     * })
    **/
    count<T extends QuestionOptionCountArgs>(
      args?: Subset<T, QuestionOptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionOptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionOptionAggregateArgs>(args: Subset<T, QuestionOptionAggregateArgs>): Prisma.PrismaPromise<GetQuestionOptionAggregateType<T>>

    /**
     * Group by QuestionOption.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionOptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionOptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionOptionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionOptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionOptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionOptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionOption model
   */
  readonly fields: QuestionOptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionOption.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionOptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends QuestionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestionDefaultArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionOption model
   */
  interface QuestionOptionFieldRefs {
    readonly id: FieldRef<"QuestionOption", 'String'>
    readonly questionId: FieldRef<"QuestionOption", 'String'>
    readonly value: FieldRef<"QuestionOption", 'String'>
  }
    

  // Custom InputTypes
  /**
   * QuestionOption findUnique
   */
  export type QuestionOptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOption to fetch.
     */
    where: QuestionOptionWhereUniqueInput
  }

  /**
   * QuestionOption findUniqueOrThrow
   */
  export type QuestionOptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOption to fetch.
     */
    where: QuestionOptionWhereUniqueInput
  }

  /**
   * QuestionOption findFirst
   */
  export type QuestionOptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOption to fetch.
     */
    where?: QuestionOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionOptions to fetch.
     */
    orderBy?: QuestionOptionOrderByWithRelationInput | QuestionOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionOptions.
     */
    cursor?: QuestionOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionOptions.
     */
    distinct?: QuestionOptionScalarFieldEnum | QuestionOptionScalarFieldEnum[]
  }

  /**
   * QuestionOption findFirstOrThrow
   */
  export type QuestionOptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOption to fetch.
     */
    where?: QuestionOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionOptions to fetch.
     */
    orderBy?: QuestionOptionOrderByWithRelationInput | QuestionOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionOptions.
     */
    cursor?: QuestionOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionOptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionOptions.
     */
    distinct?: QuestionOptionScalarFieldEnum | QuestionOptionScalarFieldEnum[]
  }

  /**
   * QuestionOption findMany
   */
  export type QuestionOptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter, which QuestionOptions to fetch.
     */
    where?: QuestionOptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionOptions to fetch.
     */
    orderBy?: QuestionOptionOrderByWithRelationInput | QuestionOptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionOptions.
     */
    cursor?: QuestionOptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionOptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionOptions.
     */
    skip?: number
    distinct?: QuestionOptionScalarFieldEnum | QuestionOptionScalarFieldEnum[]
  }

  /**
   * QuestionOption create
   */
  export type QuestionOptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionOption.
     */
    data: XOR<QuestionOptionCreateInput, QuestionOptionUncheckedCreateInput>
  }

  /**
   * QuestionOption createMany
   */
  export type QuestionOptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionOptions.
     */
    data: QuestionOptionCreateManyInput | QuestionOptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionOption createManyAndReturn
   */
  export type QuestionOptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionOptions.
     */
    data: QuestionOptionCreateManyInput | QuestionOptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionOption update
   */
  export type QuestionOptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionOption.
     */
    data: XOR<QuestionOptionUpdateInput, QuestionOptionUncheckedUpdateInput>
    /**
     * Choose, which QuestionOption to update.
     */
    where: QuestionOptionWhereUniqueInput
  }

  /**
   * QuestionOption updateMany
   */
  export type QuestionOptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionOptions.
     */
    data: XOR<QuestionOptionUpdateManyMutationInput, QuestionOptionUncheckedUpdateManyInput>
    /**
     * Filter which QuestionOptions to update
     */
    where?: QuestionOptionWhereInput
    /**
     * Limit how many QuestionOptions to update.
     */
    limit?: number
  }

  /**
   * QuestionOption updateManyAndReturn
   */
  export type QuestionOptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * The data used to update QuestionOptions.
     */
    data: XOR<QuestionOptionUpdateManyMutationInput, QuestionOptionUncheckedUpdateManyInput>
    /**
     * Filter which QuestionOptions to update
     */
    where?: QuestionOptionWhereInput
    /**
     * Limit how many QuestionOptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionOption upsert
   */
  export type QuestionOptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionOption to update in case it exists.
     */
    where: QuestionOptionWhereUniqueInput
    /**
     * In case the QuestionOption found by the `where` argument doesn't exist, create a new QuestionOption with this data.
     */
    create: XOR<QuestionOptionCreateInput, QuestionOptionUncheckedCreateInput>
    /**
     * In case the QuestionOption was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionOptionUpdateInput, QuestionOptionUncheckedUpdateInput>
  }

  /**
   * QuestionOption delete
   */
  export type QuestionOptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
    /**
     * Filter which QuestionOption to delete.
     */
    where: QuestionOptionWhereUniqueInput
  }

  /**
   * QuestionOption deleteMany
   */
  export type QuestionOptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionOptions to delete
     */
    where?: QuestionOptionWhereInput
    /**
     * Limit how many QuestionOptions to delete.
     */
    limit?: number
  }

  /**
   * QuestionOption without action
   */
  export type QuestionOptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionOption
     */
    select?: QuestionOptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionOption
     */
    omit?: QuestionOptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionOptionInclude<ExtArgs> | null
  }


  /**
   * Model QuestionSet
   */

  export type AggregateQuestionSet = {
    _count: QuestionSetCountAggregateOutputType | null
    _min: QuestionSetMinAggregateOutputType | null
    _max: QuestionSetMaxAggregateOutputType | null
  }

  export type QuestionSetMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionSetMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuestionSetCountAggregateOutputType = {
    id: number
    companyId: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuestionSetMinAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionSetMaxAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuestionSetCountAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuestionSetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionSet to aggregate.
     */
    where?: QuestionSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSets to fetch.
     */
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionSets
    **/
    _count?: true | QuestionSetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionSetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionSetMaxAggregateInputType
  }

  export type GetQuestionSetAggregateType<T extends QuestionSetAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionSet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionSet[P]>
      : GetScalarType<T[P], AggregateQuestionSet[P]>
  }




  export type QuestionSetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionSetWhereInput
    orderBy?: QuestionSetOrderByWithAggregationInput | QuestionSetOrderByWithAggregationInput[]
    by: QuestionSetScalarFieldEnum[] | QuestionSetScalarFieldEnum
    having?: QuestionSetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionSetCountAggregateInputType | true
    _min?: QuestionSetMinAggregateInputType
    _max?: QuestionSetMaxAggregateInputType
  }

  export type QuestionSetGroupByOutputType = {
    id: string
    companyId: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: QuestionSetCountAggregateOutputType | null
    _min: QuestionSetMinAggregateOutputType | null
    _max: QuestionSetMaxAggregateOutputType | null
  }

  type GetQuestionSetGroupByPayload<T extends QuestionSetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionSetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionSetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionSetGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionSetGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    questions?: boolean | QuestionSet$questionsArgs<ExtArgs>
    _count?: boolean | QuestionSetCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionSet"]>

  export type QuestionSetSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionSet"]>

  export type QuestionSetSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionSet"]>

  export type QuestionSetSelectScalar = {
    id?: boolean
    companyId?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuestionSetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyId" | "name" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["questionSet"]>
  export type QuestionSetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    questions?: boolean | QuestionSet$questionsArgs<ExtArgs>
    _count?: boolean | QuestionSetCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionSetIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type QuestionSetIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $QuestionSetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionSet"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      questions: Prisma.$QuestionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["questionSet"]>
    composites: {}
  }

  type QuestionSetGetPayload<S extends boolean | null | undefined | QuestionSetDefaultArgs> = $Result.GetResult<Prisma.$QuestionSetPayload, S>

  type QuestionSetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionSetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionSetCountAggregateInputType | true
    }

  export interface QuestionSetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionSet'], meta: { name: 'QuestionSet' } }
    /**
     * Find zero or one QuestionSet that matches the filter.
     * @param {QuestionSetFindUniqueArgs} args - Arguments to find a QuestionSet
     * @example
     * // Get one QuestionSet
     * const questionSet = await prisma.questionSet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionSetFindUniqueArgs>(args: SelectSubset<T, QuestionSetFindUniqueArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionSet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionSetFindUniqueOrThrowArgs} args - Arguments to find a QuestionSet
     * @example
     * // Get one QuestionSet
     * const questionSet = await prisma.questionSet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionSetFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionSetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionSet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetFindFirstArgs} args - Arguments to find a QuestionSet
     * @example
     * // Get one QuestionSet
     * const questionSet = await prisma.questionSet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionSetFindFirstArgs>(args?: SelectSubset<T, QuestionSetFindFirstArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionSet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetFindFirstOrThrowArgs} args - Arguments to find a QuestionSet
     * @example
     * // Get one QuestionSet
     * const questionSet = await prisma.questionSet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionSetFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionSetFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionSets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionSets
     * const questionSets = await prisma.questionSet.findMany()
     * 
     * // Get first 10 QuestionSets
     * const questionSets = await prisma.questionSet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionSetWithIdOnly = await prisma.questionSet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionSetFindManyArgs>(args?: SelectSubset<T, QuestionSetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionSet.
     * @param {QuestionSetCreateArgs} args - Arguments to create a QuestionSet.
     * @example
     * // Create one QuestionSet
     * const QuestionSet = await prisma.questionSet.create({
     *   data: {
     *     // ... data to create a QuestionSet
     *   }
     * })
     * 
     */
    create<T extends QuestionSetCreateArgs>(args: SelectSubset<T, QuestionSetCreateArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionSets.
     * @param {QuestionSetCreateManyArgs} args - Arguments to create many QuestionSets.
     * @example
     * // Create many QuestionSets
     * const questionSet = await prisma.questionSet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionSetCreateManyArgs>(args?: SelectSubset<T, QuestionSetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionSets and returns the data saved in the database.
     * @param {QuestionSetCreateManyAndReturnArgs} args - Arguments to create many QuestionSets.
     * @example
     * // Create many QuestionSets
     * const questionSet = await prisma.questionSet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionSets and only return the `id`
     * const questionSetWithIdOnly = await prisma.questionSet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionSetCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionSetCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionSet.
     * @param {QuestionSetDeleteArgs} args - Arguments to delete one QuestionSet.
     * @example
     * // Delete one QuestionSet
     * const QuestionSet = await prisma.questionSet.delete({
     *   where: {
     *     // ... filter to delete one QuestionSet
     *   }
     * })
     * 
     */
    delete<T extends QuestionSetDeleteArgs>(args: SelectSubset<T, QuestionSetDeleteArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionSet.
     * @param {QuestionSetUpdateArgs} args - Arguments to update one QuestionSet.
     * @example
     * // Update one QuestionSet
     * const questionSet = await prisma.questionSet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionSetUpdateArgs>(args: SelectSubset<T, QuestionSetUpdateArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionSets.
     * @param {QuestionSetDeleteManyArgs} args - Arguments to filter QuestionSets to delete.
     * @example
     * // Delete a few QuestionSets
     * const { count } = await prisma.questionSet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionSetDeleteManyArgs>(args?: SelectSubset<T, QuestionSetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionSets
     * const questionSet = await prisma.questionSet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionSetUpdateManyArgs>(args: SelectSubset<T, QuestionSetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionSets and returns the data updated in the database.
     * @param {QuestionSetUpdateManyAndReturnArgs} args - Arguments to update many QuestionSets.
     * @example
     * // Update many QuestionSets
     * const questionSet = await prisma.questionSet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionSets and only return the `id`
     * const questionSetWithIdOnly = await prisma.questionSet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionSetUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionSetUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionSet.
     * @param {QuestionSetUpsertArgs} args - Arguments to update or create a QuestionSet.
     * @example
     * // Update or create a QuestionSet
     * const questionSet = await prisma.questionSet.upsert({
     *   create: {
     *     // ... data to create a QuestionSet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionSet we want to update
     *   }
     * })
     */
    upsert<T extends QuestionSetUpsertArgs>(args: SelectSubset<T, QuestionSetUpsertArgs<ExtArgs>>): Prisma__QuestionSetClient<$Result.GetResult<Prisma.$QuestionSetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionSets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetCountArgs} args - Arguments to filter QuestionSets to count.
     * @example
     * // Count the number of QuestionSets
     * const count = await prisma.questionSet.count({
     *   where: {
     *     // ... the filter for the QuestionSets we want to count
     *   }
     * })
    **/
    count<T extends QuestionSetCountArgs>(
      args?: Subset<T, QuestionSetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionSetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionSetAggregateArgs>(args: Subset<T, QuestionSetAggregateArgs>): Prisma.PrismaPromise<GetQuestionSetAggregateType<T>>

    /**
     * Group by QuestionSet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionSetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionSetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionSetGroupByArgs['orderBy'] }
        : { orderBy?: QuestionSetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionSetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionSetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionSet model
   */
  readonly fields: QuestionSetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionSet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionSetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    questions<T extends QuestionSet$questionsArgs<ExtArgs> = {}>(args?: Subset<T, QuestionSet$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionSet model
   */
  interface QuestionSetFieldRefs {
    readonly id: FieldRef<"QuestionSet", 'String'>
    readonly companyId: FieldRef<"QuestionSet", 'String'>
    readonly name: FieldRef<"QuestionSet", 'String'>
    readonly description: FieldRef<"QuestionSet", 'String'>
    readonly createdAt: FieldRef<"QuestionSet", 'DateTime'>
    readonly updatedAt: FieldRef<"QuestionSet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QuestionSet findUnique
   */
  export type QuestionSetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSet to fetch.
     */
    where: QuestionSetWhereUniqueInput
  }

  /**
   * QuestionSet findUniqueOrThrow
   */
  export type QuestionSetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSet to fetch.
     */
    where: QuestionSetWhereUniqueInput
  }

  /**
   * QuestionSet findFirst
   */
  export type QuestionSetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSet to fetch.
     */
    where?: QuestionSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSets to fetch.
     */
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionSets.
     */
    cursor?: QuestionSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionSets.
     */
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * QuestionSet findFirstOrThrow
   */
  export type QuestionSetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSet to fetch.
     */
    where?: QuestionSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSets to fetch.
     */
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionSets.
     */
    cursor?: QuestionSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionSets.
     */
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * QuestionSet findMany
   */
  export type QuestionSetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter, which QuestionSets to fetch.
     */
    where?: QuestionSetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionSets to fetch.
     */
    orderBy?: QuestionSetOrderByWithRelationInput | QuestionSetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionSets.
     */
    cursor?: QuestionSetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionSets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionSets.
     */
    skip?: number
    distinct?: QuestionSetScalarFieldEnum | QuestionSetScalarFieldEnum[]
  }

  /**
   * QuestionSet create
   */
  export type QuestionSetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionSet.
     */
    data: XOR<QuestionSetCreateInput, QuestionSetUncheckedCreateInput>
  }

  /**
   * QuestionSet createMany
   */
  export type QuestionSetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionSets.
     */
    data: QuestionSetCreateManyInput | QuestionSetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionSet createManyAndReturn
   */
  export type QuestionSetCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionSets.
     */
    data: QuestionSetCreateManyInput | QuestionSetCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionSet update
   */
  export type QuestionSetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionSet.
     */
    data: XOR<QuestionSetUpdateInput, QuestionSetUncheckedUpdateInput>
    /**
     * Choose, which QuestionSet to update.
     */
    where: QuestionSetWhereUniqueInput
  }

  /**
   * QuestionSet updateMany
   */
  export type QuestionSetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionSets.
     */
    data: XOR<QuestionSetUpdateManyMutationInput, QuestionSetUncheckedUpdateManyInput>
    /**
     * Filter which QuestionSets to update
     */
    where?: QuestionSetWhereInput
    /**
     * Limit how many QuestionSets to update.
     */
    limit?: number
  }

  /**
   * QuestionSet updateManyAndReturn
   */
  export type QuestionSetUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * The data used to update QuestionSets.
     */
    data: XOR<QuestionSetUpdateManyMutationInput, QuestionSetUncheckedUpdateManyInput>
    /**
     * Filter which QuestionSets to update
     */
    where?: QuestionSetWhereInput
    /**
     * Limit how many QuestionSets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionSet upsert
   */
  export type QuestionSetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionSet to update in case it exists.
     */
    where: QuestionSetWhereUniqueInput
    /**
     * In case the QuestionSet found by the `where` argument doesn't exist, create a new QuestionSet with this data.
     */
    create: XOR<QuestionSetCreateInput, QuestionSetUncheckedCreateInput>
    /**
     * In case the QuestionSet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionSetUpdateInput, QuestionSetUncheckedUpdateInput>
  }

  /**
   * QuestionSet delete
   */
  export type QuestionSetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
    /**
     * Filter which QuestionSet to delete.
     */
    where: QuestionSetWhereUniqueInput
  }

  /**
   * QuestionSet deleteMany
   */
  export type QuestionSetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionSets to delete
     */
    where?: QuestionSetWhereInput
    /**
     * Limit how many QuestionSets to delete.
     */
    limit?: number
  }

  /**
   * QuestionSet.questions
   */
  export type QuestionSet$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Question
     */
    omit?: QuestionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * QuestionSet without action
   */
  export type QuestionSetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionSet
     */
    select?: QuestionSetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionSet
     */
    omit?: QuestionSetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionSetInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    jobTitle: 'jobTitle',
    departmentName: 'departmentName',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserProfileScalarFieldEnum = (typeof UserProfileScalarFieldEnum)[keyof typeof UserProfileScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    website: 'website',
    phoneNumber: 'phoneNumber',
    description: 'description',
    ownerId: 'ownerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const CompanyMemberScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    userId: 'userId',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyMemberScalarFieldEnum = (typeof CompanyMemberScalarFieldEnum)[keyof typeof CompanyMemberScalarFieldEnum]


  export const JobScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    employmentType: 'employmentType',
    workType: 'workType',
    salaryMin: 'salaryMin',
    salaryMax: 'salaryMax',
    currency: 'currency',
    payPeriod: 'payPeriod',
    displaySalary: 'displaySalary',
    status: 'status',
    jobCode: 'jobCode',
    companyId: 'companyId',
    departmentId: 'departmentId',
    locationId: 'locationId',
    minYearsExperience: 'minYearsExperience',
    skills: 'skills',
    jobBoards: 'jobBoards',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    companyId: 'companyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const JobLocationScalarFieldEnum: {
    id: 'id',
    address: 'address',
    country: 'country',
    city: 'city',
    stateRegion: 'stateRegion',
    zipPostal: 'zipPostal',
    companyId: 'companyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobLocationScalarFieldEnum = (typeof JobLocationScalarFieldEnum)[keyof typeof JobLocationScalarFieldEnum]


  export const ApplicationFormFieldScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    fieldName: 'fieldName',
    label: 'label',
    fieldType: 'fieldType',
    isRequired: 'isRequired',
    isOptional: 'isOptional',
    isDisabled: 'isDisabled',
    customQuestionId: 'customQuestionId',
    order: 'order'
  };

  export type ApplicationFormFieldScalarFieldEnum = (typeof ApplicationFormFieldScalarFieldEnum)[keyof typeof ApplicationFormFieldScalarFieldEnum]


  export const CustomQuestionScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    questionText: 'questionText',
    responseType: 'responseType',
    options: 'options',
    visibility: 'visibility',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomQuestionScalarFieldEnum = (typeof CustomQuestionScalarFieldEnum)[keyof typeof CustomQuestionScalarFieldEnum]


  export const CandidateScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phoneNumber: 'phoneNumber',
    resumeUrl: 'resumeUrl',
    coverLetterText: 'coverLetterText',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CandidateScalarFieldEnum = (typeof CandidateScalarFieldEnum)[keyof typeof CandidateScalarFieldEnum]


  export const ApplicationScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    candidateId: 'candidateId',
    appliedAt: 'appliedAt',
    currentStageId: 'currentStageId',
    status: 'status',
    disqualificationReason: 'disqualificationReason',
    archivedAt: 'archivedAt',
    hiredAt: 'hiredAt',
    source: 'source'
  };

  export type ApplicationScalarFieldEnum = (typeof ApplicationScalarFieldEnum)[keyof typeof ApplicationScalarFieldEnum]


  export const CandidateAnswerScalarFieldEnum: {
    id: 'id',
    applicationId: 'applicationId',
    customQuestionId: 'customQuestionId',
    answerText: 'answerText',
    answerFileUrl: 'answerFileUrl',
    answeredAt: 'answeredAt',
    candidateId: 'candidateId'
  };

  export type CandidateAnswerScalarFieldEnum = (typeof CandidateAnswerScalarFieldEnum)[keyof typeof CandidateAnswerScalarFieldEnum]


  export const WorkflowTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    companyId: 'companyId',
    isDefault: 'isDefault',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkflowTemplateScalarFieldEnum = (typeof WorkflowTemplateScalarFieldEnum)[keyof typeof WorkflowTemplateScalarFieldEnum]


  export const WorkflowStageTemplateScalarFieldEnum: {
    id: 'id',
    workflowTemplateId: 'workflowTemplateId',
    name: 'name',
    type: 'type',
    order: 'order',
    isDefault: 'isDefault',
    canBeDeleted: 'canBeDeleted',
    settings: 'settings',
    visibilityToReviewers: 'visibilityToReviewers'
  };

  export type WorkflowStageTemplateScalarFieldEnum = (typeof WorkflowStageTemplateScalarFieldEnum)[keyof typeof WorkflowStageTemplateScalarFieldEnum]


  export const JobWorkflowScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    workflowTemplateId: 'workflowTemplateId',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobWorkflowScalarFieldEnum = (typeof JobWorkflowScalarFieldEnum)[keyof typeof JobWorkflowScalarFieldEnum]


  export const JobWorkflowStageScalarFieldEnum: {
    id: 'id',
    jobWorkflowId: 'jobWorkflowId',
    name: 'name',
    type: 'type',
    order: 'order',
    settings: 'settings'
  };

  export type JobWorkflowStageScalarFieldEnum = (typeof JobWorkflowStageScalarFieldEnum)[keyof typeof JobWorkflowStageScalarFieldEnum]


  export const JobHiringMemberScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    userId: 'userId',
    role: 'role',
    isExternalRecruiter: 'isExternalRecruiter',
    createdAt: 'createdAt'
  };

  export type JobHiringMemberScalarFieldEnum = (typeof JobHiringMemberScalarFieldEnum)[keyof typeof JobHiringMemberScalarFieldEnum]


  export const RatingCardTemplateScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    companyId: 'companyId',
    type: 'type',
    isDefault: 'isDefault',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RatingCardTemplateScalarFieldEnum = (typeof RatingCardTemplateScalarFieldEnum)[keyof typeof RatingCardTemplateScalarFieldEnum]


  export const RatingCategoryScalarFieldEnum: {
    id: 'id',
    ratingCardTemplateId: 'ratingCardTemplateId',
    name: 'name',
    description: 'description',
    order: 'order'
  };

  export type RatingCategoryScalarFieldEnum = (typeof RatingCategoryScalarFieldEnum)[keyof typeof RatingCategoryScalarFieldEnum]


  export const CandidateRatingScalarFieldEnum: {
    id: 'id',
    applicationId: 'applicationId',
    jobWorkflowStageId: 'jobWorkflowStageId',
    raterId: 'raterId',
    ratingCardTemplateId: 'ratingCardTemplateId',
    overallScore: 'overallScore',
    comments: 'comments',
    submittedAt: 'submittedAt'
  };

  export type CandidateRatingScalarFieldEnum = (typeof CandidateRatingScalarFieldEnum)[keyof typeof CandidateRatingScalarFieldEnum]


  export const CategoryScoreScalarFieldEnum: {
    id: 'id',
    candidateRatingId: 'candidateRatingId',
    ratingCategoryId: 'ratingCategoryId',
    score: 'score',
    comments: 'comments'
  };

  export type CategoryScoreScalarFieldEnum = (typeof CategoryScoreScalarFieldEnum)[keyof typeof CategoryScoreScalarFieldEnum]


  export const MessageThreadScalarFieldEnum: {
    id: 'id',
    applicationId: 'applicationId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MessageThreadScalarFieldEnum = (typeof MessageThreadScalarFieldEnum)[keyof typeof MessageThreadScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    threadId: 'threadId',
    senderId: 'senderId',
    content: 'content',
    sentAt: 'sentAt',
    isInternalNote: 'isInternalNote',
    visibility: 'visibility',
    attachments: 'attachments'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const MeetingScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    startTime: 'startTime',
    endTime: 'endTime',
    type: 'type',
    location: 'location',
    videoCallLink: 'videoCallLink',
    jobId: 'jobId',
    applicationId: 'applicationId',
    organizerId: 'organizerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    meetingTemplateId: 'meetingTemplateId'
  };

  export type MeetingScalarFieldEnum = (typeof MeetingScalarFieldEnum)[keyof typeof MeetingScalarFieldEnum]


  export const MeetingAttendeeScalarFieldEnum: {
    id: 'id',
    meetingId: 'meetingId',
    userId: 'userId',
    candidateId: 'candidateId',
    email: 'email',
    name: 'name',
    status: 'status',
    isCandidate: 'isCandidate'
  };

  export type MeetingAttendeeScalarFieldEnum = (typeof MeetingAttendeeScalarFieldEnum)[keyof typeof MeetingAttendeeScalarFieldEnum]


  export const MeetingTemplateScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    name: 'name',
    title: 'title',
    duration: 'duration',
    meetingType: 'meetingType',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MeetingTemplateScalarFieldEnum = (typeof MeetingTemplateScalarFieldEnum)[keyof typeof MeetingTemplateScalarFieldEnum]


  export const CareersPageSettingScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    logoUrl: 'logoUrl',
    primaryColor: 'primaryColor',
    focusColor: 'focusColor',
    hyperlinkColor: 'hyperlinkColor',
    googleAnalyticsId: 'googleAnalyticsId',
    trackingPixelUrl: 'trackingPixelUrl',
    embedJobsCode: 'embedJobsCode',
    customCSS: 'customCSS',
    updatedAt: 'updatedAt'
  };

  export type CareersPageSettingScalarFieldEnum = (typeof CareersPageSettingScalarFieldEnum)[keyof typeof CareersPageSettingScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    message: 'message',
    link: 'link',
    isRead: 'isRead',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const AIScreeningConfigScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    isEnabled: 'isEnabled',
    guidance: 'guidance',
    updatedAt: 'updatedAt'
  };

  export type AIScreeningConfigScalarFieldEnum = (typeof AIScreeningConfigScalarFieldEnum)[keyof typeof AIScreeningConfigScalarFieldEnum]


  export const AISchedulingConfigScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    isEnabled: 'isEnabled',
    updatedAt: 'updatedAt'
  };

  export type AISchedulingConfigScalarFieldEnum = (typeof AISchedulingConfigScalarFieldEnum)[keyof typeof AISchedulingConfigScalarFieldEnum]


  export const AINoteTakingConfigScalarFieldEnum: {
    id: 'id',
    meetingId: 'meetingId',
    isEnabled: 'isEnabled',
    transcript: 'transcript',
    summary: 'summary',
    actionItems: 'actionItems',
    updatedAt: 'updatedAt'
  };

  export type AINoteTakingConfigScalarFieldEnum = (typeof AINoteTakingConfigScalarFieldEnum)[keyof typeof AINoteTakingConfigScalarFieldEnum]


  export const AIInteractionLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    inputType: 'inputType',
    input: 'input',
    output: 'output',
    timestamp: 'timestamp'
  };

  export type AIInteractionLogScalarFieldEnum = (typeof AIInteractionLogScalarFieldEnum)[keyof typeof AIInteractionLogScalarFieldEnum]


  export const AIBusinessPreferenceScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    businessOverview: 'businessOverview',
    businessCulture: 'businessCulture',
    businessValues: 'businessValues',
    businessMission: 'businessMission',
    updatedAt: 'updatedAt'
  };

  export type AIBusinessPreferenceScalarFieldEnum = (typeof AIBusinessPreferenceScalarFieldEnum)[keyof typeof AIBusinessPreferenceScalarFieldEnum]


  export const AICommunicationPreferenceScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    tone: 'tone',
    blockedTeamTopics: 'blockedTeamTopics',
    blockedCandidateTopics: 'blockedCandidateTopics',
    updatedAt: 'updatedAt'
  };

  export type AICommunicationPreferenceScalarFieldEnum = (typeof AICommunicationPreferenceScalarFieldEnum)[keyof typeof AICommunicationPreferenceScalarFieldEnum]


  export const CalendarIntegrationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    provider: 'provider',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    expiresAt: 'expiresAt',
    scopes: 'scopes',
    calendarId: 'calendarId',
    connectedAt: 'connectedAt',
    updatedAt: 'updatedAt'
  };

  export type CalendarIntegrationScalarFieldEnum = (typeof CalendarIntegrationScalarFieldEnum)[keyof typeof CalendarIntegrationScalarFieldEnum]


  export const JobBoardIntegrationScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    boardName: 'boardName',
    apiKey: 'apiKey',
    config: 'config',
    isEnabled: 'isEnabled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobBoardIntegrationScalarFieldEnum = (typeof JobBoardIntegrationScalarFieldEnum)[keyof typeof JobBoardIntegrationScalarFieldEnum]


  export const MessageTemplateScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    name: 'name',
    subject: 'subject',
    content: 'content',
    description: 'description',
    isRequired: 'isRequired',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MessageTemplateScalarFieldEnum = (typeof MessageTemplateScalarFieldEnum)[keyof typeof MessageTemplateScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    text: 'text',
    responseType: 'responseType',
    visibility: 'visibility',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const QuestionOptionScalarFieldEnum: {
    id: 'id',
    questionId: 'questionId',
    value: 'value'
  };

  export type QuestionOptionScalarFieldEnum = (typeof QuestionOptionScalarFieldEnum)[keyof typeof QuestionOptionScalarFieldEnum]


  export const QuestionSetScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuestionSetScalarFieldEnum = (typeof QuestionSetScalarFieldEnum)[keyof typeof QuestionSetScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'CompanyMemberRole'
   */
  export type EnumCompanyMemberRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompanyMemberRole'>
    


  /**
   * Reference to a field of type 'CompanyMemberRole[]'
   */
  export type ListEnumCompanyMemberRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CompanyMemberRole[]'>
    


  /**
   * Reference to a field of type 'EmploymentType'
   */
  export type EnumEmploymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmploymentType'>
    


  /**
   * Reference to a field of type 'EmploymentType[]'
   */
  export type ListEnumEmploymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmploymentType[]'>
    


  /**
   * Reference to a field of type 'WorkType'
   */
  export type EnumWorkTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkType'>
    


  /**
   * Reference to a field of type 'WorkType[]'
   */
  export type ListEnumWorkTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WorkType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'JobStatus'
   */
  export type EnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus'>
    


  /**
   * Reference to a field of type 'JobStatus[]'
   */
  export type ListEnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'FieldType'
   */
  export type EnumFieldTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FieldType'>
    


  /**
   * Reference to a field of type 'FieldType[]'
   */
  export type ListEnumFieldTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'FieldType[]'>
    


  /**
   * Reference to a field of type 'ResponseType'
   */
  export type EnumResponseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ResponseType'>
    


  /**
   * Reference to a field of type 'ResponseType[]'
   */
  export type ListEnumResponseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ResponseType[]'>
    


  /**
   * Reference to a field of type 'ResponseVisibility'
   */
  export type EnumResponseVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ResponseVisibility'>
    


  /**
   * Reference to a field of type 'ResponseVisibility[]'
   */
  export type ListEnumResponseVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ResponseVisibility[]'>
    


  /**
   * Reference to a field of type 'ApplicationStatus'
   */
  export type EnumApplicationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApplicationStatus'>
    


  /**
   * Reference to a field of type 'ApplicationStatus[]'
   */
  export type ListEnumApplicationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApplicationStatus[]'>
    


  /**
   * Reference to a field of type 'StageType'
   */
  export type EnumStageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StageType'>
    


  /**
   * Reference to a field of type 'StageType[]'
   */
  export type ListEnumStageTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StageType[]'>
    


  /**
   * Reference to a field of type 'RatingCardType'
   */
  export type EnumRatingCardTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RatingCardType'>
    


  /**
   * Reference to a field of type 'RatingCardType[]'
   */
  export type ListEnumRatingCardTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RatingCardType[]'>
    


  /**
   * Reference to a field of type 'CommentVisibility'
   */
  export type EnumCommentVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommentVisibility'>
    


  /**
   * Reference to a field of type 'CommentVisibility[]'
   */
  export type ListEnumCommentVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CommentVisibility[]'>
    


  /**
   * Reference to a field of type 'MeetingType'
   */
  export type EnumMeetingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MeetingType'>
    


  /**
   * Reference to a field of type 'MeetingType[]'
   */
  export type ListEnumMeetingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MeetingType[]'>
    


  /**
   * Reference to a field of type 'AttendeeStatus'
   */
  export type EnumAttendeeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendeeStatus'>
    


  /**
   * Reference to a field of type 'AttendeeStatus[]'
   */
  export type ListEnumAttendeeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendeeStatus[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'AITone'
   */
  export type EnumAIToneFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AITone'>
    


  /**
   * Reference to a field of type 'AITone[]'
   */
  export type ListEnumAIToneFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AITone[]'>
    


  /**
   * Reference to a field of type 'CalendarProvider'
   */
  export type EnumCalendarProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CalendarProvider'>
    


  /**
   * Reference to a field of type 'CalendarProvider[]'
   */
  export type ListEnumCalendarProviderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CalendarProvider[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    jobTitle?: StringNullableFilter<"User"> | string | null
    departmentName?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    profile?: XOR<UserProfileNullableScalarRelationFilter, UserProfileWhereInput> | null
    notifications?: NotificationListRelationFilter
    sentMessages?: MessageListRelationFilter
    meetingsOwned?: MeetingListRelationFilter
    meetingAttendees?: MeetingAttendeeListRelationFilter
    candidateRatings?: CandidateRatingListRelationFilter
    companiesOwned?: CompanyListRelationFilter
    companyMemberships?: CompanyMemberListRelationFilter
    calendarIntegrations?: CalendarIntegrationListRelationFilter
    aiInteractionLogs?: AIInteractionLogListRelationFilter
    jobHiringMembers?: JobHiringMemberListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    jobTitle?: SortOrderInput | SortOrder
    departmentName?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profile?: UserProfileOrderByWithRelationInput
    notifications?: NotificationOrderByRelationAggregateInput
    sentMessages?: MessageOrderByRelationAggregateInput
    meetingsOwned?: MeetingOrderByRelationAggregateInput
    meetingAttendees?: MeetingAttendeeOrderByRelationAggregateInput
    candidateRatings?: CandidateRatingOrderByRelationAggregateInput
    companiesOwned?: CompanyOrderByRelationAggregateInput
    companyMemberships?: CompanyMemberOrderByRelationAggregateInput
    calendarIntegrations?: CalendarIntegrationOrderByRelationAggregateInput
    aiInteractionLogs?: AIInteractionLogOrderByRelationAggregateInput
    jobHiringMembers?: JobHiringMemberOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    jobTitle?: StringNullableFilter<"User"> | string | null
    departmentName?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    profile?: XOR<UserProfileNullableScalarRelationFilter, UserProfileWhereInput> | null
    notifications?: NotificationListRelationFilter
    sentMessages?: MessageListRelationFilter
    meetingsOwned?: MeetingListRelationFilter
    meetingAttendees?: MeetingAttendeeListRelationFilter
    candidateRatings?: CandidateRatingListRelationFilter
    companiesOwned?: CompanyListRelationFilter
    companyMemberships?: CompanyMemberListRelationFilter
    calendarIntegrations?: CalendarIntegrationListRelationFilter
    aiInteractionLogs?: AIInteractionLogListRelationFilter
    jobHiringMembers?: JobHiringMemberListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    jobTitle?: SortOrderInput | SortOrder
    departmentName?: SortOrderInput | SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    jobTitle?: StringNullableWithAggregatesFilter<"User"> | string | null
    departmentName?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type UserProfileWhereInput = {
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    id?: StringFilter<"UserProfile"> | string
    userId?: StringFilter<"UserProfile"> | string
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserProfileCountOrderByAggregateInput
    _max?: UserProfileMaxOrderByAggregateInput
    _min?: UserProfileMinOrderByAggregateInput
  }

  export type UserProfileScalarWhereWithAggregatesInput = {
    AND?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    OR?: UserProfileScalarWhereWithAggregatesInput[]
    NOT?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserProfile"> | string
    userId?: StringWithAggregatesFilter<"UserProfile"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: StringFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    website?: StringNullableFilter<"Company"> | string | null
    phoneNumber?: StringNullableFilter<"Company"> | string | null
    description?: StringNullableFilter<"Company"> | string | null
    ownerId?: StringFilter<"Company"> | string
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    members?: CompanyMemberListRelationFilter
    jobs?: JobListRelationFilter
    departments?: DepartmentListRelationFilter
    locations?: JobLocationListRelationFilter
    workflowTemplates?: WorkflowTemplateListRelationFilter
    ratingCardTemplates?: RatingCardTemplateListRelationFilter
    careersPageSettings?: XOR<CareersPageSettingNullableScalarRelationFilter, CareersPageSettingWhereInput> | null
    jobBoardIntegrations?: JobBoardIntegrationListRelationFilter
    messageTemplates?: MessageTemplateListRelationFilter
    questions?: QuestionListRelationFilter
    questionSets?: QuestionSetListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    members?: CompanyMemberOrderByRelationAggregateInput
    jobs?: JobOrderByRelationAggregateInput
    departments?: DepartmentOrderByRelationAggregateInput
    locations?: JobLocationOrderByRelationAggregateInput
    workflowTemplates?: WorkflowTemplateOrderByRelationAggregateInput
    ratingCardTemplates?: RatingCardTemplateOrderByRelationAggregateInput
    careersPageSettings?: CareersPageSettingOrderByWithRelationInput
    jobBoardIntegrations?: JobBoardIntegrationOrderByRelationAggregateInput
    messageTemplates?: MessageTemplateOrderByRelationAggregateInput
    questions?: QuestionOrderByRelationAggregateInput
    questionSets?: QuestionSetOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    name?: StringFilter<"Company"> | string
    website?: StringNullableFilter<"Company"> | string | null
    phoneNumber?: StringNullableFilter<"Company"> | string | null
    description?: StringNullableFilter<"Company"> | string | null
    ownerId?: StringFilter<"Company"> | string
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    members?: CompanyMemberListRelationFilter
    jobs?: JobListRelationFilter
    departments?: DepartmentListRelationFilter
    locations?: JobLocationListRelationFilter
    workflowTemplates?: WorkflowTemplateListRelationFilter
    ratingCardTemplates?: RatingCardTemplateListRelationFilter
    careersPageSettings?: XOR<CareersPageSettingNullableScalarRelationFilter, CareersPageSettingWhereInput> | null
    jobBoardIntegrations?: JobBoardIntegrationListRelationFilter
    messageTemplates?: MessageTemplateListRelationFilter
    questions?: QuestionListRelationFilter
    questionSets?: QuestionSetListRelationFilter
  }, "id">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Company"> | string
    name?: StringWithAggregatesFilter<"Company"> | string
    website?: StringNullableWithAggregatesFilter<"Company"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"Company"> | string | null
    description?: StringNullableWithAggregatesFilter<"Company"> | string | null
    ownerId?: StringWithAggregatesFilter<"Company"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
  }

  export type CompanyMemberWhereInput = {
    AND?: CompanyMemberWhereInput | CompanyMemberWhereInput[]
    OR?: CompanyMemberWhereInput[]
    NOT?: CompanyMemberWhereInput | CompanyMemberWhereInput[]
    id?: StringFilter<"CompanyMember"> | string
    companyId?: StringFilter<"CompanyMember"> | string
    userId?: StringFilter<"CompanyMember"> | string
    role?: EnumCompanyMemberRoleFilter<"CompanyMember"> | $Enums.CompanyMemberRole
    createdAt?: DateTimeFilter<"CompanyMember"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyMember"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CompanyMemberOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type CompanyMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId_userId?: CompanyMemberCompanyIdUserIdCompoundUniqueInput
    AND?: CompanyMemberWhereInput | CompanyMemberWhereInput[]
    OR?: CompanyMemberWhereInput[]
    NOT?: CompanyMemberWhereInput | CompanyMemberWhereInput[]
    companyId?: StringFilter<"CompanyMember"> | string
    userId?: StringFilter<"CompanyMember"> | string
    role?: EnumCompanyMemberRoleFilter<"CompanyMember"> | $Enums.CompanyMemberRole
    createdAt?: DateTimeFilter<"CompanyMember"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyMember"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "companyId_userId">

  export type CompanyMemberOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanyMemberCountOrderByAggregateInput
    _max?: CompanyMemberMaxOrderByAggregateInput
    _min?: CompanyMemberMinOrderByAggregateInput
  }

  export type CompanyMemberScalarWhereWithAggregatesInput = {
    AND?: CompanyMemberScalarWhereWithAggregatesInput | CompanyMemberScalarWhereWithAggregatesInput[]
    OR?: CompanyMemberScalarWhereWithAggregatesInput[]
    NOT?: CompanyMemberScalarWhereWithAggregatesInput | CompanyMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CompanyMember"> | string
    companyId?: StringWithAggregatesFilter<"CompanyMember"> | string
    userId?: StringWithAggregatesFilter<"CompanyMember"> | string
    role?: EnumCompanyMemberRoleWithAggregatesFilter<"CompanyMember"> | $Enums.CompanyMemberRole
    createdAt?: DateTimeWithAggregatesFilter<"CompanyMember"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CompanyMember"> | Date | string
  }

  export type JobWhereInput = {
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    id?: StringFilter<"Job"> | string
    title?: StringFilter<"Job"> | string
    description?: StringFilter<"Job"> | string
    employmentType?: EnumEmploymentTypeFilter<"Job"> | $Enums.EmploymentType
    workType?: EnumWorkTypeFilter<"Job"> | $Enums.WorkType
    salaryMin?: FloatNullableFilter<"Job"> | number | null
    salaryMax?: FloatNullableFilter<"Job"> | number | null
    currency?: StringNullableFilter<"Job"> | string | null
    payPeriod?: StringNullableFilter<"Job"> | string | null
    displaySalary?: BoolFilter<"Job"> | boolean
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    jobCode?: StringNullableFilter<"Job"> | string | null
    companyId?: StringFilter<"Job"> | string
    departmentId?: StringNullableFilter<"Job"> | string | null
    locationId?: StringNullableFilter<"Job"> | string | null
    minYearsExperience?: IntNullableFilter<"Job"> | number | null
    skills?: JsonNullableFilter<"Job">
    jobBoards?: JsonNullableFilter<"Job">
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    location?: XOR<JobLocationNullableScalarRelationFilter, JobLocationWhereInput> | null
    applicationForm?: ApplicationFormFieldListRelationFilter
    hiringTeam?: JobHiringMemberListRelationFilter
    jobWorkflow?: XOR<JobWorkflowNullableScalarRelationFilter, JobWorkflowWhereInput> | null
    applications?: ApplicationListRelationFilter
    aiScreeningConfig?: XOR<AIScreeningConfigNullableScalarRelationFilter, AIScreeningConfigWhereInput> | null
    aiSchedulingConfig?: XOR<AISchedulingConfigNullableScalarRelationFilter, AISchedulingConfigWhereInput> | null
  }

  export type JobOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    employmentType?: SortOrder
    workType?: SortOrder
    salaryMin?: SortOrderInput | SortOrder
    salaryMax?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    payPeriod?: SortOrderInput | SortOrder
    displaySalary?: SortOrder
    status?: SortOrder
    jobCode?: SortOrderInput | SortOrder
    companyId?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    locationId?: SortOrderInput | SortOrder
    minYearsExperience?: SortOrderInput | SortOrder
    skills?: SortOrderInput | SortOrder
    jobBoards?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    location?: JobLocationOrderByWithRelationInput
    applicationForm?: ApplicationFormFieldOrderByRelationAggregateInput
    hiringTeam?: JobHiringMemberOrderByRelationAggregateInput
    jobWorkflow?: JobWorkflowOrderByWithRelationInput
    applications?: ApplicationOrderByRelationAggregateInput
    aiScreeningConfig?: AIScreeningConfigOrderByWithRelationInput
    aiSchedulingConfig?: AISchedulingConfigOrderByWithRelationInput
  }

  export type JobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    jobCode?: string
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    title?: StringFilter<"Job"> | string
    description?: StringFilter<"Job"> | string
    employmentType?: EnumEmploymentTypeFilter<"Job"> | $Enums.EmploymentType
    workType?: EnumWorkTypeFilter<"Job"> | $Enums.WorkType
    salaryMin?: FloatNullableFilter<"Job"> | number | null
    salaryMax?: FloatNullableFilter<"Job"> | number | null
    currency?: StringNullableFilter<"Job"> | string | null
    payPeriod?: StringNullableFilter<"Job"> | string | null
    displaySalary?: BoolFilter<"Job"> | boolean
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    companyId?: StringFilter<"Job"> | string
    departmentId?: StringNullableFilter<"Job"> | string | null
    locationId?: StringNullableFilter<"Job"> | string | null
    minYearsExperience?: IntNullableFilter<"Job"> | number | null
    skills?: JsonNullableFilter<"Job">
    jobBoards?: JsonNullableFilter<"Job">
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    location?: XOR<JobLocationNullableScalarRelationFilter, JobLocationWhereInput> | null
    applicationForm?: ApplicationFormFieldListRelationFilter
    hiringTeam?: JobHiringMemberListRelationFilter
    jobWorkflow?: XOR<JobWorkflowNullableScalarRelationFilter, JobWorkflowWhereInput> | null
    applications?: ApplicationListRelationFilter
    aiScreeningConfig?: XOR<AIScreeningConfigNullableScalarRelationFilter, AIScreeningConfigWhereInput> | null
    aiSchedulingConfig?: XOR<AISchedulingConfigNullableScalarRelationFilter, AISchedulingConfigWhereInput> | null
  }, "id" | "jobCode">

  export type JobOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    employmentType?: SortOrder
    workType?: SortOrder
    salaryMin?: SortOrderInput | SortOrder
    salaryMax?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    payPeriod?: SortOrderInput | SortOrder
    displaySalary?: SortOrder
    status?: SortOrder
    jobCode?: SortOrderInput | SortOrder
    companyId?: SortOrder
    departmentId?: SortOrderInput | SortOrder
    locationId?: SortOrderInput | SortOrder
    minYearsExperience?: SortOrderInput | SortOrder
    skills?: SortOrderInput | SortOrder
    jobBoards?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobCountOrderByAggregateInput
    _avg?: JobAvgOrderByAggregateInput
    _max?: JobMaxOrderByAggregateInput
    _min?: JobMinOrderByAggregateInput
    _sum?: JobSumOrderByAggregateInput
  }

  export type JobScalarWhereWithAggregatesInput = {
    AND?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    OR?: JobScalarWhereWithAggregatesInput[]
    NOT?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Job"> | string
    title?: StringWithAggregatesFilter<"Job"> | string
    description?: StringWithAggregatesFilter<"Job"> | string
    employmentType?: EnumEmploymentTypeWithAggregatesFilter<"Job"> | $Enums.EmploymentType
    workType?: EnumWorkTypeWithAggregatesFilter<"Job"> | $Enums.WorkType
    salaryMin?: FloatNullableWithAggregatesFilter<"Job"> | number | null
    salaryMax?: FloatNullableWithAggregatesFilter<"Job"> | number | null
    currency?: StringNullableWithAggregatesFilter<"Job"> | string | null
    payPeriod?: StringNullableWithAggregatesFilter<"Job"> | string | null
    displaySalary?: BoolWithAggregatesFilter<"Job"> | boolean
    status?: EnumJobStatusWithAggregatesFilter<"Job"> | $Enums.JobStatus
    jobCode?: StringNullableWithAggregatesFilter<"Job"> | string | null
    companyId?: StringWithAggregatesFilter<"Job"> | string
    departmentId?: StringNullableWithAggregatesFilter<"Job"> | string | null
    locationId?: StringNullableWithAggregatesFilter<"Job"> | string | null
    minYearsExperience?: IntNullableWithAggregatesFilter<"Job"> | number | null
    skills?: JsonNullableWithAggregatesFilter<"Job">
    jobBoards?: JsonNullableWithAggregatesFilter<"Job">
    createdAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    companyId?: StringFilter<"Department"> | string
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    jobs?: JobListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    jobs?: JobOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId_name?: DepartmentCompanyIdNameCompoundUniqueInput
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    name?: StringFilter<"Department"> | string
    companyId?: StringFilter<"Department"> | string
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    jobs?: JobListRelationFilter
  }, "id" | "companyId_name">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Department"> | string
    name?: StringWithAggregatesFilter<"Department"> | string
    companyId?: StringWithAggregatesFilter<"Department"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
  }

  export type JobLocationWhereInput = {
    AND?: JobLocationWhereInput | JobLocationWhereInput[]
    OR?: JobLocationWhereInput[]
    NOT?: JobLocationWhereInput | JobLocationWhereInput[]
    id?: StringFilter<"JobLocation"> | string
    address?: StringNullableFilter<"JobLocation"> | string | null
    country?: StringFilter<"JobLocation"> | string
    city?: StringFilter<"JobLocation"> | string
    stateRegion?: StringNullableFilter<"JobLocation"> | string | null
    zipPostal?: StringNullableFilter<"JobLocation"> | string | null
    companyId?: StringFilter<"JobLocation"> | string
    createdAt?: DateTimeFilter<"JobLocation"> | Date | string
    updatedAt?: DateTimeFilter<"JobLocation"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    jobs?: JobListRelationFilter
  }

  export type JobLocationOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrderInput | SortOrder
    country?: SortOrder
    city?: SortOrder
    stateRegion?: SortOrderInput | SortOrder
    zipPostal?: SortOrderInput | SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    jobs?: JobOrderByRelationAggregateInput
  }

  export type JobLocationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JobLocationWhereInput | JobLocationWhereInput[]
    OR?: JobLocationWhereInput[]
    NOT?: JobLocationWhereInput | JobLocationWhereInput[]
    address?: StringNullableFilter<"JobLocation"> | string | null
    country?: StringFilter<"JobLocation"> | string
    city?: StringFilter<"JobLocation"> | string
    stateRegion?: StringNullableFilter<"JobLocation"> | string | null
    zipPostal?: StringNullableFilter<"JobLocation"> | string | null
    companyId?: StringFilter<"JobLocation"> | string
    createdAt?: DateTimeFilter<"JobLocation"> | Date | string
    updatedAt?: DateTimeFilter<"JobLocation"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    jobs?: JobListRelationFilter
  }, "id">

  export type JobLocationOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrderInput | SortOrder
    country?: SortOrder
    city?: SortOrder
    stateRegion?: SortOrderInput | SortOrder
    zipPostal?: SortOrderInput | SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobLocationCountOrderByAggregateInput
    _max?: JobLocationMaxOrderByAggregateInput
    _min?: JobLocationMinOrderByAggregateInput
  }

  export type JobLocationScalarWhereWithAggregatesInput = {
    AND?: JobLocationScalarWhereWithAggregatesInput | JobLocationScalarWhereWithAggregatesInput[]
    OR?: JobLocationScalarWhereWithAggregatesInput[]
    NOT?: JobLocationScalarWhereWithAggregatesInput | JobLocationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JobLocation"> | string
    address?: StringNullableWithAggregatesFilter<"JobLocation"> | string | null
    country?: StringWithAggregatesFilter<"JobLocation"> | string
    city?: StringWithAggregatesFilter<"JobLocation"> | string
    stateRegion?: StringNullableWithAggregatesFilter<"JobLocation"> | string | null
    zipPostal?: StringNullableWithAggregatesFilter<"JobLocation"> | string | null
    companyId?: StringWithAggregatesFilter<"JobLocation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"JobLocation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"JobLocation"> | Date | string
  }

  export type ApplicationFormFieldWhereInput = {
    AND?: ApplicationFormFieldWhereInput | ApplicationFormFieldWhereInput[]
    OR?: ApplicationFormFieldWhereInput[]
    NOT?: ApplicationFormFieldWhereInput | ApplicationFormFieldWhereInput[]
    id?: StringFilter<"ApplicationFormField"> | string
    jobId?: StringFilter<"ApplicationFormField"> | string
    fieldName?: StringFilter<"ApplicationFormField"> | string
    label?: StringFilter<"ApplicationFormField"> | string
    fieldType?: EnumFieldTypeFilter<"ApplicationFormField"> | $Enums.FieldType
    isRequired?: BoolFilter<"ApplicationFormField"> | boolean
    isOptional?: BoolFilter<"ApplicationFormField"> | boolean
    isDisabled?: BoolFilter<"ApplicationFormField"> | boolean
    customQuestionId?: StringNullableFilter<"ApplicationFormField"> | string | null
    order?: IntFilter<"ApplicationFormField"> | number
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    customQuestion?: XOR<CustomQuestionNullableScalarRelationFilter, CustomQuestionWhereInput> | null
  }

  export type ApplicationFormFieldOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    fieldName?: SortOrder
    label?: SortOrder
    fieldType?: SortOrder
    isRequired?: SortOrder
    isOptional?: SortOrder
    isDisabled?: SortOrder
    customQuestionId?: SortOrderInput | SortOrder
    order?: SortOrder
    job?: JobOrderByWithRelationInput
    customQuestion?: CustomQuestionOrderByWithRelationInput
  }

  export type ApplicationFormFieldWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ApplicationFormFieldWhereInput | ApplicationFormFieldWhereInput[]
    OR?: ApplicationFormFieldWhereInput[]
    NOT?: ApplicationFormFieldWhereInput | ApplicationFormFieldWhereInput[]
    jobId?: StringFilter<"ApplicationFormField"> | string
    fieldName?: StringFilter<"ApplicationFormField"> | string
    label?: StringFilter<"ApplicationFormField"> | string
    fieldType?: EnumFieldTypeFilter<"ApplicationFormField"> | $Enums.FieldType
    isRequired?: BoolFilter<"ApplicationFormField"> | boolean
    isOptional?: BoolFilter<"ApplicationFormField"> | boolean
    isDisabled?: BoolFilter<"ApplicationFormField"> | boolean
    customQuestionId?: StringNullableFilter<"ApplicationFormField"> | string | null
    order?: IntFilter<"ApplicationFormField"> | number
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    customQuestion?: XOR<CustomQuestionNullableScalarRelationFilter, CustomQuestionWhereInput> | null
  }, "id">

  export type ApplicationFormFieldOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    fieldName?: SortOrder
    label?: SortOrder
    fieldType?: SortOrder
    isRequired?: SortOrder
    isOptional?: SortOrder
    isDisabled?: SortOrder
    customQuestionId?: SortOrderInput | SortOrder
    order?: SortOrder
    _count?: ApplicationFormFieldCountOrderByAggregateInput
    _avg?: ApplicationFormFieldAvgOrderByAggregateInput
    _max?: ApplicationFormFieldMaxOrderByAggregateInput
    _min?: ApplicationFormFieldMinOrderByAggregateInput
    _sum?: ApplicationFormFieldSumOrderByAggregateInput
  }

  export type ApplicationFormFieldScalarWhereWithAggregatesInput = {
    AND?: ApplicationFormFieldScalarWhereWithAggregatesInput | ApplicationFormFieldScalarWhereWithAggregatesInput[]
    OR?: ApplicationFormFieldScalarWhereWithAggregatesInput[]
    NOT?: ApplicationFormFieldScalarWhereWithAggregatesInput | ApplicationFormFieldScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ApplicationFormField"> | string
    jobId?: StringWithAggregatesFilter<"ApplicationFormField"> | string
    fieldName?: StringWithAggregatesFilter<"ApplicationFormField"> | string
    label?: StringWithAggregatesFilter<"ApplicationFormField"> | string
    fieldType?: EnumFieldTypeWithAggregatesFilter<"ApplicationFormField"> | $Enums.FieldType
    isRequired?: BoolWithAggregatesFilter<"ApplicationFormField"> | boolean
    isOptional?: BoolWithAggregatesFilter<"ApplicationFormField"> | boolean
    isDisabled?: BoolWithAggregatesFilter<"ApplicationFormField"> | boolean
    customQuestionId?: StringNullableWithAggregatesFilter<"ApplicationFormField"> | string | null
    order?: IntWithAggregatesFilter<"ApplicationFormField"> | number
  }

  export type CustomQuestionWhereInput = {
    AND?: CustomQuestionWhereInput | CustomQuestionWhereInput[]
    OR?: CustomQuestionWhereInput[]
    NOT?: CustomQuestionWhereInput | CustomQuestionWhereInput[]
    id?: StringFilter<"CustomQuestion"> | string
    companyId?: StringFilter<"CustomQuestion"> | string
    questionText?: StringFilter<"CustomQuestion"> | string
    responseType?: EnumResponseTypeFilter<"CustomQuestion"> | $Enums.ResponseType
    options?: JsonNullableFilter<"CustomQuestion">
    visibility?: EnumResponseVisibilityFilter<"CustomQuestion"> | $Enums.ResponseVisibility
    createdAt?: DateTimeFilter<"CustomQuestion"> | Date | string
    updatedAt?: DateTimeFilter<"CustomQuestion"> | Date | string
    applicationFormFields?: ApplicationFormFieldListRelationFilter
    candidateAnswers?: CandidateAnswerListRelationFilter
  }

  export type CustomQuestionOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    questionText?: SortOrder
    responseType?: SortOrder
    options?: SortOrderInput | SortOrder
    visibility?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicationFormFields?: ApplicationFormFieldOrderByRelationAggregateInput
    candidateAnswers?: CandidateAnswerOrderByRelationAggregateInput
  }

  export type CustomQuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CustomQuestionWhereInput | CustomQuestionWhereInput[]
    OR?: CustomQuestionWhereInput[]
    NOT?: CustomQuestionWhereInput | CustomQuestionWhereInput[]
    companyId?: StringFilter<"CustomQuestion"> | string
    questionText?: StringFilter<"CustomQuestion"> | string
    responseType?: EnumResponseTypeFilter<"CustomQuestion"> | $Enums.ResponseType
    options?: JsonNullableFilter<"CustomQuestion">
    visibility?: EnumResponseVisibilityFilter<"CustomQuestion"> | $Enums.ResponseVisibility
    createdAt?: DateTimeFilter<"CustomQuestion"> | Date | string
    updatedAt?: DateTimeFilter<"CustomQuestion"> | Date | string
    applicationFormFields?: ApplicationFormFieldListRelationFilter
    candidateAnswers?: CandidateAnswerListRelationFilter
  }, "id">

  export type CustomQuestionOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    questionText?: SortOrder
    responseType?: SortOrder
    options?: SortOrderInput | SortOrder
    visibility?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomQuestionCountOrderByAggregateInput
    _max?: CustomQuestionMaxOrderByAggregateInput
    _min?: CustomQuestionMinOrderByAggregateInput
  }

  export type CustomQuestionScalarWhereWithAggregatesInput = {
    AND?: CustomQuestionScalarWhereWithAggregatesInput | CustomQuestionScalarWhereWithAggregatesInput[]
    OR?: CustomQuestionScalarWhereWithAggregatesInput[]
    NOT?: CustomQuestionScalarWhereWithAggregatesInput | CustomQuestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CustomQuestion"> | string
    companyId?: StringWithAggregatesFilter<"CustomQuestion"> | string
    questionText?: StringWithAggregatesFilter<"CustomQuestion"> | string
    responseType?: EnumResponseTypeWithAggregatesFilter<"CustomQuestion"> | $Enums.ResponseType
    options?: JsonNullableWithAggregatesFilter<"CustomQuestion">
    visibility?: EnumResponseVisibilityWithAggregatesFilter<"CustomQuestion"> | $Enums.ResponseVisibility
    createdAt?: DateTimeWithAggregatesFilter<"CustomQuestion"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CustomQuestion"> | Date | string
  }

  export type CandidateWhereInput = {
    AND?: CandidateWhereInput | CandidateWhereInput[]
    OR?: CandidateWhereInput[]
    NOT?: CandidateWhereInput | CandidateWhereInput[]
    id?: StringFilter<"Candidate"> | string
    firstName?: StringFilter<"Candidate"> | string
    lastName?: StringFilter<"Candidate"> | string
    email?: StringFilter<"Candidate"> | string
    phoneNumber?: StringNullableFilter<"Candidate"> | string | null
    resumeUrl?: StringNullableFilter<"Candidate"> | string | null
    coverLetterText?: StringNullableFilter<"Candidate"> | string | null
    createdAt?: DateTimeFilter<"Candidate"> | Date | string
    updatedAt?: DateTimeFilter<"Candidate"> | Date | string
    applications?: ApplicationListRelationFilter
    candidateAnswers?: CandidateAnswerListRelationFilter
  }

  export type CandidateOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    resumeUrl?: SortOrderInput | SortOrder
    coverLetterText?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applications?: ApplicationOrderByRelationAggregateInput
    candidateAnswers?: CandidateAnswerOrderByRelationAggregateInput
  }

  export type CandidateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: CandidateWhereInput | CandidateWhereInput[]
    OR?: CandidateWhereInput[]
    NOT?: CandidateWhereInput | CandidateWhereInput[]
    firstName?: StringFilter<"Candidate"> | string
    lastName?: StringFilter<"Candidate"> | string
    phoneNumber?: StringNullableFilter<"Candidate"> | string | null
    resumeUrl?: StringNullableFilter<"Candidate"> | string | null
    coverLetterText?: StringNullableFilter<"Candidate"> | string | null
    createdAt?: DateTimeFilter<"Candidate"> | Date | string
    updatedAt?: DateTimeFilter<"Candidate"> | Date | string
    applications?: ApplicationListRelationFilter
    candidateAnswers?: CandidateAnswerListRelationFilter
  }, "id" | "email">

  export type CandidateOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    resumeUrl?: SortOrderInput | SortOrder
    coverLetterText?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CandidateCountOrderByAggregateInput
    _max?: CandidateMaxOrderByAggregateInput
    _min?: CandidateMinOrderByAggregateInput
  }

  export type CandidateScalarWhereWithAggregatesInput = {
    AND?: CandidateScalarWhereWithAggregatesInput | CandidateScalarWhereWithAggregatesInput[]
    OR?: CandidateScalarWhereWithAggregatesInput[]
    NOT?: CandidateScalarWhereWithAggregatesInput | CandidateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Candidate"> | string
    firstName?: StringWithAggregatesFilter<"Candidate"> | string
    lastName?: StringWithAggregatesFilter<"Candidate"> | string
    email?: StringWithAggregatesFilter<"Candidate"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    resumeUrl?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    coverLetterText?: StringNullableWithAggregatesFilter<"Candidate"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Candidate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Candidate"> | Date | string
  }

  export type ApplicationWhereInput = {
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    id?: StringFilter<"Application"> | string
    jobId?: StringFilter<"Application"> | string
    candidateId?: StringFilter<"Application"> | string
    appliedAt?: DateTimeFilter<"Application"> | Date | string
    currentStageId?: StringNullableFilter<"Application"> | string | null
    status?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    disqualificationReason?: StringNullableFilter<"Application"> | string | null
    archivedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    hiredAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    source?: StringNullableFilter<"Application"> | string | null
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
    candidateAnswers?: CandidateAnswerListRelationFilter
    candidateRatings?: CandidateRatingListRelationFilter
    messages?: MessageThreadListRelationFilter
  }

  export type ApplicationOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    appliedAt?: SortOrder
    currentStageId?: SortOrderInput | SortOrder
    status?: SortOrder
    disqualificationReason?: SortOrderInput | SortOrder
    archivedAt?: SortOrderInput | SortOrder
    hiredAt?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    job?: JobOrderByWithRelationInput
    candidate?: CandidateOrderByWithRelationInput
    candidateAnswers?: CandidateAnswerOrderByRelationAggregateInput
    candidateRatings?: CandidateRatingOrderByRelationAggregateInput
    messages?: MessageThreadOrderByRelationAggregateInput
  }

  export type ApplicationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    jobId_candidateId?: ApplicationJobIdCandidateIdCompoundUniqueInput
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    jobId?: StringFilter<"Application"> | string
    candidateId?: StringFilter<"Application"> | string
    appliedAt?: DateTimeFilter<"Application"> | Date | string
    currentStageId?: StringNullableFilter<"Application"> | string | null
    status?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    disqualificationReason?: StringNullableFilter<"Application"> | string | null
    archivedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    hiredAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    source?: StringNullableFilter<"Application"> | string | null
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
    candidateAnswers?: CandidateAnswerListRelationFilter
    candidateRatings?: CandidateRatingListRelationFilter
    messages?: MessageThreadListRelationFilter
  }, "id" | "jobId_candidateId">

  export type ApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    appliedAt?: SortOrder
    currentStageId?: SortOrderInput | SortOrder
    status?: SortOrder
    disqualificationReason?: SortOrderInput | SortOrder
    archivedAt?: SortOrderInput | SortOrder
    hiredAt?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    _count?: ApplicationCountOrderByAggregateInput
    _max?: ApplicationMaxOrderByAggregateInput
    _min?: ApplicationMinOrderByAggregateInput
  }

  export type ApplicationScalarWhereWithAggregatesInput = {
    AND?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    OR?: ApplicationScalarWhereWithAggregatesInput[]
    NOT?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Application"> | string
    jobId?: StringWithAggregatesFilter<"Application"> | string
    candidateId?: StringWithAggregatesFilter<"Application"> | string
    appliedAt?: DateTimeWithAggregatesFilter<"Application"> | Date | string
    currentStageId?: StringNullableWithAggregatesFilter<"Application"> | string | null
    status?: EnumApplicationStatusWithAggregatesFilter<"Application"> | $Enums.ApplicationStatus
    disqualificationReason?: StringNullableWithAggregatesFilter<"Application"> | string | null
    archivedAt?: DateTimeNullableWithAggregatesFilter<"Application"> | Date | string | null
    hiredAt?: DateTimeNullableWithAggregatesFilter<"Application"> | Date | string | null
    source?: StringNullableWithAggregatesFilter<"Application"> | string | null
  }

  export type CandidateAnswerWhereInput = {
    AND?: CandidateAnswerWhereInput | CandidateAnswerWhereInput[]
    OR?: CandidateAnswerWhereInput[]
    NOT?: CandidateAnswerWhereInput | CandidateAnswerWhereInput[]
    id?: StringFilter<"CandidateAnswer"> | string
    applicationId?: StringFilter<"CandidateAnswer"> | string
    customQuestionId?: StringFilter<"CandidateAnswer"> | string
    answerText?: StringNullableFilter<"CandidateAnswer"> | string | null
    answerFileUrl?: StringNullableFilter<"CandidateAnswer"> | string | null
    answeredAt?: DateTimeFilter<"CandidateAnswer"> | Date | string
    candidateId?: StringFilter<"CandidateAnswer"> | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    customQuestion?: XOR<CustomQuestionScalarRelationFilter, CustomQuestionWhereInput>
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }

  export type CandidateAnswerOrderByWithRelationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    customQuestionId?: SortOrder
    answerText?: SortOrderInput | SortOrder
    answerFileUrl?: SortOrderInput | SortOrder
    answeredAt?: SortOrder
    candidateId?: SortOrder
    application?: ApplicationOrderByWithRelationInput
    customQuestion?: CustomQuestionOrderByWithRelationInput
    candidate?: CandidateOrderByWithRelationInput
  }

  export type CandidateAnswerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CandidateAnswerWhereInput | CandidateAnswerWhereInput[]
    OR?: CandidateAnswerWhereInput[]
    NOT?: CandidateAnswerWhereInput | CandidateAnswerWhereInput[]
    applicationId?: StringFilter<"CandidateAnswer"> | string
    customQuestionId?: StringFilter<"CandidateAnswer"> | string
    answerText?: StringNullableFilter<"CandidateAnswer"> | string | null
    answerFileUrl?: StringNullableFilter<"CandidateAnswer"> | string | null
    answeredAt?: DateTimeFilter<"CandidateAnswer"> | Date | string
    candidateId?: StringFilter<"CandidateAnswer"> | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    customQuestion?: XOR<CustomQuestionScalarRelationFilter, CustomQuestionWhereInput>
    candidate?: XOR<CandidateScalarRelationFilter, CandidateWhereInput>
  }, "id">

  export type CandidateAnswerOrderByWithAggregationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    customQuestionId?: SortOrder
    answerText?: SortOrderInput | SortOrder
    answerFileUrl?: SortOrderInput | SortOrder
    answeredAt?: SortOrder
    candidateId?: SortOrder
    _count?: CandidateAnswerCountOrderByAggregateInput
    _max?: CandidateAnswerMaxOrderByAggregateInput
    _min?: CandidateAnswerMinOrderByAggregateInput
  }

  export type CandidateAnswerScalarWhereWithAggregatesInput = {
    AND?: CandidateAnswerScalarWhereWithAggregatesInput | CandidateAnswerScalarWhereWithAggregatesInput[]
    OR?: CandidateAnswerScalarWhereWithAggregatesInput[]
    NOT?: CandidateAnswerScalarWhereWithAggregatesInput | CandidateAnswerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CandidateAnswer"> | string
    applicationId?: StringWithAggregatesFilter<"CandidateAnswer"> | string
    customQuestionId?: StringWithAggregatesFilter<"CandidateAnswer"> | string
    answerText?: StringNullableWithAggregatesFilter<"CandidateAnswer"> | string | null
    answerFileUrl?: StringNullableWithAggregatesFilter<"CandidateAnswer"> | string | null
    answeredAt?: DateTimeWithAggregatesFilter<"CandidateAnswer"> | Date | string
    candidateId?: StringWithAggregatesFilter<"CandidateAnswer"> | string
  }

  export type WorkflowTemplateWhereInput = {
    AND?: WorkflowTemplateWhereInput | WorkflowTemplateWhereInput[]
    OR?: WorkflowTemplateWhereInput[]
    NOT?: WorkflowTemplateWhereInput | WorkflowTemplateWhereInput[]
    id?: StringFilter<"WorkflowTemplate"> | string
    name?: StringFilter<"WorkflowTemplate"> | string
    companyId?: StringFilter<"WorkflowTemplate"> | string
    isDefault?: BoolFilter<"WorkflowTemplate"> | boolean
    createdAt?: DateTimeFilter<"WorkflowTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"WorkflowTemplate"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    stages?: WorkflowStageTemplateListRelationFilter
    jobWorkflows?: JobWorkflowListRelationFilter
  }

  export type WorkflowTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    companyId?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    stages?: WorkflowStageTemplateOrderByRelationAggregateInput
    jobWorkflows?: JobWorkflowOrderByRelationAggregateInput
  }

  export type WorkflowTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId_name?: WorkflowTemplateCompanyIdNameCompoundUniqueInput
    AND?: WorkflowTemplateWhereInput | WorkflowTemplateWhereInput[]
    OR?: WorkflowTemplateWhereInput[]
    NOT?: WorkflowTemplateWhereInput | WorkflowTemplateWhereInput[]
    name?: StringFilter<"WorkflowTemplate"> | string
    companyId?: StringFilter<"WorkflowTemplate"> | string
    isDefault?: BoolFilter<"WorkflowTemplate"> | boolean
    createdAt?: DateTimeFilter<"WorkflowTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"WorkflowTemplate"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    stages?: WorkflowStageTemplateListRelationFilter
    jobWorkflows?: JobWorkflowListRelationFilter
  }, "id" | "companyId_name">

  export type WorkflowTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    companyId?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkflowTemplateCountOrderByAggregateInput
    _max?: WorkflowTemplateMaxOrderByAggregateInput
    _min?: WorkflowTemplateMinOrderByAggregateInput
  }

  export type WorkflowTemplateScalarWhereWithAggregatesInput = {
    AND?: WorkflowTemplateScalarWhereWithAggregatesInput | WorkflowTemplateScalarWhereWithAggregatesInput[]
    OR?: WorkflowTemplateScalarWhereWithAggregatesInput[]
    NOT?: WorkflowTemplateScalarWhereWithAggregatesInput | WorkflowTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkflowTemplate"> | string
    name?: StringWithAggregatesFilter<"WorkflowTemplate"> | string
    companyId?: StringWithAggregatesFilter<"WorkflowTemplate"> | string
    isDefault?: BoolWithAggregatesFilter<"WorkflowTemplate"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"WorkflowTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkflowTemplate"> | Date | string
  }

  export type WorkflowStageTemplateWhereInput = {
    AND?: WorkflowStageTemplateWhereInput | WorkflowStageTemplateWhereInput[]
    OR?: WorkflowStageTemplateWhereInput[]
    NOT?: WorkflowStageTemplateWhereInput | WorkflowStageTemplateWhereInput[]
    id?: StringFilter<"WorkflowStageTemplate"> | string
    workflowTemplateId?: StringFilter<"WorkflowStageTemplate"> | string
    name?: StringFilter<"WorkflowStageTemplate"> | string
    type?: EnumStageTypeFilter<"WorkflowStageTemplate"> | $Enums.StageType
    order?: IntFilter<"WorkflowStageTemplate"> | number
    isDefault?: BoolFilter<"WorkflowStageTemplate"> | boolean
    canBeDeleted?: BoolFilter<"WorkflowStageTemplate"> | boolean
    settings?: JsonNullableFilter<"WorkflowStageTemplate">
    visibilityToReviewers?: BoolFilter<"WorkflowStageTemplate"> | boolean
    workflowTemplate?: XOR<WorkflowTemplateScalarRelationFilter, WorkflowTemplateWhereInput>
  }

  export type WorkflowStageTemplateOrderByWithRelationInput = {
    id?: SortOrder
    workflowTemplateId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    order?: SortOrder
    isDefault?: SortOrder
    canBeDeleted?: SortOrder
    settings?: SortOrderInput | SortOrder
    visibilityToReviewers?: SortOrder
    workflowTemplate?: WorkflowTemplateOrderByWithRelationInput
  }

  export type WorkflowStageTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    workflowTemplateId_order?: WorkflowStageTemplateWorkflowTemplateIdOrderCompoundUniqueInput
    workflowTemplateId_name?: WorkflowStageTemplateWorkflowTemplateIdNameCompoundUniqueInput
    AND?: WorkflowStageTemplateWhereInput | WorkflowStageTemplateWhereInput[]
    OR?: WorkflowStageTemplateWhereInput[]
    NOT?: WorkflowStageTemplateWhereInput | WorkflowStageTemplateWhereInput[]
    workflowTemplateId?: StringFilter<"WorkflowStageTemplate"> | string
    name?: StringFilter<"WorkflowStageTemplate"> | string
    type?: EnumStageTypeFilter<"WorkflowStageTemplate"> | $Enums.StageType
    order?: IntFilter<"WorkflowStageTemplate"> | number
    isDefault?: BoolFilter<"WorkflowStageTemplate"> | boolean
    canBeDeleted?: BoolFilter<"WorkflowStageTemplate"> | boolean
    settings?: JsonNullableFilter<"WorkflowStageTemplate">
    visibilityToReviewers?: BoolFilter<"WorkflowStageTemplate"> | boolean
    workflowTemplate?: XOR<WorkflowTemplateScalarRelationFilter, WorkflowTemplateWhereInput>
  }, "id" | "workflowTemplateId_order" | "workflowTemplateId_name">

  export type WorkflowStageTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    workflowTemplateId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    order?: SortOrder
    isDefault?: SortOrder
    canBeDeleted?: SortOrder
    settings?: SortOrderInput | SortOrder
    visibilityToReviewers?: SortOrder
    _count?: WorkflowStageTemplateCountOrderByAggregateInput
    _avg?: WorkflowStageTemplateAvgOrderByAggregateInput
    _max?: WorkflowStageTemplateMaxOrderByAggregateInput
    _min?: WorkflowStageTemplateMinOrderByAggregateInput
    _sum?: WorkflowStageTemplateSumOrderByAggregateInput
  }

  export type WorkflowStageTemplateScalarWhereWithAggregatesInput = {
    AND?: WorkflowStageTemplateScalarWhereWithAggregatesInput | WorkflowStageTemplateScalarWhereWithAggregatesInput[]
    OR?: WorkflowStageTemplateScalarWhereWithAggregatesInput[]
    NOT?: WorkflowStageTemplateScalarWhereWithAggregatesInput | WorkflowStageTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkflowStageTemplate"> | string
    workflowTemplateId?: StringWithAggregatesFilter<"WorkflowStageTemplate"> | string
    name?: StringWithAggregatesFilter<"WorkflowStageTemplate"> | string
    type?: EnumStageTypeWithAggregatesFilter<"WorkflowStageTemplate"> | $Enums.StageType
    order?: IntWithAggregatesFilter<"WorkflowStageTemplate"> | number
    isDefault?: BoolWithAggregatesFilter<"WorkflowStageTemplate"> | boolean
    canBeDeleted?: BoolWithAggregatesFilter<"WorkflowStageTemplate"> | boolean
    settings?: JsonNullableWithAggregatesFilter<"WorkflowStageTemplate">
    visibilityToReviewers?: BoolWithAggregatesFilter<"WorkflowStageTemplate"> | boolean
  }

  export type JobWorkflowWhereInput = {
    AND?: JobWorkflowWhereInput | JobWorkflowWhereInput[]
    OR?: JobWorkflowWhereInput[]
    NOT?: JobWorkflowWhereInput | JobWorkflowWhereInput[]
    id?: StringFilter<"JobWorkflow"> | string
    jobId?: StringFilter<"JobWorkflow"> | string
    workflowTemplateId?: StringNullableFilter<"JobWorkflow"> | string | null
    name?: StringFilter<"JobWorkflow"> | string
    createdAt?: DateTimeFilter<"JobWorkflow"> | Date | string
    updatedAt?: DateTimeFilter<"JobWorkflow"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    workflowTemplate?: XOR<WorkflowTemplateNullableScalarRelationFilter, WorkflowTemplateWhereInput> | null
    stages?: JobWorkflowStageListRelationFilter
  }

  export type JobWorkflowOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    workflowTemplateId?: SortOrderInput | SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    job?: JobOrderByWithRelationInput
    workflowTemplate?: WorkflowTemplateOrderByWithRelationInput
    stages?: JobWorkflowStageOrderByRelationAggregateInput
  }

  export type JobWorkflowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    jobId?: string
    AND?: JobWorkflowWhereInput | JobWorkflowWhereInput[]
    OR?: JobWorkflowWhereInput[]
    NOT?: JobWorkflowWhereInput | JobWorkflowWhereInput[]
    workflowTemplateId?: StringNullableFilter<"JobWorkflow"> | string | null
    name?: StringFilter<"JobWorkflow"> | string
    createdAt?: DateTimeFilter<"JobWorkflow"> | Date | string
    updatedAt?: DateTimeFilter<"JobWorkflow"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    workflowTemplate?: XOR<WorkflowTemplateNullableScalarRelationFilter, WorkflowTemplateWhereInput> | null
    stages?: JobWorkflowStageListRelationFilter
  }, "id" | "jobId">

  export type JobWorkflowOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    workflowTemplateId?: SortOrderInput | SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobWorkflowCountOrderByAggregateInput
    _max?: JobWorkflowMaxOrderByAggregateInput
    _min?: JobWorkflowMinOrderByAggregateInput
  }

  export type JobWorkflowScalarWhereWithAggregatesInput = {
    AND?: JobWorkflowScalarWhereWithAggregatesInput | JobWorkflowScalarWhereWithAggregatesInput[]
    OR?: JobWorkflowScalarWhereWithAggregatesInput[]
    NOT?: JobWorkflowScalarWhereWithAggregatesInput | JobWorkflowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JobWorkflow"> | string
    jobId?: StringWithAggregatesFilter<"JobWorkflow"> | string
    workflowTemplateId?: StringNullableWithAggregatesFilter<"JobWorkflow"> | string | null
    name?: StringWithAggregatesFilter<"JobWorkflow"> | string
    createdAt?: DateTimeWithAggregatesFilter<"JobWorkflow"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"JobWorkflow"> | Date | string
  }

  export type JobWorkflowStageWhereInput = {
    AND?: JobWorkflowStageWhereInput | JobWorkflowStageWhereInput[]
    OR?: JobWorkflowStageWhereInput[]
    NOT?: JobWorkflowStageWhereInput | JobWorkflowStageWhereInput[]
    id?: StringFilter<"JobWorkflowStage"> | string
    jobWorkflowId?: StringFilter<"JobWorkflowStage"> | string
    name?: StringFilter<"JobWorkflowStage"> | string
    type?: EnumStageTypeFilter<"JobWorkflowStage"> | $Enums.StageType
    order?: IntFilter<"JobWorkflowStage"> | number
    settings?: JsonNullableFilter<"JobWorkflowStage">
    jobWorkflow?: XOR<JobWorkflowScalarRelationFilter, JobWorkflowWhereInput>
  }

  export type JobWorkflowStageOrderByWithRelationInput = {
    id?: SortOrder
    jobWorkflowId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    order?: SortOrder
    settings?: SortOrderInput | SortOrder
    jobWorkflow?: JobWorkflowOrderByWithRelationInput
  }

  export type JobWorkflowStageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    jobWorkflowId_order?: JobWorkflowStageJobWorkflowIdOrderCompoundUniqueInput
    jobWorkflowId_name?: JobWorkflowStageJobWorkflowIdNameCompoundUniqueInput
    AND?: JobWorkflowStageWhereInput | JobWorkflowStageWhereInput[]
    OR?: JobWorkflowStageWhereInput[]
    NOT?: JobWorkflowStageWhereInput | JobWorkflowStageWhereInput[]
    jobWorkflowId?: StringFilter<"JobWorkflowStage"> | string
    name?: StringFilter<"JobWorkflowStage"> | string
    type?: EnumStageTypeFilter<"JobWorkflowStage"> | $Enums.StageType
    order?: IntFilter<"JobWorkflowStage"> | number
    settings?: JsonNullableFilter<"JobWorkflowStage">
    jobWorkflow?: XOR<JobWorkflowScalarRelationFilter, JobWorkflowWhereInput>
  }, "id" | "jobWorkflowId_order" | "jobWorkflowId_name">

  export type JobWorkflowStageOrderByWithAggregationInput = {
    id?: SortOrder
    jobWorkflowId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    order?: SortOrder
    settings?: SortOrderInput | SortOrder
    _count?: JobWorkflowStageCountOrderByAggregateInput
    _avg?: JobWorkflowStageAvgOrderByAggregateInput
    _max?: JobWorkflowStageMaxOrderByAggregateInput
    _min?: JobWorkflowStageMinOrderByAggregateInput
    _sum?: JobWorkflowStageSumOrderByAggregateInput
  }

  export type JobWorkflowStageScalarWhereWithAggregatesInput = {
    AND?: JobWorkflowStageScalarWhereWithAggregatesInput | JobWorkflowStageScalarWhereWithAggregatesInput[]
    OR?: JobWorkflowStageScalarWhereWithAggregatesInput[]
    NOT?: JobWorkflowStageScalarWhereWithAggregatesInput | JobWorkflowStageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JobWorkflowStage"> | string
    jobWorkflowId?: StringWithAggregatesFilter<"JobWorkflowStage"> | string
    name?: StringWithAggregatesFilter<"JobWorkflowStage"> | string
    type?: EnumStageTypeWithAggregatesFilter<"JobWorkflowStage"> | $Enums.StageType
    order?: IntWithAggregatesFilter<"JobWorkflowStage"> | number
    settings?: JsonNullableWithAggregatesFilter<"JobWorkflowStage">
  }

  export type JobHiringMemberWhereInput = {
    AND?: JobHiringMemberWhereInput | JobHiringMemberWhereInput[]
    OR?: JobHiringMemberWhereInput[]
    NOT?: JobHiringMemberWhereInput | JobHiringMemberWhereInput[]
    id?: StringFilter<"JobHiringMember"> | string
    jobId?: StringFilter<"JobHiringMember"> | string
    userId?: StringFilter<"JobHiringMember"> | string
    role?: EnumCompanyMemberRoleFilter<"JobHiringMember"> | $Enums.CompanyMemberRole
    isExternalRecruiter?: BoolFilter<"JobHiringMember"> | boolean
    createdAt?: DateTimeFilter<"JobHiringMember"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type JobHiringMemberOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    isExternalRecruiter?: SortOrder
    createdAt?: SortOrder
    job?: JobOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type JobHiringMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    jobId_userId?: JobHiringMemberJobIdUserIdCompoundUniqueInput
    AND?: JobHiringMemberWhereInput | JobHiringMemberWhereInput[]
    OR?: JobHiringMemberWhereInput[]
    NOT?: JobHiringMemberWhereInput | JobHiringMemberWhereInput[]
    jobId?: StringFilter<"JobHiringMember"> | string
    userId?: StringFilter<"JobHiringMember"> | string
    role?: EnumCompanyMemberRoleFilter<"JobHiringMember"> | $Enums.CompanyMemberRole
    isExternalRecruiter?: BoolFilter<"JobHiringMember"> | boolean
    createdAt?: DateTimeFilter<"JobHiringMember"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "jobId_userId">

  export type JobHiringMemberOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    isExternalRecruiter?: SortOrder
    createdAt?: SortOrder
    _count?: JobHiringMemberCountOrderByAggregateInput
    _max?: JobHiringMemberMaxOrderByAggregateInput
    _min?: JobHiringMemberMinOrderByAggregateInput
  }

  export type JobHiringMemberScalarWhereWithAggregatesInput = {
    AND?: JobHiringMemberScalarWhereWithAggregatesInput | JobHiringMemberScalarWhereWithAggregatesInput[]
    OR?: JobHiringMemberScalarWhereWithAggregatesInput[]
    NOT?: JobHiringMemberScalarWhereWithAggregatesInput | JobHiringMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JobHiringMember"> | string
    jobId?: StringWithAggregatesFilter<"JobHiringMember"> | string
    userId?: StringWithAggregatesFilter<"JobHiringMember"> | string
    role?: EnumCompanyMemberRoleWithAggregatesFilter<"JobHiringMember"> | $Enums.CompanyMemberRole
    isExternalRecruiter?: BoolWithAggregatesFilter<"JobHiringMember"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"JobHiringMember"> | Date | string
  }

  export type RatingCardTemplateWhereInput = {
    AND?: RatingCardTemplateWhereInput | RatingCardTemplateWhereInput[]
    OR?: RatingCardTemplateWhereInput[]
    NOT?: RatingCardTemplateWhereInput | RatingCardTemplateWhereInput[]
    id?: StringFilter<"RatingCardTemplate"> | string
    name?: StringFilter<"RatingCardTemplate"> | string
    description?: StringNullableFilter<"RatingCardTemplate"> | string | null
    companyId?: StringFilter<"RatingCardTemplate"> | string
    type?: EnumRatingCardTypeFilter<"RatingCardTemplate"> | $Enums.RatingCardType
    isDefault?: BoolFilter<"RatingCardTemplate"> | boolean
    createdAt?: DateTimeFilter<"RatingCardTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"RatingCardTemplate"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    categories?: RatingCategoryListRelationFilter
    candidateRatings?: CandidateRatingListRelationFilter
  }

  export type RatingCardTemplateOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    companyId?: SortOrder
    type?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    categories?: RatingCategoryOrderByRelationAggregateInput
    candidateRatings?: CandidateRatingOrderByRelationAggregateInput
  }

  export type RatingCardTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId_name?: RatingCardTemplateCompanyIdNameCompoundUniqueInput
    AND?: RatingCardTemplateWhereInput | RatingCardTemplateWhereInput[]
    OR?: RatingCardTemplateWhereInput[]
    NOT?: RatingCardTemplateWhereInput | RatingCardTemplateWhereInput[]
    name?: StringFilter<"RatingCardTemplate"> | string
    description?: StringNullableFilter<"RatingCardTemplate"> | string | null
    companyId?: StringFilter<"RatingCardTemplate"> | string
    type?: EnumRatingCardTypeFilter<"RatingCardTemplate"> | $Enums.RatingCardType
    isDefault?: BoolFilter<"RatingCardTemplate"> | boolean
    createdAt?: DateTimeFilter<"RatingCardTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"RatingCardTemplate"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    categories?: RatingCategoryListRelationFilter
    candidateRatings?: CandidateRatingListRelationFilter
  }, "id" | "companyId_name">

  export type RatingCardTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    companyId?: SortOrder
    type?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RatingCardTemplateCountOrderByAggregateInput
    _max?: RatingCardTemplateMaxOrderByAggregateInput
    _min?: RatingCardTemplateMinOrderByAggregateInput
  }

  export type RatingCardTemplateScalarWhereWithAggregatesInput = {
    AND?: RatingCardTemplateScalarWhereWithAggregatesInput | RatingCardTemplateScalarWhereWithAggregatesInput[]
    OR?: RatingCardTemplateScalarWhereWithAggregatesInput[]
    NOT?: RatingCardTemplateScalarWhereWithAggregatesInput | RatingCardTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RatingCardTemplate"> | string
    name?: StringWithAggregatesFilter<"RatingCardTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"RatingCardTemplate"> | string | null
    companyId?: StringWithAggregatesFilter<"RatingCardTemplate"> | string
    type?: EnumRatingCardTypeWithAggregatesFilter<"RatingCardTemplate"> | $Enums.RatingCardType
    isDefault?: BoolWithAggregatesFilter<"RatingCardTemplate"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"RatingCardTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RatingCardTemplate"> | Date | string
  }

  export type RatingCategoryWhereInput = {
    AND?: RatingCategoryWhereInput | RatingCategoryWhereInput[]
    OR?: RatingCategoryWhereInput[]
    NOT?: RatingCategoryWhereInput | RatingCategoryWhereInput[]
    id?: StringFilter<"RatingCategory"> | string
    ratingCardTemplateId?: StringFilter<"RatingCategory"> | string
    name?: StringFilter<"RatingCategory"> | string
    description?: StringNullableFilter<"RatingCategory"> | string | null
    order?: IntFilter<"RatingCategory"> | number
    ratingCardTemplate?: XOR<RatingCardTemplateScalarRelationFilter, RatingCardTemplateWhereInput>
    categoryScores?: CategoryScoreListRelationFilter
  }

  export type RatingCategoryOrderByWithRelationInput = {
    id?: SortOrder
    ratingCardTemplateId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    order?: SortOrder
    ratingCardTemplate?: RatingCardTemplateOrderByWithRelationInput
    categoryScores?: CategoryScoreOrderByRelationAggregateInput
  }

  export type RatingCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    ratingCardTemplateId_name?: RatingCategoryRatingCardTemplateIdNameCompoundUniqueInput
    AND?: RatingCategoryWhereInput | RatingCategoryWhereInput[]
    OR?: RatingCategoryWhereInput[]
    NOT?: RatingCategoryWhereInput | RatingCategoryWhereInput[]
    ratingCardTemplateId?: StringFilter<"RatingCategory"> | string
    name?: StringFilter<"RatingCategory"> | string
    description?: StringNullableFilter<"RatingCategory"> | string | null
    order?: IntFilter<"RatingCategory"> | number
    ratingCardTemplate?: XOR<RatingCardTemplateScalarRelationFilter, RatingCardTemplateWhereInput>
    categoryScores?: CategoryScoreListRelationFilter
  }, "id" | "ratingCardTemplateId_name">

  export type RatingCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    ratingCardTemplateId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    order?: SortOrder
    _count?: RatingCategoryCountOrderByAggregateInput
    _avg?: RatingCategoryAvgOrderByAggregateInput
    _max?: RatingCategoryMaxOrderByAggregateInput
    _min?: RatingCategoryMinOrderByAggregateInput
    _sum?: RatingCategorySumOrderByAggregateInput
  }

  export type RatingCategoryScalarWhereWithAggregatesInput = {
    AND?: RatingCategoryScalarWhereWithAggregatesInput | RatingCategoryScalarWhereWithAggregatesInput[]
    OR?: RatingCategoryScalarWhereWithAggregatesInput[]
    NOT?: RatingCategoryScalarWhereWithAggregatesInput | RatingCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RatingCategory"> | string
    ratingCardTemplateId?: StringWithAggregatesFilter<"RatingCategory"> | string
    name?: StringWithAggregatesFilter<"RatingCategory"> | string
    description?: StringNullableWithAggregatesFilter<"RatingCategory"> | string | null
    order?: IntWithAggregatesFilter<"RatingCategory"> | number
  }

  export type CandidateRatingWhereInput = {
    AND?: CandidateRatingWhereInput | CandidateRatingWhereInput[]
    OR?: CandidateRatingWhereInput[]
    NOT?: CandidateRatingWhereInput | CandidateRatingWhereInput[]
    id?: StringFilter<"CandidateRating"> | string
    applicationId?: StringFilter<"CandidateRating"> | string
    jobWorkflowStageId?: StringFilter<"CandidateRating"> | string
    raterId?: StringFilter<"CandidateRating"> | string
    ratingCardTemplateId?: StringFilter<"CandidateRating"> | string
    overallScore?: IntFilter<"CandidateRating"> | number
    comments?: StringNullableFilter<"CandidateRating"> | string | null
    submittedAt?: DateTimeFilter<"CandidateRating"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    rater?: XOR<UserScalarRelationFilter, UserWhereInput>
    ratingCardTemplate?: XOR<RatingCardTemplateScalarRelationFilter, RatingCardTemplateWhereInput>
    categoryScores?: CategoryScoreListRelationFilter
  }

  export type CandidateRatingOrderByWithRelationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    jobWorkflowStageId?: SortOrder
    raterId?: SortOrder
    ratingCardTemplateId?: SortOrder
    overallScore?: SortOrder
    comments?: SortOrderInput | SortOrder
    submittedAt?: SortOrder
    application?: ApplicationOrderByWithRelationInput
    rater?: UserOrderByWithRelationInput
    ratingCardTemplate?: RatingCardTemplateOrderByWithRelationInput
    categoryScores?: CategoryScoreOrderByRelationAggregateInput
  }

  export type CandidateRatingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CandidateRatingWhereInput | CandidateRatingWhereInput[]
    OR?: CandidateRatingWhereInput[]
    NOT?: CandidateRatingWhereInput | CandidateRatingWhereInput[]
    applicationId?: StringFilter<"CandidateRating"> | string
    jobWorkflowStageId?: StringFilter<"CandidateRating"> | string
    raterId?: StringFilter<"CandidateRating"> | string
    ratingCardTemplateId?: StringFilter<"CandidateRating"> | string
    overallScore?: IntFilter<"CandidateRating"> | number
    comments?: StringNullableFilter<"CandidateRating"> | string | null
    submittedAt?: DateTimeFilter<"CandidateRating"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    rater?: XOR<UserScalarRelationFilter, UserWhereInput>
    ratingCardTemplate?: XOR<RatingCardTemplateScalarRelationFilter, RatingCardTemplateWhereInput>
    categoryScores?: CategoryScoreListRelationFilter
  }, "id">

  export type CandidateRatingOrderByWithAggregationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    jobWorkflowStageId?: SortOrder
    raterId?: SortOrder
    ratingCardTemplateId?: SortOrder
    overallScore?: SortOrder
    comments?: SortOrderInput | SortOrder
    submittedAt?: SortOrder
    _count?: CandidateRatingCountOrderByAggregateInput
    _avg?: CandidateRatingAvgOrderByAggregateInput
    _max?: CandidateRatingMaxOrderByAggregateInput
    _min?: CandidateRatingMinOrderByAggregateInput
    _sum?: CandidateRatingSumOrderByAggregateInput
  }

  export type CandidateRatingScalarWhereWithAggregatesInput = {
    AND?: CandidateRatingScalarWhereWithAggregatesInput | CandidateRatingScalarWhereWithAggregatesInput[]
    OR?: CandidateRatingScalarWhereWithAggregatesInput[]
    NOT?: CandidateRatingScalarWhereWithAggregatesInput | CandidateRatingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CandidateRating"> | string
    applicationId?: StringWithAggregatesFilter<"CandidateRating"> | string
    jobWorkflowStageId?: StringWithAggregatesFilter<"CandidateRating"> | string
    raterId?: StringWithAggregatesFilter<"CandidateRating"> | string
    ratingCardTemplateId?: StringWithAggregatesFilter<"CandidateRating"> | string
    overallScore?: IntWithAggregatesFilter<"CandidateRating"> | number
    comments?: StringNullableWithAggregatesFilter<"CandidateRating"> | string | null
    submittedAt?: DateTimeWithAggregatesFilter<"CandidateRating"> | Date | string
  }

  export type CategoryScoreWhereInput = {
    AND?: CategoryScoreWhereInput | CategoryScoreWhereInput[]
    OR?: CategoryScoreWhereInput[]
    NOT?: CategoryScoreWhereInput | CategoryScoreWhereInput[]
    id?: StringFilter<"CategoryScore"> | string
    candidateRatingId?: StringFilter<"CategoryScore"> | string
    ratingCategoryId?: StringFilter<"CategoryScore"> | string
    score?: IntFilter<"CategoryScore"> | number
    comments?: StringNullableFilter<"CategoryScore"> | string | null
    candidateRating?: XOR<CandidateRatingScalarRelationFilter, CandidateRatingWhereInput>
    ratingCategory?: XOR<RatingCategoryScalarRelationFilter, RatingCategoryWhereInput>
  }

  export type CategoryScoreOrderByWithRelationInput = {
    id?: SortOrder
    candidateRatingId?: SortOrder
    ratingCategoryId?: SortOrder
    score?: SortOrder
    comments?: SortOrderInput | SortOrder
    candidateRating?: CandidateRatingOrderByWithRelationInput
    ratingCategory?: RatingCategoryOrderByWithRelationInput
  }

  export type CategoryScoreWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    candidateRatingId_ratingCategoryId?: CategoryScoreCandidateRatingIdRatingCategoryIdCompoundUniqueInput
    AND?: CategoryScoreWhereInput | CategoryScoreWhereInput[]
    OR?: CategoryScoreWhereInput[]
    NOT?: CategoryScoreWhereInput | CategoryScoreWhereInput[]
    candidateRatingId?: StringFilter<"CategoryScore"> | string
    ratingCategoryId?: StringFilter<"CategoryScore"> | string
    score?: IntFilter<"CategoryScore"> | number
    comments?: StringNullableFilter<"CategoryScore"> | string | null
    candidateRating?: XOR<CandidateRatingScalarRelationFilter, CandidateRatingWhereInput>
    ratingCategory?: XOR<RatingCategoryScalarRelationFilter, RatingCategoryWhereInput>
  }, "id" | "candidateRatingId_ratingCategoryId">

  export type CategoryScoreOrderByWithAggregationInput = {
    id?: SortOrder
    candidateRatingId?: SortOrder
    ratingCategoryId?: SortOrder
    score?: SortOrder
    comments?: SortOrderInput | SortOrder
    _count?: CategoryScoreCountOrderByAggregateInput
    _avg?: CategoryScoreAvgOrderByAggregateInput
    _max?: CategoryScoreMaxOrderByAggregateInput
    _min?: CategoryScoreMinOrderByAggregateInput
    _sum?: CategoryScoreSumOrderByAggregateInput
  }

  export type CategoryScoreScalarWhereWithAggregatesInput = {
    AND?: CategoryScoreScalarWhereWithAggregatesInput | CategoryScoreScalarWhereWithAggregatesInput[]
    OR?: CategoryScoreScalarWhereWithAggregatesInput[]
    NOT?: CategoryScoreScalarWhereWithAggregatesInput | CategoryScoreScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CategoryScore"> | string
    candidateRatingId?: StringWithAggregatesFilter<"CategoryScore"> | string
    ratingCategoryId?: StringWithAggregatesFilter<"CategoryScore"> | string
    score?: IntWithAggregatesFilter<"CategoryScore"> | number
    comments?: StringNullableWithAggregatesFilter<"CategoryScore"> | string | null
  }

  export type MessageThreadWhereInput = {
    AND?: MessageThreadWhereInput | MessageThreadWhereInput[]
    OR?: MessageThreadWhereInput[]
    NOT?: MessageThreadWhereInput | MessageThreadWhereInput[]
    id?: StringFilter<"MessageThread"> | string
    applicationId?: StringFilter<"MessageThread"> | string
    createdAt?: DateTimeFilter<"MessageThread"> | Date | string
    updatedAt?: DateTimeFilter<"MessageThread"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    messages?: MessageListRelationFilter
  }

  export type MessageThreadOrderByWithRelationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    application?: ApplicationOrderByWithRelationInput
    messages?: MessageOrderByRelationAggregateInput
  }

  export type MessageThreadWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    applicationId?: string
    AND?: MessageThreadWhereInput | MessageThreadWhereInput[]
    OR?: MessageThreadWhereInput[]
    NOT?: MessageThreadWhereInput | MessageThreadWhereInput[]
    createdAt?: DateTimeFilter<"MessageThread"> | Date | string
    updatedAt?: DateTimeFilter<"MessageThread"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    messages?: MessageListRelationFilter
  }, "id" | "applicationId">

  export type MessageThreadOrderByWithAggregationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MessageThreadCountOrderByAggregateInput
    _max?: MessageThreadMaxOrderByAggregateInput
    _min?: MessageThreadMinOrderByAggregateInput
  }

  export type MessageThreadScalarWhereWithAggregatesInput = {
    AND?: MessageThreadScalarWhereWithAggregatesInput | MessageThreadScalarWhereWithAggregatesInput[]
    OR?: MessageThreadScalarWhereWithAggregatesInput[]
    NOT?: MessageThreadScalarWhereWithAggregatesInput | MessageThreadScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MessageThread"> | string
    applicationId?: StringWithAggregatesFilter<"MessageThread"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MessageThread"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MessageThread"> | Date | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    threadId?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    sentAt?: DateTimeFilter<"Message"> | Date | string
    isInternalNote?: BoolFilter<"Message"> | boolean
    visibility?: EnumCommentVisibilityNullableFilter<"Message"> | $Enums.CommentVisibility | null
    attachments?: JsonNullableFilter<"Message">
    thread?: XOR<MessageThreadScalarRelationFilter, MessageThreadWhereInput>
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    threadId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    sentAt?: SortOrder
    isInternalNote?: SortOrder
    visibility?: SortOrderInput | SortOrder
    attachments?: SortOrderInput | SortOrder
    thread?: MessageThreadOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    threadId?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    sentAt?: DateTimeFilter<"Message"> | Date | string
    isInternalNote?: BoolFilter<"Message"> | boolean
    visibility?: EnumCommentVisibilityNullableFilter<"Message"> | $Enums.CommentVisibility | null
    attachments?: JsonNullableFilter<"Message">
    thread?: XOR<MessageThreadScalarRelationFilter, MessageThreadWhereInput>
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    threadId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    sentAt?: SortOrder
    isInternalNote?: SortOrder
    visibility?: SortOrderInput | SortOrder
    attachments?: SortOrderInput | SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    threadId?: StringWithAggregatesFilter<"Message"> | string
    senderId?: StringWithAggregatesFilter<"Message"> | string
    content?: StringWithAggregatesFilter<"Message"> | string
    sentAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    isInternalNote?: BoolWithAggregatesFilter<"Message"> | boolean
    visibility?: EnumCommentVisibilityNullableWithAggregatesFilter<"Message"> | $Enums.CommentVisibility | null
    attachments?: JsonNullableWithAggregatesFilter<"Message">
  }

  export type MeetingWhereInput = {
    AND?: MeetingWhereInput | MeetingWhereInput[]
    OR?: MeetingWhereInput[]
    NOT?: MeetingWhereInput | MeetingWhereInput[]
    id?: StringFilter<"Meeting"> | string
    title?: StringFilter<"Meeting"> | string
    description?: StringNullableFilter<"Meeting"> | string | null
    startTime?: DateTimeFilter<"Meeting"> | Date | string
    endTime?: DateTimeFilter<"Meeting"> | Date | string
    type?: EnumMeetingTypeFilter<"Meeting"> | $Enums.MeetingType
    location?: StringNullableFilter<"Meeting"> | string | null
    videoCallLink?: StringNullableFilter<"Meeting"> | string | null
    jobId?: StringNullableFilter<"Meeting"> | string | null
    applicationId?: StringNullableFilter<"Meeting"> | string | null
    organizerId?: StringFilter<"Meeting"> | string
    createdAt?: DateTimeFilter<"Meeting"> | Date | string
    updatedAt?: DateTimeFilter<"Meeting"> | Date | string
    meetingTemplateId?: StringNullableFilter<"Meeting"> | string | null
    organizer?: XOR<UserScalarRelationFilter, UserWhereInput>
    attendees?: MeetingAttendeeListRelationFilter
    meetingTemplate?: XOR<MeetingTemplateNullableScalarRelationFilter, MeetingTemplateWhereInput> | null
    aiNoteTakingConfig?: XOR<AINoteTakingConfigNullableScalarRelationFilter, AINoteTakingConfigWhereInput> | null
  }

  export type MeetingOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    type?: SortOrder
    location?: SortOrderInput | SortOrder
    videoCallLink?: SortOrderInput | SortOrder
    jobId?: SortOrderInput | SortOrder
    applicationId?: SortOrderInput | SortOrder
    organizerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meetingTemplateId?: SortOrderInput | SortOrder
    organizer?: UserOrderByWithRelationInput
    attendees?: MeetingAttendeeOrderByRelationAggregateInput
    meetingTemplate?: MeetingTemplateOrderByWithRelationInput
    aiNoteTakingConfig?: AINoteTakingConfigOrderByWithRelationInput
  }

  export type MeetingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MeetingWhereInput | MeetingWhereInput[]
    OR?: MeetingWhereInput[]
    NOT?: MeetingWhereInput | MeetingWhereInput[]
    title?: StringFilter<"Meeting"> | string
    description?: StringNullableFilter<"Meeting"> | string | null
    startTime?: DateTimeFilter<"Meeting"> | Date | string
    endTime?: DateTimeFilter<"Meeting"> | Date | string
    type?: EnumMeetingTypeFilter<"Meeting"> | $Enums.MeetingType
    location?: StringNullableFilter<"Meeting"> | string | null
    videoCallLink?: StringNullableFilter<"Meeting"> | string | null
    jobId?: StringNullableFilter<"Meeting"> | string | null
    applicationId?: StringNullableFilter<"Meeting"> | string | null
    organizerId?: StringFilter<"Meeting"> | string
    createdAt?: DateTimeFilter<"Meeting"> | Date | string
    updatedAt?: DateTimeFilter<"Meeting"> | Date | string
    meetingTemplateId?: StringNullableFilter<"Meeting"> | string | null
    organizer?: XOR<UserScalarRelationFilter, UserWhereInput>
    attendees?: MeetingAttendeeListRelationFilter
    meetingTemplate?: XOR<MeetingTemplateNullableScalarRelationFilter, MeetingTemplateWhereInput> | null
    aiNoteTakingConfig?: XOR<AINoteTakingConfigNullableScalarRelationFilter, AINoteTakingConfigWhereInput> | null
  }, "id">

  export type MeetingOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    type?: SortOrder
    location?: SortOrderInput | SortOrder
    videoCallLink?: SortOrderInput | SortOrder
    jobId?: SortOrderInput | SortOrder
    applicationId?: SortOrderInput | SortOrder
    organizerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meetingTemplateId?: SortOrderInput | SortOrder
    _count?: MeetingCountOrderByAggregateInput
    _max?: MeetingMaxOrderByAggregateInput
    _min?: MeetingMinOrderByAggregateInput
  }

  export type MeetingScalarWhereWithAggregatesInput = {
    AND?: MeetingScalarWhereWithAggregatesInput | MeetingScalarWhereWithAggregatesInput[]
    OR?: MeetingScalarWhereWithAggregatesInput[]
    NOT?: MeetingScalarWhereWithAggregatesInput | MeetingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Meeting"> | string
    title?: StringWithAggregatesFilter<"Meeting"> | string
    description?: StringNullableWithAggregatesFilter<"Meeting"> | string | null
    startTime?: DateTimeWithAggregatesFilter<"Meeting"> | Date | string
    endTime?: DateTimeWithAggregatesFilter<"Meeting"> | Date | string
    type?: EnumMeetingTypeWithAggregatesFilter<"Meeting"> | $Enums.MeetingType
    location?: StringNullableWithAggregatesFilter<"Meeting"> | string | null
    videoCallLink?: StringNullableWithAggregatesFilter<"Meeting"> | string | null
    jobId?: StringNullableWithAggregatesFilter<"Meeting"> | string | null
    applicationId?: StringNullableWithAggregatesFilter<"Meeting"> | string | null
    organizerId?: StringWithAggregatesFilter<"Meeting"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Meeting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Meeting"> | Date | string
    meetingTemplateId?: StringNullableWithAggregatesFilter<"Meeting"> | string | null
  }

  export type MeetingAttendeeWhereInput = {
    AND?: MeetingAttendeeWhereInput | MeetingAttendeeWhereInput[]
    OR?: MeetingAttendeeWhereInput[]
    NOT?: MeetingAttendeeWhereInput | MeetingAttendeeWhereInput[]
    id?: StringFilter<"MeetingAttendee"> | string
    meetingId?: StringFilter<"MeetingAttendee"> | string
    userId?: StringNullableFilter<"MeetingAttendee"> | string | null
    candidateId?: StringNullableFilter<"MeetingAttendee"> | string | null
    email?: StringFilter<"MeetingAttendee"> | string
    name?: StringNullableFilter<"MeetingAttendee"> | string | null
    status?: EnumAttendeeStatusFilter<"MeetingAttendee"> | $Enums.AttendeeStatus
    isCandidate?: BoolFilter<"MeetingAttendee"> | boolean
    meeting?: XOR<MeetingScalarRelationFilter, MeetingWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type MeetingAttendeeOrderByWithRelationInput = {
    id?: SortOrder
    meetingId?: SortOrder
    userId?: SortOrderInput | SortOrder
    candidateId?: SortOrderInput | SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    status?: SortOrder
    isCandidate?: SortOrder
    meeting?: MeetingOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type MeetingAttendeeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    meetingId_email?: MeetingAttendeeMeetingIdEmailCompoundUniqueInput
    AND?: MeetingAttendeeWhereInput | MeetingAttendeeWhereInput[]
    OR?: MeetingAttendeeWhereInput[]
    NOT?: MeetingAttendeeWhereInput | MeetingAttendeeWhereInput[]
    meetingId?: StringFilter<"MeetingAttendee"> | string
    userId?: StringNullableFilter<"MeetingAttendee"> | string | null
    candidateId?: StringNullableFilter<"MeetingAttendee"> | string | null
    email?: StringFilter<"MeetingAttendee"> | string
    name?: StringNullableFilter<"MeetingAttendee"> | string | null
    status?: EnumAttendeeStatusFilter<"MeetingAttendee"> | $Enums.AttendeeStatus
    isCandidate?: BoolFilter<"MeetingAttendee"> | boolean
    meeting?: XOR<MeetingScalarRelationFilter, MeetingWhereInput>
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "meetingId_email">

  export type MeetingAttendeeOrderByWithAggregationInput = {
    id?: SortOrder
    meetingId?: SortOrder
    userId?: SortOrderInput | SortOrder
    candidateId?: SortOrderInput | SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    status?: SortOrder
    isCandidate?: SortOrder
    _count?: MeetingAttendeeCountOrderByAggregateInput
    _max?: MeetingAttendeeMaxOrderByAggregateInput
    _min?: MeetingAttendeeMinOrderByAggregateInput
  }

  export type MeetingAttendeeScalarWhereWithAggregatesInput = {
    AND?: MeetingAttendeeScalarWhereWithAggregatesInput | MeetingAttendeeScalarWhereWithAggregatesInput[]
    OR?: MeetingAttendeeScalarWhereWithAggregatesInput[]
    NOT?: MeetingAttendeeScalarWhereWithAggregatesInput | MeetingAttendeeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MeetingAttendee"> | string
    meetingId?: StringWithAggregatesFilter<"MeetingAttendee"> | string
    userId?: StringNullableWithAggregatesFilter<"MeetingAttendee"> | string | null
    candidateId?: StringNullableWithAggregatesFilter<"MeetingAttendee"> | string | null
    email?: StringWithAggregatesFilter<"MeetingAttendee"> | string
    name?: StringNullableWithAggregatesFilter<"MeetingAttendee"> | string | null
    status?: EnumAttendeeStatusWithAggregatesFilter<"MeetingAttendee"> | $Enums.AttendeeStatus
    isCandidate?: BoolWithAggregatesFilter<"MeetingAttendee"> | boolean
  }

  export type MeetingTemplateWhereInput = {
    AND?: MeetingTemplateWhereInput | MeetingTemplateWhereInput[]
    OR?: MeetingTemplateWhereInput[]
    NOT?: MeetingTemplateWhereInput | MeetingTemplateWhereInput[]
    id?: StringFilter<"MeetingTemplate"> | string
    companyId?: StringFilter<"MeetingTemplate"> | string
    name?: StringFilter<"MeetingTemplate"> | string
    title?: StringFilter<"MeetingTemplate"> | string
    duration?: IntFilter<"MeetingTemplate"> | number
    meetingType?: EnumMeetingTypeFilter<"MeetingTemplate"> | $Enums.MeetingType
    description?: StringNullableFilter<"MeetingTemplate"> | string | null
    createdAt?: DateTimeFilter<"MeetingTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"MeetingTemplate"> | Date | string
    meetings?: MeetingListRelationFilter
  }

  export type MeetingTemplateOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    title?: SortOrder
    duration?: SortOrder
    meetingType?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meetings?: MeetingOrderByRelationAggregateInput
  }

  export type MeetingTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId_name?: MeetingTemplateCompanyIdNameCompoundUniqueInput
    AND?: MeetingTemplateWhereInput | MeetingTemplateWhereInput[]
    OR?: MeetingTemplateWhereInput[]
    NOT?: MeetingTemplateWhereInput | MeetingTemplateWhereInput[]
    companyId?: StringFilter<"MeetingTemplate"> | string
    name?: StringFilter<"MeetingTemplate"> | string
    title?: StringFilter<"MeetingTemplate"> | string
    duration?: IntFilter<"MeetingTemplate"> | number
    meetingType?: EnumMeetingTypeFilter<"MeetingTemplate"> | $Enums.MeetingType
    description?: StringNullableFilter<"MeetingTemplate"> | string | null
    createdAt?: DateTimeFilter<"MeetingTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"MeetingTemplate"> | Date | string
    meetings?: MeetingListRelationFilter
  }, "id" | "companyId_name">

  export type MeetingTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    title?: SortOrder
    duration?: SortOrder
    meetingType?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MeetingTemplateCountOrderByAggregateInput
    _avg?: MeetingTemplateAvgOrderByAggregateInput
    _max?: MeetingTemplateMaxOrderByAggregateInput
    _min?: MeetingTemplateMinOrderByAggregateInput
    _sum?: MeetingTemplateSumOrderByAggregateInput
  }

  export type MeetingTemplateScalarWhereWithAggregatesInput = {
    AND?: MeetingTemplateScalarWhereWithAggregatesInput | MeetingTemplateScalarWhereWithAggregatesInput[]
    OR?: MeetingTemplateScalarWhereWithAggregatesInput[]
    NOT?: MeetingTemplateScalarWhereWithAggregatesInput | MeetingTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MeetingTemplate"> | string
    companyId?: StringWithAggregatesFilter<"MeetingTemplate"> | string
    name?: StringWithAggregatesFilter<"MeetingTemplate"> | string
    title?: StringWithAggregatesFilter<"MeetingTemplate"> | string
    duration?: IntWithAggregatesFilter<"MeetingTemplate"> | number
    meetingType?: EnumMeetingTypeWithAggregatesFilter<"MeetingTemplate"> | $Enums.MeetingType
    description?: StringNullableWithAggregatesFilter<"MeetingTemplate"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MeetingTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MeetingTemplate"> | Date | string
  }

  export type CareersPageSettingWhereInput = {
    AND?: CareersPageSettingWhereInput | CareersPageSettingWhereInput[]
    OR?: CareersPageSettingWhereInput[]
    NOT?: CareersPageSettingWhereInput | CareersPageSettingWhereInput[]
    id?: StringFilter<"CareersPageSetting"> | string
    companyId?: StringFilter<"CareersPageSetting"> | string
    logoUrl?: StringNullableFilter<"CareersPageSetting"> | string | null
    primaryColor?: StringNullableFilter<"CareersPageSetting"> | string | null
    focusColor?: StringNullableFilter<"CareersPageSetting"> | string | null
    hyperlinkColor?: StringNullableFilter<"CareersPageSetting"> | string | null
    googleAnalyticsId?: StringNullableFilter<"CareersPageSetting"> | string | null
    trackingPixelUrl?: StringNullableFilter<"CareersPageSetting"> | string | null
    embedJobsCode?: StringNullableFilter<"CareersPageSetting"> | string | null
    customCSS?: StringNullableFilter<"CareersPageSetting"> | string | null
    updatedAt?: DateTimeFilter<"CareersPageSetting"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }

  export type CareersPageSettingOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    primaryColor?: SortOrderInput | SortOrder
    focusColor?: SortOrderInput | SortOrder
    hyperlinkColor?: SortOrderInput | SortOrder
    googleAnalyticsId?: SortOrderInput | SortOrder
    trackingPixelUrl?: SortOrderInput | SortOrder
    embedJobsCode?: SortOrderInput | SortOrder
    customCSS?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type CareersPageSettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId?: string
    AND?: CareersPageSettingWhereInput | CareersPageSettingWhereInput[]
    OR?: CareersPageSettingWhereInput[]
    NOT?: CareersPageSettingWhereInput | CareersPageSettingWhereInput[]
    logoUrl?: StringNullableFilter<"CareersPageSetting"> | string | null
    primaryColor?: StringNullableFilter<"CareersPageSetting"> | string | null
    focusColor?: StringNullableFilter<"CareersPageSetting"> | string | null
    hyperlinkColor?: StringNullableFilter<"CareersPageSetting"> | string | null
    googleAnalyticsId?: StringNullableFilter<"CareersPageSetting"> | string | null
    trackingPixelUrl?: StringNullableFilter<"CareersPageSetting"> | string | null
    embedJobsCode?: StringNullableFilter<"CareersPageSetting"> | string | null
    customCSS?: StringNullableFilter<"CareersPageSetting"> | string | null
    updatedAt?: DateTimeFilter<"CareersPageSetting"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }, "id" | "companyId">

  export type CareersPageSettingOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    primaryColor?: SortOrderInput | SortOrder
    focusColor?: SortOrderInput | SortOrder
    hyperlinkColor?: SortOrderInput | SortOrder
    googleAnalyticsId?: SortOrderInput | SortOrder
    trackingPixelUrl?: SortOrderInput | SortOrder
    embedJobsCode?: SortOrderInput | SortOrder
    customCSS?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: CareersPageSettingCountOrderByAggregateInput
    _max?: CareersPageSettingMaxOrderByAggregateInput
    _min?: CareersPageSettingMinOrderByAggregateInput
  }

  export type CareersPageSettingScalarWhereWithAggregatesInput = {
    AND?: CareersPageSettingScalarWhereWithAggregatesInput | CareersPageSettingScalarWhereWithAggregatesInput[]
    OR?: CareersPageSettingScalarWhereWithAggregatesInput[]
    NOT?: CareersPageSettingScalarWhereWithAggregatesInput | CareersPageSettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CareersPageSetting"> | string
    companyId?: StringWithAggregatesFilter<"CareersPageSetting"> | string
    logoUrl?: StringNullableWithAggregatesFilter<"CareersPageSetting"> | string | null
    primaryColor?: StringNullableWithAggregatesFilter<"CareersPageSetting"> | string | null
    focusColor?: StringNullableWithAggregatesFilter<"CareersPageSetting"> | string | null
    hyperlinkColor?: StringNullableWithAggregatesFilter<"CareersPageSetting"> | string | null
    googleAnalyticsId?: StringNullableWithAggregatesFilter<"CareersPageSetting"> | string | null
    trackingPixelUrl?: StringNullableWithAggregatesFilter<"CareersPageSetting"> | string | null
    embedJobsCode?: StringNullableWithAggregatesFilter<"CareersPageSetting"> | string | null
    customCSS?: StringNullableWithAggregatesFilter<"CareersPageSetting"> | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"CareersPageSetting"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    message?: StringFilter<"Notification"> | string
    link?: StringNullableFilter<"Notification"> | string | null
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    link?: SortOrderInput | SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    message?: StringFilter<"Notification"> | string
    link?: StringNullableFilter<"Notification"> | string | null
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    link?: SortOrderInput | SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    message?: StringWithAggregatesFilter<"Notification"> | string
    link?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type AIScreeningConfigWhereInput = {
    AND?: AIScreeningConfigWhereInput | AIScreeningConfigWhereInput[]
    OR?: AIScreeningConfigWhereInput[]
    NOT?: AIScreeningConfigWhereInput | AIScreeningConfigWhereInput[]
    id?: StringFilter<"AIScreeningConfig"> | string
    jobId?: StringFilter<"AIScreeningConfig"> | string
    isEnabled?: BoolFilter<"AIScreeningConfig"> | boolean
    guidance?: StringNullableFilter<"AIScreeningConfig"> | string | null
    updatedAt?: DateTimeFilter<"AIScreeningConfig"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }

  export type AIScreeningConfigOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    isEnabled?: SortOrder
    guidance?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    job?: JobOrderByWithRelationInput
  }

  export type AIScreeningConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    jobId?: string
    AND?: AIScreeningConfigWhereInput | AIScreeningConfigWhereInput[]
    OR?: AIScreeningConfigWhereInput[]
    NOT?: AIScreeningConfigWhereInput | AIScreeningConfigWhereInput[]
    isEnabled?: BoolFilter<"AIScreeningConfig"> | boolean
    guidance?: StringNullableFilter<"AIScreeningConfig"> | string | null
    updatedAt?: DateTimeFilter<"AIScreeningConfig"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }, "id" | "jobId">

  export type AIScreeningConfigOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    isEnabled?: SortOrder
    guidance?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: AIScreeningConfigCountOrderByAggregateInput
    _max?: AIScreeningConfigMaxOrderByAggregateInput
    _min?: AIScreeningConfigMinOrderByAggregateInput
  }

  export type AIScreeningConfigScalarWhereWithAggregatesInput = {
    AND?: AIScreeningConfigScalarWhereWithAggregatesInput | AIScreeningConfigScalarWhereWithAggregatesInput[]
    OR?: AIScreeningConfigScalarWhereWithAggregatesInput[]
    NOT?: AIScreeningConfigScalarWhereWithAggregatesInput | AIScreeningConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AIScreeningConfig"> | string
    jobId?: StringWithAggregatesFilter<"AIScreeningConfig"> | string
    isEnabled?: BoolWithAggregatesFilter<"AIScreeningConfig"> | boolean
    guidance?: StringNullableWithAggregatesFilter<"AIScreeningConfig"> | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"AIScreeningConfig"> | Date | string
  }

  export type AISchedulingConfigWhereInput = {
    AND?: AISchedulingConfigWhereInput | AISchedulingConfigWhereInput[]
    OR?: AISchedulingConfigWhereInput[]
    NOT?: AISchedulingConfigWhereInput | AISchedulingConfigWhereInput[]
    id?: StringFilter<"AISchedulingConfig"> | string
    jobId?: StringFilter<"AISchedulingConfig"> | string
    isEnabled?: BoolFilter<"AISchedulingConfig"> | boolean
    updatedAt?: DateTimeFilter<"AISchedulingConfig"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }

  export type AISchedulingConfigOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    isEnabled?: SortOrder
    updatedAt?: SortOrder
    job?: JobOrderByWithRelationInput
  }

  export type AISchedulingConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    jobId?: string
    AND?: AISchedulingConfigWhereInput | AISchedulingConfigWhereInput[]
    OR?: AISchedulingConfigWhereInput[]
    NOT?: AISchedulingConfigWhereInput | AISchedulingConfigWhereInput[]
    isEnabled?: BoolFilter<"AISchedulingConfig"> | boolean
    updatedAt?: DateTimeFilter<"AISchedulingConfig"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
  }, "id" | "jobId">

  export type AISchedulingConfigOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    isEnabled?: SortOrder
    updatedAt?: SortOrder
    _count?: AISchedulingConfigCountOrderByAggregateInput
    _max?: AISchedulingConfigMaxOrderByAggregateInput
    _min?: AISchedulingConfigMinOrderByAggregateInput
  }

  export type AISchedulingConfigScalarWhereWithAggregatesInput = {
    AND?: AISchedulingConfigScalarWhereWithAggregatesInput | AISchedulingConfigScalarWhereWithAggregatesInput[]
    OR?: AISchedulingConfigScalarWhereWithAggregatesInput[]
    NOT?: AISchedulingConfigScalarWhereWithAggregatesInput | AISchedulingConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AISchedulingConfig"> | string
    jobId?: StringWithAggregatesFilter<"AISchedulingConfig"> | string
    isEnabled?: BoolWithAggregatesFilter<"AISchedulingConfig"> | boolean
    updatedAt?: DateTimeWithAggregatesFilter<"AISchedulingConfig"> | Date | string
  }

  export type AINoteTakingConfigWhereInput = {
    AND?: AINoteTakingConfigWhereInput | AINoteTakingConfigWhereInput[]
    OR?: AINoteTakingConfigWhereInput[]
    NOT?: AINoteTakingConfigWhereInput | AINoteTakingConfigWhereInput[]
    id?: StringFilter<"AINoteTakingConfig"> | string
    meetingId?: StringFilter<"AINoteTakingConfig"> | string
    isEnabled?: BoolFilter<"AINoteTakingConfig"> | boolean
    transcript?: StringNullableFilter<"AINoteTakingConfig"> | string | null
    summary?: StringNullableFilter<"AINoteTakingConfig"> | string | null
    actionItems?: JsonNullableFilter<"AINoteTakingConfig">
    updatedAt?: DateTimeFilter<"AINoteTakingConfig"> | Date | string
    meeting?: XOR<MeetingScalarRelationFilter, MeetingWhereInput>
  }

  export type AINoteTakingConfigOrderByWithRelationInput = {
    id?: SortOrder
    meetingId?: SortOrder
    isEnabled?: SortOrder
    transcript?: SortOrderInput | SortOrder
    summary?: SortOrderInput | SortOrder
    actionItems?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    meeting?: MeetingOrderByWithRelationInput
  }

  export type AINoteTakingConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    meetingId?: string
    AND?: AINoteTakingConfigWhereInput | AINoteTakingConfigWhereInput[]
    OR?: AINoteTakingConfigWhereInput[]
    NOT?: AINoteTakingConfigWhereInput | AINoteTakingConfigWhereInput[]
    isEnabled?: BoolFilter<"AINoteTakingConfig"> | boolean
    transcript?: StringNullableFilter<"AINoteTakingConfig"> | string | null
    summary?: StringNullableFilter<"AINoteTakingConfig"> | string | null
    actionItems?: JsonNullableFilter<"AINoteTakingConfig">
    updatedAt?: DateTimeFilter<"AINoteTakingConfig"> | Date | string
    meeting?: XOR<MeetingScalarRelationFilter, MeetingWhereInput>
  }, "id" | "meetingId">

  export type AINoteTakingConfigOrderByWithAggregationInput = {
    id?: SortOrder
    meetingId?: SortOrder
    isEnabled?: SortOrder
    transcript?: SortOrderInput | SortOrder
    summary?: SortOrderInput | SortOrder
    actionItems?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: AINoteTakingConfigCountOrderByAggregateInput
    _max?: AINoteTakingConfigMaxOrderByAggregateInput
    _min?: AINoteTakingConfigMinOrderByAggregateInput
  }

  export type AINoteTakingConfigScalarWhereWithAggregatesInput = {
    AND?: AINoteTakingConfigScalarWhereWithAggregatesInput | AINoteTakingConfigScalarWhereWithAggregatesInput[]
    OR?: AINoteTakingConfigScalarWhereWithAggregatesInput[]
    NOT?: AINoteTakingConfigScalarWhereWithAggregatesInput | AINoteTakingConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AINoteTakingConfig"> | string
    meetingId?: StringWithAggregatesFilter<"AINoteTakingConfig"> | string
    isEnabled?: BoolWithAggregatesFilter<"AINoteTakingConfig"> | boolean
    transcript?: StringNullableWithAggregatesFilter<"AINoteTakingConfig"> | string | null
    summary?: StringNullableWithAggregatesFilter<"AINoteTakingConfig"> | string | null
    actionItems?: JsonNullableWithAggregatesFilter<"AINoteTakingConfig">
    updatedAt?: DateTimeWithAggregatesFilter<"AINoteTakingConfig"> | Date | string
  }

  export type AIInteractionLogWhereInput = {
    AND?: AIInteractionLogWhereInput | AIInteractionLogWhereInput[]
    OR?: AIInteractionLogWhereInput[]
    NOT?: AIInteractionLogWhereInput | AIInteractionLogWhereInput[]
    id?: StringFilter<"AIInteractionLog"> | string
    userId?: StringNullableFilter<"AIInteractionLog"> | string | null
    inputType?: StringFilter<"AIInteractionLog"> | string
    input?: StringFilter<"AIInteractionLog"> | string
    output?: StringNullableFilter<"AIInteractionLog"> | string | null
    timestamp?: DateTimeFilter<"AIInteractionLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AIInteractionLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    inputType?: SortOrder
    input?: SortOrder
    output?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AIInteractionLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AIInteractionLogWhereInput | AIInteractionLogWhereInput[]
    OR?: AIInteractionLogWhereInput[]
    NOT?: AIInteractionLogWhereInput | AIInteractionLogWhereInput[]
    userId?: StringNullableFilter<"AIInteractionLog"> | string | null
    inputType?: StringFilter<"AIInteractionLog"> | string
    input?: StringFilter<"AIInteractionLog"> | string
    output?: StringNullableFilter<"AIInteractionLog"> | string | null
    timestamp?: DateTimeFilter<"AIInteractionLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AIInteractionLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    inputType?: SortOrder
    input?: SortOrder
    output?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: AIInteractionLogCountOrderByAggregateInput
    _max?: AIInteractionLogMaxOrderByAggregateInput
    _min?: AIInteractionLogMinOrderByAggregateInput
  }

  export type AIInteractionLogScalarWhereWithAggregatesInput = {
    AND?: AIInteractionLogScalarWhereWithAggregatesInput | AIInteractionLogScalarWhereWithAggregatesInput[]
    OR?: AIInteractionLogScalarWhereWithAggregatesInput[]
    NOT?: AIInteractionLogScalarWhereWithAggregatesInput | AIInteractionLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AIInteractionLog"> | string
    userId?: StringNullableWithAggregatesFilter<"AIInteractionLog"> | string | null
    inputType?: StringWithAggregatesFilter<"AIInteractionLog"> | string
    input?: StringWithAggregatesFilter<"AIInteractionLog"> | string
    output?: StringNullableWithAggregatesFilter<"AIInteractionLog"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"AIInteractionLog"> | Date | string
  }

  export type AIBusinessPreferenceWhereInput = {
    AND?: AIBusinessPreferenceWhereInput | AIBusinessPreferenceWhereInput[]
    OR?: AIBusinessPreferenceWhereInput[]
    NOT?: AIBusinessPreferenceWhereInput | AIBusinessPreferenceWhereInput[]
    id?: StringFilter<"AIBusinessPreference"> | string
    companyId?: StringFilter<"AIBusinessPreference"> | string
    businessOverview?: StringNullableFilter<"AIBusinessPreference"> | string | null
    businessCulture?: StringNullableFilter<"AIBusinessPreference"> | string | null
    businessValues?: StringNullableFilter<"AIBusinessPreference"> | string | null
    businessMission?: StringNullableFilter<"AIBusinessPreference"> | string | null
    updatedAt?: DateTimeFilter<"AIBusinessPreference"> | Date | string
  }

  export type AIBusinessPreferenceOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    businessOverview?: SortOrderInput | SortOrder
    businessCulture?: SortOrderInput | SortOrder
    businessValues?: SortOrderInput | SortOrder
    businessMission?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
  }

  export type AIBusinessPreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId?: string
    AND?: AIBusinessPreferenceWhereInput | AIBusinessPreferenceWhereInput[]
    OR?: AIBusinessPreferenceWhereInput[]
    NOT?: AIBusinessPreferenceWhereInput | AIBusinessPreferenceWhereInput[]
    businessOverview?: StringNullableFilter<"AIBusinessPreference"> | string | null
    businessCulture?: StringNullableFilter<"AIBusinessPreference"> | string | null
    businessValues?: StringNullableFilter<"AIBusinessPreference"> | string | null
    businessMission?: StringNullableFilter<"AIBusinessPreference"> | string | null
    updatedAt?: DateTimeFilter<"AIBusinessPreference"> | Date | string
  }, "id" | "companyId">

  export type AIBusinessPreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    businessOverview?: SortOrderInput | SortOrder
    businessCulture?: SortOrderInput | SortOrder
    businessValues?: SortOrderInput | SortOrder
    businessMission?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: AIBusinessPreferenceCountOrderByAggregateInput
    _max?: AIBusinessPreferenceMaxOrderByAggregateInput
    _min?: AIBusinessPreferenceMinOrderByAggregateInput
  }

  export type AIBusinessPreferenceScalarWhereWithAggregatesInput = {
    AND?: AIBusinessPreferenceScalarWhereWithAggregatesInput | AIBusinessPreferenceScalarWhereWithAggregatesInput[]
    OR?: AIBusinessPreferenceScalarWhereWithAggregatesInput[]
    NOT?: AIBusinessPreferenceScalarWhereWithAggregatesInput | AIBusinessPreferenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AIBusinessPreference"> | string
    companyId?: StringWithAggregatesFilter<"AIBusinessPreference"> | string
    businessOverview?: StringNullableWithAggregatesFilter<"AIBusinessPreference"> | string | null
    businessCulture?: StringNullableWithAggregatesFilter<"AIBusinessPreference"> | string | null
    businessValues?: StringNullableWithAggregatesFilter<"AIBusinessPreference"> | string | null
    businessMission?: StringNullableWithAggregatesFilter<"AIBusinessPreference"> | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"AIBusinessPreference"> | Date | string
  }

  export type AICommunicationPreferenceWhereInput = {
    AND?: AICommunicationPreferenceWhereInput | AICommunicationPreferenceWhereInput[]
    OR?: AICommunicationPreferenceWhereInput[]
    NOT?: AICommunicationPreferenceWhereInput | AICommunicationPreferenceWhereInput[]
    id?: StringFilter<"AICommunicationPreference"> | string
    companyId?: StringFilter<"AICommunicationPreference"> | string
    tone?: EnumAIToneFilter<"AICommunicationPreference"> | $Enums.AITone
    blockedTeamTopics?: JsonNullableFilter<"AICommunicationPreference">
    blockedCandidateTopics?: JsonNullableFilter<"AICommunicationPreference">
    updatedAt?: DateTimeFilter<"AICommunicationPreference"> | Date | string
  }

  export type AICommunicationPreferenceOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    tone?: SortOrder
    blockedTeamTopics?: SortOrderInput | SortOrder
    blockedCandidateTopics?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
  }

  export type AICommunicationPreferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId?: string
    AND?: AICommunicationPreferenceWhereInput | AICommunicationPreferenceWhereInput[]
    OR?: AICommunicationPreferenceWhereInput[]
    NOT?: AICommunicationPreferenceWhereInput | AICommunicationPreferenceWhereInput[]
    tone?: EnumAIToneFilter<"AICommunicationPreference"> | $Enums.AITone
    blockedTeamTopics?: JsonNullableFilter<"AICommunicationPreference">
    blockedCandidateTopics?: JsonNullableFilter<"AICommunicationPreference">
    updatedAt?: DateTimeFilter<"AICommunicationPreference"> | Date | string
  }, "id" | "companyId">

  export type AICommunicationPreferenceOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    tone?: SortOrder
    blockedTeamTopics?: SortOrderInput | SortOrder
    blockedCandidateTopics?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: AICommunicationPreferenceCountOrderByAggregateInput
    _max?: AICommunicationPreferenceMaxOrderByAggregateInput
    _min?: AICommunicationPreferenceMinOrderByAggregateInput
  }

  export type AICommunicationPreferenceScalarWhereWithAggregatesInput = {
    AND?: AICommunicationPreferenceScalarWhereWithAggregatesInput | AICommunicationPreferenceScalarWhereWithAggregatesInput[]
    OR?: AICommunicationPreferenceScalarWhereWithAggregatesInput[]
    NOT?: AICommunicationPreferenceScalarWhereWithAggregatesInput | AICommunicationPreferenceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AICommunicationPreference"> | string
    companyId?: StringWithAggregatesFilter<"AICommunicationPreference"> | string
    tone?: EnumAIToneWithAggregatesFilter<"AICommunicationPreference"> | $Enums.AITone
    blockedTeamTopics?: JsonNullableWithAggregatesFilter<"AICommunicationPreference">
    blockedCandidateTopics?: JsonNullableWithAggregatesFilter<"AICommunicationPreference">
    updatedAt?: DateTimeWithAggregatesFilter<"AICommunicationPreference"> | Date | string
  }

  export type CalendarIntegrationWhereInput = {
    AND?: CalendarIntegrationWhereInput | CalendarIntegrationWhereInput[]
    OR?: CalendarIntegrationWhereInput[]
    NOT?: CalendarIntegrationWhereInput | CalendarIntegrationWhereInput[]
    id?: StringFilter<"CalendarIntegration"> | string
    userId?: StringFilter<"CalendarIntegration"> | string
    provider?: EnumCalendarProviderFilter<"CalendarIntegration"> | $Enums.CalendarProvider
    accessToken?: StringFilter<"CalendarIntegration"> | string
    refreshToken?: StringNullableFilter<"CalendarIntegration"> | string | null
    expiresAt?: DateTimeNullableFilter<"CalendarIntegration"> | Date | string | null
    scopes?: StringNullableFilter<"CalendarIntegration"> | string | null
    calendarId?: StringNullableFilter<"CalendarIntegration"> | string | null
    connectedAt?: DateTimeFilter<"CalendarIntegration"> | Date | string
    updatedAt?: DateTimeFilter<"CalendarIntegration"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CalendarIntegrationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    scopes?: SortOrderInput | SortOrder
    calendarId?: SortOrderInput | SortOrder
    connectedAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CalendarIntegrationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: CalendarIntegrationWhereInput | CalendarIntegrationWhereInput[]
    OR?: CalendarIntegrationWhereInput[]
    NOT?: CalendarIntegrationWhereInput | CalendarIntegrationWhereInput[]
    provider?: EnumCalendarProviderFilter<"CalendarIntegration"> | $Enums.CalendarProvider
    accessToken?: StringFilter<"CalendarIntegration"> | string
    refreshToken?: StringNullableFilter<"CalendarIntegration"> | string | null
    expiresAt?: DateTimeNullableFilter<"CalendarIntegration"> | Date | string | null
    scopes?: StringNullableFilter<"CalendarIntegration"> | string | null
    calendarId?: StringNullableFilter<"CalendarIntegration"> | string | null
    connectedAt?: DateTimeFilter<"CalendarIntegration"> | Date | string
    updatedAt?: DateTimeFilter<"CalendarIntegration"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type CalendarIntegrationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    scopes?: SortOrderInput | SortOrder
    calendarId?: SortOrderInput | SortOrder
    connectedAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CalendarIntegrationCountOrderByAggregateInput
    _max?: CalendarIntegrationMaxOrderByAggregateInput
    _min?: CalendarIntegrationMinOrderByAggregateInput
  }

  export type CalendarIntegrationScalarWhereWithAggregatesInput = {
    AND?: CalendarIntegrationScalarWhereWithAggregatesInput | CalendarIntegrationScalarWhereWithAggregatesInput[]
    OR?: CalendarIntegrationScalarWhereWithAggregatesInput[]
    NOT?: CalendarIntegrationScalarWhereWithAggregatesInput | CalendarIntegrationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CalendarIntegration"> | string
    userId?: StringWithAggregatesFilter<"CalendarIntegration"> | string
    provider?: EnumCalendarProviderWithAggregatesFilter<"CalendarIntegration"> | $Enums.CalendarProvider
    accessToken?: StringWithAggregatesFilter<"CalendarIntegration"> | string
    refreshToken?: StringNullableWithAggregatesFilter<"CalendarIntegration"> | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"CalendarIntegration"> | Date | string | null
    scopes?: StringNullableWithAggregatesFilter<"CalendarIntegration"> | string | null
    calendarId?: StringNullableWithAggregatesFilter<"CalendarIntegration"> | string | null
    connectedAt?: DateTimeWithAggregatesFilter<"CalendarIntegration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CalendarIntegration"> | Date | string
  }

  export type JobBoardIntegrationWhereInput = {
    AND?: JobBoardIntegrationWhereInput | JobBoardIntegrationWhereInput[]
    OR?: JobBoardIntegrationWhereInput[]
    NOT?: JobBoardIntegrationWhereInput | JobBoardIntegrationWhereInput[]
    id?: StringFilter<"JobBoardIntegration"> | string
    companyId?: StringFilter<"JobBoardIntegration"> | string
    boardName?: StringFilter<"JobBoardIntegration"> | string
    apiKey?: StringNullableFilter<"JobBoardIntegration"> | string | null
    config?: JsonNullableFilter<"JobBoardIntegration">
    isEnabled?: BoolFilter<"JobBoardIntegration"> | boolean
    createdAt?: DateTimeFilter<"JobBoardIntegration"> | Date | string
    updatedAt?: DateTimeFilter<"JobBoardIntegration"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }

  export type JobBoardIntegrationOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    boardName?: SortOrder
    apiKey?: SortOrderInput | SortOrder
    config?: SortOrderInput | SortOrder
    isEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type JobBoardIntegrationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId_boardName?: JobBoardIntegrationCompanyIdBoardNameCompoundUniqueInput
    AND?: JobBoardIntegrationWhereInput | JobBoardIntegrationWhereInput[]
    OR?: JobBoardIntegrationWhereInput[]
    NOT?: JobBoardIntegrationWhereInput | JobBoardIntegrationWhereInput[]
    companyId?: StringFilter<"JobBoardIntegration"> | string
    boardName?: StringFilter<"JobBoardIntegration"> | string
    apiKey?: StringNullableFilter<"JobBoardIntegration"> | string | null
    config?: JsonNullableFilter<"JobBoardIntegration">
    isEnabled?: BoolFilter<"JobBoardIntegration"> | boolean
    createdAt?: DateTimeFilter<"JobBoardIntegration"> | Date | string
    updatedAt?: DateTimeFilter<"JobBoardIntegration"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }, "id" | "companyId_boardName">

  export type JobBoardIntegrationOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    boardName?: SortOrder
    apiKey?: SortOrderInput | SortOrder
    config?: SortOrderInput | SortOrder
    isEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobBoardIntegrationCountOrderByAggregateInput
    _max?: JobBoardIntegrationMaxOrderByAggregateInput
    _min?: JobBoardIntegrationMinOrderByAggregateInput
  }

  export type JobBoardIntegrationScalarWhereWithAggregatesInput = {
    AND?: JobBoardIntegrationScalarWhereWithAggregatesInput | JobBoardIntegrationScalarWhereWithAggregatesInput[]
    OR?: JobBoardIntegrationScalarWhereWithAggregatesInput[]
    NOT?: JobBoardIntegrationScalarWhereWithAggregatesInput | JobBoardIntegrationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JobBoardIntegration"> | string
    companyId?: StringWithAggregatesFilter<"JobBoardIntegration"> | string
    boardName?: StringWithAggregatesFilter<"JobBoardIntegration"> | string
    apiKey?: StringNullableWithAggregatesFilter<"JobBoardIntegration"> | string | null
    config?: JsonNullableWithAggregatesFilter<"JobBoardIntegration">
    isEnabled?: BoolWithAggregatesFilter<"JobBoardIntegration"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"JobBoardIntegration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"JobBoardIntegration"> | Date | string
  }

  export type MessageTemplateWhereInput = {
    AND?: MessageTemplateWhereInput | MessageTemplateWhereInput[]
    OR?: MessageTemplateWhereInput[]
    NOT?: MessageTemplateWhereInput | MessageTemplateWhereInput[]
    id?: StringFilter<"MessageTemplate"> | string
    companyId?: StringFilter<"MessageTemplate"> | string
    name?: StringFilter<"MessageTemplate"> | string
    subject?: StringFilter<"MessageTemplate"> | string
    content?: StringFilter<"MessageTemplate"> | string
    description?: StringNullableFilter<"MessageTemplate"> | string | null
    isRequired?: BoolFilter<"MessageTemplate"> | boolean
    createdAt?: DateTimeFilter<"MessageTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"MessageTemplate"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }

  export type MessageTemplateOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    description?: SortOrderInput | SortOrder
    isRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type MessageTemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId_name?: MessageTemplateCompanyIdNameCompoundUniqueInput
    AND?: MessageTemplateWhereInput | MessageTemplateWhereInput[]
    OR?: MessageTemplateWhereInput[]
    NOT?: MessageTemplateWhereInput | MessageTemplateWhereInput[]
    companyId?: StringFilter<"MessageTemplate"> | string
    name?: StringFilter<"MessageTemplate"> | string
    subject?: StringFilter<"MessageTemplate"> | string
    content?: StringFilter<"MessageTemplate"> | string
    description?: StringNullableFilter<"MessageTemplate"> | string | null
    isRequired?: BoolFilter<"MessageTemplate"> | boolean
    createdAt?: DateTimeFilter<"MessageTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"MessageTemplate"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
  }, "id" | "companyId_name">

  export type MessageTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    description?: SortOrderInput | SortOrder
    isRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MessageTemplateCountOrderByAggregateInput
    _max?: MessageTemplateMaxOrderByAggregateInput
    _min?: MessageTemplateMinOrderByAggregateInput
  }

  export type MessageTemplateScalarWhereWithAggregatesInput = {
    AND?: MessageTemplateScalarWhereWithAggregatesInput | MessageTemplateScalarWhereWithAggregatesInput[]
    OR?: MessageTemplateScalarWhereWithAggregatesInput[]
    NOT?: MessageTemplateScalarWhereWithAggregatesInput | MessageTemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MessageTemplate"> | string
    companyId?: StringWithAggregatesFilter<"MessageTemplate"> | string
    name?: StringWithAggregatesFilter<"MessageTemplate"> | string
    subject?: StringWithAggregatesFilter<"MessageTemplate"> | string
    content?: StringWithAggregatesFilter<"MessageTemplate"> | string
    description?: StringNullableWithAggregatesFilter<"MessageTemplate"> | string | null
    isRequired?: BoolWithAggregatesFilter<"MessageTemplate"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"MessageTemplate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MessageTemplate"> | Date | string
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    id?: StringFilter<"Question"> | string
    companyId?: StringFilter<"Question"> | string
    text?: StringFilter<"Question"> | string
    responseType?: StringFilter<"Question"> | string
    visibility?: StringFilter<"Question"> | string
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    options?: QuestionOptionListRelationFilter
    questionSets?: QuestionSetListRelationFilter
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    text?: SortOrder
    responseType?: SortOrder
    visibility?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    options?: QuestionOptionOrderByRelationAggregateInput
    questionSets?: QuestionSetOrderByRelationAggregateInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    companyId?: StringFilter<"Question"> | string
    text?: StringFilter<"Question"> | string
    responseType?: StringFilter<"Question"> | string
    visibility?: StringFilter<"Question"> | string
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    options?: QuestionOptionListRelationFilter
    questionSets?: QuestionSetListRelationFilter
  }, "id">

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    text?: SortOrder
    responseType?: SortOrder
    visibility?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Question"> | string
    companyId?: StringWithAggregatesFilter<"Question"> | string
    text?: StringWithAggregatesFilter<"Question"> | string
    responseType?: StringWithAggregatesFilter<"Question"> | string
    visibility?: StringWithAggregatesFilter<"Question"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Question"> | Date | string
  }

  export type QuestionOptionWhereInput = {
    AND?: QuestionOptionWhereInput | QuestionOptionWhereInput[]
    OR?: QuestionOptionWhereInput[]
    NOT?: QuestionOptionWhereInput | QuestionOptionWhereInput[]
    id?: StringFilter<"QuestionOption"> | string
    questionId?: StringFilter<"QuestionOption"> | string
    value?: StringFilter<"QuestionOption"> | string
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
  }

  export type QuestionOptionOrderByWithRelationInput = {
    id?: SortOrder
    questionId?: SortOrder
    value?: SortOrder
    question?: QuestionOrderByWithRelationInput
  }

  export type QuestionOptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionOptionWhereInput | QuestionOptionWhereInput[]
    OR?: QuestionOptionWhereInput[]
    NOT?: QuestionOptionWhereInput | QuestionOptionWhereInput[]
    questionId?: StringFilter<"QuestionOption"> | string
    value?: StringFilter<"QuestionOption"> | string
    question?: XOR<QuestionScalarRelationFilter, QuestionWhereInput>
  }, "id">

  export type QuestionOptionOrderByWithAggregationInput = {
    id?: SortOrder
    questionId?: SortOrder
    value?: SortOrder
    _count?: QuestionOptionCountOrderByAggregateInput
    _max?: QuestionOptionMaxOrderByAggregateInput
    _min?: QuestionOptionMinOrderByAggregateInput
  }

  export type QuestionOptionScalarWhereWithAggregatesInput = {
    AND?: QuestionOptionScalarWhereWithAggregatesInput | QuestionOptionScalarWhereWithAggregatesInput[]
    OR?: QuestionOptionScalarWhereWithAggregatesInput[]
    NOT?: QuestionOptionScalarWhereWithAggregatesInput | QuestionOptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuestionOption"> | string
    questionId?: StringWithAggregatesFilter<"QuestionOption"> | string
    value?: StringWithAggregatesFilter<"QuestionOption"> | string
  }

  export type QuestionSetWhereInput = {
    AND?: QuestionSetWhereInput | QuestionSetWhereInput[]
    OR?: QuestionSetWhereInput[]
    NOT?: QuestionSetWhereInput | QuestionSetWhereInput[]
    id?: StringFilter<"QuestionSet"> | string
    companyId?: StringFilter<"QuestionSet"> | string
    name?: StringFilter<"QuestionSet"> | string
    description?: StringNullableFilter<"QuestionSet"> | string | null
    createdAt?: DateTimeFilter<"QuestionSet"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionSet"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    questions?: QuestionListRelationFilter
  }

  export type QuestionSetOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    questions?: QuestionOrderByRelationAggregateInput
  }

  export type QuestionSetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestionSetWhereInput | QuestionSetWhereInput[]
    OR?: QuestionSetWhereInput[]
    NOT?: QuestionSetWhereInput | QuestionSetWhereInput[]
    companyId?: StringFilter<"QuestionSet"> | string
    name?: StringFilter<"QuestionSet"> | string
    description?: StringNullableFilter<"QuestionSet"> | string | null
    createdAt?: DateTimeFilter<"QuestionSet"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionSet"> | Date | string
    company?: XOR<CompanyScalarRelationFilter, CompanyWhereInput>
    questions?: QuestionListRelationFilter
  }, "id">

  export type QuestionSetOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuestionSetCountOrderByAggregateInput
    _max?: QuestionSetMaxOrderByAggregateInput
    _min?: QuestionSetMinOrderByAggregateInput
  }

  export type QuestionSetScalarWhereWithAggregatesInput = {
    AND?: QuestionSetScalarWhereWithAggregatesInput | QuestionSetScalarWhereWithAggregatesInput[]
    OR?: QuestionSetScalarWhereWithAggregatesInput[]
    NOT?: QuestionSetScalarWhereWithAggregatesInput | QuestionSetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuestionSet"> | string
    companyId?: StringWithAggregatesFilter<"QuestionSet"> | string
    name?: StringWithAggregatesFilter<"QuestionSet"> | string
    description?: StringNullableWithAggregatesFilter<"QuestionSet"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"QuestionSet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"QuestionSet"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingUncheckedCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeUncheckedCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationUncheckedCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogUncheckedCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUncheckedUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUncheckedUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUncheckedUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUncheckedUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type UserProfileUncheckedCreateInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type UserProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateManyInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompaniesOwnedInput
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
    locations?: JobLocationCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateCreateNestedManyWithoutCompanyInput
    questions?: QuestionCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
    locations?: JobLocationUncheckedCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateUncheckedCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingUncheckedCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateUncheckedCreateNestedManyWithoutCompanyInput
    questions?: QuestionUncheckedCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompaniesOwnedNestedInput
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUncheckedUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUncheckedUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyMemberCreateInput = {
    id?: string
    role: $Enums.CompanyMemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutCompanyMembershipsInput
  }

  export type CompanyMemberUncheckedCreateInput = {
    id?: string
    companyId: string
    userId: string
    role: $Enums.CompanyMemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutCompanyMembershipsNestedInput
  }

  export type CompanyMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyMemberCreateManyInput = {
    id?: string
    companyId: string
    userId: string
    role: $Enums.CompanyMemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCreateInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutJobsInput
    department?: DepartmentCreateNestedOneWithoutJobsInput
    location?: JobLocationCreateNestedOneWithoutJobsInput
    applicationForm?: ApplicationFormFieldCreateNestedManyWithoutJobInput
    hiringTeam?: JobHiringMemberCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowCreateNestedOneWithoutJobInput
    applications?: ApplicationCreateNestedManyWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigCreateNestedOneWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigCreateNestedOneWithoutJobInput
  }

  export type JobUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    companyId: string
    departmentId?: string | null
    locationId?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationForm?: ApplicationFormFieldUncheckedCreateNestedManyWithoutJobInput
    hiringTeam?: JobHiringMemberUncheckedCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowUncheckedCreateNestedOneWithoutJobInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigUncheckedCreateNestedOneWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedCreateNestedOneWithoutJobInput
  }

  export type JobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    department?: DepartmentUpdateOneWithoutJobsNestedInput
    location?: JobLocationUpdateOneWithoutJobsNestedInput
    applicationForm?: ApplicationFormFieldUpdateManyWithoutJobNestedInput
    hiringTeam?: JobHiringMemberUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUpdateOneWithoutJobNestedInput
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUpdateOneWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUpdateOneWithoutJobNestedInput
  }

  export type JobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationForm?: ApplicationFormFieldUncheckedUpdateManyWithoutJobNestedInput
    hiringTeam?: JobHiringMemberUncheckedUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUncheckedUpdateOneWithoutJobNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUncheckedUpdateOneWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedUpdateOneWithoutJobNestedInput
  }

  export type JobCreateManyInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    companyId: string
    departmentId?: string | null
    locationId?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutDepartmentsInput
    jobs?: JobCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: string
    name: string
    companyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobs?: JobUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutDepartmentsNestedInput
    jobs?: JobUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: string
    name: string
    companyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobLocationCreateInput = {
    id?: string
    address?: string | null
    country: string
    city: string
    stateRegion?: string | null
    zipPostal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutLocationsInput
    jobs?: JobCreateNestedManyWithoutLocationInput
  }

  export type JobLocationUncheckedCreateInput = {
    id?: string
    address?: string | null
    country: string
    city: string
    stateRegion?: string | null
    zipPostal?: string | null
    companyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobs?: JobUncheckedCreateNestedManyWithoutLocationInput
  }

  export type JobLocationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    stateRegion?: NullableStringFieldUpdateOperationsInput | string | null
    zipPostal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutLocationsNestedInput
    jobs?: JobUpdateManyWithoutLocationNestedInput
  }

  export type JobLocationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    stateRegion?: NullableStringFieldUpdateOperationsInput | string | null
    zipPostal?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type JobLocationCreateManyInput = {
    id?: string
    address?: string | null
    country: string
    city: string
    stateRegion?: string | null
    zipPostal?: string | null
    companyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobLocationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    stateRegion?: NullableStringFieldUpdateOperationsInput | string | null
    zipPostal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobLocationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    stateRegion?: NullableStringFieldUpdateOperationsInput | string | null
    zipPostal?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationFormFieldCreateInput = {
    id?: string
    fieldName: string
    label: string
    fieldType: $Enums.FieldType
    isRequired?: boolean
    isOptional?: boolean
    isDisabled?: boolean
    order: number
    job: JobCreateNestedOneWithoutApplicationFormInput
    customQuestion?: CustomQuestionCreateNestedOneWithoutApplicationFormFieldsInput
  }

  export type ApplicationFormFieldUncheckedCreateInput = {
    id?: string
    jobId: string
    fieldName: string
    label: string
    fieldType: $Enums.FieldType
    isRequired?: boolean
    isOptional?: boolean
    isDisabled?: boolean
    customQuestionId?: string | null
    order: number
  }

  export type ApplicationFormFieldUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    fieldType?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isOptional?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    job?: JobUpdateOneRequiredWithoutApplicationFormNestedInput
    customQuestion?: CustomQuestionUpdateOneWithoutApplicationFormFieldsNestedInput
  }

  export type ApplicationFormFieldUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    fieldType?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isOptional?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
    customQuestionId?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
  }

  export type ApplicationFormFieldCreateManyInput = {
    id?: string
    jobId: string
    fieldName: string
    label: string
    fieldType: $Enums.FieldType
    isRequired?: boolean
    isOptional?: boolean
    isDisabled?: boolean
    customQuestionId?: string | null
    order: number
  }

  export type ApplicationFormFieldUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    fieldType?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isOptional?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
  }

  export type ApplicationFormFieldUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    fieldType?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isOptional?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
    customQuestionId?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
  }

  export type CustomQuestionCreateInput = {
    id?: string
    companyId: string
    questionText: string
    responseType: $Enums.ResponseType
    options?: NullableJsonNullValueInput | InputJsonValue
    visibility?: $Enums.ResponseVisibility
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationFormFields?: ApplicationFormFieldCreateNestedManyWithoutCustomQuestionInput
    candidateAnswers?: CandidateAnswerCreateNestedManyWithoutCustomQuestionInput
  }

  export type CustomQuestionUncheckedCreateInput = {
    id?: string
    companyId: string
    questionText: string
    responseType: $Enums.ResponseType
    options?: NullableJsonNullValueInput | InputJsonValue
    visibility?: $Enums.ResponseVisibility
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationFormFields?: ApplicationFormFieldUncheckedCreateNestedManyWithoutCustomQuestionInput
    candidateAnswers?: CandidateAnswerUncheckedCreateNestedManyWithoutCustomQuestionInput
  }

  export type CustomQuestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    questionText?: StringFieldUpdateOperationsInput | string
    responseType?: EnumResponseTypeFieldUpdateOperationsInput | $Enums.ResponseType
    options?: NullableJsonNullValueInput | InputJsonValue
    visibility?: EnumResponseVisibilityFieldUpdateOperationsInput | $Enums.ResponseVisibility
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationFormFields?: ApplicationFormFieldUpdateManyWithoutCustomQuestionNestedInput
    candidateAnswers?: CandidateAnswerUpdateManyWithoutCustomQuestionNestedInput
  }

  export type CustomQuestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    questionText?: StringFieldUpdateOperationsInput | string
    responseType?: EnumResponseTypeFieldUpdateOperationsInput | $Enums.ResponseType
    options?: NullableJsonNullValueInput | InputJsonValue
    visibility?: EnumResponseVisibilityFieldUpdateOperationsInput | $Enums.ResponseVisibility
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationFormFields?: ApplicationFormFieldUncheckedUpdateManyWithoutCustomQuestionNestedInput
    candidateAnswers?: CandidateAnswerUncheckedUpdateManyWithoutCustomQuestionNestedInput
  }

  export type CustomQuestionCreateManyInput = {
    id?: string
    companyId: string
    questionText: string
    responseType: $Enums.ResponseType
    options?: NullableJsonNullValueInput | InputJsonValue
    visibility?: $Enums.ResponseVisibility
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomQuestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    questionText?: StringFieldUpdateOperationsInput | string
    responseType?: EnumResponseTypeFieldUpdateOperationsInput | $Enums.ResponseType
    options?: NullableJsonNullValueInput | InputJsonValue
    visibility?: EnumResponseVisibilityFieldUpdateOperationsInput | $Enums.ResponseVisibility
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomQuestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    questionText?: StringFieldUpdateOperationsInput | string
    responseType?: EnumResponseTypeFieldUpdateOperationsInput | $Enums.ResponseType
    options?: NullableJsonNullValueInput | InputJsonValue
    visibility?: EnumResponseVisibilityFieldUpdateOperationsInput | $Enums.ResponseVisibility
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    resumeUrl?: string | null
    coverLetterText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationCreateNestedManyWithoutCandidateInput
    candidateAnswers?: CandidateAnswerCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    resumeUrl?: string | null
    coverLetterText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutCandidateInput
    candidateAnswers?: CandidateAnswerUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUpdateManyWithoutCandidateNestedInput
    candidateAnswers?: CandidateAnswerUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutCandidateNestedInput
    candidateAnswers?: CandidateAnswerUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    resumeUrl?: string | null
    coverLetterText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CandidateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationCreateInput = {
    id?: string
    appliedAt?: Date | string
    currentStageId?: string | null
    status?: $Enums.ApplicationStatus
    disqualificationReason?: string | null
    archivedAt?: Date | string | null
    hiredAt?: Date | string | null
    source?: string | null
    job: JobCreateNestedOneWithoutApplicationsInput
    candidate: CandidateCreateNestedOneWithoutApplicationsInput
    candidateAnswers?: CandidateAnswerCreateNestedManyWithoutApplicationInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutApplicationInput
    messages?: MessageThreadCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateInput = {
    id?: string
    jobId: string
    candidateId: string
    appliedAt?: Date | string
    currentStageId?: string | null
    status?: $Enums.ApplicationStatus
    disqualificationReason?: string | null
    archivedAt?: Date | string | null
    hiredAt?: Date | string | null
    source?: string | null
    candidateAnswers?: CandidateAnswerUncheckedCreateNestedManyWithoutApplicationInput
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutApplicationInput
    messages?: MessageThreadUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStageId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    disqualificationReason?: NullableStringFieldUpdateOperationsInput | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    job?: JobUpdateOneRequiredWithoutApplicationsNestedInput
    candidate?: CandidateUpdateOneRequiredWithoutApplicationsNestedInput
    candidateAnswers?: CandidateAnswerUpdateManyWithoutApplicationNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutApplicationNestedInput
    messages?: MessageThreadUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStageId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    disqualificationReason?: NullableStringFieldUpdateOperationsInput | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    candidateAnswers?: CandidateAnswerUncheckedUpdateManyWithoutApplicationNestedInput
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutApplicationNestedInput
    messages?: MessageThreadUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationCreateManyInput = {
    id?: string
    jobId: string
    candidateId: string
    appliedAt?: Date | string
    currentStageId?: string | null
    status?: $Enums.ApplicationStatus
    disqualificationReason?: string | null
    archivedAt?: Date | string | null
    hiredAt?: Date | string | null
    source?: string | null
  }

  export type ApplicationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStageId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    disqualificationReason?: NullableStringFieldUpdateOperationsInput | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApplicationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStageId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    disqualificationReason?: NullableStringFieldUpdateOperationsInput | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateAnswerCreateInput = {
    id?: string
    answerText?: string | null
    answerFileUrl?: string | null
    answeredAt?: Date | string
    application: ApplicationCreateNestedOneWithoutCandidateAnswersInput
    customQuestion: CustomQuestionCreateNestedOneWithoutCandidateAnswersInput
    candidate: CandidateCreateNestedOneWithoutCandidateAnswersInput
  }

  export type CandidateAnswerUncheckedCreateInput = {
    id?: string
    applicationId: string
    customQuestionId: string
    answerText?: string | null
    answerFileUrl?: string | null
    answeredAt?: Date | string
    candidateId: string
  }

  export type CandidateAnswerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    answerText?: NullableStringFieldUpdateOperationsInput | string | null
    answerFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutCandidateAnswersNestedInput
    customQuestion?: CustomQuestionUpdateOneRequiredWithoutCandidateAnswersNestedInput
    candidate?: CandidateUpdateOneRequiredWithoutCandidateAnswersNestedInput
  }

  export type CandidateAnswerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    customQuestionId?: StringFieldUpdateOperationsInput | string
    answerText?: NullableStringFieldUpdateOperationsInput | string | null
    answerFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateAnswerCreateManyInput = {
    id?: string
    applicationId: string
    customQuestionId: string
    answerText?: string | null
    answerFileUrl?: string | null
    answeredAt?: Date | string
    candidateId: string
  }

  export type CandidateAnswerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    answerText?: NullableStringFieldUpdateOperationsInput | string | null
    answerFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateAnswerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    customQuestionId?: StringFieldUpdateOperationsInput | string
    answerText?: NullableStringFieldUpdateOperationsInput | string | null
    answerFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
  }

  export type WorkflowTemplateCreateInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutWorkflowTemplatesInput
    stages?: WorkflowStageTemplateCreateNestedManyWithoutWorkflowTemplateInput
    jobWorkflows?: JobWorkflowCreateNestedManyWithoutWorkflowTemplateInput
  }

  export type WorkflowTemplateUncheckedCreateInput = {
    id?: string
    name: string
    companyId: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    stages?: WorkflowStageTemplateUncheckedCreateNestedManyWithoutWorkflowTemplateInput
    jobWorkflows?: JobWorkflowUncheckedCreateNestedManyWithoutWorkflowTemplateInput
  }

  export type WorkflowTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutWorkflowTemplatesNestedInput
    stages?: WorkflowStageTemplateUpdateManyWithoutWorkflowTemplateNestedInput
    jobWorkflows?: JobWorkflowUpdateManyWithoutWorkflowTemplateNestedInput
  }

  export type WorkflowTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stages?: WorkflowStageTemplateUncheckedUpdateManyWithoutWorkflowTemplateNestedInput
    jobWorkflows?: JobWorkflowUncheckedUpdateManyWithoutWorkflowTemplateNestedInput
  }

  export type WorkflowTemplateCreateManyInput = {
    id?: string
    name: string
    companyId: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowStageTemplateCreateInput = {
    id?: string
    name: string
    type: $Enums.StageType
    order: number
    isDefault?: boolean
    canBeDeleted?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    visibilityToReviewers?: boolean
    workflowTemplate: WorkflowTemplateCreateNestedOneWithoutStagesInput
  }

  export type WorkflowStageTemplateUncheckedCreateInput = {
    id?: string
    workflowTemplateId: string
    name: string
    type: $Enums.StageType
    order: number
    isDefault?: boolean
    canBeDeleted?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    visibilityToReviewers?: boolean
  }

  export type WorkflowStageTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    order?: IntFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canBeDeleted?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    visibilityToReviewers?: BoolFieldUpdateOperationsInput | boolean
    workflowTemplate?: WorkflowTemplateUpdateOneRequiredWithoutStagesNestedInput
  }

  export type WorkflowStageTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowTemplateId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    order?: IntFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canBeDeleted?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    visibilityToReviewers?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WorkflowStageTemplateCreateManyInput = {
    id?: string
    workflowTemplateId: string
    name: string
    type: $Enums.StageType
    order: number
    isDefault?: boolean
    canBeDeleted?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    visibilityToReviewers?: boolean
  }

  export type WorkflowStageTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    order?: IntFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canBeDeleted?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    visibilityToReviewers?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WorkflowStageTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowTemplateId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    order?: IntFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canBeDeleted?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    visibilityToReviewers?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JobWorkflowCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutJobWorkflowInput
    workflowTemplate?: WorkflowTemplateCreateNestedOneWithoutJobWorkflowsInput
    stages?: JobWorkflowStageCreateNestedManyWithoutJobWorkflowInput
  }

  export type JobWorkflowUncheckedCreateInput = {
    id?: string
    jobId: string
    workflowTemplateId?: string | null
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    stages?: JobWorkflowStageUncheckedCreateNestedManyWithoutJobWorkflowInput
  }

  export type JobWorkflowUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutJobWorkflowNestedInput
    workflowTemplate?: WorkflowTemplateUpdateOneWithoutJobWorkflowsNestedInput
    stages?: JobWorkflowStageUpdateManyWithoutJobWorkflowNestedInput
  }

  export type JobWorkflowUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    workflowTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stages?: JobWorkflowStageUncheckedUpdateManyWithoutJobWorkflowNestedInput
  }

  export type JobWorkflowCreateManyInput = {
    id?: string
    jobId: string
    workflowTemplateId?: string | null
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobWorkflowUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobWorkflowUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    workflowTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobWorkflowStageCreateInput = {
    id?: string
    name: string
    type: $Enums.StageType
    order: number
    settings?: NullableJsonNullValueInput | InputJsonValue
    jobWorkflow: JobWorkflowCreateNestedOneWithoutStagesInput
  }

  export type JobWorkflowStageUncheckedCreateInput = {
    id?: string
    jobWorkflowId: string
    name: string
    type: $Enums.StageType
    order: number
    settings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JobWorkflowStageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    order?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
    jobWorkflow?: JobWorkflowUpdateOneRequiredWithoutStagesNestedInput
  }

  export type JobWorkflowStageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobWorkflowId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    order?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JobWorkflowStageCreateManyInput = {
    id?: string
    jobWorkflowId: string
    name: string
    type: $Enums.StageType
    order: number
    settings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JobWorkflowStageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    order?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JobWorkflowStageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobWorkflowId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    order?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JobHiringMemberCreateInput = {
    id?: string
    role: $Enums.CompanyMemberRole
    isExternalRecruiter?: boolean
    createdAt?: Date | string
    job: JobCreateNestedOneWithoutHiringTeamInput
    user: UserCreateNestedOneWithoutJobHiringMembersInput
  }

  export type JobHiringMemberUncheckedCreateInput = {
    id?: string
    jobId: string
    userId: string
    role: $Enums.CompanyMemberRole
    isExternalRecruiter?: boolean
    createdAt?: Date | string
  }

  export type JobHiringMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    isExternalRecruiter?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutHiringTeamNestedInput
    user?: UserUpdateOneRequiredWithoutJobHiringMembersNestedInput
  }

  export type JobHiringMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    isExternalRecruiter?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobHiringMemberCreateManyInput = {
    id?: string
    jobId: string
    userId: string
    role: $Enums.CompanyMemberRole
    isExternalRecruiter?: boolean
    createdAt?: Date | string
  }

  export type JobHiringMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    isExternalRecruiter?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobHiringMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    isExternalRecruiter?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingCardTemplateCreateInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.RatingCardType
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutRatingCardTemplatesInput
    categories?: RatingCategoryCreateNestedManyWithoutRatingCardTemplateInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutRatingCardTemplateInput
  }

  export type RatingCardTemplateUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    companyId: string
    type?: $Enums.RatingCardType
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: RatingCategoryUncheckedCreateNestedManyWithoutRatingCardTemplateInput
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutRatingCardTemplateInput
  }

  export type RatingCardTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumRatingCardTypeFieldUpdateOperationsInput | $Enums.RatingCardType
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutRatingCardTemplatesNestedInput
    categories?: RatingCategoryUpdateManyWithoutRatingCardTemplateNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutRatingCardTemplateNestedInput
  }

  export type RatingCardTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    type?: EnumRatingCardTypeFieldUpdateOperationsInput | $Enums.RatingCardType
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: RatingCategoryUncheckedUpdateManyWithoutRatingCardTemplateNestedInput
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutRatingCardTemplateNestedInput
  }

  export type RatingCardTemplateCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    companyId: string
    type?: $Enums.RatingCardType
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingCardTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumRatingCardTypeFieldUpdateOperationsInput | $Enums.RatingCardType
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingCardTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    type?: EnumRatingCardTypeFieldUpdateOperationsInput | $Enums.RatingCardType
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingCategoryCreateInput = {
    id?: string
    name: string
    description?: string | null
    order: number
    ratingCardTemplate: RatingCardTemplateCreateNestedOneWithoutCategoriesInput
    categoryScores?: CategoryScoreCreateNestedManyWithoutRatingCategoryInput
  }

  export type RatingCategoryUncheckedCreateInput = {
    id?: string
    ratingCardTemplateId: string
    name: string
    description?: string | null
    order: number
    categoryScores?: CategoryScoreUncheckedCreateNestedManyWithoutRatingCategoryInput
  }

  export type RatingCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    ratingCardTemplate?: RatingCardTemplateUpdateOneRequiredWithoutCategoriesNestedInput
    categoryScores?: CategoryScoreUpdateManyWithoutRatingCategoryNestedInput
  }

  export type RatingCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ratingCardTemplateId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    categoryScores?: CategoryScoreUncheckedUpdateManyWithoutRatingCategoryNestedInput
  }

  export type RatingCategoryCreateManyInput = {
    id?: string
    ratingCardTemplateId: string
    name: string
    description?: string | null
    order: number
  }

  export type RatingCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
  }

  export type RatingCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ratingCardTemplateId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
  }

  export type CandidateRatingCreateInput = {
    id?: string
    jobWorkflowStageId: string
    overallScore: number
    comments?: string | null
    submittedAt?: Date | string
    application: ApplicationCreateNestedOneWithoutCandidateRatingsInput
    rater: UserCreateNestedOneWithoutCandidateRatingsInput
    ratingCardTemplate: RatingCardTemplateCreateNestedOneWithoutCandidateRatingsInput
    categoryScores?: CategoryScoreCreateNestedManyWithoutCandidateRatingInput
  }

  export type CandidateRatingUncheckedCreateInput = {
    id?: string
    applicationId: string
    jobWorkflowStageId: string
    raterId: string
    ratingCardTemplateId: string
    overallScore: number
    comments?: string | null
    submittedAt?: Date | string
    categoryScores?: CategoryScoreUncheckedCreateNestedManyWithoutCandidateRatingInput
  }

  export type CandidateRatingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobWorkflowStageId?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutCandidateRatingsNestedInput
    rater?: UserUpdateOneRequiredWithoutCandidateRatingsNestedInput
    ratingCardTemplate?: RatingCardTemplateUpdateOneRequiredWithoutCandidateRatingsNestedInput
    categoryScores?: CategoryScoreUpdateManyWithoutCandidateRatingNestedInput
  }

  export type CandidateRatingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    jobWorkflowStageId?: StringFieldUpdateOperationsInput | string
    raterId?: StringFieldUpdateOperationsInput | string
    ratingCardTemplateId?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryScores?: CategoryScoreUncheckedUpdateManyWithoutCandidateRatingNestedInput
  }

  export type CandidateRatingCreateManyInput = {
    id?: string
    applicationId: string
    jobWorkflowStageId: string
    raterId: string
    ratingCardTemplateId: string
    overallScore: number
    comments?: string | null
    submittedAt?: Date | string
  }

  export type CandidateRatingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobWorkflowStageId?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateRatingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    jobWorkflowStageId?: StringFieldUpdateOperationsInput | string
    raterId?: StringFieldUpdateOperationsInput | string
    ratingCardTemplateId?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryScoreCreateInput = {
    id?: string
    score: number
    comments?: string | null
    candidateRating: CandidateRatingCreateNestedOneWithoutCategoryScoresInput
    ratingCategory: RatingCategoryCreateNestedOneWithoutCategoryScoresInput
  }

  export type CategoryScoreUncheckedCreateInput = {
    id?: string
    candidateRatingId: string
    ratingCategoryId: string
    score: number
    comments?: string | null
  }

  export type CategoryScoreUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    candidateRating?: CandidateRatingUpdateOneRequiredWithoutCategoryScoresNestedInput
    ratingCategory?: RatingCategoryUpdateOneRequiredWithoutCategoryScoresNestedInput
  }

  export type CategoryScoreUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateRatingId?: StringFieldUpdateOperationsInput | string
    ratingCategoryId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryScoreCreateManyInput = {
    id?: string
    candidateRatingId: string
    ratingCategoryId: string
    score: number
    comments?: string | null
  }

  export type CategoryScoreUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryScoreUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateRatingId?: StringFieldUpdateOperationsInput | string
    ratingCategoryId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageThreadCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    application: ApplicationCreateNestedOneWithoutMessagesInput
    messages?: MessageCreateNestedManyWithoutThreadInput
  }

  export type MessageThreadUncheckedCreateInput = {
    id?: string
    applicationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutThreadInput
  }

  export type MessageThreadUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutMessagesNestedInput
    messages?: MessageUpdateManyWithoutThreadNestedInput
  }

  export type MessageThreadUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutThreadNestedInput
  }

  export type MessageThreadCreateManyInput = {
    id?: string
    applicationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageThreadUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageThreadUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateInput = {
    id?: string
    content: string
    sentAt?: Date | string
    isInternalNote?: boolean
    visibility?: $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
    thread: MessageThreadCreateNestedOneWithoutMessagesInput
    sender: UserCreateNestedOneWithoutSentMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    threadId: string
    senderId: string
    content: string
    sentAt?: Date | string
    isInternalNote?: boolean
    visibility?: $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternalNote?: BoolFieldUpdateOperationsInput | boolean
    visibility?: NullableEnumCommentVisibilityFieldUpdateOperationsInput | $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
    thread?: MessageThreadUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    threadId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternalNote?: BoolFieldUpdateOperationsInput | boolean
    visibility?: NullableEnumCommentVisibilityFieldUpdateOperationsInput | $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MessageCreateManyInput = {
    id?: string
    threadId: string
    senderId: string
    content: string
    sentAt?: Date | string
    isInternalNote?: boolean
    visibility?: $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternalNote?: BoolFieldUpdateOperationsInput | boolean
    visibility?: NullableEnumCommentVisibilityFieldUpdateOperationsInput | $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    threadId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternalNote?: BoolFieldUpdateOperationsInput | boolean
    visibility?: NullableEnumCommentVisibilityFieldUpdateOperationsInput | $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MeetingCreateInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    type: $Enums.MeetingType
    location?: string | null
    videoCallLink?: string | null
    jobId?: string | null
    applicationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizer: UserCreateNestedOneWithoutMeetingsOwnedInput
    attendees?: MeetingAttendeeCreateNestedManyWithoutMeetingInput
    meetingTemplate?: MeetingTemplateCreateNestedOneWithoutMeetingsInput
    aiNoteTakingConfig?: AINoteTakingConfigCreateNestedOneWithoutMeetingInput
  }

  export type MeetingUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    type: $Enums.MeetingType
    location?: string | null
    videoCallLink?: string | null
    jobId?: string | null
    applicationId?: string | null
    organizerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meetingTemplateId?: string | null
    attendees?: MeetingAttendeeUncheckedCreateNestedManyWithoutMeetingInput
    aiNoteTakingConfig?: AINoteTakingConfigUncheckedCreateNestedOneWithoutMeetingInput
  }

  export type MeetingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    videoCallLink?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: UserUpdateOneRequiredWithoutMeetingsOwnedNestedInput
    attendees?: MeetingAttendeeUpdateManyWithoutMeetingNestedInput
    meetingTemplate?: MeetingTemplateUpdateOneWithoutMeetingsNestedInput
    aiNoteTakingConfig?: AINoteTakingConfigUpdateOneWithoutMeetingNestedInput
  }

  export type MeetingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    videoCallLink?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    organizerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
    attendees?: MeetingAttendeeUncheckedUpdateManyWithoutMeetingNestedInput
    aiNoteTakingConfig?: AINoteTakingConfigUncheckedUpdateOneWithoutMeetingNestedInput
  }

  export type MeetingCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    type: $Enums.MeetingType
    location?: string | null
    videoCallLink?: string | null
    jobId?: string | null
    applicationId?: string | null
    organizerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meetingTemplateId?: string | null
  }

  export type MeetingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    videoCallLink?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    videoCallLink?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    organizerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MeetingAttendeeCreateInput = {
    id?: string
    candidateId?: string | null
    email: string
    name?: string | null
    status?: $Enums.AttendeeStatus
    isCandidate?: boolean
    meeting: MeetingCreateNestedOneWithoutAttendeesInput
    user?: UserCreateNestedOneWithoutMeetingAttendeesInput
  }

  export type MeetingAttendeeUncheckedCreateInput = {
    id?: string
    meetingId: string
    userId?: string | null
    candidateId?: string | null
    email: string
    name?: string | null
    status?: $Enums.AttendeeStatus
    isCandidate?: boolean
  }

  export type MeetingAttendeeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    isCandidate?: BoolFieldUpdateOperationsInput | boolean
    meeting?: MeetingUpdateOneRequiredWithoutAttendeesNestedInput
    user?: UserUpdateOneWithoutMeetingAttendeesNestedInput
  }

  export type MeetingAttendeeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    isCandidate?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MeetingAttendeeCreateManyInput = {
    id?: string
    meetingId: string
    userId?: string | null
    candidateId?: string | null
    email: string
    name?: string | null
    status?: $Enums.AttendeeStatus
    isCandidate?: boolean
  }

  export type MeetingAttendeeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    isCandidate?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MeetingAttendeeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    isCandidate?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MeetingTemplateCreateInput = {
    id?: string
    companyId: string
    name: string
    title: string
    duration: number
    meetingType: $Enums.MeetingType
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meetings?: MeetingCreateNestedManyWithoutMeetingTemplateInput
  }

  export type MeetingTemplateUncheckedCreateInput = {
    id?: string
    companyId: string
    name: string
    title: string
    duration: number
    meetingType: $Enums.MeetingType
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meetings?: MeetingUncheckedCreateNestedManyWithoutMeetingTemplateInput
  }

  export type MeetingTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    meetingType?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetings?: MeetingUpdateManyWithoutMeetingTemplateNestedInput
  }

  export type MeetingTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    meetingType?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetings?: MeetingUncheckedUpdateManyWithoutMeetingTemplateNestedInput
  }

  export type MeetingTemplateCreateManyInput = {
    id?: string
    companyId: string
    name: string
    title: string
    duration: number
    meetingType: $Enums.MeetingType
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    meetingType?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    meetingType?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CareersPageSettingCreateInput = {
    id?: string
    logoUrl?: string | null
    primaryColor?: string | null
    focusColor?: string | null
    hyperlinkColor?: string | null
    googleAnalyticsId?: string | null
    trackingPixelUrl?: string | null
    embedJobsCode?: string | null
    customCSS?: string | null
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutCareersPageSettingsInput
  }

  export type CareersPageSettingUncheckedCreateInput = {
    id?: string
    companyId: string
    logoUrl?: string | null
    primaryColor?: string | null
    focusColor?: string | null
    hyperlinkColor?: string | null
    googleAnalyticsId?: string | null
    trackingPixelUrl?: string | null
    embedJobsCode?: string | null
    customCSS?: string | null
    updatedAt?: Date | string
  }

  export type CareersPageSettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    focusColor?: NullableStringFieldUpdateOperationsInput | string | null
    hyperlinkColor?: NullableStringFieldUpdateOperationsInput | string | null
    googleAnalyticsId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingPixelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embedJobsCode?: NullableStringFieldUpdateOperationsInput | string | null
    customCSS?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutCareersPageSettingsNestedInput
  }

  export type CareersPageSettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    focusColor?: NullableStringFieldUpdateOperationsInput | string | null
    hyperlinkColor?: NullableStringFieldUpdateOperationsInput | string | null
    googleAnalyticsId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingPixelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embedJobsCode?: NullableStringFieldUpdateOperationsInput | string | null
    customCSS?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CareersPageSettingCreateManyInput = {
    id?: string
    companyId: string
    logoUrl?: string | null
    primaryColor?: string | null
    focusColor?: string | null
    hyperlinkColor?: string | null
    googleAnalyticsId?: string | null
    trackingPixelUrl?: string | null
    embedJobsCode?: string | null
    customCSS?: string | null
    updatedAt?: Date | string
  }

  export type CareersPageSettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    focusColor?: NullableStringFieldUpdateOperationsInput | string | null
    hyperlinkColor?: NullableStringFieldUpdateOperationsInput | string | null
    googleAnalyticsId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingPixelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embedJobsCode?: NullableStringFieldUpdateOperationsInput | string | null
    customCSS?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CareersPageSettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    focusColor?: NullableStringFieldUpdateOperationsInput | string | null
    hyperlinkColor?: NullableStringFieldUpdateOperationsInput | string | null
    googleAnalyticsId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingPixelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embedJobsCode?: NullableStringFieldUpdateOperationsInput | string | null
    customCSS?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    type: $Enums.NotificationType
    message: string
    link?: string | null
    isRead?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    type: $Enums.NotificationType
    message: string
    link?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    message?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    message?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    type: $Enums.NotificationType
    message: string
    link?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    message?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    message?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIScreeningConfigCreateInput = {
    id?: string
    isEnabled?: boolean
    guidance?: string | null
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutAiScreeningConfigInput
  }

  export type AIScreeningConfigUncheckedCreateInput = {
    id?: string
    jobId: string
    isEnabled?: boolean
    guidance?: string | null
    updatedAt?: Date | string
  }

  export type AIScreeningConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    guidance?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutAiScreeningConfigNestedInput
  }

  export type AIScreeningConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    guidance?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIScreeningConfigCreateManyInput = {
    id?: string
    jobId: string
    isEnabled?: boolean
    guidance?: string | null
    updatedAt?: Date | string
  }

  export type AIScreeningConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    guidance?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIScreeningConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    guidance?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AISchedulingConfigCreateInput = {
    id?: string
    isEnabled?: boolean
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutAiSchedulingConfigInput
  }

  export type AISchedulingConfigUncheckedCreateInput = {
    id?: string
    jobId: string
    isEnabled?: boolean
    updatedAt?: Date | string
  }

  export type AISchedulingConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutAiSchedulingConfigNestedInput
  }

  export type AISchedulingConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AISchedulingConfigCreateManyInput = {
    id?: string
    jobId: string
    isEnabled?: boolean
    updatedAt?: Date | string
  }

  export type AISchedulingConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AISchedulingConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AINoteTakingConfigCreateInput = {
    id?: string
    isEnabled?: boolean
    transcript?: string | null
    summary?: string | null
    actionItems?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
    meeting: MeetingCreateNestedOneWithoutAiNoteTakingConfigInput
  }

  export type AINoteTakingConfigUncheckedCreateInput = {
    id?: string
    meetingId: string
    isEnabled?: boolean
    transcript?: string | null
    summary?: string | null
    actionItems?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type AINoteTakingConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    transcript?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    actionItems?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meeting?: MeetingUpdateOneRequiredWithoutAiNoteTakingConfigNestedInput
  }

  export type AINoteTakingConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    transcript?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    actionItems?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AINoteTakingConfigCreateManyInput = {
    id?: string
    meetingId: string
    isEnabled?: boolean
    transcript?: string | null
    summary?: string | null
    actionItems?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type AINoteTakingConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    transcript?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    actionItems?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AINoteTakingConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    transcript?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    actionItems?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIInteractionLogCreateInput = {
    id?: string
    inputType: string
    input: string
    output?: string | null
    timestamp?: Date | string
    user?: UserCreateNestedOneWithoutAiInteractionLogsInput
  }

  export type AIInteractionLogUncheckedCreateInput = {
    id?: string
    userId?: string | null
    inputType: string
    input: string
    output?: string | null
    timestamp?: Date | string
  }

  export type AIInteractionLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    inputType?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAiInteractionLogsNestedInput
  }

  export type AIInteractionLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    inputType?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIInteractionLogCreateManyInput = {
    id?: string
    userId?: string | null
    inputType: string
    input: string
    output?: string | null
    timestamp?: Date | string
  }

  export type AIInteractionLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    inputType?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIInteractionLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    inputType?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIBusinessPreferenceCreateInput = {
    id?: string
    companyId: string
    businessOverview?: string | null
    businessCulture?: string | null
    businessValues?: string | null
    businessMission?: string | null
    updatedAt?: Date | string
  }

  export type AIBusinessPreferenceUncheckedCreateInput = {
    id?: string
    companyId: string
    businessOverview?: string | null
    businessCulture?: string | null
    businessValues?: string | null
    businessMission?: string | null
    updatedAt?: Date | string
  }

  export type AIBusinessPreferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    businessOverview?: NullableStringFieldUpdateOperationsInput | string | null
    businessCulture?: NullableStringFieldUpdateOperationsInput | string | null
    businessValues?: NullableStringFieldUpdateOperationsInput | string | null
    businessMission?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIBusinessPreferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    businessOverview?: NullableStringFieldUpdateOperationsInput | string | null
    businessCulture?: NullableStringFieldUpdateOperationsInput | string | null
    businessValues?: NullableStringFieldUpdateOperationsInput | string | null
    businessMission?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIBusinessPreferenceCreateManyInput = {
    id?: string
    companyId: string
    businessOverview?: string | null
    businessCulture?: string | null
    businessValues?: string | null
    businessMission?: string | null
    updatedAt?: Date | string
  }

  export type AIBusinessPreferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    businessOverview?: NullableStringFieldUpdateOperationsInput | string | null
    businessCulture?: NullableStringFieldUpdateOperationsInput | string | null
    businessValues?: NullableStringFieldUpdateOperationsInput | string | null
    businessMission?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIBusinessPreferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    businessOverview?: NullableStringFieldUpdateOperationsInput | string | null
    businessCulture?: NullableStringFieldUpdateOperationsInput | string | null
    businessValues?: NullableStringFieldUpdateOperationsInput | string | null
    businessMission?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AICommunicationPreferenceCreateInput = {
    id?: string
    companyId: string
    tone?: $Enums.AITone
    blockedTeamTopics?: NullableJsonNullValueInput | InputJsonValue
    blockedCandidateTopics?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type AICommunicationPreferenceUncheckedCreateInput = {
    id?: string
    companyId: string
    tone?: $Enums.AITone
    blockedTeamTopics?: NullableJsonNullValueInput | InputJsonValue
    blockedCandidateTopics?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type AICommunicationPreferenceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    tone?: EnumAIToneFieldUpdateOperationsInput | $Enums.AITone
    blockedTeamTopics?: NullableJsonNullValueInput | InputJsonValue
    blockedCandidateTopics?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AICommunicationPreferenceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    tone?: EnumAIToneFieldUpdateOperationsInput | $Enums.AITone
    blockedTeamTopics?: NullableJsonNullValueInput | InputJsonValue
    blockedCandidateTopics?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AICommunicationPreferenceCreateManyInput = {
    id?: string
    companyId: string
    tone?: $Enums.AITone
    blockedTeamTopics?: NullableJsonNullValueInput | InputJsonValue
    blockedCandidateTopics?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type AICommunicationPreferenceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    tone?: EnumAIToneFieldUpdateOperationsInput | $Enums.AITone
    blockedTeamTopics?: NullableJsonNullValueInput | InputJsonValue
    blockedCandidateTopics?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AICommunicationPreferenceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    tone?: EnumAIToneFieldUpdateOperationsInput | $Enums.AITone
    blockedTeamTopics?: NullableJsonNullValueInput | InputJsonValue
    blockedCandidateTopics?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalendarIntegrationCreateInput = {
    id?: string
    provider: $Enums.CalendarProvider
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    scopes?: string | null
    calendarId?: string | null
    connectedAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCalendarIntegrationsInput
  }

  export type CalendarIntegrationUncheckedCreateInput = {
    id?: string
    userId: string
    provider: $Enums.CalendarProvider
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    scopes?: string | null
    calendarId?: string | null
    connectedAt?: Date | string
    updatedAt?: Date | string
  }

  export type CalendarIntegrationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: EnumCalendarProviderFieldUpdateOperationsInput | $Enums.CalendarProvider
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    calendarId?: NullableStringFieldUpdateOperationsInput | string | null
    connectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCalendarIntegrationsNestedInput
  }

  export type CalendarIntegrationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    provider?: EnumCalendarProviderFieldUpdateOperationsInput | $Enums.CalendarProvider
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    calendarId?: NullableStringFieldUpdateOperationsInput | string | null
    connectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalendarIntegrationCreateManyInput = {
    id?: string
    userId: string
    provider: $Enums.CalendarProvider
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    scopes?: string | null
    calendarId?: string | null
    connectedAt?: Date | string
    updatedAt?: Date | string
  }

  export type CalendarIntegrationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: EnumCalendarProviderFieldUpdateOperationsInput | $Enums.CalendarProvider
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    calendarId?: NullableStringFieldUpdateOperationsInput | string | null
    connectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalendarIntegrationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    provider?: EnumCalendarProviderFieldUpdateOperationsInput | $Enums.CalendarProvider
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    calendarId?: NullableStringFieldUpdateOperationsInput | string | null
    connectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobBoardIntegrationCreateInput = {
    id?: string
    boardName: string
    apiKey?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutJobBoardIntegrationsInput
  }

  export type JobBoardIntegrationUncheckedCreateInput = {
    id?: string
    companyId: string
    boardName: string
    apiKey?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobBoardIntegrationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardName?: StringFieldUpdateOperationsInput | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutJobBoardIntegrationsNestedInput
  }

  export type JobBoardIntegrationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    boardName?: StringFieldUpdateOperationsInput | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobBoardIntegrationCreateManyInput = {
    id?: string
    companyId: string
    boardName: string
    apiKey?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobBoardIntegrationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardName?: StringFieldUpdateOperationsInput | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobBoardIntegrationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    boardName?: StringFieldUpdateOperationsInput | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageTemplateCreateInput = {
    id?: string
    name: string
    subject: string
    content: string
    description?: string | null
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutMessageTemplatesInput
  }

  export type MessageTemplateUncheckedCreateInput = {
    id?: string
    companyId: string
    name: string
    subject: string
    content: string
    description?: string | null
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutMessageTemplatesNestedInput
  }

  export type MessageTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageTemplateCreateManyInput = {
    id?: string
    companyId: string
    name: string
    subject: string
    content: string
    description?: string | null
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionCreateInput = {
    id?: string
    text: string
    responseType: string
    visibility: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutQuestionsInput
    options?: QuestionOptionCreateNestedManyWithoutQuestionInput
    questionSets?: QuestionSetCreateNestedManyWithoutQuestionsInput
  }

  export type QuestionUncheckedCreateInput = {
    id?: string
    companyId: string
    text: string
    responseType: string
    visibility: string
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutQuestionsInput
  }

  export type QuestionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    responseType?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutQuestionsNestedInput
    options?: QuestionOptionUpdateManyWithoutQuestionNestedInput
    questionSets?: QuestionSetUpdateManyWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    responseType?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput
    questionSets?: QuestionSetUncheckedUpdateManyWithoutQuestionsNestedInput
  }

  export type QuestionCreateManyInput = {
    id?: string
    companyId: string
    text: string
    responseType: string
    visibility: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    responseType?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    responseType?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionOptionCreateInput = {
    id?: string
    value: string
    question: QuestionCreateNestedOneWithoutOptionsInput
  }

  export type QuestionOptionUncheckedCreateInput = {
    id?: string
    questionId: string
    value: string
  }

  export type QuestionOptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    question?: QuestionUpdateOneRequiredWithoutOptionsNestedInput
  }

  export type QuestionOptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionOptionCreateManyInput = {
    id?: string
    questionId: string
    value: string
  }

  export type QuestionOptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionOptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    questionId?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionSetCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutQuestionSetsInput
    questions?: QuestionCreateNestedManyWithoutQuestionSetsInput
  }

  export type QuestionSetUncheckedCreateInput = {
    id?: string
    companyId: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutQuestionSetsInput
  }

  export type QuestionSetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutQuestionSetsNestedInput
    questions?: QuestionUpdateManyWithoutQuestionSetsNestedInput
  }

  export type QuestionSetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutQuestionSetsNestedInput
  }

  export type QuestionSetCreateManyInput = {
    id?: string
    companyId: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionSetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionSetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserProfileNullableScalarRelationFilter = {
    is?: UserProfileWhereInput | null
    isNot?: UserProfileWhereInput | null
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type MeetingListRelationFilter = {
    every?: MeetingWhereInput
    some?: MeetingWhereInput
    none?: MeetingWhereInput
  }

  export type MeetingAttendeeListRelationFilter = {
    every?: MeetingAttendeeWhereInput
    some?: MeetingAttendeeWhereInput
    none?: MeetingAttendeeWhereInput
  }

  export type CandidateRatingListRelationFilter = {
    every?: CandidateRatingWhereInput
    some?: CandidateRatingWhereInput
    none?: CandidateRatingWhereInput
  }

  export type CompanyListRelationFilter = {
    every?: CompanyWhereInput
    some?: CompanyWhereInput
    none?: CompanyWhereInput
  }

  export type CompanyMemberListRelationFilter = {
    every?: CompanyMemberWhereInput
    some?: CompanyMemberWhereInput
    none?: CompanyMemberWhereInput
  }

  export type CalendarIntegrationListRelationFilter = {
    every?: CalendarIntegrationWhereInput
    some?: CalendarIntegrationWhereInput
    none?: CalendarIntegrationWhereInput
  }

  export type AIInteractionLogListRelationFilter = {
    every?: AIInteractionLogWhereInput
    some?: AIInteractionLogWhereInput
    none?: AIInteractionLogWhereInput
  }

  export type JobHiringMemberListRelationFilter = {
    every?: JobHiringMemberWhereInput
    some?: JobHiringMemberWhereInput
    none?: JobHiringMemberWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeetingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeetingAttendeeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CandidateRatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CalendarIntegrationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AIInteractionLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobHiringMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    jobTitle?: SortOrder
    departmentName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    jobTitle?: SortOrder
    departmentName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    jobTitle?: SortOrder
    departmentName?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobListRelationFilter = {
    every?: JobWhereInput
    some?: JobWhereInput
    none?: JobWhereInput
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type JobLocationListRelationFilter = {
    every?: JobLocationWhereInput
    some?: JobLocationWhereInput
    none?: JobLocationWhereInput
  }

  export type WorkflowTemplateListRelationFilter = {
    every?: WorkflowTemplateWhereInput
    some?: WorkflowTemplateWhereInput
    none?: WorkflowTemplateWhereInput
  }

  export type RatingCardTemplateListRelationFilter = {
    every?: RatingCardTemplateWhereInput
    some?: RatingCardTemplateWhereInput
    none?: RatingCardTemplateWhereInput
  }

  export type CareersPageSettingNullableScalarRelationFilter = {
    is?: CareersPageSettingWhereInput | null
    isNot?: CareersPageSettingWhereInput | null
  }

  export type JobBoardIntegrationListRelationFilter = {
    every?: JobBoardIntegrationWhereInput
    some?: JobBoardIntegrationWhereInput
    none?: JobBoardIntegrationWhereInput
  }

  export type MessageTemplateListRelationFilter = {
    every?: MessageTemplateWhereInput
    some?: MessageTemplateWhereInput
    none?: MessageTemplateWhereInput
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type QuestionSetListRelationFilter = {
    every?: QuestionSetWhereInput
    some?: QuestionSetWhereInput
    none?: QuestionSetWhereInput
  }

  export type JobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobLocationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkflowTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RatingCardTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobBoardIntegrationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionSetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    phoneNumber?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    phoneNumber?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    website?: SortOrder
    phoneNumber?: SortOrder
    description?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumCompanyMemberRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyMemberRole | EnumCompanyMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyMemberRole[] | ListEnumCompanyMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyMemberRole[] | ListEnumCompanyMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyMemberRoleFilter<$PrismaModel> | $Enums.CompanyMemberRole
  }

  export type CompanyScalarRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type CompanyMemberCompanyIdUserIdCompoundUniqueInput = {
    companyId: string
    userId: string
  }

  export type CompanyMemberCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMemberMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumCompanyMemberRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyMemberRole | EnumCompanyMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyMemberRole[] | ListEnumCompanyMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyMemberRole[] | ListEnumCompanyMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyMemberRoleWithAggregatesFilter<$PrismaModel> | $Enums.CompanyMemberRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompanyMemberRoleFilter<$PrismaModel>
    _max?: NestedEnumCompanyMemberRoleFilter<$PrismaModel>
  }

  export type EnumEmploymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentType | EnumEmploymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentType[] | ListEnumEmploymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmploymentType[] | ListEnumEmploymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEmploymentTypeFilter<$PrismaModel> | $Enums.EmploymentType
  }

  export type EnumWorkTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkType | EnumWorkTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WorkType[] | ListEnumWorkTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkType[] | ListEnumWorkTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkTypeFilter<$PrismaModel> | $Enums.WorkType
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DepartmentNullableScalarRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type JobLocationNullableScalarRelationFilter = {
    is?: JobLocationWhereInput | null
    isNot?: JobLocationWhereInput | null
  }

  export type ApplicationFormFieldListRelationFilter = {
    every?: ApplicationFormFieldWhereInput
    some?: ApplicationFormFieldWhereInput
    none?: ApplicationFormFieldWhereInput
  }

  export type JobWorkflowNullableScalarRelationFilter = {
    is?: JobWorkflowWhereInput | null
    isNot?: JobWorkflowWhereInput | null
  }

  export type ApplicationListRelationFilter = {
    every?: ApplicationWhereInput
    some?: ApplicationWhereInput
    none?: ApplicationWhereInput
  }

  export type AIScreeningConfigNullableScalarRelationFilter = {
    is?: AIScreeningConfigWhereInput | null
    isNot?: AIScreeningConfigWhereInput | null
  }

  export type AISchedulingConfigNullableScalarRelationFilter = {
    is?: AISchedulingConfigWhereInput | null
    isNot?: AISchedulingConfigWhereInput | null
  }

  export type ApplicationFormFieldOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    employmentType?: SortOrder
    workType?: SortOrder
    salaryMin?: SortOrder
    salaryMax?: SortOrder
    currency?: SortOrder
    payPeriod?: SortOrder
    displaySalary?: SortOrder
    status?: SortOrder
    jobCode?: SortOrder
    companyId?: SortOrder
    departmentId?: SortOrder
    locationId?: SortOrder
    minYearsExperience?: SortOrder
    skills?: SortOrder
    jobBoards?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobAvgOrderByAggregateInput = {
    salaryMin?: SortOrder
    salaryMax?: SortOrder
    minYearsExperience?: SortOrder
  }

  export type JobMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    employmentType?: SortOrder
    workType?: SortOrder
    salaryMin?: SortOrder
    salaryMax?: SortOrder
    currency?: SortOrder
    payPeriod?: SortOrder
    displaySalary?: SortOrder
    status?: SortOrder
    jobCode?: SortOrder
    companyId?: SortOrder
    departmentId?: SortOrder
    locationId?: SortOrder
    minYearsExperience?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    employmentType?: SortOrder
    workType?: SortOrder
    salaryMin?: SortOrder
    salaryMax?: SortOrder
    currency?: SortOrder
    payPeriod?: SortOrder
    displaySalary?: SortOrder
    status?: SortOrder
    jobCode?: SortOrder
    companyId?: SortOrder
    departmentId?: SortOrder
    locationId?: SortOrder
    minYearsExperience?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobSumOrderByAggregateInput = {
    salaryMin?: SortOrder
    salaryMax?: SortOrder
    minYearsExperience?: SortOrder
  }

  export type EnumEmploymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentType | EnumEmploymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentType[] | ListEnumEmploymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmploymentType[] | ListEnumEmploymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEmploymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.EmploymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmploymentTypeFilter<$PrismaModel>
    _max?: NestedEnumEmploymentTypeFilter<$PrismaModel>
  }

  export type EnumWorkTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkType | EnumWorkTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WorkType[] | ListEnumWorkTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkType[] | ListEnumWorkTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkTypeWithAggregatesFilter<$PrismaModel> | $Enums.WorkType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkTypeFilter<$PrismaModel>
    _max?: NestedEnumWorkTypeFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DepartmentCompanyIdNameCompoundUniqueInput = {
    companyId: string
    name: string
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobLocationCountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    country?: SortOrder
    city?: SortOrder
    stateRegion?: SortOrder
    zipPostal?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobLocationMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    country?: SortOrder
    city?: SortOrder
    stateRegion?: SortOrder
    zipPostal?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobLocationMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    country?: SortOrder
    city?: SortOrder
    stateRegion?: SortOrder
    zipPostal?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumFieldTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFieldTypeFilter<$PrismaModel> | $Enums.FieldType
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type JobScalarRelationFilter = {
    is?: JobWhereInput
    isNot?: JobWhereInput
  }

  export type CustomQuestionNullableScalarRelationFilter = {
    is?: CustomQuestionWhereInput | null
    isNot?: CustomQuestionWhereInput | null
  }

  export type ApplicationFormFieldCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    fieldName?: SortOrder
    label?: SortOrder
    fieldType?: SortOrder
    isRequired?: SortOrder
    isOptional?: SortOrder
    isDisabled?: SortOrder
    customQuestionId?: SortOrder
    order?: SortOrder
  }

  export type ApplicationFormFieldAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type ApplicationFormFieldMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    fieldName?: SortOrder
    label?: SortOrder
    fieldType?: SortOrder
    isRequired?: SortOrder
    isOptional?: SortOrder
    isDisabled?: SortOrder
    customQuestionId?: SortOrder
    order?: SortOrder
  }

  export type ApplicationFormFieldMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    fieldName?: SortOrder
    label?: SortOrder
    fieldType?: SortOrder
    isRequired?: SortOrder
    isOptional?: SortOrder
    isDisabled?: SortOrder
    customQuestionId?: SortOrder
    order?: SortOrder
  }

  export type ApplicationFormFieldSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type EnumFieldTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFieldTypeWithAggregatesFilter<$PrismaModel> | $Enums.FieldType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFieldTypeFilter<$PrismaModel>
    _max?: NestedEnumFieldTypeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumResponseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ResponseType | EnumResponseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ResponseType[] | ListEnumResponseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResponseType[] | ListEnumResponseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumResponseTypeFilter<$PrismaModel> | $Enums.ResponseType
  }

  export type EnumResponseVisibilityFilter<$PrismaModel = never> = {
    equals?: $Enums.ResponseVisibility | EnumResponseVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.ResponseVisibility[] | ListEnumResponseVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResponseVisibility[] | ListEnumResponseVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumResponseVisibilityFilter<$PrismaModel> | $Enums.ResponseVisibility
  }

  export type CandidateAnswerListRelationFilter = {
    every?: CandidateAnswerWhereInput
    some?: CandidateAnswerWhereInput
    none?: CandidateAnswerWhereInput
  }

  export type CandidateAnswerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomQuestionCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    questionText?: SortOrder
    responseType?: SortOrder
    options?: SortOrder
    visibility?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomQuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    questionText?: SortOrder
    responseType?: SortOrder
    visibility?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomQuestionMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    questionText?: SortOrder
    responseType?: SortOrder
    visibility?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumResponseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ResponseType | EnumResponseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ResponseType[] | ListEnumResponseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResponseType[] | ListEnumResponseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumResponseTypeWithAggregatesFilter<$PrismaModel> | $Enums.ResponseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumResponseTypeFilter<$PrismaModel>
    _max?: NestedEnumResponseTypeFilter<$PrismaModel>
  }

  export type EnumResponseVisibilityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ResponseVisibility | EnumResponseVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.ResponseVisibility[] | ListEnumResponseVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResponseVisibility[] | ListEnumResponseVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumResponseVisibilityWithAggregatesFilter<$PrismaModel> | $Enums.ResponseVisibility
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumResponseVisibilityFilter<$PrismaModel>
    _max?: NestedEnumResponseVisibilityFilter<$PrismaModel>
  }

  export type CandidateCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    resumeUrl?: SortOrder
    coverLetterText?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CandidateMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    resumeUrl?: SortOrder
    coverLetterText?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CandidateMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    resumeUrl?: SortOrder
    coverLetterText?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumApplicationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusFilter<$PrismaModel> | $Enums.ApplicationStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type CandidateScalarRelationFilter = {
    is?: CandidateWhereInput
    isNot?: CandidateWhereInput
  }

  export type MessageThreadListRelationFilter = {
    every?: MessageThreadWhereInput
    some?: MessageThreadWhereInput
    none?: MessageThreadWhereInput
  }

  export type MessageThreadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicationJobIdCandidateIdCompoundUniqueInput = {
    jobId: string
    candidateId: string
  }

  export type ApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    appliedAt?: SortOrder
    currentStageId?: SortOrder
    status?: SortOrder
    disqualificationReason?: SortOrder
    archivedAt?: SortOrder
    hiredAt?: SortOrder
    source?: SortOrder
  }

  export type ApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    appliedAt?: SortOrder
    currentStageId?: SortOrder
    status?: SortOrder
    disqualificationReason?: SortOrder
    archivedAt?: SortOrder
    hiredAt?: SortOrder
    source?: SortOrder
  }

  export type ApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    candidateId?: SortOrder
    appliedAt?: SortOrder
    currentStageId?: SortOrder
    status?: SortOrder
    disqualificationReason?: SortOrder
    archivedAt?: SortOrder
    hiredAt?: SortOrder
    source?: SortOrder
  }

  export type EnumApplicationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApplicationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApplicationStatusFilter<$PrismaModel>
    _max?: NestedEnumApplicationStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ApplicationScalarRelationFilter = {
    is?: ApplicationWhereInput
    isNot?: ApplicationWhereInput
  }

  export type CustomQuestionScalarRelationFilter = {
    is?: CustomQuestionWhereInput
    isNot?: CustomQuestionWhereInput
  }

  export type CandidateAnswerCountOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    customQuestionId?: SortOrder
    answerText?: SortOrder
    answerFileUrl?: SortOrder
    answeredAt?: SortOrder
    candidateId?: SortOrder
  }

  export type CandidateAnswerMaxOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    customQuestionId?: SortOrder
    answerText?: SortOrder
    answerFileUrl?: SortOrder
    answeredAt?: SortOrder
    candidateId?: SortOrder
  }

  export type CandidateAnswerMinOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    customQuestionId?: SortOrder
    answerText?: SortOrder
    answerFileUrl?: SortOrder
    answeredAt?: SortOrder
    candidateId?: SortOrder
  }

  export type WorkflowStageTemplateListRelationFilter = {
    every?: WorkflowStageTemplateWhereInput
    some?: WorkflowStageTemplateWhereInput
    none?: WorkflowStageTemplateWhereInput
  }

  export type JobWorkflowListRelationFilter = {
    every?: JobWorkflowWhereInput
    some?: JobWorkflowWhereInput
    none?: JobWorkflowWhereInput
  }

  export type WorkflowStageTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobWorkflowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkflowTemplateCompanyIdNameCompoundUniqueInput = {
    companyId: string
    name: string
  }

  export type WorkflowTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    companyId?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkflowTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    companyId?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkflowTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    companyId?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumStageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StageType | EnumStageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStageTypeFilter<$PrismaModel> | $Enums.StageType
  }

  export type WorkflowTemplateScalarRelationFilter = {
    is?: WorkflowTemplateWhereInput
    isNot?: WorkflowTemplateWhereInput
  }

  export type WorkflowStageTemplateWorkflowTemplateIdOrderCompoundUniqueInput = {
    workflowTemplateId: string
    order: number
  }

  export type WorkflowStageTemplateWorkflowTemplateIdNameCompoundUniqueInput = {
    workflowTemplateId: string
    name: string
  }

  export type WorkflowStageTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    workflowTemplateId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    order?: SortOrder
    isDefault?: SortOrder
    canBeDeleted?: SortOrder
    settings?: SortOrder
    visibilityToReviewers?: SortOrder
  }

  export type WorkflowStageTemplateAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type WorkflowStageTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    workflowTemplateId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    order?: SortOrder
    isDefault?: SortOrder
    canBeDeleted?: SortOrder
    visibilityToReviewers?: SortOrder
  }

  export type WorkflowStageTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    workflowTemplateId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    order?: SortOrder
    isDefault?: SortOrder
    canBeDeleted?: SortOrder
    visibilityToReviewers?: SortOrder
  }

  export type WorkflowStageTemplateSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type EnumStageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StageType | EnumStageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStageTypeWithAggregatesFilter<$PrismaModel> | $Enums.StageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStageTypeFilter<$PrismaModel>
    _max?: NestedEnumStageTypeFilter<$PrismaModel>
  }

  export type WorkflowTemplateNullableScalarRelationFilter = {
    is?: WorkflowTemplateWhereInput | null
    isNot?: WorkflowTemplateWhereInput | null
  }

  export type JobWorkflowStageListRelationFilter = {
    every?: JobWorkflowStageWhereInput
    some?: JobWorkflowStageWhereInput
    none?: JobWorkflowStageWhereInput
  }

  export type JobWorkflowStageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobWorkflowCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    workflowTemplateId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobWorkflowMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    workflowTemplateId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobWorkflowMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    workflowTemplateId?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobWorkflowScalarRelationFilter = {
    is?: JobWorkflowWhereInput
    isNot?: JobWorkflowWhereInput
  }

  export type JobWorkflowStageJobWorkflowIdOrderCompoundUniqueInput = {
    jobWorkflowId: string
    order: number
  }

  export type JobWorkflowStageJobWorkflowIdNameCompoundUniqueInput = {
    jobWorkflowId: string
    name: string
  }

  export type JobWorkflowStageCountOrderByAggregateInput = {
    id?: SortOrder
    jobWorkflowId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    order?: SortOrder
    settings?: SortOrder
  }

  export type JobWorkflowStageAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type JobWorkflowStageMaxOrderByAggregateInput = {
    id?: SortOrder
    jobWorkflowId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    order?: SortOrder
  }

  export type JobWorkflowStageMinOrderByAggregateInput = {
    id?: SortOrder
    jobWorkflowId?: SortOrder
    name?: SortOrder
    type?: SortOrder
    order?: SortOrder
  }

  export type JobWorkflowStageSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type JobHiringMemberJobIdUserIdCompoundUniqueInput = {
    jobId: string
    userId: string
  }

  export type JobHiringMemberCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    isExternalRecruiter?: SortOrder
    createdAt?: SortOrder
  }

  export type JobHiringMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    isExternalRecruiter?: SortOrder
    createdAt?: SortOrder
  }

  export type JobHiringMemberMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    isExternalRecruiter?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumRatingCardTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RatingCardType | EnumRatingCardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RatingCardType[] | ListEnumRatingCardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RatingCardType[] | ListEnumRatingCardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRatingCardTypeFilter<$PrismaModel> | $Enums.RatingCardType
  }

  export type RatingCategoryListRelationFilter = {
    every?: RatingCategoryWhereInput
    some?: RatingCategoryWhereInput
    none?: RatingCategoryWhereInput
  }

  export type RatingCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RatingCardTemplateCompanyIdNameCompoundUniqueInput = {
    companyId: string
    name: string
  }

  export type RatingCardTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    companyId?: SortOrder
    type?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RatingCardTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    companyId?: SortOrder
    type?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RatingCardTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    companyId?: SortOrder
    type?: SortOrder
    isDefault?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumRatingCardTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RatingCardType | EnumRatingCardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RatingCardType[] | ListEnumRatingCardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RatingCardType[] | ListEnumRatingCardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRatingCardTypeWithAggregatesFilter<$PrismaModel> | $Enums.RatingCardType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRatingCardTypeFilter<$PrismaModel>
    _max?: NestedEnumRatingCardTypeFilter<$PrismaModel>
  }

  export type RatingCardTemplateScalarRelationFilter = {
    is?: RatingCardTemplateWhereInput
    isNot?: RatingCardTemplateWhereInput
  }

  export type CategoryScoreListRelationFilter = {
    every?: CategoryScoreWhereInput
    some?: CategoryScoreWhereInput
    none?: CategoryScoreWhereInput
  }

  export type CategoryScoreOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RatingCategoryRatingCardTemplateIdNameCompoundUniqueInput = {
    ratingCardTemplateId: string
    name: string
  }

  export type RatingCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    ratingCardTemplateId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    order?: SortOrder
  }

  export type RatingCategoryAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type RatingCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    ratingCardTemplateId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    order?: SortOrder
  }

  export type RatingCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    ratingCardTemplateId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    order?: SortOrder
  }

  export type RatingCategorySumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type CandidateRatingCountOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    jobWorkflowStageId?: SortOrder
    raterId?: SortOrder
    ratingCardTemplateId?: SortOrder
    overallScore?: SortOrder
    comments?: SortOrder
    submittedAt?: SortOrder
  }

  export type CandidateRatingAvgOrderByAggregateInput = {
    overallScore?: SortOrder
  }

  export type CandidateRatingMaxOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    jobWorkflowStageId?: SortOrder
    raterId?: SortOrder
    ratingCardTemplateId?: SortOrder
    overallScore?: SortOrder
    comments?: SortOrder
    submittedAt?: SortOrder
  }

  export type CandidateRatingMinOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    jobWorkflowStageId?: SortOrder
    raterId?: SortOrder
    ratingCardTemplateId?: SortOrder
    overallScore?: SortOrder
    comments?: SortOrder
    submittedAt?: SortOrder
  }

  export type CandidateRatingSumOrderByAggregateInput = {
    overallScore?: SortOrder
  }

  export type CandidateRatingScalarRelationFilter = {
    is?: CandidateRatingWhereInput
    isNot?: CandidateRatingWhereInput
  }

  export type RatingCategoryScalarRelationFilter = {
    is?: RatingCategoryWhereInput
    isNot?: RatingCategoryWhereInput
  }

  export type CategoryScoreCandidateRatingIdRatingCategoryIdCompoundUniqueInput = {
    candidateRatingId: string
    ratingCategoryId: string
  }

  export type CategoryScoreCountOrderByAggregateInput = {
    id?: SortOrder
    candidateRatingId?: SortOrder
    ratingCategoryId?: SortOrder
    score?: SortOrder
    comments?: SortOrder
  }

  export type CategoryScoreAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type CategoryScoreMaxOrderByAggregateInput = {
    id?: SortOrder
    candidateRatingId?: SortOrder
    ratingCategoryId?: SortOrder
    score?: SortOrder
    comments?: SortOrder
  }

  export type CategoryScoreMinOrderByAggregateInput = {
    id?: SortOrder
    candidateRatingId?: SortOrder
    ratingCategoryId?: SortOrder
    score?: SortOrder
    comments?: SortOrder
  }

  export type CategoryScoreSumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type MessageThreadCountOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageThreadMaxOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageThreadMinOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumCommentVisibilityNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CommentVisibility | EnumCommentVisibilityFieldRefInput<$PrismaModel> | null
    in?: $Enums.CommentVisibility[] | ListEnumCommentVisibilityFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CommentVisibility[] | ListEnumCommentVisibilityFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCommentVisibilityNullableFilter<$PrismaModel> | $Enums.CommentVisibility | null
  }

  export type MessageThreadScalarRelationFilter = {
    is?: MessageThreadWhereInput
    isNot?: MessageThreadWhereInput
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    threadId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    sentAt?: SortOrder
    isInternalNote?: SortOrder
    visibility?: SortOrder
    attachments?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    threadId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    sentAt?: SortOrder
    isInternalNote?: SortOrder
    visibility?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    threadId?: SortOrder
    senderId?: SortOrder
    content?: SortOrder
    sentAt?: SortOrder
    isInternalNote?: SortOrder
    visibility?: SortOrder
  }

  export type EnumCommentVisibilityNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommentVisibility | EnumCommentVisibilityFieldRefInput<$PrismaModel> | null
    in?: $Enums.CommentVisibility[] | ListEnumCommentVisibilityFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CommentVisibility[] | ListEnumCommentVisibilityFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCommentVisibilityNullableWithAggregatesFilter<$PrismaModel> | $Enums.CommentVisibility | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCommentVisibilityNullableFilter<$PrismaModel>
    _max?: NestedEnumCommentVisibilityNullableFilter<$PrismaModel>
  }

  export type EnumMeetingTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MeetingType | EnumMeetingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MeetingType[] | ListEnumMeetingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MeetingType[] | ListEnumMeetingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMeetingTypeFilter<$PrismaModel> | $Enums.MeetingType
  }

  export type MeetingTemplateNullableScalarRelationFilter = {
    is?: MeetingTemplateWhereInput | null
    isNot?: MeetingTemplateWhereInput | null
  }

  export type AINoteTakingConfigNullableScalarRelationFilter = {
    is?: AINoteTakingConfigWhereInput | null
    isNot?: AINoteTakingConfigWhereInput | null
  }

  export type MeetingCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    type?: SortOrder
    location?: SortOrder
    videoCallLink?: SortOrder
    jobId?: SortOrder
    applicationId?: SortOrder
    organizerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meetingTemplateId?: SortOrder
  }

  export type MeetingMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    type?: SortOrder
    location?: SortOrder
    videoCallLink?: SortOrder
    jobId?: SortOrder
    applicationId?: SortOrder
    organizerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meetingTemplateId?: SortOrder
  }

  export type MeetingMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    type?: SortOrder
    location?: SortOrder
    videoCallLink?: SortOrder
    jobId?: SortOrder
    applicationId?: SortOrder
    organizerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meetingTemplateId?: SortOrder
  }

  export type EnumMeetingTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MeetingType | EnumMeetingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MeetingType[] | ListEnumMeetingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MeetingType[] | ListEnumMeetingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMeetingTypeWithAggregatesFilter<$PrismaModel> | $Enums.MeetingType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMeetingTypeFilter<$PrismaModel>
    _max?: NestedEnumMeetingTypeFilter<$PrismaModel>
  }

  export type EnumAttendeeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendeeStatus | EnumAttendeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendeeStatus[] | ListEnumAttendeeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendeeStatus[] | ListEnumAttendeeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendeeStatusFilter<$PrismaModel> | $Enums.AttendeeStatus
  }

  export type MeetingScalarRelationFilter = {
    is?: MeetingWhereInput
    isNot?: MeetingWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type MeetingAttendeeMeetingIdEmailCompoundUniqueInput = {
    meetingId: string
    email: string
  }

  export type MeetingAttendeeCountOrderByAggregateInput = {
    id?: SortOrder
    meetingId?: SortOrder
    userId?: SortOrder
    candidateId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    status?: SortOrder
    isCandidate?: SortOrder
  }

  export type MeetingAttendeeMaxOrderByAggregateInput = {
    id?: SortOrder
    meetingId?: SortOrder
    userId?: SortOrder
    candidateId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    status?: SortOrder
    isCandidate?: SortOrder
  }

  export type MeetingAttendeeMinOrderByAggregateInput = {
    id?: SortOrder
    meetingId?: SortOrder
    userId?: SortOrder
    candidateId?: SortOrder
    email?: SortOrder
    name?: SortOrder
    status?: SortOrder
    isCandidate?: SortOrder
  }

  export type EnumAttendeeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendeeStatus | EnumAttendeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendeeStatus[] | ListEnumAttendeeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendeeStatus[] | ListEnumAttendeeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendeeStatusWithAggregatesFilter<$PrismaModel> | $Enums.AttendeeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttendeeStatusFilter<$PrismaModel>
    _max?: NestedEnumAttendeeStatusFilter<$PrismaModel>
  }

  export type MeetingTemplateCompanyIdNameCompoundUniqueInput = {
    companyId: string
    name: string
  }

  export type MeetingTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    title?: SortOrder
    duration?: SortOrder
    meetingType?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingTemplateAvgOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type MeetingTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    title?: SortOrder
    duration?: SortOrder
    meetingType?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    title?: SortOrder
    duration?: SortOrder
    meetingType?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingTemplateSumOrderByAggregateInput = {
    duration?: SortOrder
  }

  export type CareersPageSettingCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    logoUrl?: SortOrder
    primaryColor?: SortOrder
    focusColor?: SortOrder
    hyperlinkColor?: SortOrder
    googleAnalyticsId?: SortOrder
    trackingPixelUrl?: SortOrder
    embedJobsCode?: SortOrder
    customCSS?: SortOrder
    updatedAt?: SortOrder
  }

  export type CareersPageSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    logoUrl?: SortOrder
    primaryColor?: SortOrder
    focusColor?: SortOrder
    hyperlinkColor?: SortOrder
    googleAnalyticsId?: SortOrder
    trackingPixelUrl?: SortOrder
    embedJobsCode?: SortOrder
    customCSS?: SortOrder
    updatedAt?: SortOrder
  }

  export type CareersPageSettingMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    logoUrl?: SortOrder
    primaryColor?: SortOrder
    focusColor?: SortOrder
    hyperlinkColor?: SortOrder
    googleAnalyticsId?: SortOrder
    trackingPixelUrl?: SortOrder
    embedJobsCode?: SortOrder
    customCSS?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    link?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    link?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    message?: SortOrder
    link?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type AIScreeningConfigCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    isEnabled?: SortOrder
    guidance?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIScreeningConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    isEnabled?: SortOrder
    guidance?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIScreeningConfigMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    isEnabled?: SortOrder
    guidance?: SortOrder
    updatedAt?: SortOrder
  }

  export type AISchedulingConfigCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    isEnabled?: SortOrder
    updatedAt?: SortOrder
  }

  export type AISchedulingConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    isEnabled?: SortOrder
    updatedAt?: SortOrder
  }

  export type AISchedulingConfigMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    isEnabled?: SortOrder
    updatedAt?: SortOrder
  }

  export type AINoteTakingConfigCountOrderByAggregateInput = {
    id?: SortOrder
    meetingId?: SortOrder
    isEnabled?: SortOrder
    transcript?: SortOrder
    summary?: SortOrder
    actionItems?: SortOrder
    updatedAt?: SortOrder
  }

  export type AINoteTakingConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    meetingId?: SortOrder
    isEnabled?: SortOrder
    transcript?: SortOrder
    summary?: SortOrder
    updatedAt?: SortOrder
  }

  export type AINoteTakingConfigMinOrderByAggregateInput = {
    id?: SortOrder
    meetingId?: SortOrder
    isEnabled?: SortOrder
    transcript?: SortOrder
    summary?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIInteractionLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    inputType?: SortOrder
    input?: SortOrder
    output?: SortOrder
    timestamp?: SortOrder
  }

  export type AIInteractionLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    inputType?: SortOrder
    input?: SortOrder
    output?: SortOrder
    timestamp?: SortOrder
  }

  export type AIInteractionLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    inputType?: SortOrder
    input?: SortOrder
    output?: SortOrder
    timestamp?: SortOrder
  }

  export type AIBusinessPreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    businessOverview?: SortOrder
    businessCulture?: SortOrder
    businessValues?: SortOrder
    businessMission?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIBusinessPreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    businessOverview?: SortOrder
    businessCulture?: SortOrder
    businessValues?: SortOrder
    businessMission?: SortOrder
    updatedAt?: SortOrder
  }

  export type AIBusinessPreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    businessOverview?: SortOrder
    businessCulture?: SortOrder
    businessValues?: SortOrder
    businessMission?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAIToneFilter<$PrismaModel = never> = {
    equals?: $Enums.AITone | EnumAIToneFieldRefInput<$PrismaModel>
    in?: $Enums.AITone[] | ListEnumAIToneFieldRefInput<$PrismaModel>
    notIn?: $Enums.AITone[] | ListEnumAIToneFieldRefInput<$PrismaModel>
    not?: NestedEnumAIToneFilter<$PrismaModel> | $Enums.AITone
  }

  export type AICommunicationPreferenceCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    tone?: SortOrder
    blockedTeamTopics?: SortOrder
    blockedCandidateTopics?: SortOrder
    updatedAt?: SortOrder
  }

  export type AICommunicationPreferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    tone?: SortOrder
    updatedAt?: SortOrder
  }

  export type AICommunicationPreferenceMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    tone?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAIToneWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AITone | EnumAIToneFieldRefInput<$PrismaModel>
    in?: $Enums.AITone[] | ListEnumAIToneFieldRefInput<$PrismaModel>
    notIn?: $Enums.AITone[] | ListEnumAIToneFieldRefInput<$PrismaModel>
    not?: NestedEnumAIToneWithAggregatesFilter<$PrismaModel> | $Enums.AITone
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAIToneFilter<$PrismaModel>
    _max?: NestedEnumAIToneFilter<$PrismaModel>
  }

  export type EnumCalendarProviderFilter<$PrismaModel = never> = {
    equals?: $Enums.CalendarProvider | EnumCalendarProviderFieldRefInput<$PrismaModel>
    in?: $Enums.CalendarProvider[] | ListEnumCalendarProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.CalendarProvider[] | ListEnumCalendarProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumCalendarProviderFilter<$PrismaModel> | $Enums.CalendarProvider
  }

  export type CalendarIntegrationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    scopes?: SortOrder
    calendarId?: SortOrder
    connectedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CalendarIntegrationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    scopes?: SortOrder
    calendarId?: SortOrder
    connectedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CalendarIntegrationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provider?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    scopes?: SortOrder
    calendarId?: SortOrder
    connectedAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumCalendarProviderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CalendarProvider | EnumCalendarProviderFieldRefInput<$PrismaModel>
    in?: $Enums.CalendarProvider[] | ListEnumCalendarProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.CalendarProvider[] | ListEnumCalendarProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumCalendarProviderWithAggregatesFilter<$PrismaModel> | $Enums.CalendarProvider
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCalendarProviderFilter<$PrismaModel>
    _max?: NestedEnumCalendarProviderFilter<$PrismaModel>
  }

  export type JobBoardIntegrationCompanyIdBoardNameCompoundUniqueInput = {
    companyId: string
    boardName: string
  }

  export type JobBoardIntegrationCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    boardName?: SortOrder
    apiKey?: SortOrder
    config?: SortOrder
    isEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobBoardIntegrationMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    boardName?: SortOrder
    apiKey?: SortOrder
    isEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobBoardIntegrationMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    boardName?: SortOrder
    apiKey?: SortOrder
    isEnabled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageTemplateCompanyIdNameCompoundUniqueInput = {
    companyId: string
    name: string
  }

  export type MessageTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    description?: SortOrder
    isRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    description?: SortOrder
    isRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MessageTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    subject?: SortOrder
    content?: SortOrder
    description?: SortOrder
    isRequired?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionOptionListRelationFilter = {
    every?: QuestionOptionWhereInput
    some?: QuestionOptionWhereInput
    none?: QuestionOptionWhereInput
  }

  export type QuestionOptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    text?: SortOrder
    responseType?: SortOrder
    visibility?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    text?: SortOrder
    responseType?: SortOrder
    visibility?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    text?: SortOrder
    responseType?: SortOrder
    visibility?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionScalarRelationFilter = {
    is?: QuestionWhereInput
    isNot?: QuestionWhereInput
  }

  export type QuestionOptionCountOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    value?: SortOrder
  }

  export type QuestionOptionMaxOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    value?: SortOrder
  }

  export type QuestionOptionMinOrderByAggregateInput = {
    id?: SortOrder
    questionId?: SortOrder
    value?: SortOrder
  }

  export type QuestionSetCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionSetMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuestionSetMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MeetingCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<MeetingCreateWithoutOrganizerInput, MeetingUncheckedCreateWithoutOrganizerInput> | MeetingCreateWithoutOrganizerInput[] | MeetingUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: MeetingCreateOrConnectWithoutOrganizerInput | MeetingCreateOrConnectWithoutOrganizerInput[]
    createMany?: MeetingCreateManyOrganizerInputEnvelope
    connect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
  }

  export type MeetingAttendeeCreateNestedManyWithoutUserInput = {
    create?: XOR<MeetingAttendeeCreateWithoutUserInput, MeetingAttendeeUncheckedCreateWithoutUserInput> | MeetingAttendeeCreateWithoutUserInput[] | MeetingAttendeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MeetingAttendeeCreateOrConnectWithoutUserInput | MeetingAttendeeCreateOrConnectWithoutUserInput[]
    createMany?: MeetingAttendeeCreateManyUserInputEnvelope
    connect?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
  }

  export type CandidateRatingCreateNestedManyWithoutRaterInput = {
    create?: XOR<CandidateRatingCreateWithoutRaterInput, CandidateRatingUncheckedCreateWithoutRaterInput> | CandidateRatingCreateWithoutRaterInput[] | CandidateRatingUncheckedCreateWithoutRaterInput[]
    connectOrCreate?: CandidateRatingCreateOrConnectWithoutRaterInput | CandidateRatingCreateOrConnectWithoutRaterInput[]
    createMany?: CandidateRatingCreateManyRaterInputEnvelope
    connect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
  }

  export type CompanyCreateNestedManyWithoutOwnerInput = {
    create?: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput> | CompanyCreateWithoutOwnerInput[] | CompanyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnerInput | CompanyCreateOrConnectWithoutOwnerInput[]
    createMany?: CompanyCreateManyOwnerInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type CompanyMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput> | CompanyMemberCreateWithoutUserInput[] | CompanyMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutUserInput | CompanyMemberCreateOrConnectWithoutUserInput[]
    createMany?: CompanyMemberCreateManyUserInputEnvelope
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
  }

  export type CalendarIntegrationCreateNestedManyWithoutUserInput = {
    create?: XOR<CalendarIntegrationCreateWithoutUserInput, CalendarIntegrationUncheckedCreateWithoutUserInput> | CalendarIntegrationCreateWithoutUserInput[] | CalendarIntegrationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CalendarIntegrationCreateOrConnectWithoutUserInput | CalendarIntegrationCreateOrConnectWithoutUserInput[]
    createMany?: CalendarIntegrationCreateManyUserInputEnvelope
    connect?: CalendarIntegrationWhereUniqueInput | CalendarIntegrationWhereUniqueInput[]
  }

  export type AIInteractionLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AIInteractionLogCreateWithoutUserInput, AIInteractionLogUncheckedCreateWithoutUserInput> | AIInteractionLogCreateWithoutUserInput[] | AIInteractionLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AIInteractionLogCreateOrConnectWithoutUserInput | AIInteractionLogCreateOrConnectWithoutUserInput[]
    createMany?: AIInteractionLogCreateManyUserInputEnvelope
    connect?: AIInteractionLogWhereUniqueInput | AIInteractionLogWhereUniqueInput[]
  }

  export type JobHiringMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<JobHiringMemberCreateWithoutUserInput, JobHiringMemberUncheckedCreateWithoutUserInput> | JobHiringMemberCreateWithoutUserInput[] | JobHiringMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JobHiringMemberCreateOrConnectWithoutUserInput | JobHiringMemberCreateOrConnectWithoutUserInput[]
    createMany?: JobHiringMemberCreateManyUserInputEnvelope
    connect?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
  }

  export type UserProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MeetingUncheckedCreateNestedManyWithoutOrganizerInput = {
    create?: XOR<MeetingCreateWithoutOrganizerInput, MeetingUncheckedCreateWithoutOrganizerInput> | MeetingCreateWithoutOrganizerInput[] | MeetingUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: MeetingCreateOrConnectWithoutOrganizerInput | MeetingCreateOrConnectWithoutOrganizerInput[]
    createMany?: MeetingCreateManyOrganizerInputEnvelope
    connect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
  }

  export type MeetingAttendeeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MeetingAttendeeCreateWithoutUserInput, MeetingAttendeeUncheckedCreateWithoutUserInput> | MeetingAttendeeCreateWithoutUserInput[] | MeetingAttendeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MeetingAttendeeCreateOrConnectWithoutUserInput | MeetingAttendeeCreateOrConnectWithoutUserInput[]
    createMany?: MeetingAttendeeCreateManyUserInputEnvelope
    connect?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
  }

  export type CandidateRatingUncheckedCreateNestedManyWithoutRaterInput = {
    create?: XOR<CandidateRatingCreateWithoutRaterInput, CandidateRatingUncheckedCreateWithoutRaterInput> | CandidateRatingCreateWithoutRaterInput[] | CandidateRatingUncheckedCreateWithoutRaterInput[]
    connectOrCreate?: CandidateRatingCreateOrConnectWithoutRaterInput | CandidateRatingCreateOrConnectWithoutRaterInput[]
    createMany?: CandidateRatingCreateManyRaterInputEnvelope
    connect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput> | CompanyCreateWithoutOwnerInput[] | CompanyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnerInput | CompanyCreateOrConnectWithoutOwnerInput[]
    createMany?: CompanyCreateManyOwnerInputEnvelope
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
  }

  export type CompanyMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput> | CompanyMemberCreateWithoutUserInput[] | CompanyMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutUserInput | CompanyMemberCreateOrConnectWithoutUserInput[]
    createMany?: CompanyMemberCreateManyUserInputEnvelope
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
  }

  export type CalendarIntegrationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CalendarIntegrationCreateWithoutUserInput, CalendarIntegrationUncheckedCreateWithoutUserInput> | CalendarIntegrationCreateWithoutUserInput[] | CalendarIntegrationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CalendarIntegrationCreateOrConnectWithoutUserInput | CalendarIntegrationCreateOrConnectWithoutUserInput[]
    createMany?: CalendarIntegrationCreateManyUserInputEnvelope
    connect?: CalendarIntegrationWhereUniqueInput | CalendarIntegrationWhereUniqueInput[]
  }

  export type AIInteractionLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AIInteractionLogCreateWithoutUserInput, AIInteractionLogUncheckedCreateWithoutUserInput> | AIInteractionLogCreateWithoutUserInput[] | AIInteractionLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AIInteractionLogCreateOrConnectWithoutUserInput | AIInteractionLogCreateOrConnectWithoutUserInput[]
    createMany?: AIInteractionLogCreateManyUserInputEnvelope
    connect?: AIInteractionLogWhereUniqueInput | AIInteractionLogWhereUniqueInput[]
  }

  export type JobHiringMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<JobHiringMemberCreateWithoutUserInput, JobHiringMemberUncheckedCreateWithoutUserInput> | JobHiringMemberCreateWithoutUserInput[] | JobHiringMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JobHiringMemberCreateOrConnectWithoutUserInput | JobHiringMemberCreateOrConnectWithoutUserInput[]
    createMany?: JobHiringMemberCreateManyUserInputEnvelope
    connect?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: UserProfileWhereInput | boolean
    delete?: UserProfileWhereInput | boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MeetingUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<MeetingCreateWithoutOrganizerInput, MeetingUncheckedCreateWithoutOrganizerInput> | MeetingCreateWithoutOrganizerInput[] | MeetingUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: MeetingCreateOrConnectWithoutOrganizerInput | MeetingCreateOrConnectWithoutOrganizerInput[]
    upsert?: MeetingUpsertWithWhereUniqueWithoutOrganizerInput | MeetingUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: MeetingCreateManyOrganizerInputEnvelope
    set?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    disconnect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    delete?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    connect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    update?: MeetingUpdateWithWhereUniqueWithoutOrganizerInput | MeetingUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: MeetingUpdateManyWithWhereWithoutOrganizerInput | MeetingUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: MeetingScalarWhereInput | MeetingScalarWhereInput[]
  }

  export type MeetingAttendeeUpdateManyWithoutUserNestedInput = {
    create?: XOR<MeetingAttendeeCreateWithoutUserInput, MeetingAttendeeUncheckedCreateWithoutUserInput> | MeetingAttendeeCreateWithoutUserInput[] | MeetingAttendeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MeetingAttendeeCreateOrConnectWithoutUserInput | MeetingAttendeeCreateOrConnectWithoutUserInput[]
    upsert?: MeetingAttendeeUpsertWithWhereUniqueWithoutUserInput | MeetingAttendeeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MeetingAttendeeCreateManyUserInputEnvelope
    set?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
    disconnect?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
    delete?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
    connect?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
    update?: MeetingAttendeeUpdateWithWhereUniqueWithoutUserInput | MeetingAttendeeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MeetingAttendeeUpdateManyWithWhereWithoutUserInput | MeetingAttendeeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MeetingAttendeeScalarWhereInput | MeetingAttendeeScalarWhereInput[]
  }

  export type CandidateRatingUpdateManyWithoutRaterNestedInput = {
    create?: XOR<CandidateRatingCreateWithoutRaterInput, CandidateRatingUncheckedCreateWithoutRaterInput> | CandidateRatingCreateWithoutRaterInput[] | CandidateRatingUncheckedCreateWithoutRaterInput[]
    connectOrCreate?: CandidateRatingCreateOrConnectWithoutRaterInput | CandidateRatingCreateOrConnectWithoutRaterInput[]
    upsert?: CandidateRatingUpsertWithWhereUniqueWithoutRaterInput | CandidateRatingUpsertWithWhereUniqueWithoutRaterInput[]
    createMany?: CandidateRatingCreateManyRaterInputEnvelope
    set?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    disconnect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    delete?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    connect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    update?: CandidateRatingUpdateWithWhereUniqueWithoutRaterInput | CandidateRatingUpdateWithWhereUniqueWithoutRaterInput[]
    updateMany?: CandidateRatingUpdateManyWithWhereWithoutRaterInput | CandidateRatingUpdateManyWithWhereWithoutRaterInput[]
    deleteMany?: CandidateRatingScalarWhereInput | CandidateRatingScalarWhereInput[]
  }

  export type CompanyUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput> | CompanyCreateWithoutOwnerInput[] | CompanyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnerInput | CompanyCreateOrConnectWithoutOwnerInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutOwnerInput | CompanyUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: CompanyCreateManyOwnerInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutOwnerInput | CompanyUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutOwnerInput | CompanyUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type CompanyMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput> | CompanyMemberCreateWithoutUserInput[] | CompanyMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutUserInput | CompanyMemberCreateOrConnectWithoutUserInput[]
    upsert?: CompanyMemberUpsertWithWhereUniqueWithoutUserInput | CompanyMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CompanyMemberCreateManyUserInputEnvelope
    set?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    disconnect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    delete?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    update?: CompanyMemberUpdateWithWhereUniqueWithoutUserInput | CompanyMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CompanyMemberUpdateManyWithWhereWithoutUserInput | CompanyMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
  }

  export type CalendarIntegrationUpdateManyWithoutUserNestedInput = {
    create?: XOR<CalendarIntegrationCreateWithoutUserInput, CalendarIntegrationUncheckedCreateWithoutUserInput> | CalendarIntegrationCreateWithoutUserInput[] | CalendarIntegrationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CalendarIntegrationCreateOrConnectWithoutUserInput | CalendarIntegrationCreateOrConnectWithoutUserInput[]
    upsert?: CalendarIntegrationUpsertWithWhereUniqueWithoutUserInput | CalendarIntegrationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CalendarIntegrationCreateManyUserInputEnvelope
    set?: CalendarIntegrationWhereUniqueInput | CalendarIntegrationWhereUniqueInput[]
    disconnect?: CalendarIntegrationWhereUniqueInput | CalendarIntegrationWhereUniqueInput[]
    delete?: CalendarIntegrationWhereUniqueInput | CalendarIntegrationWhereUniqueInput[]
    connect?: CalendarIntegrationWhereUniqueInput | CalendarIntegrationWhereUniqueInput[]
    update?: CalendarIntegrationUpdateWithWhereUniqueWithoutUserInput | CalendarIntegrationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CalendarIntegrationUpdateManyWithWhereWithoutUserInput | CalendarIntegrationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CalendarIntegrationScalarWhereInput | CalendarIntegrationScalarWhereInput[]
  }

  export type AIInteractionLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AIInteractionLogCreateWithoutUserInput, AIInteractionLogUncheckedCreateWithoutUserInput> | AIInteractionLogCreateWithoutUserInput[] | AIInteractionLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AIInteractionLogCreateOrConnectWithoutUserInput | AIInteractionLogCreateOrConnectWithoutUserInput[]
    upsert?: AIInteractionLogUpsertWithWhereUniqueWithoutUserInput | AIInteractionLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AIInteractionLogCreateManyUserInputEnvelope
    set?: AIInteractionLogWhereUniqueInput | AIInteractionLogWhereUniqueInput[]
    disconnect?: AIInteractionLogWhereUniqueInput | AIInteractionLogWhereUniqueInput[]
    delete?: AIInteractionLogWhereUniqueInput | AIInteractionLogWhereUniqueInput[]
    connect?: AIInteractionLogWhereUniqueInput | AIInteractionLogWhereUniqueInput[]
    update?: AIInteractionLogUpdateWithWhereUniqueWithoutUserInput | AIInteractionLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AIInteractionLogUpdateManyWithWhereWithoutUserInput | AIInteractionLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AIInteractionLogScalarWhereInput | AIInteractionLogScalarWhereInput[]
  }

  export type JobHiringMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<JobHiringMemberCreateWithoutUserInput, JobHiringMemberUncheckedCreateWithoutUserInput> | JobHiringMemberCreateWithoutUserInput[] | JobHiringMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JobHiringMemberCreateOrConnectWithoutUserInput | JobHiringMemberCreateOrConnectWithoutUserInput[]
    upsert?: JobHiringMemberUpsertWithWhereUniqueWithoutUserInput | JobHiringMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JobHiringMemberCreateManyUserInputEnvelope
    set?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
    disconnect?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
    delete?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
    connect?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
    update?: JobHiringMemberUpdateWithWhereUniqueWithoutUserInput | JobHiringMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JobHiringMemberUpdateManyWithWhereWithoutUserInput | JobHiringMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JobHiringMemberScalarWhereInput | JobHiringMemberScalarWhereInput[]
  }

  export type UserProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: UserProfileWhereInput | boolean
    delete?: UserProfileWhereInput | boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MeetingUncheckedUpdateManyWithoutOrganizerNestedInput = {
    create?: XOR<MeetingCreateWithoutOrganizerInput, MeetingUncheckedCreateWithoutOrganizerInput> | MeetingCreateWithoutOrganizerInput[] | MeetingUncheckedCreateWithoutOrganizerInput[]
    connectOrCreate?: MeetingCreateOrConnectWithoutOrganizerInput | MeetingCreateOrConnectWithoutOrganizerInput[]
    upsert?: MeetingUpsertWithWhereUniqueWithoutOrganizerInput | MeetingUpsertWithWhereUniqueWithoutOrganizerInput[]
    createMany?: MeetingCreateManyOrganizerInputEnvelope
    set?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    disconnect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    delete?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    connect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    update?: MeetingUpdateWithWhereUniqueWithoutOrganizerInput | MeetingUpdateWithWhereUniqueWithoutOrganizerInput[]
    updateMany?: MeetingUpdateManyWithWhereWithoutOrganizerInput | MeetingUpdateManyWithWhereWithoutOrganizerInput[]
    deleteMany?: MeetingScalarWhereInput | MeetingScalarWhereInput[]
  }

  export type MeetingAttendeeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MeetingAttendeeCreateWithoutUserInput, MeetingAttendeeUncheckedCreateWithoutUserInput> | MeetingAttendeeCreateWithoutUserInput[] | MeetingAttendeeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MeetingAttendeeCreateOrConnectWithoutUserInput | MeetingAttendeeCreateOrConnectWithoutUserInput[]
    upsert?: MeetingAttendeeUpsertWithWhereUniqueWithoutUserInput | MeetingAttendeeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MeetingAttendeeCreateManyUserInputEnvelope
    set?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
    disconnect?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
    delete?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
    connect?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
    update?: MeetingAttendeeUpdateWithWhereUniqueWithoutUserInput | MeetingAttendeeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MeetingAttendeeUpdateManyWithWhereWithoutUserInput | MeetingAttendeeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MeetingAttendeeScalarWhereInput | MeetingAttendeeScalarWhereInput[]
  }

  export type CandidateRatingUncheckedUpdateManyWithoutRaterNestedInput = {
    create?: XOR<CandidateRatingCreateWithoutRaterInput, CandidateRatingUncheckedCreateWithoutRaterInput> | CandidateRatingCreateWithoutRaterInput[] | CandidateRatingUncheckedCreateWithoutRaterInput[]
    connectOrCreate?: CandidateRatingCreateOrConnectWithoutRaterInput | CandidateRatingCreateOrConnectWithoutRaterInput[]
    upsert?: CandidateRatingUpsertWithWhereUniqueWithoutRaterInput | CandidateRatingUpsertWithWhereUniqueWithoutRaterInput[]
    createMany?: CandidateRatingCreateManyRaterInputEnvelope
    set?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    disconnect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    delete?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    connect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    update?: CandidateRatingUpdateWithWhereUniqueWithoutRaterInput | CandidateRatingUpdateWithWhereUniqueWithoutRaterInput[]
    updateMany?: CandidateRatingUpdateManyWithWhereWithoutRaterInput | CandidateRatingUpdateManyWithWhereWithoutRaterInput[]
    deleteMany?: CandidateRatingScalarWhereInput | CandidateRatingScalarWhereInput[]
  }

  export type CompanyUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput> | CompanyCreateWithoutOwnerInput[] | CompanyUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnerInput | CompanyCreateOrConnectWithoutOwnerInput[]
    upsert?: CompanyUpsertWithWhereUniqueWithoutOwnerInput | CompanyUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: CompanyCreateManyOwnerInputEnvelope
    set?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    disconnect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    delete?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    connect?: CompanyWhereUniqueInput | CompanyWhereUniqueInput[]
    update?: CompanyUpdateWithWhereUniqueWithoutOwnerInput | CompanyUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: CompanyUpdateManyWithWhereWithoutOwnerInput | CompanyUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
  }

  export type CompanyMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput> | CompanyMemberCreateWithoutUserInput[] | CompanyMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutUserInput | CompanyMemberCreateOrConnectWithoutUserInput[]
    upsert?: CompanyMemberUpsertWithWhereUniqueWithoutUserInput | CompanyMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CompanyMemberCreateManyUserInputEnvelope
    set?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    disconnect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    delete?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    update?: CompanyMemberUpdateWithWhereUniqueWithoutUserInput | CompanyMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CompanyMemberUpdateManyWithWhereWithoutUserInput | CompanyMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
  }

  export type CalendarIntegrationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CalendarIntegrationCreateWithoutUserInput, CalendarIntegrationUncheckedCreateWithoutUserInput> | CalendarIntegrationCreateWithoutUserInput[] | CalendarIntegrationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CalendarIntegrationCreateOrConnectWithoutUserInput | CalendarIntegrationCreateOrConnectWithoutUserInput[]
    upsert?: CalendarIntegrationUpsertWithWhereUniqueWithoutUserInput | CalendarIntegrationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CalendarIntegrationCreateManyUserInputEnvelope
    set?: CalendarIntegrationWhereUniqueInput | CalendarIntegrationWhereUniqueInput[]
    disconnect?: CalendarIntegrationWhereUniqueInput | CalendarIntegrationWhereUniqueInput[]
    delete?: CalendarIntegrationWhereUniqueInput | CalendarIntegrationWhereUniqueInput[]
    connect?: CalendarIntegrationWhereUniqueInput | CalendarIntegrationWhereUniqueInput[]
    update?: CalendarIntegrationUpdateWithWhereUniqueWithoutUserInput | CalendarIntegrationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CalendarIntegrationUpdateManyWithWhereWithoutUserInput | CalendarIntegrationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CalendarIntegrationScalarWhereInput | CalendarIntegrationScalarWhereInput[]
  }

  export type AIInteractionLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AIInteractionLogCreateWithoutUserInput, AIInteractionLogUncheckedCreateWithoutUserInput> | AIInteractionLogCreateWithoutUserInput[] | AIInteractionLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AIInteractionLogCreateOrConnectWithoutUserInput | AIInteractionLogCreateOrConnectWithoutUserInput[]
    upsert?: AIInteractionLogUpsertWithWhereUniqueWithoutUserInput | AIInteractionLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AIInteractionLogCreateManyUserInputEnvelope
    set?: AIInteractionLogWhereUniqueInput | AIInteractionLogWhereUniqueInput[]
    disconnect?: AIInteractionLogWhereUniqueInput | AIInteractionLogWhereUniqueInput[]
    delete?: AIInteractionLogWhereUniqueInput | AIInteractionLogWhereUniqueInput[]
    connect?: AIInteractionLogWhereUniqueInput | AIInteractionLogWhereUniqueInput[]
    update?: AIInteractionLogUpdateWithWhereUniqueWithoutUserInput | AIInteractionLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AIInteractionLogUpdateManyWithWhereWithoutUserInput | AIInteractionLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AIInteractionLogScalarWhereInput | AIInteractionLogScalarWhereInput[]
  }

  export type JobHiringMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<JobHiringMemberCreateWithoutUserInput, JobHiringMemberUncheckedCreateWithoutUserInput> | JobHiringMemberCreateWithoutUserInput[] | JobHiringMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JobHiringMemberCreateOrConnectWithoutUserInput | JobHiringMemberCreateOrConnectWithoutUserInput[]
    upsert?: JobHiringMemberUpsertWithWhereUniqueWithoutUserInput | JobHiringMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JobHiringMemberCreateManyUserInputEnvelope
    set?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
    disconnect?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
    delete?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
    connect?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
    update?: JobHiringMemberUpdateWithWhereUniqueWithoutUserInput | JobHiringMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JobHiringMemberUpdateManyWithWhereWithoutUserInput | JobHiringMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JobHiringMemberScalarWhereInput | JobHiringMemberScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserCreateNestedOneWithoutCompaniesOwnedInput = {
    create?: XOR<UserCreateWithoutCompaniesOwnedInput, UserUncheckedCreateWithoutCompaniesOwnedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompaniesOwnedInput
    connect?: UserWhereUniqueInput
  }

  export type CompanyMemberCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput> | CompanyMemberCreateWithoutCompanyInput[] | CompanyMemberUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutCompanyInput | CompanyMemberCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyMemberCreateManyCompanyInputEnvelope
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
  }

  export type JobCreateNestedManyWithoutCompanyInput = {
    create?: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput> | JobCreateWithoutCompanyInput[] | JobUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCompanyInput | JobCreateOrConnectWithoutCompanyInput[]
    createMany?: JobCreateManyCompanyInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutCompanyInput = {
    create?: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput> | DepartmentCreateWithoutCompanyInput[] | DepartmentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCompanyInput | DepartmentCreateOrConnectWithoutCompanyInput[]
    createMany?: DepartmentCreateManyCompanyInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type JobLocationCreateNestedManyWithoutCompanyInput = {
    create?: XOR<JobLocationCreateWithoutCompanyInput, JobLocationUncheckedCreateWithoutCompanyInput> | JobLocationCreateWithoutCompanyInput[] | JobLocationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobLocationCreateOrConnectWithoutCompanyInput | JobLocationCreateOrConnectWithoutCompanyInput[]
    createMany?: JobLocationCreateManyCompanyInputEnvelope
    connect?: JobLocationWhereUniqueInput | JobLocationWhereUniqueInput[]
  }

  export type WorkflowTemplateCreateNestedManyWithoutCompanyInput = {
    create?: XOR<WorkflowTemplateCreateWithoutCompanyInput, WorkflowTemplateUncheckedCreateWithoutCompanyInput> | WorkflowTemplateCreateWithoutCompanyInput[] | WorkflowTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: WorkflowTemplateCreateOrConnectWithoutCompanyInput | WorkflowTemplateCreateOrConnectWithoutCompanyInput[]
    createMany?: WorkflowTemplateCreateManyCompanyInputEnvelope
    connect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
  }

  export type RatingCardTemplateCreateNestedManyWithoutCompanyInput = {
    create?: XOR<RatingCardTemplateCreateWithoutCompanyInput, RatingCardTemplateUncheckedCreateWithoutCompanyInput> | RatingCardTemplateCreateWithoutCompanyInput[] | RatingCardTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: RatingCardTemplateCreateOrConnectWithoutCompanyInput | RatingCardTemplateCreateOrConnectWithoutCompanyInput[]
    createMany?: RatingCardTemplateCreateManyCompanyInputEnvelope
    connect?: RatingCardTemplateWhereUniqueInput | RatingCardTemplateWhereUniqueInput[]
  }

  export type CareersPageSettingCreateNestedOneWithoutCompanyInput = {
    create?: XOR<CareersPageSettingCreateWithoutCompanyInput, CareersPageSettingUncheckedCreateWithoutCompanyInput>
    connectOrCreate?: CareersPageSettingCreateOrConnectWithoutCompanyInput
    connect?: CareersPageSettingWhereUniqueInput
  }

  export type JobBoardIntegrationCreateNestedManyWithoutCompanyInput = {
    create?: XOR<JobBoardIntegrationCreateWithoutCompanyInput, JobBoardIntegrationUncheckedCreateWithoutCompanyInput> | JobBoardIntegrationCreateWithoutCompanyInput[] | JobBoardIntegrationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobBoardIntegrationCreateOrConnectWithoutCompanyInput | JobBoardIntegrationCreateOrConnectWithoutCompanyInput[]
    createMany?: JobBoardIntegrationCreateManyCompanyInputEnvelope
    connect?: JobBoardIntegrationWhereUniqueInput | JobBoardIntegrationWhereUniqueInput[]
  }

  export type MessageTemplateCreateNestedManyWithoutCompanyInput = {
    create?: XOR<MessageTemplateCreateWithoutCompanyInput, MessageTemplateUncheckedCreateWithoutCompanyInput> | MessageTemplateCreateWithoutCompanyInput[] | MessageTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: MessageTemplateCreateOrConnectWithoutCompanyInput | MessageTemplateCreateOrConnectWithoutCompanyInput[]
    createMany?: MessageTemplateCreateManyCompanyInputEnvelope
    connect?: MessageTemplateWhereUniqueInput | MessageTemplateWhereUniqueInput[]
  }

  export type QuestionCreateNestedManyWithoutCompanyInput = {
    create?: XOR<QuestionCreateWithoutCompanyInput, QuestionUncheckedCreateWithoutCompanyInput> | QuestionCreateWithoutCompanyInput[] | QuestionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutCompanyInput | QuestionCreateOrConnectWithoutCompanyInput[]
    createMany?: QuestionCreateManyCompanyInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type QuestionSetCreateNestedManyWithoutCompanyInput = {
    create?: XOR<QuestionSetCreateWithoutCompanyInput, QuestionSetUncheckedCreateWithoutCompanyInput> | QuestionSetCreateWithoutCompanyInput[] | QuestionSetUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutCompanyInput | QuestionSetCreateOrConnectWithoutCompanyInput[]
    createMany?: QuestionSetCreateManyCompanyInputEnvelope
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput> | CompanyMemberCreateWithoutCompanyInput[] | CompanyMemberUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutCompanyInput | CompanyMemberCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyMemberCreateManyCompanyInputEnvelope
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
  }

  export type JobUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput> | JobCreateWithoutCompanyInput[] | JobUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCompanyInput | JobCreateOrConnectWithoutCompanyInput[]
    createMany?: JobCreateManyCompanyInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput> | DepartmentCreateWithoutCompanyInput[] | DepartmentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCompanyInput | DepartmentCreateOrConnectWithoutCompanyInput[]
    createMany?: DepartmentCreateManyCompanyInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type JobLocationUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<JobLocationCreateWithoutCompanyInput, JobLocationUncheckedCreateWithoutCompanyInput> | JobLocationCreateWithoutCompanyInput[] | JobLocationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobLocationCreateOrConnectWithoutCompanyInput | JobLocationCreateOrConnectWithoutCompanyInput[]
    createMany?: JobLocationCreateManyCompanyInputEnvelope
    connect?: JobLocationWhereUniqueInput | JobLocationWhereUniqueInput[]
  }

  export type WorkflowTemplateUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<WorkflowTemplateCreateWithoutCompanyInput, WorkflowTemplateUncheckedCreateWithoutCompanyInput> | WorkflowTemplateCreateWithoutCompanyInput[] | WorkflowTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: WorkflowTemplateCreateOrConnectWithoutCompanyInput | WorkflowTemplateCreateOrConnectWithoutCompanyInput[]
    createMany?: WorkflowTemplateCreateManyCompanyInputEnvelope
    connect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
  }

  export type RatingCardTemplateUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<RatingCardTemplateCreateWithoutCompanyInput, RatingCardTemplateUncheckedCreateWithoutCompanyInput> | RatingCardTemplateCreateWithoutCompanyInput[] | RatingCardTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: RatingCardTemplateCreateOrConnectWithoutCompanyInput | RatingCardTemplateCreateOrConnectWithoutCompanyInput[]
    createMany?: RatingCardTemplateCreateManyCompanyInputEnvelope
    connect?: RatingCardTemplateWhereUniqueInput | RatingCardTemplateWhereUniqueInput[]
  }

  export type CareersPageSettingUncheckedCreateNestedOneWithoutCompanyInput = {
    create?: XOR<CareersPageSettingCreateWithoutCompanyInput, CareersPageSettingUncheckedCreateWithoutCompanyInput>
    connectOrCreate?: CareersPageSettingCreateOrConnectWithoutCompanyInput
    connect?: CareersPageSettingWhereUniqueInput
  }

  export type JobBoardIntegrationUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<JobBoardIntegrationCreateWithoutCompanyInput, JobBoardIntegrationUncheckedCreateWithoutCompanyInput> | JobBoardIntegrationCreateWithoutCompanyInput[] | JobBoardIntegrationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobBoardIntegrationCreateOrConnectWithoutCompanyInput | JobBoardIntegrationCreateOrConnectWithoutCompanyInput[]
    createMany?: JobBoardIntegrationCreateManyCompanyInputEnvelope
    connect?: JobBoardIntegrationWhereUniqueInput | JobBoardIntegrationWhereUniqueInput[]
  }

  export type MessageTemplateUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<MessageTemplateCreateWithoutCompanyInput, MessageTemplateUncheckedCreateWithoutCompanyInput> | MessageTemplateCreateWithoutCompanyInput[] | MessageTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: MessageTemplateCreateOrConnectWithoutCompanyInput | MessageTemplateCreateOrConnectWithoutCompanyInput[]
    createMany?: MessageTemplateCreateManyCompanyInputEnvelope
    connect?: MessageTemplateWhereUniqueInput | MessageTemplateWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<QuestionCreateWithoutCompanyInput, QuestionUncheckedCreateWithoutCompanyInput> | QuestionCreateWithoutCompanyInput[] | QuestionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutCompanyInput | QuestionCreateOrConnectWithoutCompanyInput[]
    createMany?: QuestionCreateManyCompanyInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type QuestionSetUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<QuestionSetCreateWithoutCompanyInput, QuestionSetUncheckedCreateWithoutCompanyInput> | QuestionSetCreateWithoutCompanyInput[] | QuestionSetUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutCompanyInput | QuestionSetCreateOrConnectWithoutCompanyInput[]
    createMany?: QuestionSetCreateManyCompanyInputEnvelope
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCompaniesOwnedNestedInput = {
    create?: XOR<UserCreateWithoutCompaniesOwnedInput, UserUncheckedCreateWithoutCompaniesOwnedInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompaniesOwnedInput
    upsert?: UserUpsertWithoutCompaniesOwnedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCompaniesOwnedInput, UserUpdateWithoutCompaniesOwnedInput>, UserUncheckedUpdateWithoutCompaniesOwnedInput>
  }

  export type CompanyMemberUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput> | CompanyMemberCreateWithoutCompanyInput[] | CompanyMemberUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutCompanyInput | CompanyMemberCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput | CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyMemberCreateManyCompanyInputEnvelope
    set?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    disconnect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    delete?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    update?: CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput | CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyMemberUpdateManyWithWhereWithoutCompanyInput | CompanyMemberUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
  }

  export type JobUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput> | JobCreateWithoutCompanyInput[] | JobUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCompanyInput | JobCreateOrConnectWithoutCompanyInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutCompanyInput | JobUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: JobCreateManyCompanyInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutCompanyInput | JobUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: JobUpdateManyWithWhereWithoutCompanyInput | JobUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput> | DepartmentCreateWithoutCompanyInput[] | DepartmentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCompanyInput | DepartmentCreateOrConnectWithoutCompanyInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutCompanyInput | DepartmentUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: DepartmentCreateManyCompanyInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutCompanyInput | DepartmentUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutCompanyInput | DepartmentUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type JobLocationUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<JobLocationCreateWithoutCompanyInput, JobLocationUncheckedCreateWithoutCompanyInput> | JobLocationCreateWithoutCompanyInput[] | JobLocationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobLocationCreateOrConnectWithoutCompanyInput | JobLocationCreateOrConnectWithoutCompanyInput[]
    upsert?: JobLocationUpsertWithWhereUniqueWithoutCompanyInput | JobLocationUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: JobLocationCreateManyCompanyInputEnvelope
    set?: JobLocationWhereUniqueInput | JobLocationWhereUniqueInput[]
    disconnect?: JobLocationWhereUniqueInput | JobLocationWhereUniqueInput[]
    delete?: JobLocationWhereUniqueInput | JobLocationWhereUniqueInput[]
    connect?: JobLocationWhereUniqueInput | JobLocationWhereUniqueInput[]
    update?: JobLocationUpdateWithWhereUniqueWithoutCompanyInput | JobLocationUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: JobLocationUpdateManyWithWhereWithoutCompanyInput | JobLocationUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: JobLocationScalarWhereInput | JobLocationScalarWhereInput[]
  }

  export type WorkflowTemplateUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<WorkflowTemplateCreateWithoutCompanyInput, WorkflowTemplateUncheckedCreateWithoutCompanyInput> | WorkflowTemplateCreateWithoutCompanyInput[] | WorkflowTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: WorkflowTemplateCreateOrConnectWithoutCompanyInput | WorkflowTemplateCreateOrConnectWithoutCompanyInput[]
    upsert?: WorkflowTemplateUpsertWithWhereUniqueWithoutCompanyInput | WorkflowTemplateUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: WorkflowTemplateCreateManyCompanyInputEnvelope
    set?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    disconnect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    delete?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    connect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    update?: WorkflowTemplateUpdateWithWhereUniqueWithoutCompanyInput | WorkflowTemplateUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: WorkflowTemplateUpdateManyWithWhereWithoutCompanyInput | WorkflowTemplateUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: WorkflowTemplateScalarWhereInput | WorkflowTemplateScalarWhereInput[]
  }

  export type RatingCardTemplateUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<RatingCardTemplateCreateWithoutCompanyInput, RatingCardTemplateUncheckedCreateWithoutCompanyInput> | RatingCardTemplateCreateWithoutCompanyInput[] | RatingCardTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: RatingCardTemplateCreateOrConnectWithoutCompanyInput | RatingCardTemplateCreateOrConnectWithoutCompanyInput[]
    upsert?: RatingCardTemplateUpsertWithWhereUniqueWithoutCompanyInput | RatingCardTemplateUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: RatingCardTemplateCreateManyCompanyInputEnvelope
    set?: RatingCardTemplateWhereUniqueInput | RatingCardTemplateWhereUniqueInput[]
    disconnect?: RatingCardTemplateWhereUniqueInput | RatingCardTemplateWhereUniqueInput[]
    delete?: RatingCardTemplateWhereUniqueInput | RatingCardTemplateWhereUniqueInput[]
    connect?: RatingCardTemplateWhereUniqueInput | RatingCardTemplateWhereUniqueInput[]
    update?: RatingCardTemplateUpdateWithWhereUniqueWithoutCompanyInput | RatingCardTemplateUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: RatingCardTemplateUpdateManyWithWhereWithoutCompanyInput | RatingCardTemplateUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: RatingCardTemplateScalarWhereInput | RatingCardTemplateScalarWhereInput[]
  }

  export type CareersPageSettingUpdateOneWithoutCompanyNestedInput = {
    create?: XOR<CareersPageSettingCreateWithoutCompanyInput, CareersPageSettingUncheckedCreateWithoutCompanyInput>
    connectOrCreate?: CareersPageSettingCreateOrConnectWithoutCompanyInput
    upsert?: CareersPageSettingUpsertWithoutCompanyInput
    disconnect?: CareersPageSettingWhereInput | boolean
    delete?: CareersPageSettingWhereInput | boolean
    connect?: CareersPageSettingWhereUniqueInput
    update?: XOR<XOR<CareersPageSettingUpdateToOneWithWhereWithoutCompanyInput, CareersPageSettingUpdateWithoutCompanyInput>, CareersPageSettingUncheckedUpdateWithoutCompanyInput>
  }

  export type JobBoardIntegrationUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<JobBoardIntegrationCreateWithoutCompanyInput, JobBoardIntegrationUncheckedCreateWithoutCompanyInput> | JobBoardIntegrationCreateWithoutCompanyInput[] | JobBoardIntegrationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobBoardIntegrationCreateOrConnectWithoutCompanyInput | JobBoardIntegrationCreateOrConnectWithoutCompanyInput[]
    upsert?: JobBoardIntegrationUpsertWithWhereUniqueWithoutCompanyInput | JobBoardIntegrationUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: JobBoardIntegrationCreateManyCompanyInputEnvelope
    set?: JobBoardIntegrationWhereUniqueInput | JobBoardIntegrationWhereUniqueInput[]
    disconnect?: JobBoardIntegrationWhereUniqueInput | JobBoardIntegrationWhereUniqueInput[]
    delete?: JobBoardIntegrationWhereUniqueInput | JobBoardIntegrationWhereUniqueInput[]
    connect?: JobBoardIntegrationWhereUniqueInput | JobBoardIntegrationWhereUniqueInput[]
    update?: JobBoardIntegrationUpdateWithWhereUniqueWithoutCompanyInput | JobBoardIntegrationUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: JobBoardIntegrationUpdateManyWithWhereWithoutCompanyInput | JobBoardIntegrationUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: JobBoardIntegrationScalarWhereInput | JobBoardIntegrationScalarWhereInput[]
  }

  export type MessageTemplateUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<MessageTemplateCreateWithoutCompanyInput, MessageTemplateUncheckedCreateWithoutCompanyInput> | MessageTemplateCreateWithoutCompanyInput[] | MessageTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: MessageTemplateCreateOrConnectWithoutCompanyInput | MessageTemplateCreateOrConnectWithoutCompanyInput[]
    upsert?: MessageTemplateUpsertWithWhereUniqueWithoutCompanyInput | MessageTemplateUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: MessageTemplateCreateManyCompanyInputEnvelope
    set?: MessageTemplateWhereUniqueInput | MessageTemplateWhereUniqueInput[]
    disconnect?: MessageTemplateWhereUniqueInput | MessageTemplateWhereUniqueInput[]
    delete?: MessageTemplateWhereUniqueInput | MessageTemplateWhereUniqueInput[]
    connect?: MessageTemplateWhereUniqueInput | MessageTemplateWhereUniqueInput[]
    update?: MessageTemplateUpdateWithWhereUniqueWithoutCompanyInput | MessageTemplateUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: MessageTemplateUpdateManyWithWhereWithoutCompanyInput | MessageTemplateUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: MessageTemplateScalarWhereInput | MessageTemplateScalarWhereInput[]
  }

  export type QuestionUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<QuestionCreateWithoutCompanyInput, QuestionUncheckedCreateWithoutCompanyInput> | QuestionCreateWithoutCompanyInput[] | QuestionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutCompanyInput | QuestionCreateOrConnectWithoutCompanyInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutCompanyInput | QuestionUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: QuestionCreateManyCompanyInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutCompanyInput | QuestionUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutCompanyInput | QuestionUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type QuestionSetUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<QuestionSetCreateWithoutCompanyInput, QuestionSetUncheckedCreateWithoutCompanyInput> | QuestionSetCreateWithoutCompanyInput[] | QuestionSetUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutCompanyInput | QuestionSetCreateOrConnectWithoutCompanyInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutCompanyInput | QuestionSetUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: QuestionSetCreateManyCompanyInputEnvelope
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutCompanyInput | QuestionSetUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutCompanyInput | QuestionSetUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput> | CompanyMemberCreateWithoutCompanyInput[] | CompanyMemberUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyMemberCreateOrConnectWithoutCompanyInput | CompanyMemberCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput | CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyMemberCreateManyCompanyInputEnvelope
    set?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    disconnect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    delete?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    connect?: CompanyMemberWhereUniqueInput | CompanyMemberWhereUniqueInput[]
    update?: CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput | CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyMemberUpdateManyWithWhereWithoutCompanyInput | CompanyMemberUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
  }

  export type JobUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput> | JobCreateWithoutCompanyInput[] | JobUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCompanyInput | JobCreateOrConnectWithoutCompanyInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutCompanyInput | JobUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: JobCreateManyCompanyInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutCompanyInput | JobUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: JobUpdateManyWithWhereWithoutCompanyInput | JobUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput> | DepartmentCreateWithoutCompanyInput[] | DepartmentUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCompanyInput | DepartmentCreateOrConnectWithoutCompanyInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutCompanyInput | DepartmentUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: DepartmentCreateManyCompanyInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutCompanyInput | DepartmentUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutCompanyInput | DepartmentUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type JobLocationUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<JobLocationCreateWithoutCompanyInput, JobLocationUncheckedCreateWithoutCompanyInput> | JobLocationCreateWithoutCompanyInput[] | JobLocationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobLocationCreateOrConnectWithoutCompanyInput | JobLocationCreateOrConnectWithoutCompanyInput[]
    upsert?: JobLocationUpsertWithWhereUniqueWithoutCompanyInput | JobLocationUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: JobLocationCreateManyCompanyInputEnvelope
    set?: JobLocationWhereUniqueInput | JobLocationWhereUniqueInput[]
    disconnect?: JobLocationWhereUniqueInput | JobLocationWhereUniqueInput[]
    delete?: JobLocationWhereUniqueInput | JobLocationWhereUniqueInput[]
    connect?: JobLocationWhereUniqueInput | JobLocationWhereUniqueInput[]
    update?: JobLocationUpdateWithWhereUniqueWithoutCompanyInput | JobLocationUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: JobLocationUpdateManyWithWhereWithoutCompanyInput | JobLocationUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: JobLocationScalarWhereInput | JobLocationScalarWhereInput[]
  }

  export type WorkflowTemplateUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<WorkflowTemplateCreateWithoutCompanyInput, WorkflowTemplateUncheckedCreateWithoutCompanyInput> | WorkflowTemplateCreateWithoutCompanyInput[] | WorkflowTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: WorkflowTemplateCreateOrConnectWithoutCompanyInput | WorkflowTemplateCreateOrConnectWithoutCompanyInput[]
    upsert?: WorkflowTemplateUpsertWithWhereUniqueWithoutCompanyInput | WorkflowTemplateUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: WorkflowTemplateCreateManyCompanyInputEnvelope
    set?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    disconnect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    delete?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    connect?: WorkflowTemplateWhereUniqueInput | WorkflowTemplateWhereUniqueInput[]
    update?: WorkflowTemplateUpdateWithWhereUniqueWithoutCompanyInput | WorkflowTemplateUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: WorkflowTemplateUpdateManyWithWhereWithoutCompanyInput | WorkflowTemplateUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: WorkflowTemplateScalarWhereInput | WorkflowTemplateScalarWhereInput[]
  }

  export type RatingCardTemplateUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<RatingCardTemplateCreateWithoutCompanyInput, RatingCardTemplateUncheckedCreateWithoutCompanyInput> | RatingCardTemplateCreateWithoutCompanyInput[] | RatingCardTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: RatingCardTemplateCreateOrConnectWithoutCompanyInput | RatingCardTemplateCreateOrConnectWithoutCompanyInput[]
    upsert?: RatingCardTemplateUpsertWithWhereUniqueWithoutCompanyInput | RatingCardTemplateUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: RatingCardTemplateCreateManyCompanyInputEnvelope
    set?: RatingCardTemplateWhereUniqueInput | RatingCardTemplateWhereUniqueInput[]
    disconnect?: RatingCardTemplateWhereUniqueInput | RatingCardTemplateWhereUniqueInput[]
    delete?: RatingCardTemplateWhereUniqueInput | RatingCardTemplateWhereUniqueInput[]
    connect?: RatingCardTemplateWhereUniqueInput | RatingCardTemplateWhereUniqueInput[]
    update?: RatingCardTemplateUpdateWithWhereUniqueWithoutCompanyInput | RatingCardTemplateUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: RatingCardTemplateUpdateManyWithWhereWithoutCompanyInput | RatingCardTemplateUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: RatingCardTemplateScalarWhereInput | RatingCardTemplateScalarWhereInput[]
  }

  export type CareersPageSettingUncheckedUpdateOneWithoutCompanyNestedInput = {
    create?: XOR<CareersPageSettingCreateWithoutCompanyInput, CareersPageSettingUncheckedCreateWithoutCompanyInput>
    connectOrCreate?: CareersPageSettingCreateOrConnectWithoutCompanyInput
    upsert?: CareersPageSettingUpsertWithoutCompanyInput
    disconnect?: CareersPageSettingWhereInput | boolean
    delete?: CareersPageSettingWhereInput | boolean
    connect?: CareersPageSettingWhereUniqueInput
    update?: XOR<XOR<CareersPageSettingUpdateToOneWithWhereWithoutCompanyInput, CareersPageSettingUpdateWithoutCompanyInput>, CareersPageSettingUncheckedUpdateWithoutCompanyInput>
  }

  export type JobBoardIntegrationUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<JobBoardIntegrationCreateWithoutCompanyInput, JobBoardIntegrationUncheckedCreateWithoutCompanyInput> | JobBoardIntegrationCreateWithoutCompanyInput[] | JobBoardIntegrationUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: JobBoardIntegrationCreateOrConnectWithoutCompanyInput | JobBoardIntegrationCreateOrConnectWithoutCompanyInput[]
    upsert?: JobBoardIntegrationUpsertWithWhereUniqueWithoutCompanyInput | JobBoardIntegrationUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: JobBoardIntegrationCreateManyCompanyInputEnvelope
    set?: JobBoardIntegrationWhereUniqueInput | JobBoardIntegrationWhereUniqueInput[]
    disconnect?: JobBoardIntegrationWhereUniqueInput | JobBoardIntegrationWhereUniqueInput[]
    delete?: JobBoardIntegrationWhereUniqueInput | JobBoardIntegrationWhereUniqueInput[]
    connect?: JobBoardIntegrationWhereUniqueInput | JobBoardIntegrationWhereUniqueInput[]
    update?: JobBoardIntegrationUpdateWithWhereUniqueWithoutCompanyInput | JobBoardIntegrationUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: JobBoardIntegrationUpdateManyWithWhereWithoutCompanyInput | JobBoardIntegrationUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: JobBoardIntegrationScalarWhereInput | JobBoardIntegrationScalarWhereInput[]
  }

  export type MessageTemplateUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<MessageTemplateCreateWithoutCompanyInput, MessageTemplateUncheckedCreateWithoutCompanyInput> | MessageTemplateCreateWithoutCompanyInput[] | MessageTemplateUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: MessageTemplateCreateOrConnectWithoutCompanyInput | MessageTemplateCreateOrConnectWithoutCompanyInput[]
    upsert?: MessageTemplateUpsertWithWhereUniqueWithoutCompanyInput | MessageTemplateUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: MessageTemplateCreateManyCompanyInputEnvelope
    set?: MessageTemplateWhereUniqueInput | MessageTemplateWhereUniqueInput[]
    disconnect?: MessageTemplateWhereUniqueInput | MessageTemplateWhereUniqueInput[]
    delete?: MessageTemplateWhereUniqueInput | MessageTemplateWhereUniqueInput[]
    connect?: MessageTemplateWhereUniqueInput | MessageTemplateWhereUniqueInput[]
    update?: MessageTemplateUpdateWithWhereUniqueWithoutCompanyInput | MessageTemplateUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: MessageTemplateUpdateManyWithWhereWithoutCompanyInput | MessageTemplateUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: MessageTemplateScalarWhereInput | MessageTemplateScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<QuestionCreateWithoutCompanyInput, QuestionUncheckedCreateWithoutCompanyInput> | QuestionCreateWithoutCompanyInput[] | QuestionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutCompanyInput | QuestionCreateOrConnectWithoutCompanyInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutCompanyInput | QuestionUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: QuestionCreateManyCompanyInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutCompanyInput | QuestionUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutCompanyInput | QuestionUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type QuestionSetUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<QuestionSetCreateWithoutCompanyInput, QuestionSetUncheckedCreateWithoutCompanyInput> | QuestionSetCreateWithoutCompanyInput[] | QuestionSetUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutCompanyInput | QuestionSetCreateOrConnectWithoutCompanyInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutCompanyInput | QuestionSetUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: QuestionSetCreateManyCompanyInputEnvelope
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutCompanyInput | QuestionSetUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutCompanyInput | QuestionSetUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutMembersInput = {
    create?: XOR<CompanyCreateWithoutMembersInput, CompanyUncheckedCreateWithoutMembersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutMembersInput
    connect?: CompanyWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCompanyMembershipsInput = {
    create?: XOR<UserCreateWithoutCompanyMembershipsInput, UserUncheckedCreateWithoutCompanyMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompanyMembershipsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumCompanyMemberRoleFieldUpdateOperationsInput = {
    set?: $Enums.CompanyMemberRole
  }

  export type CompanyUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<CompanyCreateWithoutMembersInput, CompanyUncheckedCreateWithoutMembersInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutMembersInput
    upsert?: CompanyUpsertWithoutMembersInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutMembersInput, CompanyUpdateWithoutMembersInput>, CompanyUncheckedUpdateWithoutMembersInput>
  }

  export type UserUpdateOneRequiredWithoutCompanyMembershipsNestedInput = {
    create?: XOR<UserCreateWithoutCompanyMembershipsInput, UserUncheckedCreateWithoutCompanyMembershipsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompanyMembershipsInput
    upsert?: UserUpsertWithoutCompanyMembershipsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCompanyMembershipsInput, UserUpdateWithoutCompanyMembershipsInput>, UserUncheckedUpdateWithoutCompanyMembershipsInput>
  }

  export type CompanyCreateNestedOneWithoutJobsInput = {
    create?: XOR<CompanyCreateWithoutJobsInput, CompanyUncheckedCreateWithoutJobsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutJobsInput
    connect?: CompanyWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutJobsInput = {
    create?: XOR<DepartmentCreateWithoutJobsInput, DepartmentUncheckedCreateWithoutJobsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutJobsInput
    connect?: DepartmentWhereUniqueInput
  }

  export type JobLocationCreateNestedOneWithoutJobsInput = {
    create?: XOR<JobLocationCreateWithoutJobsInput, JobLocationUncheckedCreateWithoutJobsInput>
    connectOrCreate?: JobLocationCreateOrConnectWithoutJobsInput
    connect?: JobLocationWhereUniqueInput
  }

  export type ApplicationFormFieldCreateNestedManyWithoutJobInput = {
    create?: XOR<ApplicationFormFieldCreateWithoutJobInput, ApplicationFormFieldUncheckedCreateWithoutJobInput> | ApplicationFormFieldCreateWithoutJobInput[] | ApplicationFormFieldUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ApplicationFormFieldCreateOrConnectWithoutJobInput | ApplicationFormFieldCreateOrConnectWithoutJobInput[]
    createMany?: ApplicationFormFieldCreateManyJobInputEnvelope
    connect?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
  }

  export type JobHiringMemberCreateNestedManyWithoutJobInput = {
    create?: XOR<JobHiringMemberCreateWithoutJobInput, JobHiringMemberUncheckedCreateWithoutJobInput> | JobHiringMemberCreateWithoutJobInput[] | JobHiringMemberUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobHiringMemberCreateOrConnectWithoutJobInput | JobHiringMemberCreateOrConnectWithoutJobInput[]
    createMany?: JobHiringMemberCreateManyJobInputEnvelope
    connect?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
  }

  export type JobWorkflowCreateNestedOneWithoutJobInput = {
    create?: XOR<JobWorkflowCreateWithoutJobInput, JobWorkflowUncheckedCreateWithoutJobInput>
    connectOrCreate?: JobWorkflowCreateOrConnectWithoutJobInput
    connect?: JobWorkflowWhereUniqueInput
  }

  export type ApplicationCreateNestedManyWithoutJobInput = {
    create?: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput> | ApplicationCreateWithoutJobInput[] | ApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobInput | ApplicationCreateOrConnectWithoutJobInput[]
    createMany?: ApplicationCreateManyJobInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type AIScreeningConfigCreateNestedOneWithoutJobInput = {
    create?: XOR<AIScreeningConfigCreateWithoutJobInput, AIScreeningConfigUncheckedCreateWithoutJobInput>
    connectOrCreate?: AIScreeningConfigCreateOrConnectWithoutJobInput
    connect?: AIScreeningConfigWhereUniqueInput
  }

  export type AISchedulingConfigCreateNestedOneWithoutJobInput = {
    create?: XOR<AISchedulingConfigCreateWithoutJobInput, AISchedulingConfigUncheckedCreateWithoutJobInput>
    connectOrCreate?: AISchedulingConfigCreateOrConnectWithoutJobInput
    connect?: AISchedulingConfigWhereUniqueInput
  }

  export type ApplicationFormFieldUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<ApplicationFormFieldCreateWithoutJobInput, ApplicationFormFieldUncheckedCreateWithoutJobInput> | ApplicationFormFieldCreateWithoutJobInput[] | ApplicationFormFieldUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ApplicationFormFieldCreateOrConnectWithoutJobInput | ApplicationFormFieldCreateOrConnectWithoutJobInput[]
    createMany?: ApplicationFormFieldCreateManyJobInputEnvelope
    connect?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
  }

  export type JobHiringMemberUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<JobHiringMemberCreateWithoutJobInput, JobHiringMemberUncheckedCreateWithoutJobInput> | JobHiringMemberCreateWithoutJobInput[] | JobHiringMemberUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobHiringMemberCreateOrConnectWithoutJobInput | JobHiringMemberCreateOrConnectWithoutJobInput[]
    createMany?: JobHiringMemberCreateManyJobInputEnvelope
    connect?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
  }

  export type JobWorkflowUncheckedCreateNestedOneWithoutJobInput = {
    create?: XOR<JobWorkflowCreateWithoutJobInput, JobWorkflowUncheckedCreateWithoutJobInput>
    connectOrCreate?: JobWorkflowCreateOrConnectWithoutJobInput
    connect?: JobWorkflowWhereUniqueInput
  }

  export type ApplicationUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput> | ApplicationCreateWithoutJobInput[] | ApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobInput | ApplicationCreateOrConnectWithoutJobInput[]
    createMany?: ApplicationCreateManyJobInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type AIScreeningConfigUncheckedCreateNestedOneWithoutJobInput = {
    create?: XOR<AIScreeningConfigCreateWithoutJobInput, AIScreeningConfigUncheckedCreateWithoutJobInput>
    connectOrCreate?: AIScreeningConfigCreateOrConnectWithoutJobInput
    connect?: AIScreeningConfigWhereUniqueInput
  }

  export type AISchedulingConfigUncheckedCreateNestedOneWithoutJobInput = {
    create?: XOR<AISchedulingConfigCreateWithoutJobInput, AISchedulingConfigUncheckedCreateWithoutJobInput>
    connectOrCreate?: AISchedulingConfigCreateOrConnectWithoutJobInput
    connect?: AISchedulingConfigWhereUniqueInput
  }

  export type EnumEmploymentTypeFieldUpdateOperationsInput = {
    set?: $Enums.EmploymentType
  }

  export type EnumWorkTypeFieldUpdateOperationsInput = {
    set?: $Enums.WorkType
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumJobStatusFieldUpdateOperationsInput = {
    set?: $Enums.JobStatus
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CompanyUpdateOneRequiredWithoutJobsNestedInput = {
    create?: XOR<CompanyCreateWithoutJobsInput, CompanyUncheckedCreateWithoutJobsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutJobsInput
    upsert?: CompanyUpsertWithoutJobsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutJobsInput, CompanyUpdateWithoutJobsInput>, CompanyUncheckedUpdateWithoutJobsInput>
  }

  export type DepartmentUpdateOneWithoutJobsNestedInput = {
    create?: XOR<DepartmentCreateWithoutJobsInput, DepartmentUncheckedCreateWithoutJobsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutJobsInput
    upsert?: DepartmentUpsertWithoutJobsInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutJobsInput, DepartmentUpdateWithoutJobsInput>, DepartmentUncheckedUpdateWithoutJobsInput>
  }

  export type JobLocationUpdateOneWithoutJobsNestedInput = {
    create?: XOR<JobLocationCreateWithoutJobsInput, JobLocationUncheckedCreateWithoutJobsInput>
    connectOrCreate?: JobLocationCreateOrConnectWithoutJobsInput
    upsert?: JobLocationUpsertWithoutJobsInput
    disconnect?: JobLocationWhereInput | boolean
    delete?: JobLocationWhereInput | boolean
    connect?: JobLocationWhereUniqueInput
    update?: XOR<XOR<JobLocationUpdateToOneWithWhereWithoutJobsInput, JobLocationUpdateWithoutJobsInput>, JobLocationUncheckedUpdateWithoutJobsInput>
  }

  export type ApplicationFormFieldUpdateManyWithoutJobNestedInput = {
    create?: XOR<ApplicationFormFieldCreateWithoutJobInput, ApplicationFormFieldUncheckedCreateWithoutJobInput> | ApplicationFormFieldCreateWithoutJobInput[] | ApplicationFormFieldUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ApplicationFormFieldCreateOrConnectWithoutJobInput | ApplicationFormFieldCreateOrConnectWithoutJobInput[]
    upsert?: ApplicationFormFieldUpsertWithWhereUniqueWithoutJobInput | ApplicationFormFieldUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: ApplicationFormFieldCreateManyJobInputEnvelope
    set?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
    disconnect?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
    delete?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
    connect?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
    update?: ApplicationFormFieldUpdateWithWhereUniqueWithoutJobInput | ApplicationFormFieldUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: ApplicationFormFieldUpdateManyWithWhereWithoutJobInput | ApplicationFormFieldUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: ApplicationFormFieldScalarWhereInput | ApplicationFormFieldScalarWhereInput[]
  }

  export type JobHiringMemberUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobHiringMemberCreateWithoutJobInput, JobHiringMemberUncheckedCreateWithoutJobInput> | JobHiringMemberCreateWithoutJobInput[] | JobHiringMemberUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobHiringMemberCreateOrConnectWithoutJobInput | JobHiringMemberCreateOrConnectWithoutJobInput[]
    upsert?: JobHiringMemberUpsertWithWhereUniqueWithoutJobInput | JobHiringMemberUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobHiringMemberCreateManyJobInputEnvelope
    set?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
    disconnect?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
    delete?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
    connect?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
    update?: JobHiringMemberUpdateWithWhereUniqueWithoutJobInput | JobHiringMemberUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobHiringMemberUpdateManyWithWhereWithoutJobInput | JobHiringMemberUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobHiringMemberScalarWhereInput | JobHiringMemberScalarWhereInput[]
  }

  export type JobWorkflowUpdateOneWithoutJobNestedInput = {
    create?: XOR<JobWorkflowCreateWithoutJobInput, JobWorkflowUncheckedCreateWithoutJobInput>
    connectOrCreate?: JobWorkflowCreateOrConnectWithoutJobInput
    upsert?: JobWorkflowUpsertWithoutJobInput
    disconnect?: JobWorkflowWhereInput | boolean
    delete?: JobWorkflowWhereInput | boolean
    connect?: JobWorkflowWhereUniqueInput
    update?: XOR<XOR<JobWorkflowUpdateToOneWithWhereWithoutJobInput, JobWorkflowUpdateWithoutJobInput>, JobWorkflowUncheckedUpdateWithoutJobInput>
  }

  export type ApplicationUpdateManyWithoutJobNestedInput = {
    create?: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput> | ApplicationCreateWithoutJobInput[] | ApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobInput | ApplicationCreateOrConnectWithoutJobInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutJobInput | ApplicationUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: ApplicationCreateManyJobInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutJobInput | ApplicationUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutJobInput | ApplicationUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type AIScreeningConfigUpdateOneWithoutJobNestedInput = {
    create?: XOR<AIScreeningConfigCreateWithoutJobInput, AIScreeningConfigUncheckedCreateWithoutJobInput>
    connectOrCreate?: AIScreeningConfigCreateOrConnectWithoutJobInput
    upsert?: AIScreeningConfigUpsertWithoutJobInput
    disconnect?: AIScreeningConfigWhereInput | boolean
    delete?: AIScreeningConfigWhereInput | boolean
    connect?: AIScreeningConfigWhereUniqueInput
    update?: XOR<XOR<AIScreeningConfigUpdateToOneWithWhereWithoutJobInput, AIScreeningConfigUpdateWithoutJobInput>, AIScreeningConfigUncheckedUpdateWithoutJobInput>
  }

  export type AISchedulingConfigUpdateOneWithoutJobNestedInput = {
    create?: XOR<AISchedulingConfigCreateWithoutJobInput, AISchedulingConfigUncheckedCreateWithoutJobInput>
    connectOrCreate?: AISchedulingConfigCreateOrConnectWithoutJobInput
    upsert?: AISchedulingConfigUpsertWithoutJobInput
    disconnect?: AISchedulingConfigWhereInput | boolean
    delete?: AISchedulingConfigWhereInput | boolean
    connect?: AISchedulingConfigWhereUniqueInput
    update?: XOR<XOR<AISchedulingConfigUpdateToOneWithWhereWithoutJobInput, AISchedulingConfigUpdateWithoutJobInput>, AISchedulingConfigUncheckedUpdateWithoutJobInput>
  }

  export type ApplicationFormFieldUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<ApplicationFormFieldCreateWithoutJobInput, ApplicationFormFieldUncheckedCreateWithoutJobInput> | ApplicationFormFieldCreateWithoutJobInput[] | ApplicationFormFieldUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ApplicationFormFieldCreateOrConnectWithoutJobInput | ApplicationFormFieldCreateOrConnectWithoutJobInput[]
    upsert?: ApplicationFormFieldUpsertWithWhereUniqueWithoutJobInput | ApplicationFormFieldUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: ApplicationFormFieldCreateManyJobInputEnvelope
    set?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
    disconnect?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
    delete?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
    connect?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
    update?: ApplicationFormFieldUpdateWithWhereUniqueWithoutJobInput | ApplicationFormFieldUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: ApplicationFormFieldUpdateManyWithWhereWithoutJobInput | ApplicationFormFieldUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: ApplicationFormFieldScalarWhereInput | ApplicationFormFieldScalarWhereInput[]
  }

  export type JobHiringMemberUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobHiringMemberCreateWithoutJobInput, JobHiringMemberUncheckedCreateWithoutJobInput> | JobHiringMemberCreateWithoutJobInput[] | JobHiringMemberUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobHiringMemberCreateOrConnectWithoutJobInput | JobHiringMemberCreateOrConnectWithoutJobInput[]
    upsert?: JobHiringMemberUpsertWithWhereUniqueWithoutJobInput | JobHiringMemberUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobHiringMemberCreateManyJobInputEnvelope
    set?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
    disconnect?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
    delete?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
    connect?: JobHiringMemberWhereUniqueInput | JobHiringMemberWhereUniqueInput[]
    update?: JobHiringMemberUpdateWithWhereUniqueWithoutJobInput | JobHiringMemberUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobHiringMemberUpdateManyWithWhereWithoutJobInput | JobHiringMemberUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobHiringMemberScalarWhereInput | JobHiringMemberScalarWhereInput[]
  }

  export type JobWorkflowUncheckedUpdateOneWithoutJobNestedInput = {
    create?: XOR<JobWorkflowCreateWithoutJobInput, JobWorkflowUncheckedCreateWithoutJobInput>
    connectOrCreate?: JobWorkflowCreateOrConnectWithoutJobInput
    upsert?: JobWorkflowUpsertWithoutJobInput
    disconnect?: JobWorkflowWhereInput | boolean
    delete?: JobWorkflowWhereInput | boolean
    connect?: JobWorkflowWhereUniqueInput
    update?: XOR<XOR<JobWorkflowUpdateToOneWithWhereWithoutJobInput, JobWorkflowUpdateWithoutJobInput>, JobWorkflowUncheckedUpdateWithoutJobInput>
  }

  export type ApplicationUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput> | ApplicationCreateWithoutJobInput[] | ApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobInput | ApplicationCreateOrConnectWithoutJobInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutJobInput | ApplicationUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: ApplicationCreateManyJobInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutJobInput | ApplicationUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutJobInput | ApplicationUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type AIScreeningConfigUncheckedUpdateOneWithoutJobNestedInput = {
    create?: XOR<AIScreeningConfigCreateWithoutJobInput, AIScreeningConfigUncheckedCreateWithoutJobInput>
    connectOrCreate?: AIScreeningConfigCreateOrConnectWithoutJobInput
    upsert?: AIScreeningConfigUpsertWithoutJobInput
    disconnect?: AIScreeningConfigWhereInput | boolean
    delete?: AIScreeningConfigWhereInput | boolean
    connect?: AIScreeningConfigWhereUniqueInput
    update?: XOR<XOR<AIScreeningConfigUpdateToOneWithWhereWithoutJobInput, AIScreeningConfigUpdateWithoutJobInput>, AIScreeningConfigUncheckedUpdateWithoutJobInput>
  }

  export type AISchedulingConfigUncheckedUpdateOneWithoutJobNestedInput = {
    create?: XOR<AISchedulingConfigCreateWithoutJobInput, AISchedulingConfigUncheckedCreateWithoutJobInput>
    connectOrCreate?: AISchedulingConfigCreateOrConnectWithoutJobInput
    upsert?: AISchedulingConfigUpsertWithoutJobInput
    disconnect?: AISchedulingConfigWhereInput | boolean
    delete?: AISchedulingConfigWhereInput | boolean
    connect?: AISchedulingConfigWhereUniqueInput
    update?: XOR<XOR<AISchedulingConfigUpdateToOneWithWhereWithoutJobInput, AISchedulingConfigUpdateWithoutJobInput>, AISchedulingConfigUncheckedUpdateWithoutJobInput>
  }

  export type CompanyCreateNestedOneWithoutDepartmentsInput = {
    create?: XOR<CompanyCreateWithoutDepartmentsInput, CompanyUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutDepartmentsInput
    connect?: CompanyWhereUniqueInput
  }

  export type JobCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<JobCreateWithoutDepartmentInput, JobUncheckedCreateWithoutDepartmentInput> | JobCreateWithoutDepartmentInput[] | JobUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: JobCreateOrConnectWithoutDepartmentInput | JobCreateOrConnectWithoutDepartmentInput[]
    createMany?: JobCreateManyDepartmentInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type JobUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<JobCreateWithoutDepartmentInput, JobUncheckedCreateWithoutDepartmentInput> | JobCreateWithoutDepartmentInput[] | JobUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: JobCreateOrConnectWithoutDepartmentInput | JobCreateOrConnectWithoutDepartmentInput[]
    createMany?: JobCreateManyDepartmentInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type CompanyUpdateOneRequiredWithoutDepartmentsNestedInput = {
    create?: XOR<CompanyCreateWithoutDepartmentsInput, CompanyUncheckedCreateWithoutDepartmentsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutDepartmentsInput
    upsert?: CompanyUpsertWithoutDepartmentsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutDepartmentsInput, CompanyUpdateWithoutDepartmentsInput>, CompanyUncheckedUpdateWithoutDepartmentsInput>
  }

  export type JobUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<JobCreateWithoutDepartmentInput, JobUncheckedCreateWithoutDepartmentInput> | JobCreateWithoutDepartmentInput[] | JobUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: JobCreateOrConnectWithoutDepartmentInput | JobCreateOrConnectWithoutDepartmentInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutDepartmentInput | JobUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: JobCreateManyDepartmentInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutDepartmentInput | JobUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: JobUpdateManyWithWhereWithoutDepartmentInput | JobUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type JobUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<JobCreateWithoutDepartmentInput, JobUncheckedCreateWithoutDepartmentInput> | JobCreateWithoutDepartmentInput[] | JobUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: JobCreateOrConnectWithoutDepartmentInput | JobCreateOrConnectWithoutDepartmentInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutDepartmentInput | JobUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: JobCreateManyDepartmentInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutDepartmentInput | JobUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: JobUpdateManyWithWhereWithoutDepartmentInput | JobUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutLocationsInput = {
    create?: XOR<CompanyCreateWithoutLocationsInput, CompanyUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutLocationsInput
    connect?: CompanyWhereUniqueInput
  }

  export type JobCreateNestedManyWithoutLocationInput = {
    create?: XOR<JobCreateWithoutLocationInput, JobUncheckedCreateWithoutLocationInput> | JobCreateWithoutLocationInput[] | JobUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: JobCreateOrConnectWithoutLocationInput | JobCreateOrConnectWithoutLocationInput[]
    createMany?: JobCreateManyLocationInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type JobUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<JobCreateWithoutLocationInput, JobUncheckedCreateWithoutLocationInput> | JobCreateWithoutLocationInput[] | JobUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: JobCreateOrConnectWithoutLocationInput | JobCreateOrConnectWithoutLocationInput[]
    createMany?: JobCreateManyLocationInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type CompanyUpdateOneRequiredWithoutLocationsNestedInput = {
    create?: XOR<CompanyCreateWithoutLocationsInput, CompanyUncheckedCreateWithoutLocationsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutLocationsInput
    upsert?: CompanyUpsertWithoutLocationsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutLocationsInput, CompanyUpdateWithoutLocationsInput>, CompanyUncheckedUpdateWithoutLocationsInput>
  }

  export type JobUpdateManyWithoutLocationNestedInput = {
    create?: XOR<JobCreateWithoutLocationInput, JobUncheckedCreateWithoutLocationInput> | JobCreateWithoutLocationInput[] | JobUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: JobCreateOrConnectWithoutLocationInput | JobCreateOrConnectWithoutLocationInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutLocationInput | JobUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: JobCreateManyLocationInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutLocationInput | JobUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: JobUpdateManyWithWhereWithoutLocationInput | JobUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type JobUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<JobCreateWithoutLocationInput, JobUncheckedCreateWithoutLocationInput> | JobCreateWithoutLocationInput[] | JobUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: JobCreateOrConnectWithoutLocationInput | JobCreateOrConnectWithoutLocationInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutLocationInput | JobUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: JobCreateManyLocationInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutLocationInput | JobUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: JobUpdateManyWithWhereWithoutLocationInput | JobUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type JobCreateNestedOneWithoutApplicationFormInput = {
    create?: XOR<JobCreateWithoutApplicationFormInput, JobUncheckedCreateWithoutApplicationFormInput>
    connectOrCreate?: JobCreateOrConnectWithoutApplicationFormInput
    connect?: JobWhereUniqueInput
  }

  export type CustomQuestionCreateNestedOneWithoutApplicationFormFieldsInput = {
    create?: XOR<CustomQuestionCreateWithoutApplicationFormFieldsInput, CustomQuestionUncheckedCreateWithoutApplicationFormFieldsInput>
    connectOrCreate?: CustomQuestionCreateOrConnectWithoutApplicationFormFieldsInput
    connect?: CustomQuestionWhereUniqueInput
  }

  export type EnumFieldTypeFieldUpdateOperationsInput = {
    set?: $Enums.FieldType
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JobUpdateOneRequiredWithoutApplicationFormNestedInput = {
    create?: XOR<JobCreateWithoutApplicationFormInput, JobUncheckedCreateWithoutApplicationFormInput>
    connectOrCreate?: JobCreateOrConnectWithoutApplicationFormInput
    upsert?: JobUpsertWithoutApplicationFormInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutApplicationFormInput, JobUpdateWithoutApplicationFormInput>, JobUncheckedUpdateWithoutApplicationFormInput>
  }

  export type CustomQuestionUpdateOneWithoutApplicationFormFieldsNestedInput = {
    create?: XOR<CustomQuestionCreateWithoutApplicationFormFieldsInput, CustomQuestionUncheckedCreateWithoutApplicationFormFieldsInput>
    connectOrCreate?: CustomQuestionCreateOrConnectWithoutApplicationFormFieldsInput
    upsert?: CustomQuestionUpsertWithoutApplicationFormFieldsInput
    disconnect?: CustomQuestionWhereInput | boolean
    delete?: CustomQuestionWhereInput | boolean
    connect?: CustomQuestionWhereUniqueInput
    update?: XOR<XOR<CustomQuestionUpdateToOneWithWhereWithoutApplicationFormFieldsInput, CustomQuestionUpdateWithoutApplicationFormFieldsInput>, CustomQuestionUncheckedUpdateWithoutApplicationFormFieldsInput>
  }

  export type ApplicationFormFieldCreateNestedManyWithoutCustomQuestionInput = {
    create?: XOR<ApplicationFormFieldCreateWithoutCustomQuestionInput, ApplicationFormFieldUncheckedCreateWithoutCustomQuestionInput> | ApplicationFormFieldCreateWithoutCustomQuestionInput[] | ApplicationFormFieldUncheckedCreateWithoutCustomQuestionInput[]
    connectOrCreate?: ApplicationFormFieldCreateOrConnectWithoutCustomQuestionInput | ApplicationFormFieldCreateOrConnectWithoutCustomQuestionInput[]
    createMany?: ApplicationFormFieldCreateManyCustomQuestionInputEnvelope
    connect?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
  }

  export type CandidateAnswerCreateNestedManyWithoutCustomQuestionInput = {
    create?: XOR<CandidateAnswerCreateWithoutCustomQuestionInput, CandidateAnswerUncheckedCreateWithoutCustomQuestionInput> | CandidateAnswerCreateWithoutCustomQuestionInput[] | CandidateAnswerUncheckedCreateWithoutCustomQuestionInput[]
    connectOrCreate?: CandidateAnswerCreateOrConnectWithoutCustomQuestionInput | CandidateAnswerCreateOrConnectWithoutCustomQuestionInput[]
    createMany?: CandidateAnswerCreateManyCustomQuestionInputEnvelope
    connect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
  }

  export type ApplicationFormFieldUncheckedCreateNestedManyWithoutCustomQuestionInput = {
    create?: XOR<ApplicationFormFieldCreateWithoutCustomQuestionInput, ApplicationFormFieldUncheckedCreateWithoutCustomQuestionInput> | ApplicationFormFieldCreateWithoutCustomQuestionInput[] | ApplicationFormFieldUncheckedCreateWithoutCustomQuestionInput[]
    connectOrCreate?: ApplicationFormFieldCreateOrConnectWithoutCustomQuestionInput | ApplicationFormFieldCreateOrConnectWithoutCustomQuestionInput[]
    createMany?: ApplicationFormFieldCreateManyCustomQuestionInputEnvelope
    connect?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
  }

  export type CandidateAnswerUncheckedCreateNestedManyWithoutCustomQuestionInput = {
    create?: XOR<CandidateAnswerCreateWithoutCustomQuestionInput, CandidateAnswerUncheckedCreateWithoutCustomQuestionInput> | CandidateAnswerCreateWithoutCustomQuestionInput[] | CandidateAnswerUncheckedCreateWithoutCustomQuestionInput[]
    connectOrCreate?: CandidateAnswerCreateOrConnectWithoutCustomQuestionInput | CandidateAnswerCreateOrConnectWithoutCustomQuestionInput[]
    createMany?: CandidateAnswerCreateManyCustomQuestionInputEnvelope
    connect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
  }

  export type EnumResponseTypeFieldUpdateOperationsInput = {
    set?: $Enums.ResponseType
  }

  export type EnumResponseVisibilityFieldUpdateOperationsInput = {
    set?: $Enums.ResponseVisibility
  }

  export type ApplicationFormFieldUpdateManyWithoutCustomQuestionNestedInput = {
    create?: XOR<ApplicationFormFieldCreateWithoutCustomQuestionInput, ApplicationFormFieldUncheckedCreateWithoutCustomQuestionInput> | ApplicationFormFieldCreateWithoutCustomQuestionInput[] | ApplicationFormFieldUncheckedCreateWithoutCustomQuestionInput[]
    connectOrCreate?: ApplicationFormFieldCreateOrConnectWithoutCustomQuestionInput | ApplicationFormFieldCreateOrConnectWithoutCustomQuestionInput[]
    upsert?: ApplicationFormFieldUpsertWithWhereUniqueWithoutCustomQuestionInput | ApplicationFormFieldUpsertWithWhereUniqueWithoutCustomQuestionInput[]
    createMany?: ApplicationFormFieldCreateManyCustomQuestionInputEnvelope
    set?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
    disconnect?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
    delete?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
    connect?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
    update?: ApplicationFormFieldUpdateWithWhereUniqueWithoutCustomQuestionInput | ApplicationFormFieldUpdateWithWhereUniqueWithoutCustomQuestionInput[]
    updateMany?: ApplicationFormFieldUpdateManyWithWhereWithoutCustomQuestionInput | ApplicationFormFieldUpdateManyWithWhereWithoutCustomQuestionInput[]
    deleteMany?: ApplicationFormFieldScalarWhereInput | ApplicationFormFieldScalarWhereInput[]
  }

  export type CandidateAnswerUpdateManyWithoutCustomQuestionNestedInput = {
    create?: XOR<CandidateAnswerCreateWithoutCustomQuestionInput, CandidateAnswerUncheckedCreateWithoutCustomQuestionInput> | CandidateAnswerCreateWithoutCustomQuestionInput[] | CandidateAnswerUncheckedCreateWithoutCustomQuestionInput[]
    connectOrCreate?: CandidateAnswerCreateOrConnectWithoutCustomQuestionInput | CandidateAnswerCreateOrConnectWithoutCustomQuestionInput[]
    upsert?: CandidateAnswerUpsertWithWhereUniqueWithoutCustomQuestionInput | CandidateAnswerUpsertWithWhereUniqueWithoutCustomQuestionInput[]
    createMany?: CandidateAnswerCreateManyCustomQuestionInputEnvelope
    set?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    disconnect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    delete?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    connect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    update?: CandidateAnswerUpdateWithWhereUniqueWithoutCustomQuestionInput | CandidateAnswerUpdateWithWhereUniqueWithoutCustomQuestionInput[]
    updateMany?: CandidateAnswerUpdateManyWithWhereWithoutCustomQuestionInput | CandidateAnswerUpdateManyWithWhereWithoutCustomQuestionInput[]
    deleteMany?: CandidateAnswerScalarWhereInput | CandidateAnswerScalarWhereInput[]
  }

  export type ApplicationFormFieldUncheckedUpdateManyWithoutCustomQuestionNestedInput = {
    create?: XOR<ApplicationFormFieldCreateWithoutCustomQuestionInput, ApplicationFormFieldUncheckedCreateWithoutCustomQuestionInput> | ApplicationFormFieldCreateWithoutCustomQuestionInput[] | ApplicationFormFieldUncheckedCreateWithoutCustomQuestionInput[]
    connectOrCreate?: ApplicationFormFieldCreateOrConnectWithoutCustomQuestionInput | ApplicationFormFieldCreateOrConnectWithoutCustomQuestionInput[]
    upsert?: ApplicationFormFieldUpsertWithWhereUniqueWithoutCustomQuestionInput | ApplicationFormFieldUpsertWithWhereUniqueWithoutCustomQuestionInput[]
    createMany?: ApplicationFormFieldCreateManyCustomQuestionInputEnvelope
    set?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
    disconnect?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
    delete?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
    connect?: ApplicationFormFieldWhereUniqueInput | ApplicationFormFieldWhereUniqueInput[]
    update?: ApplicationFormFieldUpdateWithWhereUniqueWithoutCustomQuestionInput | ApplicationFormFieldUpdateWithWhereUniqueWithoutCustomQuestionInput[]
    updateMany?: ApplicationFormFieldUpdateManyWithWhereWithoutCustomQuestionInput | ApplicationFormFieldUpdateManyWithWhereWithoutCustomQuestionInput[]
    deleteMany?: ApplicationFormFieldScalarWhereInput | ApplicationFormFieldScalarWhereInput[]
  }

  export type CandidateAnswerUncheckedUpdateManyWithoutCustomQuestionNestedInput = {
    create?: XOR<CandidateAnswerCreateWithoutCustomQuestionInput, CandidateAnswerUncheckedCreateWithoutCustomQuestionInput> | CandidateAnswerCreateWithoutCustomQuestionInput[] | CandidateAnswerUncheckedCreateWithoutCustomQuestionInput[]
    connectOrCreate?: CandidateAnswerCreateOrConnectWithoutCustomQuestionInput | CandidateAnswerCreateOrConnectWithoutCustomQuestionInput[]
    upsert?: CandidateAnswerUpsertWithWhereUniqueWithoutCustomQuestionInput | CandidateAnswerUpsertWithWhereUniqueWithoutCustomQuestionInput[]
    createMany?: CandidateAnswerCreateManyCustomQuestionInputEnvelope
    set?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    disconnect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    delete?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    connect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    update?: CandidateAnswerUpdateWithWhereUniqueWithoutCustomQuestionInput | CandidateAnswerUpdateWithWhereUniqueWithoutCustomQuestionInput[]
    updateMany?: CandidateAnswerUpdateManyWithWhereWithoutCustomQuestionInput | CandidateAnswerUpdateManyWithWhereWithoutCustomQuestionInput[]
    deleteMany?: CandidateAnswerScalarWhereInput | CandidateAnswerScalarWhereInput[]
  }

  export type ApplicationCreateNestedManyWithoutCandidateInput = {
    create?: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput> | ApplicationCreateWithoutCandidateInput[] | ApplicationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCandidateInput | ApplicationCreateOrConnectWithoutCandidateInput[]
    createMany?: ApplicationCreateManyCandidateInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type CandidateAnswerCreateNestedManyWithoutCandidateInput = {
    create?: XOR<CandidateAnswerCreateWithoutCandidateInput, CandidateAnswerUncheckedCreateWithoutCandidateInput> | CandidateAnswerCreateWithoutCandidateInput[] | CandidateAnswerUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CandidateAnswerCreateOrConnectWithoutCandidateInput | CandidateAnswerCreateOrConnectWithoutCandidateInput[]
    createMany?: CandidateAnswerCreateManyCandidateInputEnvelope
    connect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
  }

  export type ApplicationUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput> | ApplicationCreateWithoutCandidateInput[] | ApplicationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCandidateInput | ApplicationCreateOrConnectWithoutCandidateInput[]
    createMany?: ApplicationCreateManyCandidateInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type CandidateAnswerUncheckedCreateNestedManyWithoutCandidateInput = {
    create?: XOR<CandidateAnswerCreateWithoutCandidateInput, CandidateAnswerUncheckedCreateWithoutCandidateInput> | CandidateAnswerCreateWithoutCandidateInput[] | CandidateAnswerUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CandidateAnswerCreateOrConnectWithoutCandidateInput | CandidateAnswerCreateOrConnectWithoutCandidateInput[]
    createMany?: CandidateAnswerCreateManyCandidateInputEnvelope
    connect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
  }

  export type ApplicationUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput> | ApplicationCreateWithoutCandidateInput[] | ApplicationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCandidateInput | ApplicationCreateOrConnectWithoutCandidateInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutCandidateInput | ApplicationUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: ApplicationCreateManyCandidateInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutCandidateInput | ApplicationUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutCandidateInput | ApplicationUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type CandidateAnswerUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<CandidateAnswerCreateWithoutCandidateInput, CandidateAnswerUncheckedCreateWithoutCandidateInput> | CandidateAnswerCreateWithoutCandidateInput[] | CandidateAnswerUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CandidateAnswerCreateOrConnectWithoutCandidateInput | CandidateAnswerCreateOrConnectWithoutCandidateInput[]
    upsert?: CandidateAnswerUpsertWithWhereUniqueWithoutCandidateInput | CandidateAnswerUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: CandidateAnswerCreateManyCandidateInputEnvelope
    set?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    disconnect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    delete?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    connect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    update?: CandidateAnswerUpdateWithWhereUniqueWithoutCandidateInput | CandidateAnswerUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: CandidateAnswerUpdateManyWithWhereWithoutCandidateInput | CandidateAnswerUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: CandidateAnswerScalarWhereInput | CandidateAnswerScalarWhereInput[]
  }

  export type ApplicationUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput> | ApplicationCreateWithoutCandidateInput[] | ApplicationUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutCandidateInput | ApplicationCreateOrConnectWithoutCandidateInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutCandidateInput | ApplicationUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: ApplicationCreateManyCandidateInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutCandidateInput | ApplicationUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutCandidateInput | ApplicationUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type CandidateAnswerUncheckedUpdateManyWithoutCandidateNestedInput = {
    create?: XOR<CandidateAnswerCreateWithoutCandidateInput, CandidateAnswerUncheckedCreateWithoutCandidateInput> | CandidateAnswerCreateWithoutCandidateInput[] | CandidateAnswerUncheckedCreateWithoutCandidateInput[]
    connectOrCreate?: CandidateAnswerCreateOrConnectWithoutCandidateInput | CandidateAnswerCreateOrConnectWithoutCandidateInput[]
    upsert?: CandidateAnswerUpsertWithWhereUniqueWithoutCandidateInput | CandidateAnswerUpsertWithWhereUniqueWithoutCandidateInput[]
    createMany?: CandidateAnswerCreateManyCandidateInputEnvelope
    set?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    disconnect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    delete?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    connect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    update?: CandidateAnswerUpdateWithWhereUniqueWithoutCandidateInput | CandidateAnswerUpdateWithWhereUniqueWithoutCandidateInput[]
    updateMany?: CandidateAnswerUpdateManyWithWhereWithoutCandidateInput | CandidateAnswerUpdateManyWithWhereWithoutCandidateInput[]
    deleteMany?: CandidateAnswerScalarWhereInput | CandidateAnswerScalarWhereInput[]
  }

  export type JobCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<JobCreateWithoutApplicationsInput, JobUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobCreateOrConnectWithoutApplicationsInput
    connect?: JobWhereUniqueInput
  }

  export type CandidateCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<CandidateCreateWithoutApplicationsInput, CandidateUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutApplicationsInput
    connect?: CandidateWhereUniqueInput
  }

  export type CandidateAnswerCreateNestedManyWithoutApplicationInput = {
    create?: XOR<CandidateAnswerCreateWithoutApplicationInput, CandidateAnswerUncheckedCreateWithoutApplicationInput> | CandidateAnswerCreateWithoutApplicationInput[] | CandidateAnswerUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: CandidateAnswerCreateOrConnectWithoutApplicationInput | CandidateAnswerCreateOrConnectWithoutApplicationInput[]
    createMany?: CandidateAnswerCreateManyApplicationInputEnvelope
    connect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
  }

  export type CandidateRatingCreateNestedManyWithoutApplicationInput = {
    create?: XOR<CandidateRatingCreateWithoutApplicationInput, CandidateRatingUncheckedCreateWithoutApplicationInput> | CandidateRatingCreateWithoutApplicationInput[] | CandidateRatingUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: CandidateRatingCreateOrConnectWithoutApplicationInput | CandidateRatingCreateOrConnectWithoutApplicationInput[]
    createMany?: CandidateRatingCreateManyApplicationInputEnvelope
    connect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
  }

  export type MessageThreadCreateNestedManyWithoutApplicationInput = {
    create?: XOR<MessageThreadCreateWithoutApplicationInput, MessageThreadUncheckedCreateWithoutApplicationInput> | MessageThreadCreateWithoutApplicationInput[] | MessageThreadUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: MessageThreadCreateOrConnectWithoutApplicationInput | MessageThreadCreateOrConnectWithoutApplicationInput[]
    createMany?: MessageThreadCreateManyApplicationInputEnvelope
    connect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
  }

  export type CandidateAnswerUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<CandidateAnswerCreateWithoutApplicationInput, CandidateAnswerUncheckedCreateWithoutApplicationInput> | CandidateAnswerCreateWithoutApplicationInput[] | CandidateAnswerUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: CandidateAnswerCreateOrConnectWithoutApplicationInput | CandidateAnswerCreateOrConnectWithoutApplicationInput[]
    createMany?: CandidateAnswerCreateManyApplicationInputEnvelope
    connect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
  }

  export type CandidateRatingUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<CandidateRatingCreateWithoutApplicationInput, CandidateRatingUncheckedCreateWithoutApplicationInput> | CandidateRatingCreateWithoutApplicationInput[] | CandidateRatingUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: CandidateRatingCreateOrConnectWithoutApplicationInput | CandidateRatingCreateOrConnectWithoutApplicationInput[]
    createMany?: CandidateRatingCreateManyApplicationInputEnvelope
    connect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
  }

  export type MessageThreadUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<MessageThreadCreateWithoutApplicationInput, MessageThreadUncheckedCreateWithoutApplicationInput> | MessageThreadCreateWithoutApplicationInput[] | MessageThreadUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: MessageThreadCreateOrConnectWithoutApplicationInput | MessageThreadCreateOrConnectWithoutApplicationInput[]
    createMany?: MessageThreadCreateManyApplicationInputEnvelope
    connect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
  }

  export type EnumApplicationStatusFieldUpdateOperationsInput = {
    set?: $Enums.ApplicationStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type JobUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<JobCreateWithoutApplicationsInput, JobUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobCreateOrConnectWithoutApplicationsInput
    upsert?: JobUpsertWithoutApplicationsInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutApplicationsInput, JobUpdateWithoutApplicationsInput>, JobUncheckedUpdateWithoutApplicationsInput>
  }

  export type CandidateUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<CandidateCreateWithoutApplicationsInput, CandidateUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutApplicationsInput
    upsert?: CandidateUpsertWithoutApplicationsInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutApplicationsInput, CandidateUpdateWithoutApplicationsInput>, CandidateUncheckedUpdateWithoutApplicationsInput>
  }

  export type CandidateAnswerUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<CandidateAnswerCreateWithoutApplicationInput, CandidateAnswerUncheckedCreateWithoutApplicationInput> | CandidateAnswerCreateWithoutApplicationInput[] | CandidateAnswerUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: CandidateAnswerCreateOrConnectWithoutApplicationInput | CandidateAnswerCreateOrConnectWithoutApplicationInput[]
    upsert?: CandidateAnswerUpsertWithWhereUniqueWithoutApplicationInput | CandidateAnswerUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: CandidateAnswerCreateManyApplicationInputEnvelope
    set?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    disconnect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    delete?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    connect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    update?: CandidateAnswerUpdateWithWhereUniqueWithoutApplicationInput | CandidateAnswerUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: CandidateAnswerUpdateManyWithWhereWithoutApplicationInput | CandidateAnswerUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: CandidateAnswerScalarWhereInput | CandidateAnswerScalarWhereInput[]
  }

  export type CandidateRatingUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<CandidateRatingCreateWithoutApplicationInput, CandidateRatingUncheckedCreateWithoutApplicationInput> | CandidateRatingCreateWithoutApplicationInput[] | CandidateRatingUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: CandidateRatingCreateOrConnectWithoutApplicationInput | CandidateRatingCreateOrConnectWithoutApplicationInput[]
    upsert?: CandidateRatingUpsertWithWhereUniqueWithoutApplicationInput | CandidateRatingUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: CandidateRatingCreateManyApplicationInputEnvelope
    set?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    disconnect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    delete?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    connect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    update?: CandidateRatingUpdateWithWhereUniqueWithoutApplicationInput | CandidateRatingUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: CandidateRatingUpdateManyWithWhereWithoutApplicationInput | CandidateRatingUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: CandidateRatingScalarWhereInput | CandidateRatingScalarWhereInput[]
  }

  export type MessageThreadUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<MessageThreadCreateWithoutApplicationInput, MessageThreadUncheckedCreateWithoutApplicationInput> | MessageThreadCreateWithoutApplicationInput[] | MessageThreadUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: MessageThreadCreateOrConnectWithoutApplicationInput | MessageThreadCreateOrConnectWithoutApplicationInput[]
    upsert?: MessageThreadUpsertWithWhereUniqueWithoutApplicationInput | MessageThreadUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: MessageThreadCreateManyApplicationInputEnvelope
    set?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    disconnect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    delete?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    connect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    update?: MessageThreadUpdateWithWhereUniqueWithoutApplicationInput | MessageThreadUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: MessageThreadUpdateManyWithWhereWithoutApplicationInput | MessageThreadUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: MessageThreadScalarWhereInput | MessageThreadScalarWhereInput[]
  }

  export type CandidateAnswerUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<CandidateAnswerCreateWithoutApplicationInput, CandidateAnswerUncheckedCreateWithoutApplicationInput> | CandidateAnswerCreateWithoutApplicationInput[] | CandidateAnswerUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: CandidateAnswerCreateOrConnectWithoutApplicationInput | CandidateAnswerCreateOrConnectWithoutApplicationInput[]
    upsert?: CandidateAnswerUpsertWithWhereUniqueWithoutApplicationInput | CandidateAnswerUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: CandidateAnswerCreateManyApplicationInputEnvelope
    set?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    disconnect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    delete?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    connect?: CandidateAnswerWhereUniqueInput | CandidateAnswerWhereUniqueInput[]
    update?: CandidateAnswerUpdateWithWhereUniqueWithoutApplicationInput | CandidateAnswerUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: CandidateAnswerUpdateManyWithWhereWithoutApplicationInput | CandidateAnswerUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: CandidateAnswerScalarWhereInput | CandidateAnswerScalarWhereInput[]
  }

  export type CandidateRatingUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<CandidateRatingCreateWithoutApplicationInput, CandidateRatingUncheckedCreateWithoutApplicationInput> | CandidateRatingCreateWithoutApplicationInput[] | CandidateRatingUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: CandidateRatingCreateOrConnectWithoutApplicationInput | CandidateRatingCreateOrConnectWithoutApplicationInput[]
    upsert?: CandidateRatingUpsertWithWhereUniqueWithoutApplicationInput | CandidateRatingUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: CandidateRatingCreateManyApplicationInputEnvelope
    set?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    disconnect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    delete?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    connect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    update?: CandidateRatingUpdateWithWhereUniqueWithoutApplicationInput | CandidateRatingUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: CandidateRatingUpdateManyWithWhereWithoutApplicationInput | CandidateRatingUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: CandidateRatingScalarWhereInput | CandidateRatingScalarWhereInput[]
  }

  export type MessageThreadUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<MessageThreadCreateWithoutApplicationInput, MessageThreadUncheckedCreateWithoutApplicationInput> | MessageThreadCreateWithoutApplicationInput[] | MessageThreadUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: MessageThreadCreateOrConnectWithoutApplicationInput | MessageThreadCreateOrConnectWithoutApplicationInput[]
    upsert?: MessageThreadUpsertWithWhereUniqueWithoutApplicationInput | MessageThreadUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: MessageThreadCreateManyApplicationInputEnvelope
    set?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    disconnect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    delete?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    connect?: MessageThreadWhereUniqueInput | MessageThreadWhereUniqueInput[]
    update?: MessageThreadUpdateWithWhereUniqueWithoutApplicationInput | MessageThreadUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: MessageThreadUpdateManyWithWhereWithoutApplicationInput | MessageThreadUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: MessageThreadScalarWhereInput | MessageThreadScalarWhereInput[]
  }

  export type ApplicationCreateNestedOneWithoutCandidateAnswersInput = {
    create?: XOR<ApplicationCreateWithoutCandidateAnswersInput, ApplicationUncheckedCreateWithoutCandidateAnswersInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutCandidateAnswersInput
    connect?: ApplicationWhereUniqueInput
  }

  export type CustomQuestionCreateNestedOneWithoutCandidateAnswersInput = {
    create?: XOR<CustomQuestionCreateWithoutCandidateAnswersInput, CustomQuestionUncheckedCreateWithoutCandidateAnswersInput>
    connectOrCreate?: CustomQuestionCreateOrConnectWithoutCandidateAnswersInput
    connect?: CustomQuestionWhereUniqueInput
  }

  export type CandidateCreateNestedOneWithoutCandidateAnswersInput = {
    create?: XOR<CandidateCreateWithoutCandidateAnswersInput, CandidateUncheckedCreateWithoutCandidateAnswersInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutCandidateAnswersInput
    connect?: CandidateWhereUniqueInput
  }

  export type ApplicationUpdateOneRequiredWithoutCandidateAnswersNestedInput = {
    create?: XOR<ApplicationCreateWithoutCandidateAnswersInput, ApplicationUncheckedCreateWithoutCandidateAnswersInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutCandidateAnswersInput
    upsert?: ApplicationUpsertWithoutCandidateAnswersInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutCandidateAnswersInput, ApplicationUpdateWithoutCandidateAnswersInput>, ApplicationUncheckedUpdateWithoutCandidateAnswersInput>
  }

  export type CustomQuestionUpdateOneRequiredWithoutCandidateAnswersNestedInput = {
    create?: XOR<CustomQuestionCreateWithoutCandidateAnswersInput, CustomQuestionUncheckedCreateWithoutCandidateAnswersInput>
    connectOrCreate?: CustomQuestionCreateOrConnectWithoutCandidateAnswersInput
    upsert?: CustomQuestionUpsertWithoutCandidateAnswersInput
    connect?: CustomQuestionWhereUniqueInput
    update?: XOR<XOR<CustomQuestionUpdateToOneWithWhereWithoutCandidateAnswersInput, CustomQuestionUpdateWithoutCandidateAnswersInput>, CustomQuestionUncheckedUpdateWithoutCandidateAnswersInput>
  }

  export type CandidateUpdateOneRequiredWithoutCandidateAnswersNestedInput = {
    create?: XOR<CandidateCreateWithoutCandidateAnswersInput, CandidateUncheckedCreateWithoutCandidateAnswersInput>
    connectOrCreate?: CandidateCreateOrConnectWithoutCandidateAnswersInput
    upsert?: CandidateUpsertWithoutCandidateAnswersInput
    connect?: CandidateWhereUniqueInput
    update?: XOR<XOR<CandidateUpdateToOneWithWhereWithoutCandidateAnswersInput, CandidateUpdateWithoutCandidateAnswersInput>, CandidateUncheckedUpdateWithoutCandidateAnswersInput>
  }

  export type CompanyCreateNestedOneWithoutWorkflowTemplatesInput = {
    create?: XOR<CompanyCreateWithoutWorkflowTemplatesInput, CompanyUncheckedCreateWithoutWorkflowTemplatesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutWorkflowTemplatesInput
    connect?: CompanyWhereUniqueInput
  }

  export type WorkflowStageTemplateCreateNestedManyWithoutWorkflowTemplateInput = {
    create?: XOR<WorkflowStageTemplateCreateWithoutWorkflowTemplateInput, WorkflowStageTemplateUncheckedCreateWithoutWorkflowTemplateInput> | WorkflowStageTemplateCreateWithoutWorkflowTemplateInput[] | WorkflowStageTemplateUncheckedCreateWithoutWorkflowTemplateInput[]
    connectOrCreate?: WorkflowStageTemplateCreateOrConnectWithoutWorkflowTemplateInput | WorkflowStageTemplateCreateOrConnectWithoutWorkflowTemplateInput[]
    createMany?: WorkflowStageTemplateCreateManyWorkflowTemplateInputEnvelope
    connect?: WorkflowStageTemplateWhereUniqueInput | WorkflowStageTemplateWhereUniqueInput[]
  }

  export type JobWorkflowCreateNestedManyWithoutWorkflowTemplateInput = {
    create?: XOR<JobWorkflowCreateWithoutWorkflowTemplateInput, JobWorkflowUncheckedCreateWithoutWorkflowTemplateInput> | JobWorkflowCreateWithoutWorkflowTemplateInput[] | JobWorkflowUncheckedCreateWithoutWorkflowTemplateInput[]
    connectOrCreate?: JobWorkflowCreateOrConnectWithoutWorkflowTemplateInput | JobWorkflowCreateOrConnectWithoutWorkflowTemplateInput[]
    createMany?: JobWorkflowCreateManyWorkflowTemplateInputEnvelope
    connect?: JobWorkflowWhereUniqueInput | JobWorkflowWhereUniqueInput[]
  }

  export type WorkflowStageTemplateUncheckedCreateNestedManyWithoutWorkflowTemplateInput = {
    create?: XOR<WorkflowStageTemplateCreateWithoutWorkflowTemplateInput, WorkflowStageTemplateUncheckedCreateWithoutWorkflowTemplateInput> | WorkflowStageTemplateCreateWithoutWorkflowTemplateInput[] | WorkflowStageTemplateUncheckedCreateWithoutWorkflowTemplateInput[]
    connectOrCreate?: WorkflowStageTemplateCreateOrConnectWithoutWorkflowTemplateInput | WorkflowStageTemplateCreateOrConnectWithoutWorkflowTemplateInput[]
    createMany?: WorkflowStageTemplateCreateManyWorkflowTemplateInputEnvelope
    connect?: WorkflowStageTemplateWhereUniqueInput | WorkflowStageTemplateWhereUniqueInput[]
  }

  export type JobWorkflowUncheckedCreateNestedManyWithoutWorkflowTemplateInput = {
    create?: XOR<JobWorkflowCreateWithoutWorkflowTemplateInput, JobWorkflowUncheckedCreateWithoutWorkflowTemplateInput> | JobWorkflowCreateWithoutWorkflowTemplateInput[] | JobWorkflowUncheckedCreateWithoutWorkflowTemplateInput[]
    connectOrCreate?: JobWorkflowCreateOrConnectWithoutWorkflowTemplateInput | JobWorkflowCreateOrConnectWithoutWorkflowTemplateInput[]
    createMany?: JobWorkflowCreateManyWorkflowTemplateInputEnvelope
    connect?: JobWorkflowWhereUniqueInput | JobWorkflowWhereUniqueInput[]
  }

  export type CompanyUpdateOneRequiredWithoutWorkflowTemplatesNestedInput = {
    create?: XOR<CompanyCreateWithoutWorkflowTemplatesInput, CompanyUncheckedCreateWithoutWorkflowTemplatesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutWorkflowTemplatesInput
    upsert?: CompanyUpsertWithoutWorkflowTemplatesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutWorkflowTemplatesInput, CompanyUpdateWithoutWorkflowTemplatesInput>, CompanyUncheckedUpdateWithoutWorkflowTemplatesInput>
  }

  export type WorkflowStageTemplateUpdateManyWithoutWorkflowTemplateNestedInput = {
    create?: XOR<WorkflowStageTemplateCreateWithoutWorkflowTemplateInput, WorkflowStageTemplateUncheckedCreateWithoutWorkflowTemplateInput> | WorkflowStageTemplateCreateWithoutWorkflowTemplateInput[] | WorkflowStageTemplateUncheckedCreateWithoutWorkflowTemplateInput[]
    connectOrCreate?: WorkflowStageTemplateCreateOrConnectWithoutWorkflowTemplateInput | WorkflowStageTemplateCreateOrConnectWithoutWorkflowTemplateInput[]
    upsert?: WorkflowStageTemplateUpsertWithWhereUniqueWithoutWorkflowTemplateInput | WorkflowStageTemplateUpsertWithWhereUniqueWithoutWorkflowTemplateInput[]
    createMany?: WorkflowStageTemplateCreateManyWorkflowTemplateInputEnvelope
    set?: WorkflowStageTemplateWhereUniqueInput | WorkflowStageTemplateWhereUniqueInput[]
    disconnect?: WorkflowStageTemplateWhereUniqueInput | WorkflowStageTemplateWhereUniqueInput[]
    delete?: WorkflowStageTemplateWhereUniqueInput | WorkflowStageTemplateWhereUniqueInput[]
    connect?: WorkflowStageTemplateWhereUniqueInput | WorkflowStageTemplateWhereUniqueInput[]
    update?: WorkflowStageTemplateUpdateWithWhereUniqueWithoutWorkflowTemplateInput | WorkflowStageTemplateUpdateWithWhereUniqueWithoutWorkflowTemplateInput[]
    updateMany?: WorkflowStageTemplateUpdateManyWithWhereWithoutWorkflowTemplateInput | WorkflowStageTemplateUpdateManyWithWhereWithoutWorkflowTemplateInput[]
    deleteMany?: WorkflowStageTemplateScalarWhereInput | WorkflowStageTemplateScalarWhereInput[]
  }

  export type JobWorkflowUpdateManyWithoutWorkflowTemplateNestedInput = {
    create?: XOR<JobWorkflowCreateWithoutWorkflowTemplateInput, JobWorkflowUncheckedCreateWithoutWorkflowTemplateInput> | JobWorkflowCreateWithoutWorkflowTemplateInput[] | JobWorkflowUncheckedCreateWithoutWorkflowTemplateInput[]
    connectOrCreate?: JobWorkflowCreateOrConnectWithoutWorkflowTemplateInput | JobWorkflowCreateOrConnectWithoutWorkflowTemplateInput[]
    upsert?: JobWorkflowUpsertWithWhereUniqueWithoutWorkflowTemplateInput | JobWorkflowUpsertWithWhereUniqueWithoutWorkflowTemplateInput[]
    createMany?: JobWorkflowCreateManyWorkflowTemplateInputEnvelope
    set?: JobWorkflowWhereUniqueInput | JobWorkflowWhereUniqueInput[]
    disconnect?: JobWorkflowWhereUniqueInput | JobWorkflowWhereUniqueInput[]
    delete?: JobWorkflowWhereUniqueInput | JobWorkflowWhereUniqueInput[]
    connect?: JobWorkflowWhereUniqueInput | JobWorkflowWhereUniqueInput[]
    update?: JobWorkflowUpdateWithWhereUniqueWithoutWorkflowTemplateInput | JobWorkflowUpdateWithWhereUniqueWithoutWorkflowTemplateInput[]
    updateMany?: JobWorkflowUpdateManyWithWhereWithoutWorkflowTemplateInput | JobWorkflowUpdateManyWithWhereWithoutWorkflowTemplateInput[]
    deleteMany?: JobWorkflowScalarWhereInput | JobWorkflowScalarWhereInput[]
  }

  export type WorkflowStageTemplateUncheckedUpdateManyWithoutWorkflowTemplateNestedInput = {
    create?: XOR<WorkflowStageTemplateCreateWithoutWorkflowTemplateInput, WorkflowStageTemplateUncheckedCreateWithoutWorkflowTemplateInput> | WorkflowStageTemplateCreateWithoutWorkflowTemplateInput[] | WorkflowStageTemplateUncheckedCreateWithoutWorkflowTemplateInput[]
    connectOrCreate?: WorkflowStageTemplateCreateOrConnectWithoutWorkflowTemplateInput | WorkflowStageTemplateCreateOrConnectWithoutWorkflowTemplateInput[]
    upsert?: WorkflowStageTemplateUpsertWithWhereUniqueWithoutWorkflowTemplateInput | WorkflowStageTemplateUpsertWithWhereUniqueWithoutWorkflowTemplateInput[]
    createMany?: WorkflowStageTemplateCreateManyWorkflowTemplateInputEnvelope
    set?: WorkflowStageTemplateWhereUniqueInput | WorkflowStageTemplateWhereUniqueInput[]
    disconnect?: WorkflowStageTemplateWhereUniqueInput | WorkflowStageTemplateWhereUniqueInput[]
    delete?: WorkflowStageTemplateWhereUniqueInput | WorkflowStageTemplateWhereUniqueInput[]
    connect?: WorkflowStageTemplateWhereUniqueInput | WorkflowStageTemplateWhereUniqueInput[]
    update?: WorkflowStageTemplateUpdateWithWhereUniqueWithoutWorkflowTemplateInput | WorkflowStageTemplateUpdateWithWhereUniqueWithoutWorkflowTemplateInput[]
    updateMany?: WorkflowStageTemplateUpdateManyWithWhereWithoutWorkflowTemplateInput | WorkflowStageTemplateUpdateManyWithWhereWithoutWorkflowTemplateInput[]
    deleteMany?: WorkflowStageTemplateScalarWhereInput | WorkflowStageTemplateScalarWhereInput[]
  }

  export type JobWorkflowUncheckedUpdateManyWithoutWorkflowTemplateNestedInput = {
    create?: XOR<JobWorkflowCreateWithoutWorkflowTemplateInput, JobWorkflowUncheckedCreateWithoutWorkflowTemplateInput> | JobWorkflowCreateWithoutWorkflowTemplateInput[] | JobWorkflowUncheckedCreateWithoutWorkflowTemplateInput[]
    connectOrCreate?: JobWorkflowCreateOrConnectWithoutWorkflowTemplateInput | JobWorkflowCreateOrConnectWithoutWorkflowTemplateInput[]
    upsert?: JobWorkflowUpsertWithWhereUniqueWithoutWorkflowTemplateInput | JobWorkflowUpsertWithWhereUniqueWithoutWorkflowTemplateInput[]
    createMany?: JobWorkflowCreateManyWorkflowTemplateInputEnvelope
    set?: JobWorkflowWhereUniqueInput | JobWorkflowWhereUniqueInput[]
    disconnect?: JobWorkflowWhereUniqueInput | JobWorkflowWhereUniqueInput[]
    delete?: JobWorkflowWhereUniqueInput | JobWorkflowWhereUniqueInput[]
    connect?: JobWorkflowWhereUniqueInput | JobWorkflowWhereUniqueInput[]
    update?: JobWorkflowUpdateWithWhereUniqueWithoutWorkflowTemplateInput | JobWorkflowUpdateWithWhereUniqueWithoutWorkflowTemplateInput[]
    updateMany?: JobWorkflowUpdateManyWithWhereWithoutWorkflowTemplateInput | JobWorkflowUpdateManyWithWhereWithoutWorkflowTemplateInput[]
    deleteMany?: JobWorkflowScalarWhereInput | JobWorkflowScalarWhereInput[]
  }

  export type WorkflowTemplateCreateNestedOneWithoutStagesInput = {
    create?: XOR<WorkflowTemplateCreateWithoutStagesInput, WorkflowTemplateUncheckedCreateWithoutStagesInput>
    connectOrCreate?: WorkflowTemplateCreateOrConnectWithoutStagesInput
    connect?: WorkflowTemplateWhereUniqueInput
  }

  export type EnumStageTypeFieldUpdateOperationsInput = {
    set?: $Enums.StageType
  }

  export type WorkflowTemplateUpdateOneRequiredWithoutStagesNestedInput = {
    create?: XOR<WorkflowTemplateCreateWithoutStagesInput, WorkflowTemplateUncheckedCreateWithoutStagesInput>
    connectOrCreate?: WorkflowTemplateCreateOrConnectWithoutStagesInput
    upsert?: WorkflowTemplateUpsertWithoutStagesInput
    connect?: WorkflowTemplateWhereUniqueInput
    update?: XOR<XOR<WorkflowTemplateUpdateToOneWithWhereWithoutStagesInput, WorkflowTemplateUpdateWithoutStagesInput>, WorkflowTemplateUncheckedUpdateWithoutStagesInput>
  }

  export type JobCreateNestedOneWithoutJobWorkflowInput = {
    create?: XOR<JobCreateWithoutJobWorkflowInput, JobUncheckedCreateWithoutJobWorkflowInput>
    connectOrCreate?: JobCreateOrConnectWithoutJobWorkflowInput
    connect?: JobWhereUniqueInput
  }

  export type WorkflowTemplateCreateNestedOneWithoutJobWorkflowsInput = {
    create?: XOR<WorkflowTemplateCreateWithoutJobWorkflowsInput, WorkflowTemplateUncheckedCreateWithoutJobWorkflowsInput>
    connectOrCreate?: WorkflowTemplateCreateOrConnectWithoutJobWorkflowsInput
    connect?: WorkflowTemplateWhereUniqueInput
  }

  export type JobWorkflowStageCreateNestedManyWithoutJobWorkflowInput = {
    create?: XOR<JobWorkflowStageCreateWithoutJobWorkflowInput, JobWorkflowStageUncheckedCreateWithoutJobWorkflowInput> | JobWorkflowStageCreateWithoutJobWorkflowInput[] | JobWorkflowStageUncheckedCreateWithoutJobWorkflowInput[]
    connectOrCreate?: JobWorkflowStageCreateOrConnectWithoutJobWorkflowInput | JobWorkflowStageCreateOrConnectWithoutJobWorkflowInput[]
    createMany?: JobWorkflowStageCreateManyJobWorkflowInputEnvelope
    connect?: JobWorkflowStageWhereUniqueInput | JobWorkflowStageWhereUniqueInput[]
  }

  export type JobWorkflowStageUncheckedCreateNestedManyWithoutJobWorkflowInput = {
    create?: XOR<JobWorkflowStageCreateWithoutJobWorkflowInput, JobWorkflowStageUncheckedCreateWithoutJobWorkflowInput> | JobWorkflowStageCreateWithoutJobWorkflowInput[] | JobWorkflowStageUncheckedCreateWithoutJobWorkflowInput[]
    connectOrCreate?: JobWorkflowStageCreateOrConnectWithoutJobWorkflowInput | JobWorkflowStageCreateOrConnectWithoutJobWorkflowInput[]
    createMany?: JobWorkflowStageCreateManyJobWorkflowInputEnvelope
    connect?: JobWorkflowStageWhereUniqueInput | JobWorkflowStageWhereUniqueInput[]
  }

  export type JobUpdateOneRequiredWithoutJobWorkflowNestedInput = {
    create?: XOR<JobCreateWithoutJobWorkflowInput, JobUncheckedCreateWithoutJobWorkflowInput>
    connectOrCreate?: JobCreateOrConnectWithoutJobWorkflowInput
    upsert?: JobUpsertWithoutJobWorkflowInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutJobWorkflowInput, JobUpdateWithoutJobWorkflowInput>, JobUncheckedUpdateWithoutJobWorkflowInput>
  }

  export type WorkflowTemplateUpdateOneWithoutJobWorkflowsNestedInput = {
    create?: XOR<WorkflowTemplateCreateWithoutJobWorkflowsInput, WorkflowTemplateUncheckedCreateWithoutJobWorkflowsInput>
    connectOrCreate?: WorkflowTemplateCreateOrConnectWithoutJobWorkflowsInput
    upsert?: WorkflowTemplateUpsertWithoutJobWorkflowsInput
    disconnect?: WorkflowTemplateWhereInput | boolean
    delete?: WorkflowTemplateWhereInput | boolean
    connect?: WorkflowTemplateWhereUniqueInput
    update?: XOR<XOR<WorkflowTemplateUpdateToOneWithWhereWithoutJobWorkflowsInput, WorkflowTemplateUpdateWithoutJobWorkflowsInput>, WorkflowTemplateUncheckedUpdateWithoutJobWorkflowsInput>
  }

  export type JobWorkflowStageUpdateManyWithoutJobWorkflowNestedInput = {
    create?: XOR<JobWorkflowStageCreateWithoutJobWorkflowInput, JobWorkflowStageUncheckedCreateWithoutJobWorkflowInput> | JobWorkflowStageCreateWithoutJobWorkflowInput[] | JobWorkflowStageUncheckedCreateWithoutJobWorkflowInput[]
    connectOrCreate?: JobWorkflowStageCreateOrConnectWithoutJobWorkflowInput | JobWorkflowStageCreateOrConnectWithoutJobWorkflowInput[]
    upsert?: JobWorkflowStageUpsertWithWhereUniqueWithoutJobWorkflowInput | JobWorkflowStageUpsertWithWhereUniqueWithoutJobWorkflowInput[]
    createMany?: JobWorkflowStageCreateManyJobWorkflowInputEnvelope
    set?: JobWorkflowStageWhereUniqueInput | JobWorkflowStageWhereUniqueInput[]
    disconnect?: JobWorkflowStageWhereUniqueInput | JobWorkflowStageWhereUniqueInput[]
    delete?: JobWorkflowStageWhereUniqueInput | JobWorkflowStageWhereUniqueInput[]
    connect?: JobWorkflowStageWhereUniqueInput | JobWorkflowStageWhereUniqueInput[]
    update?: JobWorkflowStageUpdateWithWhereUniqueWithoutJobWorkflowInput | JobWorkflowStageUpdateWithWhereUniqueWithoutJobWorkflowInput[]
    updateMany?: JobWorkflowStageUpdateManyWithWhereWithoutJobWorkflowInput | JobWorkflowStageUpdateManyWithWhereWithoutJobWorkflowInput[]
    deleteMany?: JobWorkflowStageScalarWhereInput | JobWorkflowStageScalarWhereInput[]
  }

  export type JobWorkflowStageUncheckedUpdateManyWithoutJobWorkflowNestedInput = {
    create?: XOR<JobWorkflowStageCreateWithoutJobWorkflowInput, JobWorkflowStageUncheckedCreateWithoutJobWorkflowInput> | JobWorkflowStageCreateWithoutJobWorkflowInput[] | JobWorkflowStageUncheckedCreateWithoutJobWorkflowInput[]
    connectOrCreate?: JobWorkflowStageCreateOrConnectWithoutJobWorkflowInput | JobWorkflowStageCreateOrConnectWithoutJobWorkflowInput[]
    upsert?: JobWorkflowStageUpsertWithWhereUniqueWithoutJobWorkflowInput | JobWorkflowStageUpsertWithWhereUniqueWithoutJobWorkflowInput[]
    createMany?: JobWorkflowStageCreateManyJobWorkflowInputEnvelope
    set?: JobWorkflowStageWhereUniqueInput | JobWorkflowStageWhereUniqueInput[]
    disconnect?: JobWorkflowStageWhereUniqueInput | JobWorkflowStageWhereUniqueInput[]
    delete?: JobWorkflowStageWhereUniqueInput | JobWorkflowStageWhereUniqueInput[]
    connect?: JobWorkflowStageWhereUniqueInput | JobWorkflowStageWhereUniqueInput[]
    update?: JobWorkflowStageUpdateWithWhereUniqueWithoutJobWorkflowInput | JobWorkflowStageUpdateWithWhereUniqueWithoutJobWorkflowInput[]
    updateMany?: JobWorkflowStageUpdateManyWithWhereWithoutJobWorkflowInput | JobWorkflowStageUpdateManyWithWhereWithoutJobWorkflowInput[]
    deleteMany?: JobWorkflowStageScalarWhereInput | JobWorkflowStageScalarWhereInput[]
  }

  export type JobWorkflowCreateNestedOneWithoutStagesInput = {
    create?: XOR<JobWorkflowCreateWithoutStagesInput, JobWorkflowUncheckedCreateWithoutStagesInput>
    connectOrCreate?: JobWorkflowCreateOrConnectWithoutStagesInput
    connect?: JobWorkflowWhereUniqueInput
  }

  export type JobWorkflowUpdateOneRequiredWithoutStagesNestedInput = {
    create?: XOR<JobWorkflowCreateWithoutStagesInput, JobWorkflowUncheckedCreateWithoutStagesInput>
    connectOrCreate?: JobWorkflowCreateOrConnectWithoutStagesInput
    upsert?: JobWorkflowUpsertWithoutStagesInput
    connect?: JobWorkflowWhereUniqueInput
    update?: XOR<XOR<JobWorkflowUpdateToOneWithWhereWithoutStagesInput, JobWorkflowUpdateWithoutStagesInput>, JobWorkflowUncheckedUpdateWithoutStagesInput>
  }

  export type JobCreateNestedOneWithoutHiringTeamInput = {
    create?: XOR<JobCreateWithoutHiringTeamInput, JobUncheckedCreateWithoutHiringTeamInput>
    connectOrCreate?: JobCreateOrConnectWithoutHiringTeamInput
    connect?: JobWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutJobHiringMembersInput = {
    create?: XOR<UserCreateWithoutJobHiringMembersInput, UserUncheckedCreateWithoutJobHiringMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutJobHiringMembersInput
    connect?: UserWhereUniqueInput
  }

  export type JobUpdateOneRequiredWithoutHiringTeamNestedInput = {
    create?: XOR<JobCreateWithoutHiringTeamInput, JobUncheckedCreateWithoutHiringTeamInput>
    connectOrCreate?: JobCreateOrConnectWithoutHiringTeamInput
    upsert?: JobUpsertWithoutHiringTeamInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutHiringTeamInput, JobUpdateWithoutHiringTeamInput>, JobUncheckedUpdateWithoutHiringTeamInput>
  }

  export type UserUpdateOneRequiredWithoutJobHiringMembersNestedInput = {
    create?: XOR<UserCreateWithoutJobHiringMembersInput, UserUncheckedCreateWithoutJobHiringMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutJobHiringMembersInput
    upsert?: UserUpsertWithoutJobHiringMembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutJobHiringMembersInput, UserUpdateWithoutJobHiringMembersInput>, UserUncheckedUpdateWithoutJobHiringMembersInput>
  }

  export type CompanyCreateNestedOneWithoutRatingCardTemplatesInput = {
    create?: XOR<CompanyCreateWithoutRatingCardTemplatesInput, CompanyUncheckedCreateWithoutRatingCardTemplatesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutRatingCardTemplatesInput
    connect?: CompanyWhereUniqueInput
  }

  export type RatingCategoryCreateNestedManyWithoutRatingCardTemplateInput = {
    create?: XOR<RatingCategoryCreateWithoutRatingCardTemplateInput, RatingCategoryUncheckedCreateWithoutRatingCardTemplateInput> | RatingCategoryCreateWithoutRatingCardTemplateInput[] | RatingCategoryUncheckedCreateWithoutRatingCardTemplateInput[]
    connectOrCreate?: RatingCategoryCreateOrConnectWithoutRatingCardTemplateInput | RatingCategoryCreateOrConnectWithoutRatingCardTemplateInput[]
    createMany?: RatingCategoryCreateManyRatingCardTemplateInputEnvelope
    connect?: RatingCategoryWhereUniqueInput | RatingCategoryWhereUniqueInput[]
  }

  export type CandidateRatingCreateNestedManyWithoutRatingCardTemplateInput = {
    create?: XOR<CandidateRatingCreateWithoutRatingCardTemplateInput, CandidateRatingUncheckedCreateWithoutRatingCardTemplateInput> | CandidateRatingCreateWithoutRatingCardTemplateInput[] | CandidateRatingUncheckedCreateWithoutRatingCardTemplateInput[]
    connectOrCreate?: CandidateRatingCreateOrConnectWithoutRatingCardTemplateInput | CandidateRatingCreateOrConnectWithoutRatingCardTemplateInput[]
    createMany?: CandidateRatingCreateManyRatingCardTemplateInputEnvelope
    connect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
  }

  export type RatingCategoryUncheckedCreateNestedManyWithoutRatingCardTemplateInput = {
    create?: XOR<RatingCategoryCreateWithoutRatingCardTemplateInput, RatingCategoryUncheckedCreateWithoutRatingCardTemplateInput> | RatingCategoryCreateWithoutRatingCardTemplateInput[] | RatingCategoryUncheckedCreateWithoutRatingCardTemplateInput[]
    connectOrCreate?: RatingCategoryCreateOrConnectWithoutRatingCardTemplateInput | RatingCategoryCreateOrConnectWithoutRatingCardTemplateInput[]
    createMany?: RatingCategoryCreateManyRatingCardTemplateInputEnvelope
    connect?: RatingCategoryWhereUniqueInput | RatingCategoryWhereUniqueInput[]
  }

  export type CandidateRatingUncheckedCreateNestedManyWithoutRatingCardTemplateInput = {
    create?: XOR<CandidateRatingCreateWithoutRatingCardTemplateInput, CandidateRatingUncheckedCreateWithoutRatingCardTemplateInput> | CandidateRatingCreateWithoutRatingCardTemplateInput[] | CandidateRatingUncheckedCreateWithoutRatingCardTemplateInput[]
    connectOrCreate?: CandidateRatingCreateOrConnectWithoutRatingCardTemplateInput | CandidateRatingCreateOrConnectWithoutRatingCardTemplateInput[]
    createMany?: CandidateRatingCreateManyRatingCardTemplateInputEnvelope
    connect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
  }

  export type EnumRatingCardTypeFieldUpdateOperationsInput = {
    set?: $Enums.RatingCardType
  }

  export type CompanyUpdateOneRequiredWithoutRatingCardTemplatesNestedInput = {
    create?: XOR<CompanyCreateWithoutRatingCardTemplatesInput, CompanyUncheckedCreateWithoutRatingCardTemplatesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutRatingCardTemplatesInput
    upsert?: CompanyUpsertWithoutRatingCardTemplatesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutRatingCardTemplatesInput, CompanyUpdateWithoutRatingCardTemplatesInput>, CompanyUncheckedUpdateWithoutRatingCardTemplatesInput>
  }

  export type RatingCategoryUpdateManyWithoutRatingCardTemplateNestedInput = {
    create?: XOR<RatingCategoryCreateWithoutRatingCardTemplateInput, RatingCategoryUncheckedCreateWithoutRatingCardTemplateInput> | RatingCategoryCreateWithoutRatingCardTemplateInput[] | RatingCategoryUncheckedCreateWithoutRatingCardTemplateInput[]
    connectOrCreate?: RatingCategoryCreateOrConnectWithoutRatingCardTemplateInput | RatingCategoryCreateOrConnectWithoutRatingCardTemplateInput[]
    upsert?: RatingCategoryUpsertWithWhereUniqueWithoutRatingCardTemplateInput | RatingCategoryUpsertWithWhereUniqueWithoutRatingCardTemplateInput[]
    createMany?: RatingCategoryCreateManyRatingCardTemplateInputEnvelope
    set?: RatingCategoryWhereUniqueInput | RatingCategoryWhereUniqueInput[]
    disconnect?: RatingCategoryWhereUniqueInput | RatingCategoryWhereUniqueInput[]
    delete?: RatingCategoryWhereUniqueInput | RatingCategoryWhereUniqueInput[]
    connect?: RatingCategoryWhereUniqueInput | RatingCategoryWhereUniqueInput[]
    update?: RatingCategoryUpdateWithWhereUniqueWithoutRatingCardTemplateInput | RatingCategoryUpdateWithWhereUniqueWithoutRatingCardTemplateInput[]
    updateMany?: RatingCategoryUpdateManyWithWhereWithoutRatingCardTemplateInput | RatingCategoryUpdateManyWithWhereWithoutRatingCardTemplateInput[]
    deleteMany?: RatingCategoryScalarWhereInput | RatingCategoryScalarWhereInput[]
  }

  export type CandidateRatingUpdateManyWithoutRatingCardTemplateNestedInput = {
    create?: XOR<CandidateRatingCreateWithoutRatingCardTemplateInput, CandidateRatingUncheckedCreateWithoutRatingCardTemplateInput> | CandidateRatingCreateWithoutRatingCardTemplateInput[] | CandidateRatingUncheckedCreateWithoutRatingCardTemplateInput[]
    connectOrCreate?: CandidateRatingCreateOrConnectWithoutRatingCardTemplateInput | CandidateRatingCreateOrConnectWithoutRatingCardTemplateInput[]
    upsert?: CandidateRatingUpsertWithWhereUniqueWithoutRatingCardTemplateInput | CandidateRatingUpsertWithWhereUniqueWithoutRatingCardTemplateInput[]
    createMany?: CandidateRatingCreateManyRatingCardTemplateInputEnvelope
    set?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    disconnect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    delete?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    connect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    update?: CandidateRatingUpdateWithWhereUniqueWithoutRatingCardTemplateInput | CandidateRatingUpdateWithWhereUniqueWithoutRatingCardTemplateInput[]
    updateMany?: CandidateRatingUpdateManyWithWhereWithoutRatingCardTemplateInput | CandidateRatingUpdateManyWithWhereWithoutRatingCardTemplateInput[]
    deleteMany?: CandidateRatingScalarWhereInput | CandidateRatingScalarWhereInput[]
  }

  export type RatingCategoryUncheckedUpdateManyWithoutRatingCardTemplateNestedInput = {
    create?: XOR<RatingCategoryCreateWithoutRatingCardTemplateInput, RatingCategoryUncheckedCreateWithoutRatingCardTemplateInput> | RatingCategoryCreateWithoutRatingCardTemplateInput[] | RatingCategoryUncheckedCreateWithoutRatingCardTemplateInput[]
    connectOrCreate?: RatingCategoryCreateOrConnectWithoutRatingCardTemplateInput | RatingCategoryCreateOrConnectWithoutRatingCardTemplateInput[]
    upsert?: RatingCategoryUpsertWithWhereUniqueWithoutRatingCardTemplateInput | RatingCategoryUpsertWithWhereUniqueWithoutRatingCardTemplateInput[]
    createMany?: RatingCategoryCreateManyRatingCardTemplateInputEnvelope
    set?: RatingCategoryWhereUniqueInput | RatingCategoryWhereUniqueInput[]
    disconnect?: RatingCategoryWhereUniqueInput | RatingCategoryWhereUniqueInput[]
    delete?: RatingCategoryWhereUniqueInput | RatingCategoryWhereUniqueInput[]
    connect?: RatingCategoryWhereUniqueInput | RatingCategoryWhereUniqueInput[]
    update?: RatingCategoryUpdateWithWhereUniqueWithoutRatingCardTemplateInput | RatingCategoryUpdateWithWhereUniqueWithoutRatingCardTemplateInput[]
    updateMany?: RatingCategoryUpdateManyWithWhereWithoutRatingCardTemplateInput | RatingCategoryUpdateManyWithWhereWithoutRatingCardTemplateInput[]
    deleteMany?: RatingCategoryScalarWhereInput | RatingCategoryScalarWhereInput[]
  }

  export type CandidateRatingUncheckedUpdateManyWithoutRatingCardTemplateNestedInput = {
    create?: XOR<CandidateRatingCreateWithoutRatingCardTemplateInput, CandidateRatingUncheckedCreateWithoutRatingCardTemplateInput> | CandidateRatingCreateWithoutRatingCardTemplateInput[] | CandidateRatingUncheckedCreateWithoutRatingCardTemplateInput[]
    connectOrCreate?: CandidateRatingCreateOrConnectWithoutRatingCardTemplateInput | CandidateRatingCreateOrConnectWithoutRatingCardTemplateInput[]
    upsert?: CandidateRatingUpsertWithWhereUniqueWithoutRatingCardTemplateInput | CandidateRatingUpsertWithWhereUniqueWithoutRatingCardTemplateInput[]
    createMany?: CandidateRatingCreateManyRatingCardTemplateInputEnvelope
    set?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    disconnect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    delete?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    connect?: CandidateRatingWhereUniqueInput | CandidateRatingWhereUniqueInput[]
    update?: CandidateRatingUpdateWithWhereUniqueWithoutRatingCardTemplateInput | CandidateRatingUpdateWithWhereUniqueWithoutRatingCardTemplateInput[]
    updateMany?: CandidateRatingUpdateManyWithWhereWithoutRatingCardTemplateInput | CandidateRatingUpdateManyWithWhereWithoutRatingCardTemplateInput[]
    deleteMany?: CandidateRatingScalarWhereInput | CandidateRatingScalarWhereInput[]
  }

  export type RatingCardTemplateCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<RatingCardTemplateCreateWithoutCategoriesInput, RatingCardTemplateUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: RatingCardTemplateCreateOrConnectWithoutCategoriesInput
    connect?: RatingCardTemplateWhereUniqueInput
  }

  export type CategoryScoreCreateNestedManyWithoutRatingCategoryInput = {
    create?: XOR<CategoryScoreCreateWithoutRatingCategoryInput, CategoryScoreUncheckedCreateWithoutRatingCategoryInput> | CategoryScoreCreateWithoutRatingCategoryInput[] | CategoryScoreUncheckedCreateWithoutRatingCategoryInput[]
    connectOrCreate?: CategoryScoreCreateOrConnectWithoutRatingCategoryInput | CategoryScoreCreateOrConnectWithoutRatingCategoryInput[]
    createMany?: CategoryScoreCreateManyRatingCategoryInputEnvelope
    connect?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
  }

  export type CategoryScoreUncheckedCreateNestedManyWithoutRatingCategoryInput = {
    create?: XOR<CategoryScoreCreateWithoutRatingCategoryInput, CategoryScoreUncheckedCreateWithoutRatingCategoryInput> | CategoryScoreCreateWithoutRatingCategoryInput[] | CategoryScoreUncheckedCreateWithoutRatingCategoryInput[]
    connectOrCreate?: CategoryScoreCreateOrConnectWithoutRatingCategoryInput | CategoryScoreCreateOrConnectWithoutRatingCategoryInput[]
    createMany?: CategoryScoreCreateManyRatingCategoryInputEnvelope
    connect?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
  }

  export type RatingCardTemplateUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<RatingCardTemplateCreateWithoutCategoriesInput, RatingCardTemplateUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: RatingCardTemplateCreateOrConnectWithoutCategoriesInput
    upsert?: RatingCardTemplateUpsertWithoutCategoriesInput
    connect?: RatingCardTemplateWhereUniqueInput
    update?: XOR<XOR<RatingCardTemplateUpdateToOneWithWhereWithoutCategoriesInput, RatingCardTemplateUpdateWithoutCategoriesInput>, RatingCardTemplateUncheckedUpdateWithoutCategoriesInput>
  }

  export type CategoryScoreUpdateManyWithoutRatingCategoryNestedInput = {
    create?: XOR<CategoryScoreCreateWithoutRatingCategoryInput, CategoryScoreUncheckedCreateWithoutRatingCategoryInput> | CategoryScoreCreateWithoutRatingCategoryInput[] | CategoryScoreUncheckedCreateWithoutRatingCategoryInput[]
    connectOrCreate?: CategoryScoreCreateOrConnectWithoutRatingCategoryInput | CategoryScoreCreateOrConnectWithoutRatingCategoryInput[]
    upsert?: CategoryScoreUpsertWithWhereUniqueWithoutRatingCategoryInput | CategoryScoreUpsertWithWhereUniqueWithoutRatingCategoryInput[]
    createMany?: CategoryScoreCreateManyRatingCategoryInputEnvelope
    set?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
    disconnect?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
    delete?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
    connect?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
    update?: CategoryScoreUpdateWithWhereUniqueWithoutRatingCategoryInput | CategoryScoreUpdateWithWhereUniqueWithoutRatingCategoryInput[]
    updateMany?: CategoryScoreUpdateManyWithWhereWithoutRatingCategoryInput | CategoryScoreUpdateManyWithWhereWithoutRatingCategoryInput[]
    deleteMany?: CategoryScoreScalarWhereInput | CategoryScoreScalarWhereInput[]
  }

  export type CategoryScoreUncheckedUpdateManyWithoutRatingCategoryNestedInput = {
    create?: XOR<CategoryScoreCreateWithoutRatingCategoryInput, CategoryScoreUncheckedCreateWithoutRatingCategoryInput> | CategoryScoreCreateWithoutRatingCategoryInput[] | CategoryScoreUncheckedCreateWithoutRatingCategoryInput[]
    connectOrCreate?: CategoryScoreCreateOrConnectWithoutRatingCategoryInput | CategoryScoreCreateOrConnectWithoutRatingCategoryInput[]
    upsert?: CategoryScoreUpsertWithWhereUniqueWithoutRatingCategoryInput | CategoryScoreUpsertWithWhereUniqueWithoutRatingCategoryInput[]
    createMany?: CategoryScoreCreateManyRatingCategoryInputEnvelope
    set?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
    disconnect?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
    delete?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
    connect?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
    update?: CategoryScoreUpdateWithWhereUniqueWithoutRatingCategoryInput | CategoryScoreUpdateWithWhereUniqueWithoutRatingCategoryInput[]
    updateMany?: CategoryScoreUpdateManyWithWhereWithoutRatingCategoryInput | CategoryScoreUpdateManyWithWhereWithoutRatingCategoryInput[]
    deleteMany?: CategoryScoreScalarWhereInput | CategoryScoreScalarWhereInput[]
  }

  export type ApplicationCreateNestedOneWithoutCandidateRatingsInput = {
    create?: XOR<ApplicationCreateWithoutCandidateRatingsInput, ApplicationUncheckedCreateWithoutCandidateRatingsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutCandidateRatingsInput
    connect?: ApplicationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCandidateRatingsInput = {
    create?: XOR<UserCreateWithoutCandidateRatingsInput, UserUncheckedCreateWithoutCandidateRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCandidateRatingsInput
    connect?: UserWhereUniqueInput
  }

  export type RatingCardTemplateCreateNestedOneWithoutCandidateRatingsInput = {
    create?: XOR<RatingCardTemplateCreateWithoutCandidateRatingsInput, RatingCardTemplateUncheckedCreateWithoutCandidateRatingsInput>
    connectOrCreate?: RatingCardTemplateCreateOrConnectWithoutCandidateRatingsInput
    connect?: RatingCardTemplateWhereUniqueInput
  }

  export type CategoryScoreCreateNestedManyWithoutCandidateRatingInput = {
    create?: XOR<CategoryScoreCreateWithoutCandidateRatingInput, CategoryScoreUncheckedCreateWithoutCandidateRatingInput> | CategoryScoreCreateWithoutCandidateRatingInput[] | CategoryScoreUncheckedCreateWithoutCandidateRatingInput[]
    connectOrCreate?: CategoryScoreCreateOrConnectWithoutCandidateRatingInput | CategoryScoreCreateOrConnectWithoutCandidateRatingInput[]
    createMany?: CategoryScoreCreateManyCandidateRatingInputEnvelope
    connect?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
  }

  export type CategoryScoreUncheckedCreateNestedManyWithoutCandidateRatingInput = {
    create?: XOR<CategoryScoreCreateWithoutCandidateRatingInput, CategoryScoreUncheckedCreateWithoutCandidateRatingInput> | CategoryScoreCreateWithoutCandidateRatingInput[] | CategoryScoreUncheckedCreateWithoutCandidateRatingInput[]
    connectOrCreate?: CategoryScoreCreateOrConnectWithoutCandidateRatingInput | CategoryScoreCreateOrConnectWithoutCandidateRatingInput[]
    createMany?: CategoryScoreCreateManyCandidateRatingInputEnvelope
    connect?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
  }

  export type ApplicationUpdateOneRequiredWithoutCandidateRatingsNestedInput = {
    create?: XOR<ApplicationCreateWithoutCandidateRatingsInput, ApplicationUncheckedCreateWithoutCandidateRatingsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutCandidateRatingsInput
    upsert?: ApplicationUpsertWithoutCandidateRatingsInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutCandidateRatingsInput, ApplicationUpdateWithoutCandidateRatingsInput>, ApplicationUncheckedUpdateWithoutCandidateRatingsInput>
  }

  export type UserUpdateOneRequiredWithoutCandidateRatingsNestedInput = {
    create?: XOR<UserCreateWithoutCandidateRatingsInput, UserUncheckedCreateWithoutCandidateRatingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCandidateRatingsInput
    upsert?: UserUpsertWithoutCandidateRatingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCandidateRatingsInput, UserUpdateWithoutCandidateRatingsInput>, UserUncheckedUpdateWithoutCandidateRatingsInput>
  }

  export type RatingCardTemplateUpdateOneRequiredWithoutCandidateRatingsNestedInput = {
    create?: XOR<RatingCardTemplateCreateWithoutCandidateRatingsInput, RatingCardTemplateUncheckedCreateWithoutCandidateRatingsInput>
    connectOrCreate?: RatingCardTemplateCreateOrConnectWithoutCandidateRatingsInput
    upsert?: RatingCardTemplateUpsertWithoutCandidateRatingsInput
    connect?: RatingCardTemplateWhereUniqueInput
    update?: XOR<XOR<RatingCardTemplateUpdateToOneWithWhereWithoutCandidateRatingsInput, RatingCardTemplateUpdateWithoutCandidateRatingsInput>, RatingCardTemplateUncheckedUpdateWithoutCandidateRatingsInput>
  }

  export type CategoryScoreUpdateManyWithoutCandidateRatingNestedInput = {
    create?: XOR<CategoryScoreCreateWithoutCandidateRatingInput, CategoryScoreUncheckedCreateWithoutCandidateRatingInput> | CategoryScoreCreateWithoutCandidateRatingInput[] | CategoryScoreUncheckedCreateWithoutCandidateRatingInput[]
    connectOrCreate?: CategoryScoreCreateOrConnectWithoutCandidateRatingInput | CategoryScoreCreateOrConnectWithoutCandidateRatingInput[]
    upsert?: CategoryScoreUpsertWithWhereUniqueWithoutCandidateRatingInput | CategoryScoreUpsertWithWhereUniqueWithoutCandidateRatingInput[]
    createMany?: CategoryScoreCreateManyCandidateRatingInputEnvelope
    set?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
    disconnect?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
    delete?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
    connect?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
    update?: CategoryScoreUpdateWithWhereUniqueWithoutCandidateRatingInput | CategoryScoreUpdateWithWhereUniqueWithoutCandidateRatingInput[]
    updateMany?: CategoryScoreUpdateManyWithWhereWithoutCandidateRatingInput | CategoryScoreUpdateManyWithWhereWithoutCandidateRatingInput[]
    deleteMany?: CategoryScoreScalarWhereInput | CategoryScoreScalarWhereInput[]
  }

  export type CategoryScoreUncheckedUpdateManyWithoutCandidateRatingNestedInput = {
    create?: XOR<CategoryScoreCreateWithoutCandidateRatingInput, CategoryScoreUncheckedCreateWithoutCandidateRatingInput> | CategoryScoreCreateWithoutCandidateRatingInput[] | CategoryScoreUncheckedCreateWithoutCandidateRatingInput[]
    connectOrCreate?: CategoryScoreCreateOrConnectWithoutCandidateRatingInput | CategoryScoreCreateOrConnectWithoutCandidateRatingInput[]
    upsert?: CategoryScoreUpsertWithWhereUniqueWithoutCandidateRatingInput | CategoryScoreUpsertWithWhereUniqueWithoutCandidateRatingInput[]
    createMany?: CategoryScoreCreateManyCandidateRatingInputEnvelope
    set?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
    disconnect?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
    delete?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
    connect?: CategoryScoreWhereUniqueInput | CategoryScoreWhereUniqueInput[]
    update?: CategoryScoreUpdateWithWhereUniqueWithoutCandidateRatingInput | CategoryScoreUpdateWithWhereUniqueWithoutCandidateRatingInput[]
    updateMany?: CategoryScoreUpdateManyWithWhereWithoutCandidateRatingInput | CategoryScoreUpdateManyWithWhereWithoutCandidateRatingInput[]
    deleteMany?: CategoryScoreScalarWhereInput | CategoryScoreScalarWhereInput[]
  }

  export type CandidateRatingCreateNestedOneWithoutCategoryScoresInput = {
    create?: XOR<CandidateRatingCreateWithoutCategoryScoresInput, CandidateRatingUncheckedCreateWithoutCategoryScoresInput>
    connectOrCreate?: CandidateRatingCreateOrConnectWithoutCategoryScoresInput
    connect?: CandidateRatingWhereUniqueInput
  }

  export type RatingCategoryCreateNestedOneWithoutCategoryScoresInput = {
    create?: XOR<RatingCategoryCreateWithoutCategoryScoresInput, RatingCategoryUncheckedCreateWithoutCategoryScoresInput>
    connectOrCreate?: RatingCategoryCreateOrConnectWithoutCategoryScoresInput
    connect?: RatingCategoryWhereUniqueInput
  }

  export type CandidateRatingUpdateOneRequiredWithoutCategoryScoresNestedInput = {
    create?: XOR<CandidateRatingCreateWithoutCategoryScoresInput, CandidateRatingUncheckedCreateWithoutCategoryScoresInput>
    connectOrCreate?: CandidateRatingCreateOrConnectWithoutCategoryScoresInput
    upsert?: CandidateRatingUpsertWithoutCategoryScoresInput
    connect?: CandidateRatingWhereUniqueInput
    update?: XOR<XOR<CandidateRatingUpdateToOneWithWhereWithoutCategoryScoresInput, CandidateRatingUpdateWithoutCategoryScoresInput>, CandidateRatingUncheckedUpdateWithoutCategoryScoresInput>
  }

  export type RatingCategoryUpdateOneRequiredWithoutCategoryScoresNestedInput = {
    create?: XOR<RatingCategoryCreateWithoutCategoryScoresInput, RatingCategoryUncheckedCreateWithoutCategoryScoresInput>
    connectOrCreate?: RatingCategoryCreateOrConnectWithoutCategoryScoresInput
    upsert?: RatingCategoryUpsertWithoutCategoryScoresInput
    connect?: RatingCategoryWhereUniqueInput
    update?: XOR<XOR<RatingCategoryUpdateToOneWithWhereWithoutCategoryScoresInput, RatingCategoryUpdateWithoutCategoryScoresInput>, RatingCategoryUncheckedUpdateWithoutCategoryScoresInput>
  }

  export type ApplicationCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ApplicationCreateWithoutMessagesInput, ApplicationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutMessagesInput
    connect?: ApplicationWhereUniqueInput
  }

  export type MessageCreateNestedManyWithoutThreadInput = {
    create?: XOR<MessageCreateWithoutThreadInput, MessageUncheckedCreateWithoutThreadInput> | MessageCreateWithoutThreadInput[] | MessageUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutThreadInput | MessageCreateOrConnectWithoutThreadInput[]
    createMany?: MessageCreateManyThreadInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutThreadInput = {
    create?: XOR<MessageCreateWithoutThreadInput, MessageUncheckedCreateWithoutThreadInput> | MessageCreateWithoutThreadInput[] | MessageUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutThreadInput | MessageCreateOrConnectWithoutThreadInput[]
    createMany?: MessageCreateManyThreadInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type ApplicationUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ApplicationCreateWithoutMessagesInput, ApplicationUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutMessagesInput
    upsert?: ApplicationUpsertWithoutMessagesInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutMessagesInput, ApplicationUpdateWithoutMessagesInput>, ApplicationUncheckedUpdateWithoutMessagesInput>
  }

  export type MessageUpdateManyWithoutThreadNestedInput = {
    create?: XOR<MessageCreateWithoutThreadInput, MessageUncheckedCreateWithoutThreadInput> | MessageCreateWithoutThreadInput[] | MessageUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutThreadInput | MessageCreateOrConnectWithoutThreadInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutThreadInput | MessageUpsertWithWhereUniqueWithoutThreadInput[]
    createMany?: MessageCreateManyThreadInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutThreadInput | MessageUpdateWithWhereUniqueWithoutThreadInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutThreadInput | MessageUpdateManyWithWhereWithoutThreadInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutThreadNestedInput = {
    create?: XOR<MessageCreateWithoutThreadInput, MessageUncheckedCreateWithoutThreadInput> | MessageCreateWithoutThreadInput[] | MessageUncheckedCreateWithoutThreadInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutThreadInput | MessageCreateOrConnectWithoutThreadInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutThreadInput | MessageUpsertWithWhereUniqueWithoutThreadInput[]
    createMany?: MessageCreateManyThreadInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutThreadInput | MessageUpdateWithWhereUniqueWithoutThreadInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutThreadInput | MessageUpdateManyWithWhereWithoutThreadInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageThreadCreateNestedOneWithoutMessagesInput = {
    create?: XOR<MessageThreadCreateWithoutMessagesInput, MessageThreadUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: MessageThreadCreateOrConnectWithoutMessagesInput
    connect?: MessageThreadWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSentMessagesInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type NullableEnumCommentVisibilityFieldUpdateOperationsInput = {
    set?: $Enums.CommentVisibility | null
  }

  export type MessageThreadUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<MessageThreadCreateWithoutMessagesInput, MessageThreadUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: MessageThreadCreateOrConnectWithoutMessagesInput
    upsert?: MessageThreadUpsertWithoutMessagesInput
    connect?: MessageThreadWhereUniqueInput
    update?: XOR<XOR<MessageThreadUpdateToOneWithWhereWithoutMessagesInput, MessageThreadUpdateWithoutMessagesInput>, MessageThreadUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutSentMessagesNestedInput = {
    create?: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSentMessagesInput
    upsert?: UserUpsertWithoutSentMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSentMessagesInput, UserUpdateWithoutSentMessagesInput>, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserCreateNestedOneWithoutMeetingsOwnedInput = {
    create?: XOR<UserCreateWithoutMeetingsOwnedInput, UserUncheckedCreateWithoutMeetingsOwnedInput>
    connectOrCreate?: UserCreateOrConnectWithoutMeetingsOwnedInput
    connect?: UserWhereUniqueInput
  }

  export type MeetingAttendeeCreateNestedManyWithoutMeetingInput = {
    create?: XOR<MeetingAttendeeCreateWithoutMeetingInput, MeetingAttendeeUncheckedCreateWithoutMeetingInput> | MeetingAttendeeCreateWithoutMeetingInput[] | MeetingAttendeeUncheckedCreateWithoutMeetingInput[]
    connectOrCreate?: MeetingAttendeeCreateOrConnectWithoutMeetingInput | MeetingAttendeeCreateOrConnectWithoutMeetingInput[]
    createMany?: MeetingAttendeeCreateManyMeetingInputEnvelope
    connect?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
  }

  export type MeetingTemplateCreateNestedOneWithoutMeetingsInput = {
    create?: XOR<MeetingTemplateCreateWithoutMeetingsInput, MeetingTemplateUncheckedCreateWithoutMeetingsInput>
    connectOrCreate?: MeetingTemplateCreateOrConnectWithoutMeetingsInput
    connect?: MeetingTemplateWhereUniqueInput
  }

  export type AINoteTakingConfigCreateNestedOneWithoutMeetingInput = {
    create?: XOR<AINoteTakingConfigCreateWithoutMeetingInput, AINoteTakingConfigUncheckedCreateWithoutMeetingInput>
    connectOrCreate?: AINoteTakingConfigCreateOrConnectWithoutMeetingInput
    connect?: AINoteTakingConfigWhereUniqueInput
  }

  export type MeetingAttendeeUncheckedCreateNestedManyWithoutMeetingInput = {
    create?: XOR<MeetingAttendeeCreateWithoutMeetingInput, MeetingAttendeeUncheckedCreateWithoutMeetingInput> | MeetingAttendeeCreateWithoutMeetingInput[] | MeetingAttendeeUncheckedCreateWithoutMeetingInput[]
    connectOrCreate?: MeetingAttendeeCreateOrConnectWithoutMeetingInput | MeetingAttendeeCreateOrConnectWithoutMeetingInput[]
    createMany?: MeetingAttendeeCreateManyMeetingInputEnvelope
    connect?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
  }

  export type AINoteTakingConfigUncheckedCreateNestedOneWithoutMeetingInput = {
    create?: XOR<AINoteTakingConfigCreateWithoutMeetingInput, AINoteTakingConfigUncheckedCreateWithoutMeetingInput>
    connectOrCreate?: AINoteTakingConfigCreateOrConnectWithoutMeetingInput
    connect?: AINoteTakingConfigWhereUniqueInput
  }

  export type EnumMeetingTypeFieldUpdateOperationsInput = {
    set?: $Enums.MeetingType
  }

  export type UserUpdateOneRequiredWithoutMeetingsOwnedNestedInput = {
    create?: XOR<UserCreateWithoutMeetingsOwnedInput, UserUncheckedCreateWithoutMeetingsOwnedInput>
    connectOrCreate?: UserCreateOrConnectWithoutMeetingsOwnedInput
    upsert?: UserUpsertWithoutMeetingsOwnedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMeetingsOwnedInput, UserUpdateWithoutMeetingsOwnedInput>, UserUncheckedUpdateWithoutMeetingsOwnedInput>
  }

  export type MeetingAttendeeUpdateManyWithoutMeetingNestedInput = {
    create?: XOR<MeetingAttendeeCreateWithoutMeetingInput, MeetingAttendeeUncheckedCreateWithoutMeetingInput> | MeetingAttendeeCreateWithoutMeetingInput[] | MeetingAttendeeUncheckedCreateWithoutMeetingInput[]
    connectOrCreate?: MeetingAttendeeCreateOrConnectWithoutMeetingInput | MeetingAttendeeCreateOrConnectWithoutMeetingInput[]
    upsert?: MeetingAttendeeUpsertWithWhereUniqueWithoutMeetingInput | MeetingAttendeeUpsertWithWhereUniqueWithoutMeetingInput[]
    createMany?: MeetingAttendeeCreateManyMeetingInputEnvelope
    set?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
    disconnect?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
    delete?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
    connect?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
    update?: MeetingAttendeeUpdateWithWhereUniqueWithoutMeetingInput | MeetingAttendeeUpdateWithWhereUniqueWithoutMeetingInput[]
    updateMany?: MeetingAttendeeUpdateManyWithWhereWithoutMeetingInput | MeetingAttendeeUpdateManyWithWhereWithoutMeetingInput[]
    deleteMany?: MeetingAttendeeScalarWhereInput | MeetingAttendeeScalarWhereInput[]
  }

  export type MeetingTemplateUpdateOneWithoutMeetingsNestedInput = {
    create?: XOR<MeetingTemplateCreateWithoutMeetingsInput, MeetingTemplateUncheckedCreateWithoutMeetingsInput>
    connectOrCreate?: MeetingTemplateCreateOrConnectWithoutMeetingsInput
    upsert?: MeetingTemplateUpsertWithoutMeetingsInput
    disconnect?: MeetingTemplateWhereInput | boolean
    delete?: MeetingTemplateWhereInput | boolean
    connect?: MeetingTemplateWhereUniqueInput
    update?: XOR<XOR<MeetingTemplateUpdateToOneWithWhereWithoutMeetingsInput, MeetingTemplateUpdateWithoutMeetingsInput>, MeetingTemplateUncheckedUpdateWithoutMeetingsInput>
  }

  export type AINoteTakingConfigUpdateOneWithoutMeetingNestedInput = {
    create?: XOR<AINoteTakingConfigCreateWithoutMeetingInput, AINoteTakingConfigUncheckedCreateWithoutMeetingInput>
    connectOrCreate?: AINoteTakingConfigCreateOrConnectWithoutMeetingInput
    upsert?: AINoteTakingConfigUpsertWithoutMeetingInput
    disconnect?: AINoteTakingConfigWhereInput | boolean
    delete?: AINoteTakingConfigWhereInput | boolean
    connect?: AINoteTakingConfigWhereUniqueInput
    update?: XOR<XOR<AINoteTakingConfigUpdateToOneWithWhereWithoutMeetingInput, AINoteTakingConfigUpdateWithoutMeetingInput>, AINoteTakingConfigUncheckedUpdateWithoutMeetingInput>
  }

  export type MeetingAttendeeUncheckedUpdateManyWithoutMeetingNestedInput = {
    create?: XOR<MeetingAttendeeCreateWithoutMeetingInput, MeetingAttendeeUncheckedCreateWithoutMeetingInput> | MeetingAttendeeCreateWithoutMeetingInput[] | MeetingAttendeeUncheckedCreateWithoutMeetingInput[]
    connectOrCreate?: MeetingAttendeeCreateOrConnectWithoutMeetingInput | MeetingAttendeeCreateOrConnectWithoutMeetingInput[]
    upsert?: MeetingAttendeeUpsertWithWhereUniqueWithoutMeetingInput | MeetingAttendeeUpsertWithWhereUniqueWithoutMeetingInput[]
    createMany?: MeetingAttendeeCreateManyMeetingInputEnvelope
    set?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
    disconnect?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
    delete?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
    connect?: MeetingAttendeeWhereUniqueInput | MeetingAttendeeWhereUniqueInput[]
    update?: MeetingAttendeeUpdateWithWhereUniqueWithoutMeetingInput | MeetingAttendeeUpdateWithWhereUniqueWithoutMeetingInput[]
    updateMany?: MeetingAttendeeUpdateManyWithWhereWithoutMeetingInput | MeetingAttendeeUpdateManyWithWhereWithoutMeetingInput[]
    deleteMany?: MeetingAttendeeScalarWhereInput | MeetingAttendeeScalarWhereInput[]
  }

  export type AINoteTakingConfigUncheckedUpdateOneWithoutMeetingNestedInput = {
    create?: XOR<AINoteTakingConfigCreateWithoutMeetingInput, AINoteTakingConfigUncheckedCreateWithoutMeetingInput>
    connectOrCreate?: AINoteTakingConfigCreateOrConnectWithoutMeetingInput
    upsert?: AINoteTakingConfigUpsertWithoutMeetingInput
    disconnect?: AINoteTakingConfigWhereInput | boolean
    delete?: AINoteTakingConfigWhereInput | boolean
    connect?: AINoteTakingConfigWhereUniqueInput
    update?: XOR<XOR<AINoteTakingConfigUpdateToOneWithWhereWithoutMeetingInput, AINoteTakingConfigUpdateWithoutMeetingInput>, AINoteTakingConfigUncheckedUpdateWithoutMeetingInput>
  }

  export type MeetingCreateNestedOneWithoutAttendeesInput = {
    create?: XOR<MeetingCreateWithoutAttendeesInput, MeetingUncheckedCreateWithoutAttendeesInput>
    connectOrCreate?: MeetingCreateOrConnectWithoutAttendeesInput
    connect?: MeetingWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMeetingAttendeesInput = {
    create?: XOR<UserCreateWithoutMeetingAttendeesInput, UserUncheckedCreateWithoutMeetingAttendeesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMeetingAttendeesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAttendeeStatusFieldUpdateOperationsInput = {
    set?: $Enums.AttendeeStatus
  }

  export type MeetingUpdateOneRequiredWithoutAttendeesNestedInput = {
    create?: XOR<MeetingCreateWithoutAttendeesInput, MeetingUncheckedCreateWithoutAttendeesInput>
    connectOrCreate?: MeetingCreateOrConnectWithoutAttendeesInput
    upsert?: MeetingUpsertWithoutAttendeesInput
    connect?: MeetingWhereUniqueInput
    update?: XOR<XOR<MeetingUpdateToOneWithWhereWithoutAttendeesInput, MeetingUpdateWithoutAttendeesInput>, MeetingUncheckedUpdateWithoutAttendeesInput>
  }

  export type UserUpdateOneWithoutMeetingAttendeesNestedInput = {
    create?: XOR<UserCreateWithoutMeetingAttendeesInput, UserUncheckedCreateWithoutMeetingAttendeesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMeetingAttendeesInput
    upsert?: UserUpsertWithoutMeetingAttendeesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMeetingAttendeesInput, UserUpdateWithoutMeetingAttendeesInput>, UserUncheckedUpdateWithoutMeetingAttendeesInput>
  }

  export type MeetingCreateNestedManyWithoutMeetingTemplateInput = {
    create?: XOR<MeetingCreateWithoutMeetingTemplateInput, MeetingUncheckedCreateWithoutMeetingTemplateInput> | MeetingCreateWithoutMeetingTemplateInput[] | MeetingUncheckedCreateWithoutMeetingTemplateInput[]
    connectOrCreate?: MeetingCreateOrConnectWithoutMeetingTemplateInput | MeetingCreateOrConnectWithoutMeetingTemplateInput[]
    createMany?: MeetingCreateManyMeetingTemplateInputEnvelope
    connect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
  }

  export type MeetingUncheckedCreateNestedManyWithoutMeetingTemplateInput = {
    create?: XOR<MeetingCreateWithoutMeetingTemplateInput, MeetingUncheckedCreateWithoutMeetingTemplateInput> | MeetingCreateWithoutMeetingTemplateInput[] | MeetingUncheckedCreateWithoutMeetingTemplateInput[]
    connectOrCreate?: MeetingCreateOrConnectWithoutMeetingTemplateInput | MeetingCreateOrConnectWithoutMeetingTemplateInput[]
    createMany?: MeetingCreateManyMeetingTemplateInputEnvelope
    connect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
  }

  export type MeetingUpdateManyWithoutMeetingTemplateNestedInput = {
    create?: XOR<MeetingCreateWithoutMeetingTemplateInput, MeetingUncheckedCreateWithoutMeetingTemplateInput> | MeetingCreateWithoutMeetingTemplateInput[] | MeetingUncheckedCreateWithoutMeetingTemplateInput[]
    connectOrCreate?: MeetingCreateOrConnectWithoutMeetingTemplateInput | MeetingCreateOrConnectWithoutMeetingTemplateInput[]
    upsert?: MeetingUpsertWithWhereUniqueWithoutMeetingTemplateInput | MeetingUpsertWithWhereUniqueWithoutMeetingTemplateInput[]
    createMany?: MeetingCreateManyMeetingTemplateInputEnvelope
    set?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    disconnect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    delete?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    connect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    update?: MeetingUpdateWithWhereUniqueWithoutMeetingTemplateInput | MeetingUpdateWithWhereUniqueWithoutMeetingTemplateInput[]
    updateMany?: MeetingUpdateManyWithWhereWithoutMeetingTemplateInput | MeetingUpdateManyWithWhereWithoutMeetingTemplateInput[]
    deleteMany?: MeetingScalarWhereInput | MeetingScalarWhereInput[]
  }

  export type MeetingUncheckedUpdateManyWithoutMeetingTemplateNestedInput = {
    create?: XOR<MeetingCreateWithoutMeetingTemplateInput, MeetingUncheckedCreateWithoutMeetingTemplateInput> | MeetingCreateWithoutMeetingTemplateInput[] | MeetingUncheckedCreateWithoutMeetingTemplateInput[]
    connectOrCreate?: MeetingCreateOrConnectWithoutMeetingTemplateInput | MeetingCreateOrConnectWithoutMeetingTemplateInput[]
    upsert?: MeetingUpsertWithWhereUniqueWithoutMeetingTemplateInput | MeetingUpsertWithWhereUniqueWithoutMeetingTemplateInput[]
    createMany?: MeetingCreateManyMeetingTemplateInputEnvelope
    set?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    disconnect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    delete?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    connect?: MeetingWhereUniqueInput | MeetingWhereUniqueInput[]
    update?: MeetingUpdateWithWhereUniqueWithoutMeetingTemplateInput | MeetingUpdateWithWhereUniqueWithoutMeetingTemplateInput[]
    updateMany?: MeetingUpdateManyWithWhereWithoutMeetingTemplateInput | MeetingUpdateManyWithWhereWithoutMeetingTemplateInput[]
    deleteMany?: MeetingScalarWhereInput | MeetingScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutCareersPageSettingsInput = {
    create?: XOR<CompanyCreateWithoutCareersPageSettingsInput, CompanyUncheckedCreateWithoutCareersPageSettingsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCareersPageSettingsInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutCareersPageSettingsNestedInput = {
    create?: XOR<CompanyCreateWithoutCareersPageSettingsInput, CompanyUncheckedCreateWithoutCareersPageSettingsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutCareersPageSettingsInput
    upsert?: CompanyUpsertWithoutCareersPageSettingsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutCareersPageSettingsInput, CompanyUpdateWithoutCareersPageSettingsInput>, CompanyUncheckedUpdateWithoutCareersPageSettingsInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type JobCreateNestedOneWithoutAiScreeningConfigInput = {
    create?: XOR<JobCreateWithoutAiScreeningConfigInput, JobUncheckedCreateWithoutAiScreeningConfigInput>
    connectOrCreate?: JobCreateOrConnectWithoutAiScreeningConfigInput
    connect?: JobWhereUniqueInput
  }

  export type JobUpdateOneRequiredWithoutAiScreeningConfigNestedInput = {
    create?: XOR<JobCreateWithoutAiScreeningConfigInput, JobUncheckedCreateWithoutAiScreeningConfigInput>
    connectOrCreate?: JobCreateOrConnectWithoutAiScreeningConfigInput
    upsert?: JobUpsertWithoutAiScreeningConfigInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutAiScreeningConfigInput, JobUpdateWithoutAiScreeningConfigInput>, JobUncheckedUpdateWithoutAiScreeningConfigInput>
  }

  export type JobCreateNestedOneWithoutAiSchedulingConfigInput = {
    create?: XOR<JobCreateWithoutAiSchedulingConfigInput, JobUncheckedCreateWithoutAiSchedulingConfigInput>
    connectOrCreate?: JobCreateOrConnectWithoutAiSchedulingConfigInput
    connect?: JobWhereUniqueInput
  }

  export type JobUpdateOneRequiredWithoutAiSchedulingConfigNestedInput = {
    create?: XOR<JobCreateWithoutAiSchedulingConfigInput, JobUncheckedCreateWithoutAiSchedulingConfigInput>
    connectOrCreate?: JobCreateOrConnectWithoutAiSchedulingConfigInput
    upsert?: JobUpsertWithoutAiSchedulingConfigInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutAiSchedulingConfigInput, JobUpdateWithoutAiSchedulingConfigInput>, JobUncheckedUpdateWithoutAiSchedulingConfigInput>
  }

  export type MeetingCreateNestedOneWithoutAiNoteTakingConfigInput = {
    create?: XOR<MeetingCreateWithoutAiNoteTakingConfigInput, MeetingUncheckedCreateWithoutAiNoteTakingConfigInput>
    connectOrCreate?: MeetingCreateOrConnectWithoutAiNoteTakingConfigInput
    connect?: MeetingWhereUniqueInput
  }

  export type MeetingUpdateOneRequiredWithoutAiNoteTakingConfigNestedInput = {
    create?: XOR<MeetingCreateWithoutAiNoteTakingConfigInput, MeetingUncheckedCreateWithoutAiNoteTakingConfigInput>
    connectOrCreate?: MeetingCreateOrConnectWithoutAiNoteTakingConfigInput
    upsert?: MeetingUpsertWithoutAiNoteTakingConfigInput
    connect?: MeetingWhereUniqueInput
    update?: XOR<XOR<MeetingUpdateToOneWithWhereWithoutAiNoteTakingConfigInput, MeetingUpdateWithoutAiNoteTakingConfigInput>, MeetingUncheckedUpdateWithoutAiNoteTakingConfigInput>
  }

  export type UserCreateNestedOneWithoutAiInteractionLogsInput = {
    create?: XOR<UserCreateWithoutAiInteractionLogsInput, UserUncheckedCreateWithoutAiInteractionLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAiInteractionLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAiInteractionLogsNestedInput = {
    create?: XOR<UserCreateWithoutAiInteractionLogsInput, UserUncheckedCreateWithoutAiInteractionLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAiInteractionLogsInput
    upsert?: UserUpsertWithoutAiInteractionLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAiInteractionLogsInput, UserUpdateWithoutAiInteractionLogsInput>, UserUncheckedUpdateWithoutAiInteractionLogsInput>
  }

  export type EnumAIToneFieldUpdateOperationsInput = {
    set?: $Enums.AITone
  }

  export type UserCreateNestedOneWithoutCalendarIntegrationsInput = {
    create?: XOR<UserCreateWithoutCalendarIntegrationsInput, UserUncheckedCreateWithoutCalendarIntegrationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCalendarIntegrationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumCalendarProviderFieldUpdateOperationsInput = {
    set?: $Enums.CalendarProvider
  }

  export type UserUpdateOneRequiredWithoutCalendarIntegrationsNestedInput = {
    create?: XOR<UserCreateWithoutCalendarIntegrationsInput, UserUncheckedCreateWithoutCalendarIntegrationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCalendarIntegrationsInput
    upsert?: UserUpsertWithoutCalendarIntegrationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCalendarIntegrationsInput, UserUpdateWithoutCalendarIntegrationsInput>, UserUncheckedUpdateWithoutCalendarIntegrationsInput>
  }

  export type CompanyCreateNestedOneWithoutJobBoardIntegrationsInput = {
    create?: XOR<CompanyCreateWithoutJobBoardIntegrationsInput, CompanyUncheckedCreateWithoutJobBoardIntegrationsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutJobBoardIntegrationsInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutJobBoardIntegrationsNestedInput = {
    create?: XOR<CompanyCreateWithoutJobBoardIntegrationsInput, CompanyUncheckedCreateWithoutJobBoardIntegrationsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutJobBoardIntegrationsInput
    upsert?: CompanyUpsertWithoutJobBoardIntegrationsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutJobBoardIntegrationsInput, CompanyUpdateWithoutJobBoardIntegrationsInput>, CompanyUncheckedUpdateWithoutJobBoardIntegrationsInput>
  }

  export type CompanyCreateNestedOneWithoutMessageTemplatesInput = {
    create?: XOR<CompanyCreateWithoutMessageTemplatesInput, CompanyUncheckedCreateWithoutMessageTemplatesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutMessageTemplatesInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutMessageTemplatesNestedInput = {
    create?: XOR<CompanyCreateWithoutMessageTemplatesInput, CompanyUncheckedCreateWithoutMessageTemplatesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutMessageTemplatesInput
    upsert?: CompanyUpsertWithoutMessageTemplatesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutMessageTemplatesInput, CompanyUpdateWithoutMessageTemplatesInput>, CompanyUncheckedUpdateWithoutMessageTemplatesInput>
  }

  export type CompanyCreateNestedOneWithoutQuestionsInput = {
    create?: XOR<CompanyCreateWithoutQuestionsInput, CompanyUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutQuestionsInput
    connect?: CompanyWhereUniqueInput
  }

  export type QuestionOptionCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput> | QuestionOptionCreateWithoutQuestionInput[] | QuestionOptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutQuestionInput | QuestionOptionCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionOptionCreateManyQuestionInputEnvelope
    connect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
  }

  export type QuestionSetCreateNestedManyWithoutQuestionsInput = {
    create?: XOR<QuestionSetCreateWithoutQuestionsInput, QuestionSetUncheckedCreateWithoutQuestionsInput> | QuestionSetCreateWithoutQuestionsInput[] | QuestionSetUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutQuestionsInput | QuestionSetCreateOrConnectWithoutQuestionsInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput = {
    create?: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput> | QuestionOptionCreateWithoutQuestionInput[] | QuestionOptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutQuestionInput | QuestionOptionCreateOrConnectWithoutQuestionInput[]
    createMany?: QuestionOptionCreateManyQuestionInputEnvelope
    connect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
  }

  export type QuestionSetUncheckedCreateNestedManyWithoutQuestionsInput = {
    create?: XOR<QuestionSetCreateWithoutQuestionsInput, QuestionSetUncheckedCreateWithoutQuestionsInput> | QuestionSetCreateWithoutQuestionsInput[] | QuestionSetUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutQuestionsInput | QuestionSetCreateOrConnectWithoutQuestionsInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
  }

  export type CompanyUpdateOneRequiredWithoutQuestionsNestedInput = {
    create?: XOR<CompanyCreateWithoutQuestionsInput, CompanyUncheckedCreateWithoutQuestionsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutQuestionsInput
    upsert?: CompanyUpsertWithoutQuestionsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutQuestionsInput, CompanyUpdateWithoutQuestionsInput>, CompanyUncheckedUpdateWithoutQuestionsInput>
  }

  export type QuestionOptionUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput> | QuestionOptionCreateWithoutQuestionInput[] | QuestionOptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutQuestionInput | QuestionOptionCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionOptionUpsertWithWhereUniqueWithoutQuestionInput | QuestionOptionUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionOptionCreateManyQuestionInputEnvelope
    set?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    disconnect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    delete?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    connect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    update?: QuestionOptionUpdateWithWhereUniqueWithoutQuestionInput | QuestionOptionUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionOptionUpdateManyWithWhereWithoutQuestionInput | QuestionOptionUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionOptionScalarWhereInput | QuestionOptionScalarWhereInput[]
  }

  export type QuestionSetUpdateManyWithoutQuestionsNestedInput = {
    create?: XOR<QuestionSetCreateWithoutQuestionsInput, QuestionSetUncheckedCreateWithoutQuestionsInput> | QuestionSetCreateWithoutQuestionsInput[] | QuestionSetUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutQuestionsInput | QuestionSetCreateOrConnectWithoutQuestionsInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutQuestionsInput | QuestionSetUpsertWithWhereUniqueWithoutQuestionsInput[]
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutQuestionsInput | QuestionSetUpdateWithWhereUniqueWithoutQuestionsInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutQuestionsInput | QuestionSetUpdateManyWithWhereWithoutQuestionsInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput = {
    create?: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput> | QuestionOptionCreateWithoutQuestionInput[] | QuestionOptionUncheckedCreateWithoutQuestionInput[]
    connectOrCreate?: QuestionOptionCreateOrConnectWithoutQuestionInput | QuestionOptionCreateOrConnectWithoutQuestionInput[]
    upsert?: QuestionOptionUpsertWithWhereUniqueWithoutQuestionInput | QuestionOptionUpsertWithWhereUniqueWithoutQuestionInput[]
    createMany?: QuestionOptionCreateManyQuestionInputEnvelope
    set?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    disconnect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    delete?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    connect?: QuestionOptionWhereUniqueInput | QuestionOptionWhereUniqueInput[]
    update?: QuestionOptionUpdateWithWhereUniqueWithoutQuestionInput | QuestionOptionUpdateWithWhereUniqueWithoutQuestionInput[]
    updateMany?: QuestionOptionUpdateManyWithWhereWithoutQuestionInput | QuestionOptionUpdateManyWithWhereWithoutQuestionInput[]
    deleteMany?: QuestionOptionScalarWhereInput | QuestionOptionScalarWhereInput[]
  }

  export type QuestionSetUncheckedUpdateManyWithoutQuestionsNestedInput = {
    create?: XOR<QuestionSetCreateWithoutQuestionsInput, QuestionSetUncheckedCreateWithoutQuestionsInput> | QuestionSetCreateWithoutQuestionsInput[] | QuestionSetUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: QuestionSetCreateOrConnectWithoutQuestionsInput | QuestionSetCreateOrConnectWithoutQuestionsInput[]
    upsert?: QuestionSetUpsertWithWhereUniqueWithoutQuestionsInput | QuestionSetUpsertWithWhereUniqueWithoutQuestionsInput[]
    set?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    disconnect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    delete?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    connect?: QuestionSetWhereUniqueInput | QuestionSetWhereUniqueInput[]
    update?: QuestionSetUpdateWithWhereUniqueWithoutQuestionsInput | QuestionSetUpdateWithWhereUniqueWithoutQuestionsInput[]
    updateMany?: QuestionSetUpdateManyWithWhereWithoutQuestionsInput | QuestionSetUpdateManyWithWhereWithoutQuestionsInput[]
    deleteMany?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
  }

  export type QuestionCreateNestedOneWithoutOptionsInput = {
    create?: XOR<QuestionCreateWithoutOptionsInput, QuestionUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutOptionsInput
    connect?: QuestionWhereUniqueInput
  }

  export type QuestionUpdateOneRequiredWithoutOptionsNestedInput = {
    create?: XOR<QuestionCreateWithoutOptionsInput, QuestionUncheckedCreateWithoutOptionsInput>
    connectOrCreate?: QuestionCreateOrConnectWithoutOptionsInput
    upsert?: QuestionUpsertWithoutOptionsInput
    connect?: QuestionWhereUniqueInput
    update?: XOR<XOR<QuestionUpdateToOneWithWhereWithoutOptionsInput, QuestionUpdateWithoutOptionsInput>, QuestionUncheckedUpdateWithoutOptionsInput>
  }

  export type CompanyCreateNestedOneWithoutQuestionSetsInput = {
    create?: XOR<CompanyCreateWithoutQuestionSetsInput, CompanyUncheckedCreateWithoutQuestionSetsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutQuestionSetsInput
    connect?: CompanyWhereUniqueInput
  }

  export type QuestionCreateNestedManyWithoutQuestionSetsInput = {
    create?: XOR<QuestionCreateWithoutQuestionSetsInput, QuestionUncheckedCreateWithoutQuestionSetsInput> | QuestionCreateWithoutQuestionSetsInput[] | QuestionUncheckedCreateWithoutQuestionSetsInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuestionSetsInput | QuestionCreateOrConnectWithoutQuestionSetsInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutQuestionSetsInput = {
    create?: XOR<QuestionCreateWithoutQuestionSetsInput, QuestionUncheckedCreateWithoutQuestionSetsInput> | QuestionCreateWithoutQuestionSetsInput[] | QuestionUncheckedCreateWithoutQuestionSetsInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuestionSetsInput | QuestionCreateOrConnectWithoutQuestionSetsInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type CompanyUpdateOneRequiredWithoutQuestionSetsNestedInput = {
    create?: XOR<CompanyCreateWithoutQuestionSetsInput, CompanyUncheckedCreateWithoutQuestionSetsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutQuestionSetsInput
    upsert?: CompanyUpsertWithoutQuestionSetsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutQuestionSetsInput, CompanyUpdateWithoutQuestionSetsInput>, CompanyUncheckedUpdateWithoutQuestionSetsInput>
  }

  export type QuestionUpdateManyWithoutQuestionSetsNestedInput = {
    create?: XOR<QuestionCreateWithoutQuestionSetsInput, QuestionUncheckedCreateWithoutQuestionSetsInput> | QuestionCreateWithoutQuestionSetsInput[] | QuestionUncheckedCreateWithoutQuestionSetsInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuestionSetsInput | QuestionCreateOrConnectWithoutQuestionSetsInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutQuestionSetsInput | QuestionUpsertWithWhereUniqueWithoutQuestionSetsInput[]
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutQuestionSetsInput | QuestionUpdateWithWhereUniqueWithoutQuestionSetsInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutQuestionSetsInput | QuestionUpdateManyWithWhereWithoutQuestionSetsInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutQuestionSetsNestedInput = {
    create?: XOR<QuestionCreateWithoutQuestionSetsInput, QuestionUncheckedCreateWithoutQuestionSetsInput> | QuestionCreateWithoutQuestionSetsInput[] | QuestionUncheckedCreateWithoutQuestionSetsInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutQuestionSetsInput | QuestionCreateOrConnectWithoutQuestionSetsInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutQuestionSetsInput | QuestionUpsertWithWhereUniqueWithoutQuestionSetsInput[]
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutQuestionSetsInput | QuestionUpdateWithWhereUniqueWithoutQuestionSetsInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutQuestionSetsInput | QuestionUpdateManyWithWhereWithoutQuestionSetsInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumCompanyMemberRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyMemberRole | EnumCompanyMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyMemberRole[] | ListEnumCompanyMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyMemberRole[] | ListEnumCompanyMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyMemberRoleFilter<$PrismaModel> | $Enums.CompanyMemberRole
  }

  export type NestedEnumCompanyMemberRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CompanyMemberRole | EnumCompanyMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.CompanyMemberRole[] | ListEnumCompanyMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.CompanyMemberRole[] | ListEnumCompanyMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumCompanyMemberRoleWithAggregatesFilter<$PrismaModel> | $Enums.CompanyMemberRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCompanyMemberRoleFilter<$PrismaModel>
    _max?: NestedEnumCompanyMemberRoleFilter<$PrismaModel>
  }

  export type NestedEnumEmploymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentType | EnumEmploymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentType[] | ListEnumEmploymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmploymentType[] | ListEnumEmploymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEmploymentTypeFilter<$PrismaModel> | $Enums.EmploymentType
  }

  export type NestedEnumWorkTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkType | EnumWorkTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WorkType[] | ListEnumWorkTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkType[] | ListEnumWorkTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkTypeFilter<$PrismaModel> | $Enums.WorkType
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type NestedEnumEmploymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmploymentType | EnumEmploymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.EmploymentType[] | ListEnumEmploymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmploymentType[] | ListEnumEmploymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumEmploymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.EmploymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmploymentTypeFilter<$PrismaModel>
    _max?: NestedEnumEmploymentTypeFilter<$PrismaModel>
  }

  export type NestedEnumWorkTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WorkType | EnumWorkTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WorkType[] | ListEnumWorkTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WorkType[] | ListEnumWorkTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWorkTypeWithAggregatesFilter<$PrismaModel> | $Enums.WorkType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWorkTypeFilter<$PrismaModel>
    _max?: NestedEnumWorkTypeFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumFieldTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFieldTypeFilter<$PrismaModel> | $Enums.FieldType
  }

  export type NestedEnumFieldTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.FieldType | EnumFieldTypeFieldRefInput<$PrismaModel>
    in?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.FieldType[] | ListEnumFieldTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumFieldTypeWithAggregatesFilter<$PrismaModel> | $Enums.FieldType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumFieldTypeFilter<$PrismaModel>
    _max?: NestedEnumFieldTypeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumResponseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ResponseType | EnumResponseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ResponseType[] | ListEnumResponseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResponseType[] | ListEnumResponseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumResponseTypeFilter<$PrismaModel> | $Enums.ResponseType
  }

  export type NestedEnumResponseVisibilityFilter<$PrismaModel = never> = {
    equals?: $Enums.ResponseVisibility | EnumResponseVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.ResponseVisibility[] | ListEnumResponseVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResponseVisibility[] | ListEnumResponseVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumResponseVisibilityFilter<$PrismaModel> | $Enums.ResponseVisibility
  }

  export type NestedEnumResponseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ResponseType | EnumResponseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ResponseType[] | ListEnumResponseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResponseType[] | ListEnumResponseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumResponseTypeWithAggregatesFilter<$PrismaModel> | $Enums.ResponseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumResponseTypeFilter<$PrismaModel>
    _max?: NestedEnumResponseTypeFilter<$PrismaModel>
  }

  export type NestedEnumResponseVisibilityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ResponseVisibility | EnumResponseVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.ResponseVisibility[] | ListEnumResponseVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ResponseVisibility[] | ListEnumResponseVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumResponseVisibilityWithAggregatesFilter<$PrismaModel> | $Enums.ResponseVisibility
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumResponseVisibilityFilter<$PrismaModel>
    _max?: NestedEnumResponseVisibilityFilter<$PrismaModel>
  }

  export type NestedEnumApplicationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusFilter<$PrismaModel> | $Enums.ApplicationStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApplicationStatus[] | ListEnumApplicationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApplicationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApplicationStatusFilter<$PrismaModel>
    _max?: NestedEnumApplicationStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumStageTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.StageType | EnumStageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStageTypeFilter<$PrismaModel> | $Enums.StageType
  }

  export type NestedEnumStageTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StageType | EnumStageTypeFieldRefInput<$PrismaModel>
    in?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StageType[] | ListEnumStageTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumStageTypeWithAggregatesFilter<$PrismaModel> | $Enums.StageType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStageTypeFilter<$PrismaModel>
    _max?: NestedEnumStageTypeFilter<$PrismaModel>
  }

  export type NestedEnumRatingCardTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RatingCardType | EnumRatingCardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RatingCardType[] | ListEnumRatingCardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RatingCardType[] | ListEnumRatingCardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRatingCardTypeFilter<$PrismaModel> | $Enums.RatingCardType
  }

  export type NestedEnumRatingCardTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RatingCardType | EnumRatingCardTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RatingCardType[] | ListEnumRatingCardTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RatingCardType[] | ListEnumRatingCardTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRatingCardTypeWithAggregatesFilter<$PrismaModel> | $Enums.RatingCardType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRatingCardTypeFilter<$PrismaModel>
    _max?: NestedEnumRatingCardTypeFilter<$PrismaModel>
  }

  export type NestedEnumCommentVisibilityNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.CommentVisibility | EnumCommentVisibilityFieldRefInput<$PrismaModel> | null
    in?: $Enums.CommentVisibility[] | ListEnumCommentVisibilityFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CommentVisibility[] | ListEnumCommentVisibilityFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCommentVisibilityNullableFilter<$PrismaModel> | $Enums.CommentVisibility | null
  }

  export type NestedEnumCommentVisibilityNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CommentVisibility | EnumCommentVisibilityFieldRefInput<$PrismaModel> | null
    in?: $Enums.CommentVisibility[] | ListEnumCommentVisibilityFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.CommentVisibility[] | ListEnumCommentVisibilityFieldRefInput<$PrismaModel> | null
    not?: NestedEnumCommentVisibilityNullableWithAggregatesFilter<$PrismaModel> | $Enums.CommentVisibility | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumCommentVisibilityNullableFilter<$PrismaModel>
    _max?: NestedEnumCommentVisibilityNullableFilter<$PrismaModel>
  }

  export type NestedEnumMeetingTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MeetingType | EnumMeetingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MeetingType[] | ListEnumMeetingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MeetingType[] | ListEnumMeetingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMeetingTypeFilter<$PrismaModel> | $Enums.MeetingType
  }

  export type NestedEnumMeetingTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MeetingType | EnumMeetingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MeetingType[] | ListEnumMeetingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MeetingType[] | ListEnumMeetingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMeetingTypeWithAggregatesFilter<$PrismaModel> | $Enums.MeetingType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMeetingTypeFilter<$PrismaModel>
    _max?: NestedEnumMeetingTypeFilter<$PrismaModel>
  }

  export type NestedEnumAttendeeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendeeStatus | EnumAttendeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendeeStatus[] | ListEnumAttendeeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendeeStatus[] | ListEnumAttendeeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendeeStatusFilter<$PrismaModel> | $Enums.AttendeeStatus
  }

  export type NestedEnumAttendeeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendeeStatus | EnumAttendeeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendeeStatus[] | ListEnumAttendeeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendeeStatus[] | ListEnumAttendeeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendeeStatusWithAggregatesFilter<$PrismaModel> | $Enums.AttendeeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttendeeStatusFilter<$PrismaModel>
    _max?: NestedEnumAttendeeStatusFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumAIToneFilter<$PrismaModel = never> = {
    equals?: $Enums.AITone | EnumAIToneFieldRefInput<$PrismaModel>
    in?: $Enums.AITone[] | ListEnumAIToneFieldRefInput<$PrismaModel>
    notIn?: $Enums.AITone[] | ListEnumAIToneFieldRefInput<$PrismaModel>
    not?: NestedEnumAIToneFilter<$PrismaModel> | $Enums.AITone
  }

  export type NestedEnumAIToneWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AITone | EnumAIToneFieldRefInput<$PrismaModel>
    in?: $Enums.AITone[] | ListEnumAIToneFieldRefInput<$PrismaModel>
    notIn?: $Enums.AITone[] | ListEnumAIToneFieldRefInput<$PrismaModel>
    not?: NestedEnumAIToneWithAggregatesFilter<$PrismaModel> | $Enums.AITone
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAIToneFilter<$PrismaModel>
    _max?: NestedEnumAIToneFilter<$PrismaModel>
  }

  export type NestedEnumCalendarProviderFilter<$PrismaModel = never> = {
    equals?: $Enums.CalendarProvider | EnumCalendarProviderFieldRefInput<$PrismaModel>
    in?: $Enums.CalendarProvider[] | ListEnumCalendarProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.CalendarProvider[] | ListEnumCalendarProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumCalendarProviderFilter<$PrismaModel> | $Enums.CalendarProvider
  }

  export type NestedEnumCalendarProviderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CalendarProvider | EnumCalendarProviderFieldRefInput<$PrismaModel>
    in?: $Enums.CalendarProvider[] | ListEnumCalendarProviderFieldRefInput<$PrismaModel>
    notIn?: $Enums.CalendarProvider[] | ListEnumCalendarProviderFieldRefInput<$PrismaModel>
    not?: NestedEnumCalendarProviderWithAggregatesFilter<$PrismaModel> | $Enums.CalendarProvider
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCalendarProviderFilter<$PrismaModel>
    _max?: NestedEnumCalendarProviderFilter<$PrismaModel>
  }

  export type UserProfileCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileCreateOrConnectWithoutUserInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    type: $Enums.NotificationType
    message: string
    link?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.NotificationType
    message: string
    link?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutSenderInput = {
    id?: string
    content: string
    sentAt?: Date | string
    isInternalNote?: boolean
    visibility?: $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
    thread: MessageThreadCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: string
    threadId: string
    content: string
    sentAt?: Date | string
    isInternalNote?: boolean
    visibility?: $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: MessageCreateManySenderInput | MessageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type MeetingCreateWithoutOrganizerInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    type: $Enums.MeetingType
    location?: string | null
    videoCallLink?: string | null
    jobId?: string | null
    applicationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    attendees?: MeetingAttendeeCreateNestedManyWithoutMeetingInput
    meetingTemplate?: MeetingTemplateCreateNestedOneWithoutMeetingsInput
    aiNoteTakingConfig?: AINoteTakingConfigCreateNestedOneWithoutMeetingInput
  }

  export type MeetingUncheckedCreateWithoutOrganizerInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    type: $Enums.MeetingType
    location?: string | null
    videoCallLink?: string | null
    jobId?: string | null
    applicationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meetingTemplateId?: string | null
    attendees?: MeetingAttendeeUncheckedCreateNestedManyWithoutMeetingInput
    aiNoteTakingConfig?: AINoteTakingConfigUncheckedCreateNestedOneWithoutMeetingInput
  }

  export type MeetingCreateOrConnectWithoutOrganizerInput = {
    where: MeetingWhereUniqueInput
    create: XOR<MeetingCreateWithoutOrganizerInput, MeetingUncheckedCreateWithoutOrganizerInput>
  }

  export type MeetingCreateManyOrganizerInputEnvelope = {
    data: MeetingCreateManyOrganizerInput | MeetingCreateManyOrganizerInput[]
    skipDuplicates?: boolean
  }

  export type MeetingAttendeeCreateWithoutUserInput = {
    id?: string
    candidateId?: string | null
    email: string
    name?: string | null
    status?: $Enums.AttendeeStatus
    isCandidate?: boolean
    meeting: MeetingCreateNestedOneWithoutAttendeesInput
  }

  export type MeetingAttendeeUncheckedCreateWithoutUserInput = {
    id?: string
    meetingId: string
    candidateId?: string | null
    email: string
    name?: string | null
    status?: $Enums.AttendeeStatus
    isCandidate?: boolean
  }

  export type MeetingAttendeeCreateOrConnectWithoutUserInput = {
    where: MeetingAttendeeWhereUniqueInput
    create: XOR<MeetingAttendeeCreateWithoutUserInput, MeetingAttendeeUncheckedCreateWithoutUserInput>
  }

  export type MeetingAttendeeCreateManyUserInputEnvelope = {
    data: MeetingAttendeeCreateManyUserInput | MeetingAttendeeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CandidateRatingCreateWithoutRaterInput = {
    id?: string
    jobWorkflowStageId: string
    overallScore: number
    comments?: string | null
    submittedAt?: Date | string
    application: ApplicationCreateNestedOneWithoutCandidateRatingsInput
    ratingCardTemplate: RatingCardTemplateCreateNestedOneWithoutCandidateRatingsInput
    categoryScores?: CategoryScoreCreateNestedManyWithoutCandidateRatingInput
  }

  export type CandidateRatingUncheckedCreateWithoutRaterInput = {
    id?: string
    applicationId: string
    jobWorkflowStageId: string
    ratingCardTemplateId: string
    overallScore: number
    comments?: string | null
    submittedAt?: Date | string
    categoryScores?: CategoryScoreUncheckedCreateNestedManyWithoutCandidateRatingInput
  }

  export type CandidateRatingCreateOrConnectWithoutRaterInput = {
    where: CandidateRatingWhereUniqueInput
    create: XOR<CandidateRatingCreateWithoutRaterInput, CandidateRatingUncheckedCreateWithoutRaterInput>
  }

  export type CandidateRatingCreateManyRaterInputEnvelope = {
    data: CandidateRatingCreateManyRaterInput | CandidateRatingCreateManyRaterInput[]
    skipDuplicates?: boolean
  }

  export type CompanyCreateWithoutOwnerInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
    locations?: JobLocationCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateCreateNestedManyWithoutCompanyInput
    questions?: QuestionCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
    locations?: JobLocationUncheckedCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateUncheckedCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingUncheckedCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateUncheckedCreateNestedManyWithoutCompanyInput
    questions?: QuestionUncheckedCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutOwnerInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput>
  }

  export type CompanyCreateManyOwnerInputEnvelope = {
    data: CompanyCreateManyOwnerInput | CompanyCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type CompanyMemberCreateWithoutUserInput = {
    id?: string
    role: $Enums.CompanyMemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutMembersInput
  }

  export type CompanyMemberUncheckedCreateWithoutUserInput = {
    id?: string
    companyId: string
    role: $Enums.CompanyMemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyMemberCreateOrConnectWithoutUserInput = {
    where: CompanyMemberWhereUniqueInput
    create: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput>
  }

  export type CompanyMemberCreateManyUserInputEnvelope = {
    data: CompanyMemberCreateManyUserInput | CompanyMemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CalendarIntegrationCreateWithoutUserInput = {
    id?: string
    provider: $Enums.CalendarProvider
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    scopes?: string | null
    calendarId?: string | null
    connectedAt?: Date | string
    updatedAt?: Date | string
  }

  export type CalendarIntegrationUncheckedCreateWithoutUserInput = {
    id?: string
    provider: $Enums.CalendarProvider
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    scopes?: string | null
    calendarId?: string | null
    connectedAt?: Date | string
    updatedAt?: Date | string
  }

  export type CalendarIntegrationCreateOrConnectWithoutUserInput = {
    where: CalendarIntegrationWhereUniqueInput
    create: XOR<CalendarIntegrationCreateWithoutUserInput, CalendarIntegrationUncheckedCreateWithoutUserInput>
  }

  export type CalendarIntegrationCreateManyUserInputEnvelope = {
    data: CalendarIntegrationCreateManyUserInput | CalendarIntegrationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AIInteractionLogCreateWithoutUserInput = {
    id?: string
    inputType: string
    input: string
    output?: string | null
    timestamp?: Date | string
  }

  export type AIInteractionLogUncheckedCreateWithoutUserInput = {
    id?: string
    inputType: string
    input: string
    output?: string | null
    timestamp?: Date | string
  }

  export type AIInteractionLogCreateOrConnectWithoutUserInput = {
    where: AIInteractionLogWhereUniqueInput
    create: XOR<AIInteractionLogCreateWithoutUserInput, AIInteractionLogUncheckedCreateWithoutUserInput>
  }

  export type AIInteractionLogCreateManyUserInputEnvelope = {
    data: AIInteractionLogCreateManyUserInput | AIInteractionLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type JobHiringMemberCreateWithoutUserInput = {
    id?: string
    role: $Enums.CompanyMemberRole
    isExternalRecruiter?: boolean
    createdAt?: Date | string
    job: JobCreateNestedOneWithoutHiringTeamInput
  }

  export type JobHiringMemberUncheckedCreateWithoutUserInput = {
    id?: string
    jobId: string
    role: $Enums.CompanyMemberRole
    isExternalRecruiter?: boolean
    createdAt?: Date | string
  }

  export type JobHiringMemberCreateOrConnectWithoutUserInput = {
    where: JobHiringMemberWhereUniqueInput
    create: XOR<JobHiringMemberCreateWithoutUserInput, JobHiringMemberUncheckedCreateWithoutUserInput>
  }

  export type JobHiringMemberCreateManyUserInputEnvelope = {
    data: JobHiringMemberCreateManyUserInput | JobHiringMemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserProfileUpsertWithoutUserInput = {
    update: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    where?: UserProfileWhereInput
  }

  export type UserProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: UserProfileWhereInput
    data: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    message?: StringFilter<"Notification"> | string
    link?: StringNullableFilter<"Notification"> | string | null
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    threadId?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    sentAt?: DateTimeFilter<"Message"> | Date | string
    isInternalNote?: BoolFilter<"Message"> | boolean
    visibility?: EnumCommentVisibilityNullableFilter<"Message"> | $Enums.CommentVisibility | null
    attachments?: JsonNullableFilter<"Message">
  }

  export type MeetingUpsertWithWhereUniqueWithoutOrganizerInput = {
    where: MeetingWhereUniqueInput
    update: XOR<MeetingUpdateWithoutOrganizerInput, MeetingUncheckedUpdateWithoutOrganizerInput>
    create: XOR<MeetingCreateWithoutOrganizerInput, MeetingUncheckedCreateWithoutOrganizerInput>
  }

  export type MeetingUpdateWithWhereUniqueWithoutOrganizerInput = {
    where: MeetingWhereUniqueInput
    data: XOR<MeetingUpdateWithoutOrganizerInput, MeetingUncheckedUpdateWithoutOrganizerInput>
  }

  export type MeetingUpdateManyWithWhereWithoutOrganizerInput = {
    where: MeetingScalarWhereInput
    data: XOR<MeetingUpdateManyMutationInput, MeetingUncheckedUpdateManyWithoutOrganizerInput>
  }

  export type MeetingScalarWhereInput = {
    AND?: MeetingScalarWhereInput | MeetingScalarWhereInput[]
    OR?: MeetingScalarWhereInput[]
    NOT?: MeetingScalarWhereInput | MeetingScalarWhereInput[]
    id?: StringFilter<"Meeting"> | string
    title?: StringFilter<"Meeting"> | string
    description?: StringNullableFilter<"Meeting"> | string | null
    startTime?: DateTimeFilter<"Meeting"> | Date | string
    endTime?: DateTimeFilter<"Meeting"> | Date | string
    type?: EnumMeetingTypeFilter<"Meeting"> | $Enums.MeetingType
    location?: StringNullableFilter<"Meeting"> | string | null
    videoCallLink?: StringNullableFilter<"Meeting"> | string | null
    jobId?: StringNullableFilter<"Meeting"> | string | null
    applicationId?: StringNullableFilter<"Meeting"> | string | null
    organizerId?: StringFilter<"Meeting"> | string
    createdAt?: DateTimeFilter<"Meeting"> | Date | string
    updatedAt?: DateTimeFilter<"Meeting"> | Date | string
    meetingTemplateId?: StringNullableFilter<"Meeting"> | string | null
  }

  export type MeetingAttendeeUpsertWithWhereUniqueWithoutUserInput = {
    where: MeetingAttendeeWhereUniqueInput
    update: XOR<MeetingAttendeeUpdateWithoutUserInput, MeetingAttendeeUncheckedUpdateWithoutUserInput>
    create: XOR<MeetingAttendeeCreateWithoutUserInput, MeetingAttendeeUncheckedCreateWithoutUserInput>
  }

  export type MeetingAttendeeUpdateWithWhereUniqueWithoutUserInput = {
    where: MeetingAttendeeWhereUniqueInput
    data: XOR<MeetingAttendeeUpdateWithoutUserInput, MeetingAttendeeUncheckedUpdateWithoutUserInput>
  }

  export type MeetingAttendeeUpdateManyWithWhereWithoutUserInput = {
    where: MeetingAttendeeScalarWhereInput
    data: XOR<MeetingAttendeeUpdateManyMutationInput, MeetingAttendeeUncheckedUpdateManyWithoutUserInput>
  }

  export type MeetingAttendeeScalarWhereInput = {
    AND?: MeetingAttendeeScalarWhereInput | MeetingAttendeeScalarWhereInput[]
    OR?: MeetingAttendeeScalarWhereInput[]
    NOT?: MeetingAttendeeScalarWhereInput | MeetingAttendeeScalarWhereInput[]
    id?: StringFilter<"MeetingAttendee"> | string
    meetingId?: StringFilter<"MeetingAttendee"> | string
    userId?: StringNullableFilter<"MeetingAttendee"> | string | null
    candidateId?: StringNullableFilter<"MeetingAttendee"> | string | null
    email?: StringFilter<"MeetingAttendee"> | string
    name?: StringNullableFilter<"MeetingAttendee"> | string | null
    status?: EnumAttendeeStatusFilter<"MeetingAttendee"> | $Enums.AttendeeStatus
    isCandidate?: BoolFilter<"MeetingAttendee"> | boolean
  }

  export type CandidateRatingUpsertWithWhereUniqueWithoutRaterInput = {
    where: CandidateRatingWhereUniqueInput
    update: XOR<CandidateRatingUpdateWithoutRaterInput, CandidateRatingUncheckedUpdateWithoutRaterInput>
    create: XOR<CandidateRatingCreateWithoutRaterInput, CandidateRatingUncheckedCreateWithoutRaterInput>
  }

  export type CandidateRatingUpdateWithWhereUniqueWithoutRaterInput = {
    where: CandidateRatingWhereUniqueInput
    data: XOR<CandidateRatingUpdateWithoutRaterInput, CandidateRatingUncheckedUpdateWithoutRaterInput>
  }

  export type CandidateRatingUpdateManyWithWhereWithoutRaterInput = {
    where: CandidateRatingScalarWhereInput
    data: XOR<CandidateRatingUpdateManyMutationInput, CandidateRatingUncheckedUpdateManyWithoutRaterInput>
  }

  export type CandidateRatingScalarWhereInput = {
    AND?: CandidateRatingScalarWhereInput | CandidateRatingScalarWhereInput[]
    OR?: CandidateRatingScalarWhereInput[]
    NOT?: CandidateRatingScalarWhereInput | CandidateRatingScalarWhereInput[]
    id?: StringFilter<"CandidateRating"> | string
    applicationId?: StringFilter<"CandidateRating"> | string
    jobWorkflowStageId?: StringFilter<"CandidateRating"> | string
    raterId?: StringFilter<"CandidateRating"> | string
    ratingCardTemplateId?: StringFilter<"CandidateRating"> | string
    overallScore?: IntFilter<"CandidateRating"> | number
    comments?: StringNullableFilter<"CandidateRating"> | string | null
    submittedAt?: DateTimeFilter<"CandidateRating"> | Date | string
  }

  export type CompanyUpsertWithWhereUniqueWithoutOwnerInput = {
    where: CompanyWhereUniqueInput
    update: XOR<CompanyUpdateWithoutOwnerInput, CompanyUncheckedUpdateWithoutOwnerInput>
    create: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput>
  }

  export type CompanyUpdateWithWhereUniqueWithoutOwnerInput = {
    where: CompanyWhereUniqueInput
    data: XOR<CompanyUpdateWithoutOwnerInput, CompanyUncheckedUpdateWithoutOwnerInput>
  }

  export type CompanyUpdateManyWithWhereWithoutOwnerInput = {
    where: CompanyScalarWhereInput
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyWithoutOwnerInput>
  }

  export type CompanyScalarWhereInput = {
    AND?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    OR?: CompanyScalarWhereInput[]
    NOT?: CompanyScalarWhereInput | CompanyScalarWhereInput[]
    id?: StringFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    website?: StringNullableFilter<"Company"> | string | null
    phoneNumber?: StringNullableFilter<"Company"> | string | null
    description?: StringNullableFilter<"Company"> | string | null
    ownerId?: StringFilter<"Company"> | string
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
  }

  export type CompanyMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: CompanyMemberWhereUniqueInput
    update: XOR<CompanyMemberUpdateWithoutUserInput, CompanyMemberUncheckedUpdateWithoutUserInput>
    create: XOR<CompanyMemberCreateWithoutUserInput, CompanyMemberUncheckedCreateWithoutUserInput>
  }

  export type CompanyMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: CompanyMemberWhereUniqueInput
    data: XOR<CompanyMemberUpdateWithoutUserInput, CompanyMemberUncheckedUpdateWithoutUserInput>
  }

  export type CompanyMemberUpdateManyWithWhereWithoutUserInput = {
    where: CompanyMemberScalarWhereInput
    data: XOR<CompanyMemberUpdateManyMutationInput, CompanyMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type CompanyMemberScalarWhereInput = {
    AND?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
    OR?: CompanyMemberScalarWhereInput[]
    NOT?: CompanyMemberScalarWhereInput | CompanyMemberScalarWhereInput[]
    id?: StringFilter<"CompanyMember"> | string
    companyId?: StringFilter<"CompanyMember"> | string
    userId?: StringFilter<"CompanyMember"> | string
    role?: EnumCompanyMemberRoleFilter<"CompanyMember"> | $Enums.CompanyMemberRole
    createdAt?: DateTimeFilter<"CompanyMember"> | Date | string
    updatedAt?: DateTimeFilter<"CompanyMember"> | Date | string
  }

  export type CalendarIntegrationUpsertWithWhereUniqueWithoutUserInput = {
    where: CalendarIntegrationWhereUniqueInput
    update: XOR<CalendarIntegrationUpdateWithoutUserInput, CalendarIntegrationUncheckedUpdateWithoutUserInput>
    create: XOR<CalendarIntegrationCreateWithoutUserInput, CalendarIntegrationUncheckedCreateWithoutUserInput>
  }

  export type CalendarIntegrationUpdateWithWhereUniqueWithoutUserInput = {
    where: CalendarIntegrationWhereUniqueInput
    data: XOR<CalendarIntegrationUpdateWithoutUserInput, CalendarIntegrationUncheckedUpdateWithoutUserInput>
  }

  export type CalendarIntegrationUpdateManyWithWhereWithoutUserInput = {
    where: CalendarIntegrationScalarWhereInput
    data: XOR<CalendarIntegrationUpdateManyMutationInput, CalendarIntegrationUncheckedUpdateManyWithoutUserInput>
  }

  export type CalendarIntegrationScalarWhereInput = {
    AND?: CalendarIntegrationScalarWhereInput | CalendarIntegrationScalarWhereInput[]
    OR?: CalendarIntegrationScalarWhereInput[]
    NOT?: CalendarIntegrationScalarWhereInput | CalendarIntegrationScalarWhereInput[]
    id?: StringFilter<"CalendarIntegration"> | string
    userId?: StringFilter<"CalendarIntegration"> | string
    provider?: EnumCalendarProviderFilter<"CalendarIntegration"> | $Enums.CalendarProvider
    accessToken?: StringFilter<"CalendarIntegration"> | string
    refreshToken?: StringNullableFilter<"CalendarIntegration"> | string | null
    expiresAt?: DateTimeNullableFilter<"CalendarIntegration"> | Date | string | null
    scopes?: StringNullableFilter<"CalendarIntegration"> | string | null
    calendarId?: StringNullableFilter<"CalendarIntegration"> | string | null
    connectedAt?: DateTimeFilter<"CalendarIntegration"> | Date | string
    updatedAt?: DateTimeFilter<"CalendarIntegration"> | Date | string
  }

  export type AIInteractionLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AIInteractionLogWhereUniqueInput
    update: XOR<AIInteractionLogUpdateWithoutUserInput, AIInteractionLogUncheckedUpdateWithoutUserInput>
    create: XOR<AIInteractionLogCreateWithoutUserInput, AIInteractionLogUncheckedCreateWithoutUserInput>
  }

  export type AIInteractionLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AIInteractionLogWhereUniqueInput
    data: XOR<AIInteractionLogUpdateWithoutUserInput, AIInteractionLogUncheckedUpdateWithoutUserInput>
  }

  export type AIInteractionLogUpdateManyWithWhereWithoutUserInput = {
    where: AIInteractionLogScalarWhereInput
    data: XOR<AIInteractionLogUpdateManyMutationInput, AIInteractionLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AIInteractionLogScalarWhereInput = {
    AND?: AIInteractionLogScalarWhereInput | AIInteractionLogScalarWhereInput[]
    OR?: AIInteractionLogScalarWhereInput[]
    NOT?: AIInteractionLogScalarWhereInput | AIInteractionLogScalarWhereInput[]
    id?: StringFilter<"AIInteractionLog"> | string
    userId?: StringNullableFilter<"AIInteractionLog"> | string | null
    inputType?: StringFilter<"AIInteractionLog"> | string
    input?: StringFilter<"AIInteractionLog"> | string
    output?: StringNullableFilter<"AIInteractionLog"> | string | null
    timestamp?: DateTimeFilter<"AIInteractionLog"> | Date | string
  }

  export type JobHiringMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: JobHiringMemberWhereUniqueInput
    update: XOR<JobHiringMemberUpdateWithoutUserInput, JobHiringMemberUncheckedUpdateWithoutUserInput>
    create: XOR<JobHiringMemberCreateWithoutUserInput, JobHiringMemberUncheckedCreateWithoutUserInput>
  }

  export type JobHiringMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: JobHiringMemberWhereUniqueInput
    data: XOR<JobHiringMemberUpdateWithoutUserInput, JobHiringMemberUncheckedUpdateWithoutUserInput>
  }

  export type JobHiringMemberUpdateManyWithWhereWithoutUserInput = {
    where: JobHiringMemberScalarWhereInput
    data: XOR<JobHiringMemberUpdateManyMutationInput, JobHiringMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type JobHiringMemberScalarWhereInput = {
    AND?: JobHiringMemberScalarWhereInput | JobHiringMemberScalarWhereInput[]
    OR?: JobHiringMemberScalarWhereInput[]
    NOT?: JobHiringMemberScalarWhereInput | JobHiringMemberScalarWhereInput[]
    id?: StringFilter<"JobHiringMember"> | string
    jobId?: StringFilter<"JobHiringMember"> | string
    userId?: StringFilter<"JobHiringMember"> | string
    role?: EnumCompanyMemberRoleFilter<"JobHiringMember"> | $Enums.CompanyMemberRole
    isExternalRecruiter?: BoolFilter<"JobHiringMember"> | boolean
    createdAt?: DateTimeFilter<"JobHiringMember"> | Date | string
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingUncheckedCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeUncheckedCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationUncheckedCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogUncheckedCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUncheckedUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUncheckedUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUncheckedUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUncheckedUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutCompaniesOwnedInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutRaterInput
    companyMemberships?: CompanyMemberCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCompaniesOwnedInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingUncheckedCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeUncheckedCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutRaterInput
    companyMemberships?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationUncheckedCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogUncheckedCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCompaniesOwnedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompaniesOwnedInput, UserUncheckedCreateWithoutCompaniesOwnedInput>
  }

  export type CompanyMemberCreateWithoutCompanyInput = {
    id?: string
    role: $Enums.CompanyMemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCompanyMembershipsInput
  }

  export type CompanyMemberUncheckedCreateWithoutCompanyInput = {
    id?: string
    userId: string
    role: $Enums.CompanyMemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyMemberCreateOrConnectWithoutCompanyInput = {
    where: CompanyMemberWhereUniqueInput
    create: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyMemberCreateManyCompanyInputEnvelope = {
    data: CompanyMemberCreateManyCompanyInput | CompanyMemberCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type JobCreateWithoutCompanyInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: DepartmentCreateNestedOneWithoutJobsInput
    location?: JobLocationCreateNestedOneWithoutJobsInput
    applicationForm?: ApplicationFormFieldCreateNestedManyWithoutJobInput
    hiringTeam?: JobHiringMemberCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowCreateNestedOneWithoutJobInput
    applications?: ApplicationCreateNestedManyWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigCreateNestedOneWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigCreateNestedOneWithoutJobInput
  }

  export type JobUncheckedCreateWithoutCompanyInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    departmentId?: string | null
    locationId?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationForm?: ApplicationFormFieldUncheckedCreateNestedManyWithoutJobInput
    hiringTeam?: JobHiringMemberUncheckedCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowUncheckedCreateNestedOneWithoutJobInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigUncheckedCreateNestedOneWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedCreateNestedOneWithoutJobInput
  }

  export type JobCreateOrConnectWithoutCompanyInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput>
  }

  export type JobCreateManyCompanyInputEnvelope = {
    data: JobCreateManyCompanyInput | JobCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutCompanyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobs?: JobCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobs?: JobUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutCompanyInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput>
  }

  export type DepartmentCreateManyCompanyInputEnvelope = {
    data: DepartmentCreateManyCompanyInput | DepartmentCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type JobLocationCreateWithoutCompanyInput = {
    id?: string
    address?: string | null
    country: string
    city: string
    stateRegion?: string | null
    zipPostal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    jobs?: JobCreateNestedManyWithoutLocationInput
  }

  export type JobLocationUncheckedCreateWithoutCompanyInput = {
    id?: string
    address?: string | null
    country: string
    city: string
    stateRegion?: string | null
    zipPostal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    jobs?: JobUncheckedCreateNestedManyWithoutLocationInput
  }

  export type JobLocationCreateOrConnectWithoutCompanyInput = {
    where: JobLocationWhereUniqueInput
    create: XOR<JobLocationCreateWithoutCompanyInput, JobLocationUncheckedCreateWithoutCompanyInput>
  }

  export type JobLocationCreateManyCompanyInputEnvelope = {
    data: JobLocationCreateManyCompanyInput | JobLocationCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type WorkflowTemplateCreateWithoutCompanyInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    stages?: WorkflowStageTemplateCreateNestedManyWithoutWorkflowTemplateInput
    jobWorkflows?: JobWorkflowCreateNestedManyWithoutWorkflowTemplateInput
  }

  export type WorkflowTemplateUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    stages?: WorkflowStageTemplateUncheckedCreateNestedManyWithoutWorkflowTemplateInput
    jobWorkflows?: JobWorkflowUncheckedCreateNestedManyWithoutWorkflowTemplateInput
  }

  export type WorkflowTemplateCreateOrConnectWithoutCompanyInput = {
    where: WorkflowTemplateWhereUniqueInput
    create: XOR<WorkflowTemplateCreateWithoutCompanyInput, WorkflowTemplateUncheckedCreateWithoutCompanyInput>
  }

  export type WorkflowTemplateCreateManyCompanyInputEnvelope = {
    data: WorkflowTemplateCreateManyCompanyInput | WorkflowTemplateCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type RatingCardTemplateCreateWithoutCompanyInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.RatingCardType
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: RatingCategoryCreateNestedManyWithoutRatingCardTemplateInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutRatingCardTemplateInput
  }

  export type RatingCardTemplateUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.RatingCardType
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: RatingCategoryUncheckedCreateNestedManyWithoutRatingCardTemplateInput
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutRatingCardTemplateInput
  }

  export type RatingCardTemplateCreateOrConnectWithoutCompanyInput = {
    where: RatingCardTemplateWhereUniqueInput
    create: XOR<RatingCardTemplateCreateWithoutCompanyInput, RatingCardTemplateUncheckedCreateWithoutCompanyInput>
  }

  export type RatingCardTemplateCreateManyCompanyInputEnvelope = {
    data: RatingCardTemplateCreateManyCompanyInput | RatingCardTemplateCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type CareersPageSettingCreateWithoutCompanyInput = {
    id?: string
    logoUrl?: string | null
    primaryColor?: string | null
    focusColor?: string | null
    hyperlinkColor?: string | null
    googleAnalyticsId?: string | null
    trackingPixelUrl?: string | null
    embedJobsCode?: string | null
    customCSS?: string | null
    updatedAt?: Date | string
  }

  export type CareersPageSettingUncheckedCreateWithoutCompanyInput = {
    id?: string
    logoUrl?: string | null
    primaryColor?: string | null
    focusColor?: string | null
    hyperlinkColor?: string | null
    googleAnalyticsId?: string | null
    trackingPixelUrl?: string | null
    embedJobsCode?: string | null
    customCSS?: string | null
    updatedAt?: Date | string
  }

  export type CareersPageSettingCreateOrConnectWithoutCompanyInput = {
    where: CareersPageSettingWhereUniqueInput
    create: XOR<CareersPageSettingCreateWithoutCompanyInput, CareersPageSettingUncheckedCreateWithoutCompanyInput>
  }

  export type JobBoardIntegrationCreateWithoutCompanyInput = {
    id?: string
    boardName: string
    apiKey?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobBoardIntegrationUncheckedCreateWithoutCompanyInput = {
    id?: string
    boardName: string
    apiKey?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobBoardIntegrationCreateOrConnectWithoutCompanyInput = {
    where: JobBoardIntegrationWhereUniqueInput
    create: XOR<JobBoardIntegrationCreateWithoutCompanyInput, JobBoardIntegrationUncheckedCreateWithoutCompanyInput>
  }

  export type JobBoardIntegrationCreateManyCompanyInputEnvelope = {
    data: JobBoardIntegrationCreateManyCompanyInput | JobBoardIntegrationCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type MessageTemplateCreateWithoutCompanyInput = {
    id?: string
    name: string
    subject: string
    content: string
    description?: string | null
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageTemplateUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    subject: string
    content: string
    description?: string | null
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageTemplateCreateOrConnectWithoutCompanyInput = {
    where: MessageTemplateWhereUniqueInput
    create: XOR<MessageTemplateCreateWithoutCompanyInput, MessageTemplateUncheckedCreateWithoutCompanyInput>
  }

  export type MessageTemplateCreateManyCompanyInputEnvelope = {
    data: MessageTemplateCreateManyCompanyInput | MessageTemplateCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type QuestionCreateWithoutCompanyInput = {
    id?: string
    text: string
    responseType: string
    visibility: string
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: QuestionOptionCreateNestedManyWithoutQuestionInput
    questionSets?: QuestionSetCreateNestedManyWithoutQuestionsInput
  }

  export type QuestionUncheckedCreateWithoutCompanyInput = {
    id?: string
    text: string
    responseType: string
    visibility: string
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutQuestionsInput
  }

  export type QuestionCreateOrConnectWithoutCompanyInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutCompanyInput, QuestionUncheckedCreateWithoutCompanyInput>
  }

  export type QuestionCreateManyCompanyInputEnvelope = {
    data: QuestionCreateManyCompanyInput | QuestionCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type QuestionSetCreateWithoutCompanyInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: QuestionCreateNestedManyWithoutQuestionSetsInput
  }

  export type QuestionSetUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    questions?: QuestionUncheckedCreateNestedManyWithoutQuestionSetsInput
  }

  export type QuestionSetCreateOrConnectWithoutCompanyInput = {
    where: QuestionSetWhereUniqueInput
    create: XOR<QuestionSetCreateWithoutCompanyInput, QuestionSetUncheckedCreateWithoutCompanyInput>
  }

  export type QuestionSetCreateManyCompanyInputEnvelope = {
    data: QuestionSetCreateManyCompanyInput | QuestionSetCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCompaniesOwnedInput = {
    update: XOR<UserUpdateWithoutCompaniesOwnedInput, UserUncheckedUpdateWithoutCompaniesOwnedInput>
    create: XOR<UserCreateWithoutCompaniesOwnedInput, UserUncheckedCreateWithoutCompaniesOwnedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCompaniesOwnedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCompaniesOwnedInput, UserUncheckedUpdateWithoutCompaniesOwnedInput>
  }

  export type UserUpdateWithoutCompaniesOwnedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutRaterNestedInput
    companyMemberships?: CompanyMemberUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompaniesOwnedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUncheckedUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUncheckedUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutRaterNestedInput
    companyMemberships?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUncheckedUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUncheckedUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompanyMemberUpsertWithWhereUniqueWithoutCompanyInput = {
    where: CompanyMemberWhereUniqueInput
    update: XOR<CompanyMemberUpdateWithoutCompanyInput, CompanyMemberUncheckedUpdateWithoutCompanyInput>
    create: XOR<CompanyMemberCreateWithoutCompanyInput, CompanyMemberUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyMemberUpdateWithWhereUniqueWithoutCompanyInput = {
    where: CompanyMemberWhereUniqueInput
    data: XOR<CompanyMemberUpdateWithoutCompanyInput, CompanyMemberUncheckedUpdateWithoutCompanyInput>
  }

  export type CompanyMemberUpdateManyWithWhereWithoutCompanyInput = {
    where: CompanyMemberScalarWhereInput
    data: XOR<CompanyMemberUpdateManyMutationInput, CompanyMemberUncheckedUpdateManyWithoutCompanyInput>
  }

  export type JobUpsertWithWhereUniqueWithoutCompanyInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutCompanyInput, JobUncheckedUpdateWithoutCompanyInput>
    create: XOR<JobCreateWithoutCompanyInput, JobUncheckedCreateWithoutCompanyInput>
  }

  export type JobUpdateWithWhereUniqueWithoutCompanyInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutCompanyInput, JobUncheckedUpdateWithoutCompanyInput>
  }

  export type JobUpdateManyWithWhereWithoutCompanyInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutCompanyInput>
  }

  export type JobScalarWhereInput = {
    AND?: JobScalarWhereInput | JobScalarWhereInput[]
    OR?: JobScalarWhereInput[]
    NOT?: JobScalarWhereInput | JobScalarWhereInput[]
    id?: StringFilter<"Job"> | string
    title?: StringFilter<"Job"> | string
    description?: StringFilter<"Job"> | string
    employmentType?: EnumEmploymentTypeFilter<"Job"> | $Enums.EmploymentType
    workType?: EnumWorkTypeFilter<"Job"> | $Enums.WorkType
    salaryMin?: FloatNullableFilter<"Job"> | number | null
    salaryMax?: FloatNullableFilter<"Job"> | number | null
    currency?: StringNullableFilter<"Job"> | string | null
    payPeriod?: StringNullableFilter<"Job"> | string | null
    displaySalary?: BoolFilter<"Job"> | boolean
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    jobCode?: StringNullableFilter<"Job"> | string | null
    companyId?: StringFilter<"Job"> | string
    departmentId?: StringNullableFilter<"Job"> | string | null
    locationId?: StringNullableFilter<"Job"> | string | null
    minYearsExperience?: IntNullableFilter<"Job"> | number | null
    skills?: JsonNullableFilter<"Job">
    jobBoards?: JsonNullableFilter<"Job">
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
  }

  export type DepartmentUpsertWithWhereUniqueWithoutCompanyInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutCompanyInput, DepartmentUncheckedUpdateWithoutCompanyInput>
    create: XOR<DepartmentCreateWithoutCompanyInput, DepartmentUncheckedCreateWithoutCompanyInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutCompanyInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutCompanyInput, DepartmentUncheckedUpdateWithoutCompanyInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutCompanyInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutCompanyInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    companyId?: StringFilter<"Department"> | string
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
  }

  export type JobLocationUpsertWithWhereUniqueWithoutCompanyInput = {
    where: JobLocationWhereUniqueInput
    update: XOR<JobLocationUpdateWithoutCompanyInput, JobLocationUncheckedUpdateWithoutCompanyInput>
    create: XOR<JobLocationCreateWithoutCompanyInput, JobLocationUncheckedCreateWithoutCompanyInput>
  }

  export type JobLocationUpdateWithWhereUniqueWithoutCompanyInput = {
    where: JobLocationWhereUniqueInput
    data: XOR<JobLocationUpdateWithoutCompanyInput, JobLocationUncheckedUpdateWithoutCompanyInput>
  }

  export type JobLocationUpdateManyWithWhereWithoutCompanyInput = {
    where: JobLocationScalarWhereInput
    data: XOR<JobLocationUpdateManyMutationInput, JobLocationUncheckedUpdateManyWithoutCompanyInput>
  }

  export type JobLocationScalarWhereInput = {
    AND?: JobLocationScalarWhereInput | JobLocationScalarWhereInput[]
    OR?: JobLocationScalarWhereInput[]
    NOT?: JobLocationScalarWhereInput | JobLocationScalarWhereInput[]
    id?: StringFilter<"JobLocation"> | string
    address?: StringNullableFilter<"JobLocation"> | string | null
    country?: StringFilter<"JobLocation"> | string
    city?: StringFilter<"JobLocation"> | string
    stateRegion?: StringNullableFilter<"JobLocation"> | string | null
    zipPostal?: StringNullableFilter<"JobLocation"> | string | null
    companyId?: StringFilter<"JobLocation"> | string
    createdAt?: DateTimeFilter<"JobLocation"> | Date | string
    updatedAt?: DateTimeFilter<"JobLocation"> | Date | string
  }

  export type WorkflowTemplateUpsertWithWhereUniqueWithoutCompanyInput = {
    where: WorkflowTemplateWhereUniqueInput
    update: XOR<WorkflowTemplateUpdateWithoutCompanyInput, WorkflowTemplateUncheckedUpdateWithoutCompanyInput>
    create: XOR<WorkflowTemplateCreateWithoutCompanyInput, WorkflowTemplateUncheckedCreateWithoutCompanyInput>
  }

  export type WorkflowTemplateUpdateWithWhereUniqueWithoutCompanyInput = {
    where: WorkflowTemplateWhereUniqueInput
    data: XOR<WorkflowTemplateUpdateWithoutCompanyInput, WorkflowTemplateUncheckedUpdateWithoutCompanyInput>
  }

  export type WorkflowTemplateUpdateManyWithWhereWithoutCompanyInput = {
    where: WorkflowTemplateScalarWhereInput
    data: XOR<WorkflowTemplateUpdateManyMutationInput, WorkflowTemplateUncheckedUpdateManyWithoutCompanyInput>
  }

  export type WorkflowTemplateScalarWhereInput = {
    AND?: WorkflowTemplateScalarWhereInput | WorkflowTemplateScalarWhereInput[]
    OR?: WorkflowTemplateScalarWhereInput[]
    NOT?: WorkflowTemplateScalarWhereInput | WorkflowTemplateScalarWhereInput[]
    id?: StringFilter<"WorkflowTemplate"> | string
    name?: StringFilter<"WorkflowTemplate"> | string
    companyId?: StringFilter<"WorkflowTemplate"> | string
    isDefault?: BoolFilter<"WorkflowTemplate"> | boolean
    createdAt?: DateTimeFilter<"WorkflowTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"WorkflowTemplate"> | Date | string
  }

  export type RatingCardTemplateUpsertWithWhereUniqueWithoutCompanyInput = {
    where: RatingCardTemplateWhereUniqueInput
    update: XOR<RatingCardTemplateUpdateWithoutCompanyInput, RatingCardTemplateUncheckedUpdateWithoutCompanyInput>
    create: XOR<RatingCardTemplateCreateWithoutCompanyInput, RatingCardTemplateUncheckedCreateWithoutCompanyInput>
  }

  export type RatingCardTemplateUpdateWithWhereUniqueWithoutCompanyInput = {
    where: RatingCardTemplateWhereUniqueInput
    data: XOR<RatingCardTemplateUpdateWithoutCompanyInput, RatingCardTemplateUncheckedUpdateWithoutCompanyInput>
  }

  export type RatingCardTemplateUpdateManyWithWhereWithoutCompanyInput = {
    where: RatingCardTemplateScalarWhereInput
    data: XOR<RatingCardTemplateUpdateManyMutationInput, RatingCardTemplateUncheckedUpdateManyWithoutCompanyInput>
  }

  export type RatingCardTemplateScalarWhereInput = {
    AND?: RatingCardTemplateScalarWhereInput | RatingCardTemplateScalarWhereInput[]
    OR?: RatingCardTemplateScalarWhereInput[]
    NOT?: RatingCardTemplateScalarWhereInput | RatingCardTemplateScalarWhereInput[]
    id?: StringFilter<"RatingCardTemplate"> | string
    name?: StringFilter<"RatingCardTemplate"> | string
    description?: StringNullableFilter<"RatingCardTemplate"> | string | null
    companyId?: StringFilter<"RatingCardTemplate"> | string
    type?: EnumRatingCardTypeFilter<"RatingCardTemplate"> | $Enums.RatingCardType
    isDefault?: BoolFilter<"RatingCardTemplate"> | boolean
    createdAt?: DateTimeFilter<"RatingCardTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"RatingCardTemplate"> | Date | string
  }

  export type CareersPageSettingUpsertWithoutCompanyInput = {
    update: XOR<CareersPageSettingUpdateWithoutCompanyInput, CareersPageSettingUncheckedUpdateWithoutCompanyInput>
    create: XOR<CareersPageSettingCreateWithoutCompanyInput, CareersPageSettingUncheckedCreateWithoutCompanyInput>
    where?: CareersPageSettingWhereInput
  }

  export type CareersPageSettingUpdateToOneWithWhereWithoutCompanyInput = {
    where?: CareersPageSettingWhereInput
    data: XOR<CareersPageSettingUpdateWithoutCompanyInput, CareersPageSettingUncheckedUpdateWithoutCompanyInput>
  }

  export type CareersPageSettingUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    focusColor?: NullableStringFieldUpdateOperationsInput | string | null
    hyperlinkColor?: NullableStringFieldUpdateOperationsInput | string | null
    googleAnalyticsId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingPixelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embedJobsCode?: NullableStringFieldUpdateOperationsInput | string | null
    customCSS?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CareersPageSettingUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    primaryColor?: NullableStringFieldUpdateOperationsInput | string | null
    focusColor?: NullableStringFieldUpdateOperationsInput | string | null
    hyperlinkColor?: NullableStringFieldUpdateOperationsInput | string | null
    googleAnalyticsId?: NullableStringFieldUpdateOperationsInput | string | null
    trackingPixelUrl?: NullableStringFieldUpdateOperationsInput | string | null
    embedJobsCode?: NullableStringFieldUpdateOperationsInput | string | null
    customCSS?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobBoardIntegrationUpsertWithWhereUniqueWithoutCompanyInput = {
    where: JobBoardIntegrationWhereUniqueInput
    update: XOR<JobBoardIntegrationUpdateWithoutCompanyInput, JobBoardIntegrationUncheckedUpdateWithoutCompanyInput>
    create: XOR<JobBoardIntegrationCreateWithoutCompanyInput, JobBoardIntegrationUncheckedCreateWithoutCompanyInput>
  }

  export type JobBoardIntegrationUpdateWithWhereUniqueWithoutCompanyInput = {
    where: JobBoardIntegrationWhereUniqueInput
    data: XOR<JobBoardIntegrationUpdateWithoutCompanyInput, JobBoardIntegrationUncheckedUpdateWithoutCompanyInput>
  }

  export type JobBoardIntegrationUpdateManyWithWhereWithoutCompanyInput = {
    where: JobBoardIntegrationScalarWhereInput
    data: XOR<JobBoardIntegrationUpdateManyMutationInput, JobBoardIntegrationUncheckedUpdateManyWithoutCompanyInput>
  }

  export type JobBoardIntegrationScalarWhereInput = {
    AND?: JobBoardIntegrationScalarWhereInput | JobBoardIntegrationScalarWhereInput[]
    OR?: JobBoardIntegrationScalarWhereInput[]
    NOT?: JobBoardIntegrationScalarWhereInput | JobBoardIntegrationScalarWhereInput[]
    id?: StringFilter<"JobBoardIntegration"> | string
    companyId?: StringFilter<"JobBoardIntegration"> | string
    boardName?: StringFilter<"JobBoardIntegration"> | string
    apiKey?: StringNullableFilter<"JobBoardIntegration"> | string | null
    config?: JsonNullableFilter<"JobBoardIntegration">
    isEnabled?: BoolFilter<"JobBoardIntegration"> | boolean
    createdAt?: DateTimeFilter<"JobBoardIntegration"> | Date | string
    updatedAt?: DateTimeFilter<"JobBoardIntegration"> | Date | string
  }

  export type MessageTemplateUpsertWithWhereUniqueWithoutCompanyInput = {
    where: MessageTemplateWhereUniqueInput
    update: XOR<MessageTemplateUpdateWithoutCompanyInput, MessageTemplateUncheckedUpdateWithoutCompanyInput>
    create: XOR<MessageTemplateCreateWithoutCompanyInput, MessageTemplateUncheckedCreateWithoutCompanyInput>
  }

  export type MessageTemplateUpdateWithWhereUniqueWithoutCompanyInput = {
    where: MessageTemplateWhereUniqueInput
    data: XOR<MessageTemplateUpdateWithoutCompanyInput, MessageTemplateUncheckedUpdateWithoutCompanyInput>
  }

  export type MessageTemplateUpdateManyWithWhereWithoutCompanyInput = {
    where: MessageTemplateScalarWhereInput
    data: XOR<MessageTemplateUpdateManyMutationInput, MessageTemplateUncheckedUpdateManyWithoutCompanyInput>
  }

  export type MessageTemplateScalarWhereInput = {
    AND?: MessageTemplateScalarWhereInput | MessageTemplateScalarWhereInput[]
    OR?: MessageTemplateScalarWhereInput[]
    NOT?: MessageTemplateScalarWhereInput | MessageTemplateScalarWhereInput[]
    id?: StringFilter<"MessageTemplate"> | string
    companyId?: StringFilter<"MessageTemplate"> | string
    name?: StringFilter<"MessageTemplate"> | string
    subject?: StringFilter<"MessageTemplate"> | string
    content?: StringFilter<"MessageTemplate"> | string
    description?: StringNullableFilter<"MessageTemplate"> | string | null
    isRequired?: BoolFilter<"MessageTemplate"> | boolean
    createdAt?: DateTimeFilter<"MessageTemplate"> | Date | string
    updatedAt?: DateTimeFilter<"MessageTemplate"> | Date | string
  }

  export type QuestionUpsertWithWhereUniqueWithoutCompanyInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutCompanyInput, QuestionUncheckedUpdateWithoutCompanyInput>
    create: XOR<QuestionCreateWithoutCompanyInput, QuestionUncheckedCreateWithoutCompanyInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutCompanyInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutCompanyInput, QuestionUncheckedUpdateWithoutCompanyInput>
  }

  export type QuestionUpdateManyWithWhereWithoutCompanyInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutCompanyInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    OR?: QuestionScalarWhereInput[]
    NOT?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    id?: StringFilter<"Question"> | string
    companyId?: StringFilter<"Question"> | string
    text?: StringFilter<"Question"> | string
    responseType?: StringFilter<"Question"> | string
    visibility?: StringFilter<"Question"> | string
    createdAt?: DateTimeFilter<"Question"> | Date | string
    updatedAt?: DateTimeFilter<"Question"> | Date | string
  }

  export type QuestionSetUpsertWithWhereUniqueWithoutCompanyInput = {
    where: QuestionSetWhereUniqueInput
    update: XOR<QuestionSetUpdateWithoutCompanyInput, QuestionSetUncheckedUpdateWithoutCompanyInput>
    create: XOR<QuestionSetCreateWithoutCompanyInput, QuestionSetUncheckedCreateWithoutCompanyInput>
  }

  export type QuestionSetUpdateWithWhereUniqueWithoutCompanyInput = {
    where: QuestionSetWhereUniqueInput
    data: XOR<QuestionSetUpdateWithoutCompanyInput, QuestionSetUncheckedUpdateWithoutCompanyInput>
  }

  export type QuestionSetUpdateManyWithWhereWithoutCompanyInput = {
    where: QuestionSetScalarWhereInput
    data: XOR<QuestionSetUpdateManyMutationInput, QuestionSetUncheckedUpdateManyWithoutCompanyInput>
  }

  export type QuestionSetScalarWhereInput = {
    AND?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
    OR?: QuestionSetScalarWhereInput[]
    NOT?: QuestionSetScalarWhereInput | QuestionSetScalarWhereInput[]
    id?: StringFilter<"QuestionSet"> | string
    companyId?: StringFilter<"QuestionSet"> | string
    name?: StringFilter<"QuestionSet"> | string
    description?: StringNullableFilter<"QuestionSet"> | string | null
    createdAt?: DateTimeFilter<"QuestionSet"> | Date | string
    updatedAt?: DateTimeFilter<"QuestionSet"> | Date | string
  }

  export type CompanyCreateWithoutMembersInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompaniesOwnedInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
    locations?: JobLocationCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateCreateNestedManyWithoutCompanyInput
    questions?: QuestionCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
    locations?: JobLocationUncheckedCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateUncheckedCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingUncheckedCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateUncheckedCreateNestedManyWithoutCompanyInput
    questions?: QuestionUncheckedCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutMembersInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutMembersInput, CompanyUncheckedCreateWithoutMembersInput>
  }

  export type UserCreateWithoutCompanyMembershipsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyCreateNestedManyWithoutOwnerInput
    calendarIntegrations?: CalendarIntegrationCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCompanyMembershipsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingUncheckedCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeUncheckedCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    calendarIntegrations?: CalendarIntegrationUncheckedCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogUncheckedCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCompanyMembershipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompanyMembershipsInput, UserUncheckedCreateWithoutCompanyMembershipsInput>
  }

  export type CompanyUpsertWithoutMembersInput = {
    update: XOR<CompanyUpdateWithoutMembersInput, CompanyUncheckedUpdateWithoutMembersInput>
    create: XOR<CompanyCreateWithoutMembersInput, CompanyUncheckedCreateWithoutMembersInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutMembersInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutMembersInput, CompanyUncheckedUpdateWithoutMembersInput>
  }

  export type CompanyUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompaniesOwnedNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUncheckedUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUncheckedUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type UserUpsertWithoutCompanyMembershipsInput = {
    update: XOR<UserUpdateWithoutCompanyMembershipsInput, UserUncheckedUpdateWithoutCompanyMembershipsInput>
    create: XOR<UserCreateWithoutCompanyMembershipsInput, UserUncheckedCreateWithoutCompanyMembershipsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCompanyMembershipsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCompanyMembershipsInput, UserUncheckedUpdateWithoutCompanyMembershipsInput>
  }

  export type UserUpdateWithoutCompanyMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUpdateManyWithoutOwnerNestedInput
    calendarIntegrations?: CalendarIntegrationUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompanyMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUncheckedUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUncheckedUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    calendarIntegrations?: CalendarIntegrationUncheckedUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUncheckedUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompanyCreateWithoutJobsInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompaniesOwnedInput
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
    locations?: JobLocationCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateCreateNestedManyWithoutCompanyInput
    questions?: QuestionCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutJobsInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
    locations?: JobLocationUncheckedCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateUncheckedCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingUncheckedCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateUncheckedCreateNestedManyWithoutCompanyInput
    questions?: QuestionUncheckedCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutJobsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutJobsInput, CompanyUncheckedCreateWithoutJobsInput>
  }

  export type DepartmentCreateWithoutJobsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutDepartmentsInput
  }

  export type DepartmentUncheckedCreateWithoutJobsInput = {
    id?: string
    name: string
    companyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentCreateOrConnectWithoutJobsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutJobsInput, DepartmentUncheckedCreateWithoutJobsInput>
  }

  export type JobLocationCreateWithoutJobsInput = {
    id?: string
    address?: string | null
    country: string
    city: string
    stateRegion?: string | null
    zipPostal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutLocationsInput
  }

  export type JobLocationUncheckedCreateWithoutJobsInput = {
    id?: string
    address?: string | null
    country: string
    city: string
    stateRegion?: string | null
    zipPostal?: string | null
    companyId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobLocationCreateOrConnectWithoutJobsInput = {
    where: JobLocationWhereUniqueInput
    create: XOR<JobLocationCreateWithoutJobsInput, JobLocationUncheckedCreateWithoutJobsInput>
  }

  export type ApplicationFormFieldCreateWithoutJobInput = {
    id?: string
    fieldName: string
    label: string
    fieldType: $Enums.FieldType
    isRequired?: boolean
    isOptional?: boolean
    isDisabled?: boolean
    order: number
    customQuestion?: CustomQuestionCreateNestedOneWithoutApplicationFormFieldsInput
  }

  export type ApplicationFormFieldUncheckedCreateWithoutJobInput = {
    id?: string
    fieldName: string
    label: string
    fieldType: $Enums.FieldType
    isRequired?: boolean
    isOptional?: boolean
    isDisabled?: boolean
    customQuestionId?: string | null
    order: number
  }

  export type ApplicationFormFieldCreateOrConnectWithoutJobInput = {
    where: ApplicationFormFieldWhereUniqueInput
    create: XOR<ApplicationFormFieldCreateWithoutJobInput, ApplicationFormFieldUncheckedCreateWithoutJobInput>
  }

  export type ApplicationFormFieldCreateManyJobInputEnvelope = {
    data: ApplicationFormFieldCreateManyJobInput | ApplicationFormFieldCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type JobHiringMemberCreateWithoutJobInput = {
    id?: string
    role: $Enums.CompanyMemberRole
    isExternalRecruiter?: boolean
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutJobHiringMembersInput
  }

  export type JobHiringMemberUncheckedCreateWithoutJobInput = {
    id?: string
    userId: string
    role: $Enums.CompanyMemberRole
    isExternalRecruiter?: boolean
    createdAt?: Date | string
  }

  export type JobHiringMemberCreateOrConnectWithoutJobInput = {
    where: JobHiringMemberWhereUniqueInput
    create: XOR<JobHiringMemberCreateWithoutJobInput, JobHiringMemberUncheckedCreateWithoutJobInput>
  }

  export type JobHiringMemberCreateManyJobInputEnvelope = {
    data: JobHiringMemberCreateManyJobInput | JobHiringMemberCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type JobWorkflowCreateWithoutJobInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    workflowTemplate?: WorkflowTemplateCreateNestedOneWithoutJobWorkflowsInput
    stages?: JobWorkflowStageCreateNestedManyWithoutJobWorkflowInput
  }

  export type JobWorkflowUncheckedCreateWithoutJobInput = {
    id?: string
    workflowTemplateId?: string | null
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    stages?: JobWorkflowStageUncheckedCreateNestedManyWithoutJobWorkflowInput
  }

  export type JobWorkflowCreateOrConnectWithoutJobInput = {
    where: JobWorkflowWhereUniqueInput
    create: XOR<JobWorkflowCreateWithoutJobInput, JobWorkflowUncheckedCreateWithoutJobInput>
  }

  export type ApplicationCreateWithoutJobInput = {
    id?: string
    appliedAt?: Date | string
    currentStageId?: string | null
    status?: $Enums.ApplicationStatus
    disqualificationReason?: string | null
    archivedAt?: Date | string | null
    hiredAt?: Date | string | null
    source?: string | null
    candidate: CandidateCreateNestedOneWithoutApplicationsInput
    candidateAnswers?: CandidateAnswerCreateNestedManyWithoutApplicationInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutApplicationInput
    messages?: MessageThreadCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutJobInput = {
    id?: string
    candidateId: string
    appliedAt?: Date | string
    currentStageId?: string | null
    status?: $Enums.ApplicationStatus
    disqualificationReason?: string | null
    archivedAt?: Date | string | null
    hiredAt?: Date | string | null
    source?: string | null
    candidateAnswers?: CandidateAnswerUncheckedCreateNestedManyWithoutApplicationInput
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutApplicationInput
    messages?: MessageThreadUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutJobInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput>
  }

  export type ApplicationCreateManyJobInputEnvelope = {
    data: ApplicationCreateManyJobInput | ApplicationCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type AIScreeningConfigCreateWithoutJobInput = {
    id?: string
    isEnabled?: boolean
    guidance?: string | null
    updatedAt?: Date | string
  }

  export type AIScreeningConfigUncheckedCreateWithoutJobInput = {
    id?: string
    isEnabled?: boolean
    guidance?: string | null
    updatedAt?: Date | string
  }

  export type AIScreeningConfigCreateOrConnectWithoutJobInput = {
    where: AIScreeningConfigWhereUniqueInput
    create: XOR<AIScreeningConfigCreateWithoutJobInput, AIScreeningConfigUncheckedCreateWithoutJobInput>
  }

  export type AISchedulingConfigCreateWithoutJobInput = {
    id?: string
    isEnabled?: boolean
    updatedAt?: Date | string
  }

  export type AISchedulingConfigUncheckedCreateWithoutJobInput = {
    id?: string
    isEnabled?: boolean
    updatedAt?: Date | string
  }

  export type AISchedulingConfigCreateOrConnectWithoutJobInput = {
    where: AISchedulingConfigWhereUniqueInput
    create: XOR<AISchedulingConfigCreateWithoutJobInput, AISchedulingConfigUncheckedCreateWithoutJobInput>
  }

  export type CompanyUpsertWithoutJobsInput = {
    update: XOR<CompanyUpdateWithoutJobsInput, CompanyUncheckedUpdateWithoutJobsInput>
    create: XOR<CompanyCreateWithoutJobsInput, CompanyUncheckedCreateWithoutJobsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutJobsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutJobsInput, CompanyUncheckedUpdateWithoutJobsInput>
  }

  export type CompanyUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompaniesOwnedNestedInput
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUncheckedUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUncheckedUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type DepartmentUpsertWithoutJobsInput = {
    update: XOR<DepartmentUpdateWithoutJobsInput, DepartmentUncheckedUpdateWithoutJobsInput>
    create: XOR<DepartmentCreateWithoutJobsInput, DepartmentUncheckedCreateWithoutJobsInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutJobsInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutJobsInput, DepartmentUncheckedUpdateWithoutJobsInput>
  }

  export type DepartmentUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutDepartmentsNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobLocationUpsertWithoutJobsInput = {
    update: XOR<JobLocationUpdateWithoutJobsInput, JobLocationUncheckedUpdateWithoutJobsInput>
    create: XOR<JobLocationCreateWithoutJobsInput, JobLocationUncheckedCreateWithoutJobsInput>
    where?: JobLocationWhereInput
  }

  export type JobLocationUpdateToOneWithWhereWithoutJobsInput = {
    where?: JobLocationWhereInput
    data: XOR<JobLocationUpdateWithoutJobsInput, JobLocationUncheckedUpdateWithoutJobsInput>
  }

  export type JobLocationUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    stateRegion?: NullableStringFieldUpdateOperationsInput | string | null
    zipPostal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutLocationsNestedInput
  }

  export type JobLocationUncheckedUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    stateRegion?: NullableStringFieldUpdateOperationsInput | string | null
    zipPostal?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationFormFieldUpsertWithWhereUniqueWithoutJobInput = {
    where: ApplicationFormFieldWhereUniqueInput
    update: XOR<ApplicationFormFieldUpdateWithoutJobInput, ApplicationFormFieldUncheckedUpdateWithoutJobInput>
    create: XOR<ApplicationFormFieldCreateWithoutJobInput, ApplicationFormFieldUncheckedCreateWithoutJobInput>
  }

  export type ApplicationFormFieldUpdateWithWhereUniqueWithoutJobInput = {
    where: ApplicationFormFieldWhereUniqueInput
    data: XOR<ApplicationFormFieldUpdateWithoutJobInput, ApplicationFormFieldUncheckedUpdateWithoutJobInput>
  }

  export type ApplicationFormFieldUpdateManyWithWhereWithoutJobInput = {
    where: ApplicationFormFieldScalarWhereInput
    data: XOR<ApplicationFormFieldUpdateManyMutationInput, ApplicationFormFieldUncheckedUpdateManyWithoutJobInput>
  }

  export type ApplicationFormFieldScalarWhereInput = {
    AND?: ApplicationFormFieldScalarWhereInput | ApplicationFormFieldScalarWhereInput[]
    OR?: ApplicationFormFieldScalarWhereInput[]
    NOT?: ApplicationFormFieldScalarWhereInput | ApplicationFormFieldScalarWhereInput[]
    id?: StringFilter<"ApplicationFormField"> | string
    jobId?: StringFilter<"ApplicationFormField"> | string
    fieldName?: StringFilter<"ApplicationFormField"> | string
    label?: StringFilter<"ApplicationFormField"> | string
    fieldType?: EnumFieldTypeFilter<"ApplicationFormField"> | $Enums.FieldType
    isRequired?: BoolFilter<"ApplicationFormField"> | boolean
    isOptional?: BoolFilter<"ApplicationFormField"> | boolean
    isDisabled?: BoolFilter<"ApplicationFormField"> | boolean
    customQuestionId?: StringNullableFilter<"ApplicationFormField"> | string | null
    order?: IntFilter<"ApplicationFormField"> | number
  }

  export type JobHiringMemberUpsertWithWhereUniqueWithoutJobInput = {
    where: JobHiringMemberWhereUniqueInput
    update: XOR<JobHiringMemberUpdateWithoutJobInput, JobHiringMemberUncheckedUpdateWithoutJobInput>
    create: XOR<JobHiringMemberCreateWithoutJobInput, JobHiringMemberUncheckedCreateWithoutJobInput>
  }

  export type JobHiringMemberUpdateWithWhereUniqueWithoutJobInput = {
    where: JobHiringMemberWhereUniqueInput
    data: XOR<JobHiringMemberUpdateWithoutJobInput, JobHiringMemberUncheckedUpdateWithoutJobInput>
  }

  export type JobHiringMemberUpdateManyWithWhereWithoutJobInput = {
    where: JobHiringMemberScalarWhereInput
    data: XOR<JobHiringMemberUpdateManyMutationInput, JobHiringMemberUncheckedUpdateManyWithoutJobInput>
  }

  export type JobWorkflowUpsertWithoutJobInput = {
    update: XOR<JobWorkflowUpdateWithoutJobInput, JobWorkflowUncheckedUpdateWithoutJobInput>
    create: XOR<JobWorkflowCreateWithoutJobInput, JobWorkflowUncheckedCreateWithoutJobInput>
    where?: JobWorkflowWhereInput
  }

  export type JobWorkflowUpdateToOneWithWhereWithoutJobInput = {
    where?: JobWorkflowWhereInput
    data: XOR<JobWorkflowUpdateWithoutJobInput, JobWorkflowUncheckedUpdateWithoutJobInput>
  }

  export type JobWorkflowUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workflowTemplate?: WorkflowTemplateUpdateOneWithoutJobWorkflowsNestedInput
    stages?: JobWorkflowStageUpdateManyWithoutJobWorkflowNestedInput
  }

  export type JobWorkflowUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    workflowTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stages?: JobWorkflowStageUncheckedUpdateManyWithoutJobWorkflowNestedInput
  }

  export type ApplicationUpsertWithWhereUniqueWithoutJobInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutJobInput, ApplicationUncheckedUpdateWithoutJobInput>
    create: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutJobInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutJobInput, ApplicationUncheckedUpdateWithoutJobInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutJobInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutJobInput>
  }

  export type ApplicationScalarWhereInput = {
    AND?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    OR?: ApplicationScalarWhereInput[]
    NOT?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    id?: StringFilter<"Application"> | string
    jobId?: StringFilter<"Application"> | string
    candidateId?: StringFilter<"Application"> | string
    appliedAt?: DateTimeFilter<"Application"> | Date | string
    currentStageId?: StringNullableFilter<"Application"> | string | null
    status?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    disqualificationReason?: StringNullableFilter<"Application"> | string | null
    archivedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    hiredAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    source?: StringNullableFilter<"Application"> | string | null
  }

  export type AIScreeningConfigUpsertWithoutJobInput = {
    update: XOR<AIScreeningConfigUpdateWithoutJobInput, AIScreeningConfigUncheckedUpdateWithoutJobInput>
    create: XOR<AIScreeningConfigCreateWithoutJobInput, AIScreeningConfigUncheckedCreateWithoutJobInput>
    where?: AIScreeningConfigWhereInput
  }

  export type AIScreeningConfigUpdateToOneWithWhereWithoutJobInput = {
    where?: AIScreeningConfigWhereInput
    data: XOR<AIScreeningConfigUpdateWithoutJobInput, AIScreeningConfigUncheckedUpdateWithoutJobInput>
  }

  export type AIScreeningConfigUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    guidance?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIScreeningConfigUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    guidance?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AISchedulingConfigUpsertWithoutJobInput = {
    update: XOR<AISchedulingConfigUpdateWithoutJobInput, AISchedulingConfigUncheckedUpdateWithoutJobInput>
    create: XOR<AISchedulingConfigCreateWithoutJobInput, AISchedulingConfigUncheckedCreateWithoutJobInput>
    where?: AISchedulingConfigWhereInput
  }

  export type AISchedulingConfigUpdateToOneWithWhereWithoutJobInput = {
    where?: AISchedulingConfigWhereInput
    data: XOR<AISchedulingConfigUpdateWithoutJobInput, AISchedulingConfigUncheckedUpdateWithoutJobInput>
  }

  export type AISchedulingConfigUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AISchedulingConfigUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateWithoutDepartmentsInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompaniesOwnedInput
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
    locations?: JobLocationCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateCreateNestedManyWithoutCompanyInput
    questions?: QuestionCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutDepartmentsInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
    locations?: JobLocationUncheckedCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateUncheckedCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingUncheckedCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateUncheckedCreateNestedManyWithoutCompanyInput
    questions?: QuestionUncheckedCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutDepartmentsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutDepartmentsInput, CompanyUncheckedCreateWithoutDepartmentsInput>
  }

  export type JobCreateWithoutDepartmentInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutJobsInput
    location?: JobLocationCreateNestedOneWithoutJobsInput
    applicationForm?: ApplicationFormFieldCreateNestedManyWithoutJobInput
    hiringTeam?: JobHiringMemberCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowCreateNestedOneWithoutJobInput
    applications?: ApplicationCreateNestedManyWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigCreateNestedOneWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigCreateNestedOneWithoutJobInput
  }

  export type JobUncheckedCreateWithoutDepartmentInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    companyId: string
    locationId?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationForm?: ApplicationFormFieldUncheckedCreateNestedManyWithoutJobInput
    hiringTeam?: JobHiringMemberUncheckedCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowUncheckedCreateNestedOneWithoutJobInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigUncheckedCreateNestedOneWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedCreateNestedOneWithoutJobInput
  }

  export type JobCreateOrConnectWithoutDepartmentInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutDepartmentInput, JobUncheckedCreateWithoutDepartmentInput>
  }

  export type JobCreateManyDepartmentInputEnvelope = {
    data: JobCreateManyDepartmentInput | JobCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutDepartmentsInput = {
    update: XOR<CompanyUpdateWithoutDepartmentsInput, CompanyUncheckedUpdateWithoutDepartmentsInput>
    create: XOR<CompanyCreateWithoutDepartmentsInput, CompanyUncheckedCreateWithoutDepartmentsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutDepartmentsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutDepartmentsInput, CompanyUncheckedUpdateWithoutDepartmentsInput>
  }

  export type CompanyUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompaniesOwnedNestedInput
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUncheckedUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUncheckedUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type JobUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutDepartmentInput, JobUncheckedUpdateWithoutDepartmentInput>
    create: XOR<JobCreateWithoutDepartmentInput, JobUncheckedCreateWithoutDepartmentInput>
  }

  export type JobUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutDepartmentInput, JobUncheckedUpdateWithoutDepartmentInput>
  }

  export type JobUpdateManyWithWhereWithoutDepartmentInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type CompanyCreateWithoutLocationsInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompaniesOwnedInput
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateCreateNestedManyWithoutCompanyInput
    questions?: QuestionCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutLocationsInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateUncheckedCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingUncheckedCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateUncheckedCreateNestedManyWithoutCompanyInput
    questions?: QuestionUncheckedCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutLocationsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutLocationsInput, CompanyUncheckedCreateWithoutLocationsInput>
  }

  export type JobCreateWithoutLocationInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutJobsInput
    department?: DepartmentCreateNestedOneWithoutJobsInput
    applicationForm?: ApplicationFormFieldCreateNestedManyWithoutJobInput
    hiringTeam?: JobHiringMemberCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowCreateNestedOneWithoutJobInput
    applications?: ApplicationCreateNestedManyWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigCreateNestedOneWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigCreateNestedOneWithoutJobInput
  }

  export type JobUncheckedCreateWithoutLocationInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    companyId: string
    departmentId?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationForm?: ApplicationFormFieldUncheckedCreateNestedManyWithoutJobInput
    hiringTeam?: JobHiringMemberUncheckedCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowUncheckedCreateNestedOneWithoutJobInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigUncheckedCreateNestedOneWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedCreateNestedOneWithoutJobInput
  }

  export type JobCreateOrConnectWithoutLocationInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutLocationInput, JobUncheckedCreateWithoutLocationInput>
  }

  export type JobCreateManyLocationInputEnvelope = {
    data: JobCreateManyLocationInput | JobCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutLocationsInput = {
    update: XOR<CompanyUpdateWithoutLocationsInput, CompanyUncheckedUpdateWithoutLocationsInput>
    create: XOR<CompanyCreateWithoutLocationsInput, CompanyUncheckedCreateWithoutLocationsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutLocationsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutLocationsInput, CompanyUncheckedUpdateWithoutLocationsInput>
  }

  export type CompanyUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompaniesOwnedNestedInput
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutLocationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUncheckedUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type JobUpsertWithWhereUniqueWithoutLocationInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutLocationInput, JobUncheckedUpdateWithoutLocationInput>
    create: XOR<JobCreateWithoutLocationInput, JobUncheckedCreateWithoutLocationInput>
  }

  export type JobUpdateWithWhereUniqueWithoutLocationInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutLocationInput, JobUncheckedUpdateWithoutLocationInput>
  }

  export type JobUpdateManyWithWhereWithoutLocationInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutLocationInput>
  }

  export type JobCreateWithoutApplicationFormInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutJobsInput
    department?: DepartmentCreateNestedOneWithoutJobsInput
    location?: JobLocationCreateNestedOneWithoutJobsInput
    hiringTeam?: JobHiringMemberCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowCreateNestedOneWithoutJobInput
    applications?: ApplicationCreateNestedManyWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigCreateNestedOneWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigCreateNestedOneWithoutJobInput
  }

  export type JobUncheckedCreateWithoutApplicationFormInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    companyId: string
    departmentId?: string | null
    locationId?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    hiringTeam?: JobHiringMemberUncheckedCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowUncheckedCreateNestedOneWithoutJobInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigUncheckedCreateNestedOneWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedCreateNestedOneWithoutJobInput
  }

  export type JobCreateOrConnectWithoutApplicationFormInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutApplicationFormInput, JobUncheckedCreateWithoutApplicationFormInput>
  }

  export type CustomQuestionCreateWithoutApplicationFormFieldsInput = {
    id?: string
    companyId: string
    questionText: string
    responseType: $Enums.ResponseType
    options?: NullableJsonNullValueInput | InputJsonValue
    visibility?: $Enums.ResponseVisibility
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateAnswers?: CandidateAnswerCreateNestedManyWithoutCustomQuestionInput
  }

  export type CustomQuestionUncheckedCreateWithoutApplicationFormFieldsInput = {
    id?: string
    companyId: string
    questionText: string
    responseType: $Enums.ResponseType
    options?: NullableJsonNullValueInput | InputJsonValue
    visibility?: $Enums.ResponseVisibility
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateAnswers?: CandidateAnswerUncheckedCreateNestedManyWithoutCustomQuestionInput
  }

  export type CustomQuestionCreateOrConnectWithoutApplicationFormFieldsInput = {
    where: CustomQuestionWhereUniqueInput
    create: XOR<CustomQuestionCreateWithoutApplicationFormFieldsInput, CustomQuestionUncheckedCreateWithoutApplicationFormFieldsInput>
  }

  export type JobUpsertWithoutApplicationFormInput = {
    update: XOR<JobUpdateWithoutApplicationFormInput, JobUncheckedUpdateWithoutApplicationFormInput>
    create: XOR<JobCreateWithoutApplicationFormInput, JobUncheckedCreateWithoutApplicationFormInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutApplicationFormInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutApplicationFormInput, JobUncheckedUpdateWithoutApplicationFormInput>
  }

  export type JobUpdateWithoutApplicationFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    department?: DepartmentUpdateOneWithoutJobsNestedInput
    location?: JobLocationUpdateOneWithoutJobsNestedInput
    hiringTeam?: JobHiringMemberUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUpdateOneWithoutJobNestedInput
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUpdateOneWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUpdateOneWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutApplicationFormInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hiringTeam?: JobHiringMemberUncheckedUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUncheckedUpdateOneWithoutJobNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUncheckedUpdateOneWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedUpdateOneWithoutJobNestedInput
  }

  export type CustomQuestionUpsertWithoutApplicationFormFieldsInput = {
    update: XOR<CustomQuestionUpdateWithoutApplicationFormFieldsInput, CustomQuestionUncheckedUpdateWithoutApplicationFormFieldsInput>
    create: XOR<CustomQuestionCreateWithoutApplicationFormFieldsInput, CustomQuestionUncheckedCreateWithoutApplicationFormFieldsInput>
    where?: CustomQuestionWhereInput
  }

  export type CustomQuestionUpdateToOneWithWhereWithoutApplicationFormFieldsInput = {
    where?: CustomQuestionWhereInput
    data: XOR<CustomQuestionUpdateWithoutApplicationFormFieldsInput, CustomQuestionUncheckedUpdateWithoutApplicationFormFieldsInput>
  }

  export type CustomQuestionUpdateWithoutApplicationFormFieldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    questionText?: StringFieldUpdateOperationsInput | string
    responseType?: EnumResponseTypeFieldUpdateOperationsInput | $Enums.ResponseType
    options?: NullableJsonNullValueInput | InputJsonValue
    visibility?: EnumResponseVisibilityFieldUpdateOperationsInput | $Enums.ResponseVisibility
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateAnswers?: CandidateAnswerUpdateManyWithoutCustomQuestionNestedInput
  }

  export type CustomQuestionUncheckedUpdateWithoutApplicationFormFieldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    questionText?: StringFieldUpdateOperationsInput | string
    responseType?: EnumResponseTypeFieldUpdateOperationsInput | $Enums.ResponseType
    options?: NullableJsonNullValueInput | InputJsonValue
    visibility?: EnumResponseVisibilityFieldUpdateOperationsInput | $Enums.ResponseVisibility
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateAnswers?: CandidateAnswerUncheckedUpdateManyWithoutCustomQuestionNestedInput
  }

  export type ApplicationFormFieldCreateWithoutCustomQuestionInput = {
    id?: string
    fieldName: string
    label: string
    fieldType: $Enums.FieldType
    isRequired?: boolean
    isOptional?: boolean
    isDisabled?: boolean
    order: number
    job: JobCreateNestedOneWithoutApplicationFormInput
  }

  export type ApplicationFormFieldUncheckedCreateWithoutCustomQuestionInput = {
    id?: string
    jobId: string
    fieldName: string
    label: string
    fieldType: $Enums.FieldType
    isRequired?: boolean
    isOptional?: boolean
    isDisabled?: boolean
    order: number
  }

  export type ApplicationFormFieldCreateOrConnectWithoutCustomQuestionInput = {
    where: ApplicationFormFieldWhereUniqueInput
    create: XOR<ApplicationFormFieldCreateWithoutCustomQuestionInput, ApplicationFormFieldUncheckedCreateWithoutCustomQuestionInput>
  }

  export type ApplicationFormFieldCreateManyCustomQuestionInputEnvelope = {
    data: ApplicationFormFieldCreateManyCustomQuestionInput | ApplicationFormFieldCreateManyCustomQuestionInput[]
    skipDuplicates?: boolean
  }

  export type CandidateAnswerCreateWithoutCustomQuestionInput = {
    id?: string
    answerText?: string | null
    answerFileUrl?: string | null
    answeredAt?: Date | string
    application: ApplicationCreateNestedOneWithoutCandidateAnswersInput
    candidate: CandidateCreateNestedOneWithoutCandidateAnswersInput
  }

  export type CandidateAnswerUncheckedCreateWithoutCustomQuestionInput = {
    id?: string
    applicationId: string
    answerText?: string | null
    answerFileUrl?: string | null
    answeredAt?: Date | string
    candidateId: string
  }

  export type CandidateAnswerCreateOrConnectWithoutCustomQuestionInput = {
    where: CandidateAnswerWhereUniqueInput
    create: XOR<CandidateAnswerCreateWithoutCustomQuestionInput, CandidateAnswerUncheckedCreateWithoutCustomQuestionInput>
  }

  export type CandidateAnswerCreateManyCustomQuestionInputEnvelope = {
    data: CandidateAnswerCreateManyCustomQuestionInput | CandidateAnswerCreateManyCustomQuestionInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationFormFieldUpsertWithWhereUniqueWithoutCustomQuestionInput = {
    where: ApplicationFormFieldWhereUniqueInput
    update: XOR<ApplicationFormFieldUpdateWithoutCustomQuestionInput, ApplicationFormFieldUncheckedUpdateWithoutCustomQuestionInput>
    create: XOR<ApplicationFormFieldCreateWithoutCustomQuestionInput, ApplicationFormFieldUncheckedCreateWithoutCustomQuestionInput>
  }

  export type ApplicationFormFieldUpdateWithWhereUniqueWithoutCustomQuestionInput = {
    where: ApplicationFormFieldWhereUniqueInput
    data: XOR<ApplicationFormFieldUpdateWithoutCustomQuestionInput, ApplicationFormFieldUncheckedUpdateWithoutCustomQuestionInput>
  }

  export type ApplicationFormFieldUpdateManyWithWhereWithoutCustomQuestionInput = {
    where: ApplicationFormFieldScalarWhereInput
    data: XOR<ApplicationFormFieldUpdateManyMutationInput, ApplicationFormFieldUncheckedUpdateManyWithoutCustomQuestionInput>
  }

  export type CandidateAnswerUpsertWithWhereUniqueWithoutCustomQuestionInput = {
    where: CandidateAnswerWhereUniqueInput
    update: XOR<CandidateAnswerUpdateWithoutCustomQuestionInput, CandidateAnswerUncheckedUpdateWithoutCustomQuestionInput>
    create: XOR<CandidateAnswerCreateWithoutCustomQuestionInput, CandidateAnswerUncheckedCreateWithoutCustomQuestionInput>
  }

  export type CandidateAnswerUpdateWithWhereUniqueWithoutCustomQuestionInput = {
    where: CandidateAnswerWhereUniqueInput
    data: XOR<CandidateAnswerUpdateWithoutCustomQuestionInput, CandidateAnswerUncheckedUpdateWithoutCustomQuestionInput>
  }

  export type CandidateAnswerUpdateManyWithWhereWithoutCustomQuestionInput = {
    where: CandidateAnswerScalarWhereInput
    data: XOR<CandidateAnswerUpdateManyMutationInput, CandidateAnswerUncheckedUpdateManyWithoutCustomQuestionInput>
  }

  export type CandidateAnswerScalarWhereInput = {
    AND?: CandidateAnswerScalarWhereInput | CandidateAnswerScalarWhereInput[]
    OR?: CandidateAnswerScalarWhereInput[]
    NOT?: CandidateAnswerScalarWhereInput | CandidateAnswerScalarWhereInput[]
    id?: StringFilter<"CandidateAnswer"> | string
    applicationId?: StringFilter<"CandidateAnswer"> | string
    customQuestionId?: StringFilter<"CandidateAnswer"> | string
    answerText?: StringNullableFilter<"CandidateAnswer"> | string | null
    answerFileUrl?: StringNullableFilter<"CandidateAnswer"> | string | null
    answeredAt?: DateTimeFilter<"CandidateAnswer"> | Date | string
    candidateId?: StringFilter<"CandidateAnswer"> | string
  }

  export type ApplicationCreateWithoutCandidateInput = {
    id?: string
    appliedAt?: Date | string
    currentStageId?: string | null
    status?: $Enums.ApplicationStatus
    disqualificationReason?: string | null
    archivedAt?: Date | string | null
    hiredAt?: Date | string | null
    source?: string | null
    job: JobCreateNestedOneWithoutApplicationsInput
    candidateAnswers?: CandidateAnswerCreateNestedManyWithoutApplicationInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutApplicationInput
    messages?: MessageThreadCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutCandidateInput = {
    id?: string
    jobId: string
    appliedAt?: Date | string
    currentStageId?: string | null
    status?: $Enums.ApplicationStatus
    disqualificationReason?: string | null
    archivedAt?: Date | string | null
    hiredAt?: Date | string | null
    source?: string | null
    candidateAnswers?: CandidateAnswerUncheckedCreateNestedManyWithoutApplicationInput
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutApplicationInput
    messages?: MessageThreadUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutCandidateInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput>
  }

  export type ApplicationCreateManyCandidateInputEnvelope = {
    data: ApplicationCreateManyCandidateInput | ApplicationCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type CandidateAnswerCreateWithoutCandidateInput = {
    id?: string
    answerText?: string | null
    answerFileUrl?: string | null
    answeredAt?: Date | string
    application: ApplicationCreateNestedOneWithoutCandidateAnswersInput
    customQuestion: CustomQuestionCreateNestedOneWithoutCandidateAnswersInput
  }

  export type CandidateAnswerUncheckedCreateWithoutCandidateInput = {
    id?: string
    applicationId: string
    customQuestionId: string
    answerText?: string | null
    answerFileUrl?: string | null
    answeredAt?: Date | string
  }

  export type CandidateAnswerCreateOrConnectWithoutCandidateInput = {
    where: CandidateAnswerWhereUniqueInput
    create: XOR<CandidateAnswerCreateWithoutCandidateInput, CandidateAnswerUncheckedCreateWithoutCandidateInput>
  }

  export type CandidateAnswerCreateManyCandidateInputEnvelope = {
    data: CandidateAnswerCreateManyCandidateInput | CandidateAnswerCreateManyCandidateInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationUpsertWithWhereUniqueWithoutCandidateInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutCandidateInput, ApplicationUncheckedUpdateWithoutCandidateInput>
    create: XOR<ApplicationCreateWithoutCandidateInput, ApplicationUncheckedCreateWithoutCandidateInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutCandidateInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutCandidateInput, ApplicationUncheckedUpdateWithoutCandidateInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutCandidateInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutCandidateInput>
  }

  export type CandidateAnswerUpsertWithWhereUniqueWithoutCandidateInput = {
    where: CandidateAnswerWhereUniqueInput
    update: XOR<CandidateAnswerUpdateWithoutCandidateInput, CandidateAnswerUncheckedUpdateWithoutCandidateInput>
    create: XOR<CandidateAnswerCreateWithoutCandidateInput, CandidateAnswerUncheckedCreateWithoutCandidateInput>
  }

  export type CandidateAnswerUpdateWithWhereUniqueWithoutCandidateInput = {
    where: CandidateAnswerWhereUniqueInput
    data: XOR<CandidateAnswerUpdateWithoutCandidateInput, CandidateAnswerUncheckedUpdateWithoutCandidateInput>
  }

  export type CandidateAnswerUpdateManyWithWhereWithoutCandidateInput = {
    where: CandidateAnswerScalarWhereInput
    data: XOR<CandidateAnswerUpdateManyMutationInput, CandidateAnswerUncheckedUpdateManyWithoutCandidateInput>
  }

  export type JobCreateWithoutApplicationsInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutJobsInput
    department?: DepartmentCreateNestedOneWithoutJobsInput
    location?: JobLocationCreateNestedOneWithoutJobsInput
    applicationForm?: ApplicationFormFieldCreateNestedManyWithoutJobInput
    hiringTeam?: JobHiringMemberCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowCreateNestedOneWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigCreateNestedOneWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigCreateNestedOneWithoutJobInput
  }

  export type JobUncheckedCreateWithoutApplicationsInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    companyId: string
    departmentId?: string | null
    locationId?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationForm?: ApplicationFormFieldUncheckedCreateNestedManyWithoutJobInput
    hiringTeam?: JobHiringMemberUncheckedCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowUncheckedCreateNestedOneWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigUncheckedCreateNestedOneWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedCreateNestedOneWithoutJobInput
  }

  export type JobCreateOrConnectWithoutApplicationsInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutApplicationsInput, JobUncheckedCreateWithoutApplicationsInput>
  }

  export type CandidateCreateWithoutApplicationsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    resumeUrl?: string | null
    coverLetterText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateAnswers?: CandidateAnswerCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutApplicationsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    resumeUrl?: string | null
    coverLetterText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateAnswers?: CandidateAnswerUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutApplicationsInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutApplicationsInput, CandidateUncheckedCreateWithoutApplicationsInput>
  }

  export type CandidateAnswerCreateWithoutApplicationInput = {
    id?: string
    answerText?: string | null
    answerFileUrl?: string | null
    answeredAt?: Date | string
    customQuestion: CustomQuestionCreateNestedOneWithoutCandidateAnswersInput
    candidate: CandidateCreateNestedOneWithoutCandidateAnswersInput
  }

  export type CandidateAnswerUncheckedCreateWithoutApplicationInput = {
    id?: string
    customQuestionId: string
    answerText?: string | null
    answerFileUrl?: string | null
    answeredAt?: Date | string
    candidateId: string
  }

  export type CandidateAnswerCreateOrConnectWithoutApplicationInput = {
    where: CandidateAnswerWhereUniqueInput
    create: XOR<CandidateAnswerCreateWithoutApplicationInput, CandidateAnswerUncheckedCreateWithoutApplicationInput>
  }

  export type CandidateAnswerCreateManyApplicationInputEnvelope = {
    data: CandidateAnswerCreateManyApplicationInput | CandidateAnswerCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type CandidateRatingCreateWithoutApplicationInput = {
    id?: string
    jobWorkflowStageId: string
    overallScore: number
    comments?: string | null
    submittedAt?: Date | string
    rater: UserCreateNestedOneWithoutCandidateRatingsInput
    ratingCardTemplate: RatingCardTemplateCreateNestedOneWithoutCandidateRatingsInput
    categoryScores?: CategoryScoreCreateNestedManyWithoutCandidateRatingInput
  }

  export type CandidateRatingUncheckedCreateWithoutApplicationInput = {
    id?: string
    jobWorkflowStageId: string
    raterId: string
    ratingCardTemplateId: string
    overallScore: number
    comments?: string | null
    submittedAt?: Date | string
    categoryScores?: CategoryScoreUncheckedCreateNestedManyWithoutCandidateRatingInput
  }

  export type CandidateRatingCreateOrConnectWithoutApplicationInput = {
    where: CandidateRatingWhereUniqueInput
    create: XOR<CandidateRatingCreateWithoutApplicationInput, CandidateRatingUncheckedCreateWithoutApplicationInput>
  }

  export type CandidateRatingCreateManyApplicationInputEnvelope = {
    data: CandidateRatingCreateManyApplicationInput | CandidateRatingCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type MessageThreadCreateWithoutApplicationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageCreateNestedManyWithoutThreadInput
  }

  export type MessageThreadUncheckedCreateWithoutApplicationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutThreadInput
  }

  export type MessageThreadCreateOrConnectWithoutApplicationInput = {
    where: MessageThreadWhereUniqueInput
    create: XOR<MessageThreadCreateWithoutApplicationInput, MessageThreadUncheckedCreateWithoutApplicationInput>
  }

  export type MessageThreadCreateManyApplicationInputEnvelope = {
    data: MessageThreadCreateManyApplicationInput | MessageThreadCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type JobUpsertWithoutApplicationsInput = {
    update: XOR<JobUpdateWithoutApplicationsInput, JobUncheckedUpdateWithoutApplicationsInput>
    create: XOR<JobCreateWithoutApplicationsInput, JobUncheckedCreateWithoutApplicationsInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutApplicationsInput, JobUncheckedUpdateWithoutApplicationsInput>
  }

  export type JobUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    department?: DepartmentUpdateOneWithoutJobsNestedInput
    location?: JobLocationUpdateOneWithoutJobsNestedInput
    applicationForm?: ApplicationFormFieldUpdateManyWithoutJobNestedInput
    hiringTeam?: JobHiringMemberUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUpdateOneWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUpdateOneWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUpdateOneWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationForm?: ApplicationFormFieldUncheckedUpdateManyWithoutJobNestedInput
    hiringTeam?: JobHiringMemberUncheckedUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUncheckedUpdateOneWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUncheckedUpdateOneWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedUpdateOneWithoutJobNestedInput
  }

  export type CandidateUpsertWithoutApplicationsInput = {
    update: XOR<CandidateUpdateWithoutApplicationsInput, CandidateUncheckedUpdateWithoutApplicationsInput>
    create: XOR<CandidateCreateWithoutApplicationsInput, CandidateUncheckedCreateWithoutApplicationsInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutApplicationsInput, CandidateUncheckedUpdateWithoutApplicationsInput>
  }

  export type CandidateUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateAnswers?: CandidateAnswerUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutApplicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateAnswers?: CandidateAnswerUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateAnswerUpsertWithWhereUniqueWithoutApplicationInput = {
    where: CandidateAnswerWhereUniqueInput
    update: XOR<CandidateAnswerUpdateWithoutApplicationInput, CandidateAnswerUncheckedUpdateWithoutApplicationInput>
    create: XOR<CandidateAnswerCreateWithoutApplicationInput, CandidateAnswerUncheckedCreateWithoutApplicationInput>
  }

  export type CandidateAnswerUpdateWithWhereUniqueWithoutApplicationInput = {
    where: CandidateAnswerWhereUniqueInput
    data: XOR<CandidateAnswerUpdateWithoutApplicationInput, CandidateAnswerUncheckedUpdateWithoutApplicationInput>
  }

  export type CandidateAnswerUpdateManyWithWhereWithoutApplicationInput = {
    where: CandidateAnswerScalarWhereInput
    data: XOR<CandidateAnswerUpdateManyMutationInput, CandidateAnswerUncheckedUpdateManyWithoutApplicationInput>
  }

  export type CandidateRatingUpsertWithWhereUniqueWithoutApplicationInput = {
    where: CandidateRatingWhereUniqueInput
    update: XOR<CandidateRatingUpdateWithoutApplicationInput, CandidateRatingUncheckedUpdateWithoutApplicationInput>
    create: XOR<CandidateRatingCreateWithoutApplicationInput, CandidateRatingUncheckedCreateWithoutApplicationInput>
  }

  export type CandidateRatingUpdateWithWhereUniqueWithoutApplicationInput = {
    where: CandidateRatingWhereUniqueInput
    data: XOR<CandidateRatingUpdateWithoutApplicationInput, CandidateRatingUncheckedUpdateWithoutApplicationInput>
  }

  export type CandidateRatingUpdateManyWithWhereWithoutApplicationInput = {
    where: CandidateRatingScalarWhereInput
    data: XOR<CandidateRatingUpdateManyMutationInput, CandidateRatingUncheckedUpdateManyWithoutApplicationInput>
  }

  export type MessageThreadUpsertWithWhereUniqueWithoutApplicationInput = {
    where: MessageThreadWhereUniqueInput
    update: XOR<MessageThreadUpdateWithoutApplicationInput, MessageThreadUncheckedUpdateWithoutApplicationInput>
    create: XOR<MessageThreadCreateWithoutApplicationInput, MessageThreadUncheckedCreateWithoutApplicationInput>
  }

  export type MessageThreadUpdateWithWhereUniqueWithoutApplicationInput = {
    where: MessageThreadWhereUniqueInput
    data: XOR<MessageThreadUpdateWithoutApplicationInput, MessageThreadUncheckedUpdateWithoutApplicationInput>
  }

  export type MessageThreadUpdateManyWithWhereWithoutApplicationInput = {
    where: MessageThreadScalarWhereInput
    data: XOR<MessageThreadUpdateManyMutationInput, MessageThreadUncheckedUpdateManyWithoutApplicationInput>
  }

  export type MessageThreadScalarWhereInput = {
    AND?: MessageThreadScalarWhereInput | MessageThreadScalarWhereInput[]
    OR?: MessageThreadScalarWhereInput[]
    NOT?: MessageThreadScalarWhereInput | MessageThreadScalarWhereInput[]
    id?: StringFilter<"MessageThread"> | string
    applicationId?: StringFilter<"MessageThread"> | string
    createdAt?: DateTimeFilter<"MessageThread"> | Date | string
    updatedAt?: DateTimeFilter<"MessageThread"> | Date | string
  }

  export type ApplicationCreateWithoutCandidateAnswersInput = {
    id?: string
    appliedAt?: Date | string
    currentStageId?: string | null
    status?: $Enums.ApplicationStatus
    disqualificationReason?: string | null
    archivedAt?: Date | string | null
    hiredAt?: Date | string | null
    source?: string | null
    job: JobCreateNestedOneWithoutApplicationsInput
    candidate: CandidateCreateNestedOneWithoutApplicationsInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutApplicationInput
    messages?: MessageThreadCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutCandidateAnswersInput = {
    id?: string
    jobId: string
    candidateId: string
    appliedAt?: Date | string
    currentStageId?: string | null
    status?: $Enums.ApplicationStatus
    disqualificationReason?: string | null
    archivedAt?: Date | string | null
    hiredAt?: Date | string | null
    source?: string | null
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutApplicationInput
    messages?: MessageThreadUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutCandidateAnswersInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutCandidateAnswersInput, ApplicationUncheckedCreateWithoutCandidateAnswersInput>
  }

  export type CustomQuestionCreateWithoutCandidateAnswersInput = {
    id?: string
    companyId: string
    questionText: string
    responseType: $Enums.ResponseType
    options?: NullableJsonNullValueInput | InputJsonValue
    visibility?: $Enums.ResponseVisibility
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationFormFields?: ApplicationFormFieldCreateNestedManyWithoutCustomQuestionInput
  }

  export type CustomQuestionUncheckedCreateWithoutCandidateAnswersInput = {
    id?: string
    companyId: string
    questionText: string
    responseType: $Enums.ResponseType
    options?: NullableJsonNullValueInput | InputJsonValue
    visibility?: $Enums.ResponseVisibility
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationFormFields?: ApplicationFormFieldUncheckedCreateNestedManyWithoutCustomQuestionInput
  }

  export type CustomQuestionCreateOrConnectWithoutCandidateAnswersInput = {
    where: CustomQuestionWhereUniqueInput
    create: XOR<CustomQuestionCreateWithoutCandidateAnswersInput, CustomQuestionUncheckedCreateWithoutCandidateAnswersInput>
  }

  export type CandidateCreateWithoutCandidateAnswersInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    resumeUrl?: string | null
    coverLetterText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationCreateNestedManyWithoutCandidateInput
  }

  export type CandidateUncheckedCreateWithoutCandidateAnswersInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber?: string | null
    resumeUrl?: string | null
    coverLetterText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutCandidateInput
  }

  export type CandidateCreateOrConnectWithoutCandidateAnswersInput = {
    where: CandidateWhereUniqueInput
    create: XOR<CandidateCreateWithoutCandidateAnswersInput, CandidateUncheckedCreateWithoutCandidateAnswersInput>
  }

  export type ApplicationUpsertWithoutCandidateAnswersInput = {
    update: XOR<ApplicationUpdateWithoutCandidateAnswersInput, ApplicationUncheckedUpdateWithoutCandidateAnswersInput>
    create: XOR<ApplicationCreateWithoutCandidateAnswersInput, ApplicationUncheckedCreateWithoutCandidateAnswersInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutCandidateAnswersInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutCandidateAnswersInput, ApplicationUncheckedUpdateWithoutCandidateAnswersInput>
  }

  export type ApplicationUpdateWithoutCandidateAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStageId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    disqualificationReason?: NullableStringFieldUpdateOperationsInput | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    job?: JobUpdateOneRequiredWithoutApplicationsNestedInput
    candidate?: CandidateUpdateOneRequiredWithoutApplicationsNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutApplicationNestedInput
    messages?: MessageThreadUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutCandidateAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStageId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    disqualificationReason?: NullableStringFieldUpdateOperationsInput | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutApplicationNestedInput
    messages?: MessageThreadUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type CustomQuestionUpsertWithoutCandidateAnswersInput = {
    update: XOR<CustomQuestionUpdateWithoutCandidateAnswersInput, CustomQuestionUncheckedUpdateWithoutCandidateAnswersInput>
    create: XOR<CustomQuestionCreateWithoutCandidateAnswersInput, CustomQuestionUncheckedCreateWithoutCandidateAnswersInput>
    where?: CustomQuestionWhereInput
  }

  export type CustomQuestionUpdateToOneWithWhereWithoutCandidateAnswersInput = {
    where?: CustomQuestionWhereInput
    data: XOR<CustomQuestionUpdateWithoutCandidateAnswersInput, CustomQuestionUncheckedUpdateWithoutCandidateAnswersInput>
  }

  export type CustomQuestionUpdateWithoutCandidateAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    questionText?: StringFieldUpdateOperationsInput | string
    responseType?: EnumResponseTypeFieldUpdateOperationsInput | $Enums.ResponseType
    options?: NullableJsonNullValueInput | InputJsonValue
    visibility?: EnumResponseVisibilityFieldUpdateOperationsInput | $Enums.ResponseVisibility
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationFormFields?: ApplicationFormFieldUpdateManyWithoutCustomQuestionNestedInput
  }

  export type CustomQuestionUncheckedUpdateWithoutCandidateAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    questionText?: StringFieldUpdateOperationsInput | string
    responseType?: EnumResponseTypeFieldUpdateOperationsInput | $Enums.ResponseType
    options?: NullableJsonNullValueInput | InputJsonValue
    visibility?: EnumResponseVisibilityFieldUpdateOperationsInput | $Enums.ResponseVisibility
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationFormFields?: ApplicationFormFieldUncheckedUpdateManyWithoutCustomQuestionNestedInput
  }

  export type CandidateUpsertWithoutCandidateAnswersInput = {
    update: XOR<CandidateUpdateWithoutCandidateAnswersInput, CandidateUncheckedUpdateWithoutCandidateAnswersInput>
    create: XOR<CandidateCreateWithoutCandidateAnswersInput, CandidateUncheckedCreateWithoutCandidateAnswersInput>
    where?: CandidateWhereInput
  }

  export type CandidateUpdateToOneWithWhereWithoutCandidateAnswersInput = {
    where?: CandidateWhereInput
    data: XOR<CandidateUpdateWithoutCandidateAnswersInput, CandidateUncheckedUpdateWithoutCandidateAnswersInput>
  }

  export type CandidateUpdateWithoutCandidateAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUpdateManyWithoutCandidateNestedInput
  }

  export type CandidateUncheckedUpdateWithoutCandidateAnswersInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    resumeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    coverLetterText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutCandidateNestedInput
  }

  export type CompanyCreateWithoutWorkflowTemplatesInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompaniesOwnedInput
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
    locations?: JobLocationCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateCreateNestedManyWithoutCompanyInput
    questions?: QuestionCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutWorkflowTemplatesInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
    locations?: JobLocationUncheckedCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateUncheckedCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingUncheckedCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateUncheckedCreateNestedManyWithoutCompanyInput
    questions?: QuestionUncheckedCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutWorkflowTemplatesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutWorkflowTemplatesInput, CompanyUncheckedCreateWithoutWorkflowTemplatesInput>
  }

  export type WorkflowStageTemplateCreateWithoutWorkflowTemplateInput = {
    id?: string
    name: string
    type: $Enums.StageType
    order: number
    isDefault?: boolean
    canBeDeleted?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    visibilityToReviewers?: boolean
  }

  export type WorkflowStageTemplateUncheckedCreateWithoutWorkflowTemplateInput = {
    id?: string
    name: string
    type: $Enums.StageType
    order: number
    isDefault?: boolean
    canBeDeleted?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    visibilityToReviewers?: boolean
  }

  export type WorkflowStageTemplateCreateOrConnectWithoutWorkflowTemplateInput = {
    where: WorkflowStageTemplateWhereUniqueInput
    create: XOR<WorkflowStageTemplateCreateWithoutWorkflowTemplateInput, WorkflowStageTemplateUncheckedCreateWithoutWorkflowTemplateInput>
  }

  export type WorkflowStageTemplateCreateManyWorkflowTemplateInputEnvelope = {
    data: WorkflowStageTemplateCreateManyWorkflowTemplateInput | WorkflowStageTemplateCreateManyWorkflowTemplateInput[]
    skipDuplicates?: boolean
  }

  export type JobWorkflowCreateWithoutWorkflowTemplateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutJobWorkflowInput
    stages?: JobWorkflowStageCreateNestedManyWithoutJobWorkflowInput
  }

  export type JobWorkflowUncheckedCreateWithoutWorkflowTemplateInput = {
    id?: string
    jobId: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    stages?: JobWorkflowStageUncheckedCreateNestedManyWithoutJobWorkflowInput
  }

  export type JobWorkflowCreateOrConnectWithoutWorkflowTemplateInput = {
    where: JobWorkflowWhereUniqueInput
    create: XOR<JobWorkflowCreateWithoutWorkflowTemplateInput, JobWorkflowUncheckedCreateWithoutWorkflowTemplateInput>
  }

  export type JobWorkflowCreateManyWorkflowTemplateInputEnvelope = {
    data: JobWorkflowCreateManyWorkflowTemplateInput | JobWorkflowCreateManyWorkflowTemplateInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutWorkflowTemplatesInput = {
    update: XOR<CompanyUpdateWithoutWorkflowTemplatesInput, CompanyUncheckedUpdateWithoutWorkflowTemplatesInput>
    create: XOR<CompanyCreateWithoutWorkflowTemplatesInput, CompanyUncheckedCreateWithoutWorkflowTemplatesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutWorkflowTemplatesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutWorkflowTemplatesInput, CompanyUncheckedUpdateWithoutWorkflowTemplatesInput>
  }

  export type CompanyUpdateWithoutWorkflowTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompaniesOwnedNestedInput
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutWorkflowTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUncheckedUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUncheckedUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type WorkflowStageTemplateUpsertWithWhereUniqueWithoutWorkflowTemplateInput = {
    where: WorkflowStageTemplateWhereUniqueInput
    update: XOR<WorkflowStageTemplateUpdateWithoutWorkflowTemplateInput, WorkflowStageTemplateUncheckedUpdateWithoutWorkflowTemplateInput>
    create: XOR<WorkflowStageTemplateCreateWithoutWorkflowTemplateInput, WorkflowStageTemplateUncheckedCreateWithoutWorkflowTemplateInput>
  }

  export type WorkflowStageTemplateUpdateWithWhereUniqueWithoutWorkflowTemplateInput = {
    where: WorkflowStageTemplateWhereUniqueInput
    data: XOR<WorkflowStageTemplateUpdateWithoutWorkflowTemplateInput, WorkflowStageTemplateUncheckedUpdateWithoutWorkflowTemplateInput>
  }

  export type WorkflowStageTemplateUpdateManyWithWhereWithoutWorkflowTemplateInput = {
    where: WorkflowStageTemplateScalarWhereInput
    data: XOR<WorkflowStageTemplateUpdateManyMutationInput, WorkflowStageTemplateUncheckedUpdateManyWithoutWorkflowTemplateInput>
  }

  export type WorkflowStageTemplateScalarWhereInput = {
    AND?: WorkflowStageTemplateScalarWhereInput | WorkflowStageTemplateScalarWhereInput[]
    OR?: WorkflowStageTemplateScalarWhereInput[]
    NOT?: WorkflowStageTemplateScalarWhereInput | WorkflowStageTemplateScalarWhereInput[]
    id?: StringFilter<"WorkflowStageTemplate"> | string
    workflowTemplateId?: StringFilter<"WorkflowStageTemplate"> | string
    name?: StringFilter<"WorkflowStageTemplate"> | string
    type?: EnumStageTypeFilter<"WorkflowStageTemplate"> | $Enums.StageType
    order?: IntFilter<"WorkflowStageTemplate"> | number
    isDefault?: BoolFilter<"WorkflowStageTemplate"> | boolean
    canBeDeleted?: BoolFilter<"WorkflowStageTemplate"> | boolean
    settings?: JsonNullableFilter<"WorkflowStageTemplate">
    visibilityToReviewers?: BoolFilter<"WorkflowStageTemplate"> | boolean
  }

  export type JobWorkflowUpsertWithWhereUniqueWithoutWorkflowTemplateInput = {
    where: JobWorkflowWhereUniqueInput
    update: XOR<JobWorkflowUpdateWithoutWorkflowTemplateInput, JobWorkflowUncheckedUpdateWithoutWorkflowTemplateInput>
    create: XOR<JobWorkflowCreateWithoutWorkflowTemplateInput, JobWorkflowUncheckedCreateWithoutWorkflowTemplateInput>
  }

  export type JobWorkflowUpdateWithWhereUniqueWithoutWorkflowTemplateInput = {
    where: JobWorkflowWhereUniqueInput
    data: XOR<JobWorkflowUpdateWithoutWorkflowTemplateInput, JobWorkflowUncheckedUpdateWithoutWorkflowTemplateInput>
  }

  export type JobWorkflowUpdateManyWithWhereWithoutWorkflowTemplateInput = {
    where: JobWorkflowScalarWhereInput
    data: XOR<JobWorkflowUpdateManyMutationInput, JobWorkflowUncheckedUpdateManyWithoutWorkflowTemplateInput>
  }

  export type JobWorkflowScalarWhereInput = {
    AND?: JobWorkflowScalarWhereInput | JobWorkflowScalarWhereInput[]
    OR?: JobWorkflowScalarWhereInput[]
    NOT?: JobWorkflowScalarWhereInput | JobWorkflowScalarWhereInput[]
    id?: StringFilter<"JobWorkflow"> | string
    jobId?: StringFilter<"JobWorkflow"> | string
    workflowTemplateId?: StringNullableFilter<"JobWorkflow"> | string | null
    name?: StringFilter<"JobWorkflow"> | string
    createdAt?: DateTimeFilter<"JobWorkflow"> | Date | string
    updatedAt?: DateTimeFilter<"JobWorkflow"> | Date | string
  }

  export type WorkflowTemplateCreateWithoutStagesInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutWorkflowTemplatesInput
    jobWorkflows?: JobWorkflowCreateNestedManyWithoutWorkflowTemplateInput
  }

  export type WorkflowTemplateUncheckedCreateWithoutStagesInput = {
    id?: string
    name: string
    companyId: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jobWorkflows?: JobWorkflowUncheckedCreateNestedManyWithoutWorkflowTemplateInput
  }

  export type WorkflowTemplateCreateOrConnectWithoutStagesInput = {
    where: WorkflowTemplateWhereUniqueInput
    create: XOR<WorkflowTemplateCreateWithoutStagesInput, WorkflowTemplateUncheckedCreateWithoutStagesInput>
  }

  export type WorkflowTemplateUpsertWithoutStagesInput = {
    update: XOR<WorkflowTemplateUpdateWithoutStagesInput, WorkflowTemplateUncheckedUpdateWithoutStagesInput>
    create: XOR<WorkflowTemplateCreateWithoutStagesInput, WorkflowTemplateUncheckedCreateWithoutStagesInput>
    where?: WorkflowTemplateWhereInput
  }

  export type WorkflowTemplateUpdateToOneWithWhereWithoutStagesInput = {
    where?: WorkflowTemplateWhereInput
    data: XOR<WorkflowTemplateUpdateWithoutStagesInput, WorkflowTemplateUncheckedUpdateWithoutStagesInput>
  }

  export type WorkflowTemplateUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutWorkflowTemplatesNestedInput
    jobWorkflows?: JobWorkflowUpdateManyWithoutWorkflowTemplateNestedInput
  }

  export type WorkflowTemplateUncheckedUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobWorkflows?: JobWorkflowUncheckedUpdateManyWithoutWorkflowTemplateNestedInput
  }

  export type JobCreateWithoutJobWorkflowInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutJobsInput
    department?: DepartmentCreateNestedOneWithoutJobsInput
    location?: JobLocationCreateNestedOneWithoutJobsInput
    applicationForm?: ApplicationFormFieldCreateNestedManyWithoutJobInput
    hiringTeam?: JobHiringMemberCreateNestedManyWithoutJobInput
    applications?: ApplicationCreateNestedManyWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigCreateNestedOneWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigCreateNestedOneWithoutJobInput
  }

  export type JobUncheckedCreateWithoutJobWorkflowInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    companyId: string
    departmentId?: string | null
    locationId?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationForm?: ApplicationFormFieldUncheckedCreateNestedManyWithoutJobInput
    hiringTeam?: JobHiringMemberUncheckedCreateNestedManyWithoutJobInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigUncheckedCreateNestedOneWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedCreateNestedOneWithoutJobInput
  }

  export type JobCreateOrConnectWithoutJobWorkflowInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutJobWorkflowInput, JobUncheckedCreateWithoutJobWorkflowInput>
  }

  export type WorkflowTemplateCreateWithoutJobWorkflowsInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutWorkflowTemplatesInput
    stages?: WorkflowStageTemplateCreateNestedManyWithoutWorkflowTemplateInput
  }

  export type WorkflowTemplateUncheckedCreateWithoutJobWorkflowsInput = {
    id?: string
    name: string
    companyId: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    stages?: WorkflowStageTemplateUncheckedCreateNestedManyWithoutWorkflowTemplateInput
  }

  export type WorkflowTemplateCreateOrConnectWithoutJobWorkflowsInput = {
    where: WorkflowTemplateWhereUniqueInput
    create: XOR<WorkflowTemplateCreateWithoutJobWorkflowsInput, WorkflowTemplateUncheckedCreateWithoutJobWorkflowsInput>
  }

  export type JobWorkflowStageCreateWithoutJobWorkflowInput = {
    id?: string
    name: string
    type: $Enums.StageType
    order: number
    settings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JobWorkflowStageUncheckedCreateWithoutJobWorkflowInput = {
    id?: string
    name: string
    type: $Enums.StageType
    order: number
    settings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JobWorkflowStageCreateOrConnectWithoutJobWorkflowInput = {
    where: JobWorkflowStageWhereUniqueInput
    create: XOR<JobWorkflowStageCreateWithoutJobWorkflowInput, JobWorkflowStageUncheckedCreateWithoutJobWorkflowInput>
  }

  export type JobWorkflowStageCreateManyJobWorkflowInputEnvelope = {
    data: JobWorkflowStageCreateManyJobWorkflowInput | JobWorkflowStageCreateManyJobWorkflowInput[]
    skipDuplicates?: boolean
  }

  export type JobUpsertWithoutJobWorkflowInput = {
    update: XOR<JobUpdateWithoutJobWorkflowInput, JobUncheckedUpdateWithoutJobWorkflowInput>
    create: XOR<JobCreateWithoutJobWorkflowInput, JobUncheckedCreateWithoutJobWorkflowInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutJobWorkflowInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutJobWorkflowInput, JobUncheckedUpdateWithoutJobWorkflowInput>
  }

  export type JobUpdateWithoutJobWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    department?: DepartmentUpdateOneWithoutJobsNestedInput
    location?: JobLocationUpdateOneWithoutJobsNestedInput
    applicationForm?: ApplicationFormFieldUpdateManyWithoutJobNestedInput
    hiringTeam?: JobHiringMemberUpdateManyWithoutJobNestedInput
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUpdateOneWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUpdateOneWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutJobWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationForm?: ApplicationFormFieldUncheckedUpdateManyWithoutJobNestedInput
    hiringTeam?: JobHiringMemberUncheckedUpdateManyWithoutJobNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUncheckedUpdateOneWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedUpdateOneWithoutJobNestedInput
  }

  export type WorkflowTemplateUpsertWithoutJobWorkflowsInput = {
    update: XOR<WorkflowTemplateUpdateWithoutJobWorkflowsInput, WorkflowTemplateUncheckedUpdateWithoutJobWorkflowsInput>
    create: XOR<WorkflowTemplateCreateWithoutJobWorkflowsInput, WorkflowTemplateUncheckedCreateWithoutJobWorkflowsInput>
    where?: WorkflowTemplateWhereInput
  }

  export type WorkflowTemplateUpdateToOneWithWhereWithoutJobWorkflowsInput = {
    where?: WorkflowTemplateWhereInput
    data: XOR<WorkflowTemplateUpdateWithoutJobWorkflowsInput, WorkflowTemplateUncheckedUpdateWithoutJobWorkflowsInput>
  }

  export type WorkflowTemplateUpdateWithoutJobWorkflowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutWorkflowTemplatesNestedInput
    stages?: WorkflowStageTemplateUpdateManyWithoutWorkflowTemplateNestedInput
  }

  export type WorkflowTemplateUncheckedUpdateWithoutJobWorkflowsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stages?: WorkflowStageTemplateUncheckedUpdateManyWithoutWorkflowTemplateNestedInput
  }

  export type JobWorkflowStageUpsertWithWhereUniqueWithoutJobWorkflowInput = {
    where: JobWorkflowStageWhereUniqueInput
    update: XOR<JobWorkflowStageUpdateWithoutJobWorkflowInput, JobWorkflowStageUncheckedUpdateWithoutJobWorkflowInput>
    create: XOR<JobWorkflowStageCreateWithoutJobWorkflowInput, JobWorkflowStageUncheckedCreateWithoutJobWorkflowInput>
  }

  export type JobWorkflowStageUpdateWithWhereUniqueWithoutJobWorkflowInput = {
    where: JobWorkflowStageWhereUniqueInput
    data: XOR<JobWorkflowStageUpdateWithoutJobWorkflowInput, JobWorkflowStageUncheckedUpdateWithoutJobWorkflowInput>
  }

  export type JobWorkflowStageUpdateManyWithWhereWithoutJobWorkflowInput = {
    where: JobWorkflowStageScalarWhereInput
    data: XOR<JobWorkflowStageUpdateManyMutationInput, JobWorkflowStageUncheckedUpdateManyWithoutJobWorkflowInput>
  }

  export type JobWorkflowStageScalarWhereInput = {
    AND?: JobWorkflowStageScalarWhereInput | JobWorkflowStageScalarWhereInput[]
    OR?: JobWorkflowStageScalarWhereInput[]
    NOT?: JobWorkflowStageScalarWhereInput | JobWorkflowStageScalarWhereInput[]
    id?: StringFilter<"JobWorkflowStage"> | string
    jobWorkflowId?: StringFilter<"JobWorkflowStage"> | string
    name?: StringFilter<"JobWorkflowStage"> | string
    type?: EnumStageTypeFilter<"JobWorkflowStage"> | $Enums.StageType
    order?: IntFilter<"JobWorkflowStage"> | number
    settings?: JsonNullableFilter<"JobWorkflowStage">
  }

  export type JobWorkflowCreateWithoutStagesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutJobWorkflowInput
    workflowTemplate?: WorkflowTemplateCreateNestedOneWithoutJobWorkflowsInput
  }

  export type JobWorkflowUncheckedCreateWithoutStagesInput = {
    id?: string
    jobId: string
    workflowTemplateId?: string | null
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobWorkflowCreateOrConnectWithoutStagesInput = {
    where: JobWorkflowWhereUniqueInput
    create: XOR<JobWorkflowCreateWithoutStagesInput, JobWorkflowUncheckedCreateWithoutStagesInput>
  }

  export type JobWorkflowUpsertWithoutStagesInput = {
    update: XOR<JobWorkflowUpdateWithoutStagesInput, JobWorkflowUncheckedUpdateWithoutStagesInput>
    create: XOR<JobWorkflowCreateWithoutStagesInput, JobWorkflowUncheckedCreateWithoutStagesInput>
    where?: JobWorkflowWhereInput
  }

  export type JobWorkflowUpdateToOneWithWhereWithoutStagesInput = {
    where?: JobWorkflowWhereInput
    data: XOR<JobWorkflowUpdateWithoutStagesInput, JobWorkflowUncheckedUpdateWithoutStagesInput>
  }

  export type JobWorkflowUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutJobWorkflowNestedInput
    workflowTemplate?: WorkflowTemplateUpdateOneWithoutJobWorkflowsNestedInput
  }

  export type JobWorkflowUncheckedUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    workflowTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCreateWithoutHiringTeamInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutJobsInput
    department?: DepartmentCreateNestedOneWithoutJobsInput
    location?: JobLocationCreateNestedOneWithoutJobsInput
    applicationForm?: ApplicationFormFieldCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowCreateNestedOneWithoutJobInput
    applications?: ApplicationCreateNestedManyWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigCreateNestedOneWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigCreateNestedOneWithoutJobInput
  }

  export type JobUncheckedCreateWithoutHiringTeamInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    companyId: string
    departmentId?: string | null
    locationId?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationForm?: ApplicationFormFieldUncheckedCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowUncheckedCreateNestedOneWithoutJobInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigUncheckedCreateNestedOneWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedCreateNestedOneWithoutJobInput
  }

  export type JobCreateOrConnectWithoutHiringTeamInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutHiringTeamInput, JobUncheckedCreateWithoutHiringTeamInput>
  }

  export type UserCreateWithoutJobHiringMembersInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutJobHiringMembersInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingUncheckedCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeUncheckedCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationUncheckedCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutJobHiringMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutJobHiringMembersInput, UserUncheckedCreateWithoutJobHiringMembersInput>
  }

  export type JobUpsertWithoutHiringTeamInput = {
    update: XOR<JobUpdateWithoutHiringTeamInput, JobUncheckedUpdateWithoutHiringTeamInput>
    create: XOR<JobCreateWithoutHiringTeamInput, JobUncheckedCreateWithoutHiringTeamInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutHiringTeamInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutHiringTeamInput, JobUncheckedUpdateWithoutHiringTeamInput>
  }

  export type JobUpdateWithoutHiringTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    department?: DepartmentUpdateOneWithoutJobsNestedInput
    location?: JobLocationUpdateOneWithoutJobsNestedInput
    applicationForm?: ApplicationFormFieldUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUpdateOneWithoutJobNestedInput
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUpdateOneWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUpdateOneWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutHiringTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationForm?: ApplicationFormFieldUncheckedUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUncheckedUpdateOneWithoutJobNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUncheckedUpdateOneWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedUpdateOneWithoutJobNestedInput
  }

  export type UserUpsertWithoutJobHiringMembersInput = {
    update: XOR<UserUpdateWithoutJobHiringMembersInput, UserUncheckedUpdateWithoutJobHiringMembersInput>
    create: XOR<UserCreateWithoutJobHiringMembersInput, UserUncheckedCreateWithoutJobHiringMembersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutJobHiringMembersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutJobHiringMembersInput, UserUncheckedUpdateWithoutJobHiringMembersInput>
  }

  export type UserUpdateWithoutJobHiringMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutJobHiringMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUncheckedUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUncheckedUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUncheckedUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompanyCreateWithoutRatingCardTemplatesInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompaniesOwnedInput
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
    locations?: JobLocationCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateCreateNestedManyWithoutCompanyInput
    questions?: QuestionCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutRatingCardTemplatesInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
    locations?: JobLocationUncheckedCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingUncheckedCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateUncheckedCreateNestedManyWithoutCompanyInput
    questions?: QuestionUncheckedCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutRatingCardTemplatesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutRatingCardTemplatesInput, CompanyUncheckedCreateWithoutRatingCardTemplatesInput>
  }

  export type RatingCategoryCreateWithoutRatingCardTemplateInput = {
    id?: string
    name: string
    description?: string | null
    order: number
    categoryScores?: CategoryScoreCreateNestedManyWithoutRatingCategoryInput
  }

  export type RatingCategoryUncheckedCreateWithoutRatingCardTemplateInput = {
    id?: string
    name: string
    description?: string | null
    order: number
    categoryScores?: CategoryScoreUncheckedCreateNestedManyWithoutRatingCategoryInput
  }

  export type RatingCategoryCreateOrConnectWithoutRatingCardTemplateInput = {
    where: RatingCategoryWhereUniqueInput
    create: XOR<RatingCategoryCreateWithoutRatingCardTemplateInput, RatingCategoryUncheckedCreateWithoutRatingCardTemplateInput>
  }

  export type RatingCategoryCreateManyRatingCardTemplateInputEnvelope = {
    data: RatingCategoryCreateManyRatingCardTemplateInput | RatingCategoryCreateManyRatingCardTemplateInput[]
    skipDuplicates?: boolean
  }

  export type CandidateRatingCreateWithoutRatingCardTemplateInput = {
    id?: string
    jobWorkflowStageId: string
    overallScore: number
    comments?: string | null
    submittedAt?: Date | string
    application: ApplicationCreateNestedOneWithoutCandidateRatingsInput
    rater: UserCreateNestedOneWithoutCandidateRatingsInput
    categoryScores?: CategoryScoreCreateNestedManyWithoutCandidateRatingInput
  }

  export type CandidateRatingUncheckedCreateWithoutRatingCardTemplateInput = {
    id?: string
    applicationId: string
    jobWorkflowStageId: string
    raterId: string
    overallScore: number
    comments?: string | null
    submittedAt?: Date | string
    categoryScores?: CategoryScoreUncheckedCreateNestedManyWithoutCandidateRatingInput
  }

  export type CandidateRatingCreateOrConnectWithoutRatingCardTemplateInput = {
    where: CandidateRatingWhereUniqueInput
    create: XOR<CandidateRatingCreateWithoutRatingCardTemplateInput, CandidateRatingUncheckedCreateWithoutRatingCardTemplateInput>
  }

  export type CandidateRatingCreateManyRatingCardTemplateInputEnvelope = {
    data: CandidateRatingCreateManyRatingCardTemplateInput | CandidateRatingCreateManyRatingCardTemplateInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutRatingCardTemplatesInput = {
    update: XOR<CompanyUpdateWithoutRatingCardTemplatesInput, CompanyUncheckedUpdateWithoutRatingCardTemplatesInput>
    create: XOR<CompanyCreateWithoutRatingCardTemplatesInput, CompanyUncheckedCreateWithoutRatingCardTemplatesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutRatingCardTemplatesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutRatingCardTemplatesInput, CompanyUncheckedUpdateWithoutRatingCardTemplatesInput>
  }

  export type CompanyUpdateWithoutRatingCardTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompaniesOwnedNestedInput
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutRatingCardTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUncheckedUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUncheckedUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type RatingCategoryUpsertWithWhereUniqueWithoutRatingCardTemplateInput = {
    where: RatingCategoryWhereUniqueInput
    update: XOR<RatingCategoryUpdateWithoutRatingCardTemplateInput, RatingCategoryUncheckedUpdateWithoutRatingCardTemplateInput>
    create: XOR<RatingCategoryCreateWithoutRatingCardTemplateInput, RatingCategoryUncheckedCreateWithoutRatingCardTemplateInput>
  }

  export type RatingCategoryUpdateWithWhereUniqueWithoutRatingCardTemplateInput = {
    where: RatingCategoryWhereUniqueInput
    data: XOR<RatingCategoryUpdateWithoutRatingCardTemplateInput, RatingCategoryUncheckedUpdateWithoutRatingCardTemplateInput>
  }

  export type RatingCategoryUpdateManyWithWhereWithoutRatingCardTemplateInput = {
    where: RatingCategoryScalarWhereInput
    data: XOR<RatingCategoryUpdateManyMutationInput, RatingCategoryUncheckedUpdateManyWithoutRatingCardTemplateInput>
  }

  export type RatingCategoryScalarWhereInput = {
    AND?: RatingCategoryScalarWhereInput | RatingCategoryScalarWhereInput[]
    OR?: RatingCategoryScalarWhereInput[]
    NOT?: RatingCategoryScalarWhereInput | RatingCategoryScalarWhereInput[]
    id?: StringFilter<"RatingCategory"> | string
    ratingCardTemplateId?: StringFilter<"RatingCategory"> | string
    name?: StringFilter<"RatingCategory"> | string
    description?: StringNullableFilter<"RatingCategory"> | string | null
    order?: IntFilter<"RatingCategory"> | number
  }

  export type CandidateRatingUpsertWithWhereUniqueWithoutRatingCardTemplateInput = {
    where: CandidateRatingWhereUniqueInput
    update: XOR<CandidateRatingUpdateWithoutRatingCardTemplateInput, CandidateRatingUncheckedUpdateWithoutRatingCardTemplateInput>
    create: XOR<CandidateRatingCreateWithoutRatingCardTemplateInput, CandidateRatingUncheckedCreateWithoutRatingCardTemplateInput>
  }

  export type CandidateRatingUpdateWithWhereUniqueWithoutRatingCardTemplateInput = {
    where: CandidateRatingWhereUniqueInput
    data: XOR<CandidateRatingUpdateWithoutRatingCardTemplateInput, CandidateRatingUncheckedUpdateWithoutRatingCardTemplateInput>
  }

  export type CandidateRatingUpdateManyWithWhereWithoutRatingCardTemplateInput = {
    where: CandidateRatingScalarWhereInput
    data: XOR<CandidateRatingUpdateManyMutationInput, CandidateRatingUncheckedUpdateManyWithoutRatingCardTemplateInput>
  }

  export type RatingCardTemplateCreateWithoutCategoriesInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.RatingCardType
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutRatingCardTemplatesInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutRatingCardTemplateInput
  }

  export type RatingCardTemplateUncheckedCreateWithoutCategoriesInput = {
    id?: string
    name: string
    description?: string | null
    companyId: string
    type?: $Enums.RatingCardType
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutRatingCardTemplateInput
  }

  export type RatingCardTemplateCreateOrConnectWithoutCategoriesInput = {
    where: RatingCardTemplateWhereUniqueInput
    create: XOR<RatingCardTemplateCreateWithoutCategoriesInput, RatingCardTemplateUncheckedCreateWithoutCategoriesInput>
  }

  export type CategoryScoreCreateWithoutRatingCategoryInput = {
    id?: string
    score: number
    comments?: string | null
    candidateRating: CandidateRatingCreateNestedOneWithoutCategoryScoresInput
  }

  export type CategoryScoreUncheckedCreateWithoutRatingCategoryInput = {
    id?: string
    candidateRatingId: string
    score: number
    comments?: string | null
  }

  export type CategoryScoreCreateOrConnectWithoutRatingCategoryInput = {
    where: CategoryScoreWhereUniqueInput
    create: XOR<CategoryScoreCreateWithoutRatingCategoryInput, CategoryScoreUncheckedCreateWithoutRatingCategoryInput>
  }

  export type CategoryScoreCreateManyRatingCategoryInputEnvelope = {
    data: CategoryScoreCreateManyRatingCategoryInput | CategoryScoreCreateManyRatingCategoryInput[]
    skipDuplicates?: boolean
  }

  export type RatingCardTemplateUpsertWithoutCategoriesInput = {
    update: XOR<RatingCardTemplateUpdateWithoutCategoriesInput, RatingCardTemplateUncheckedUpdateWithoutCategoriesInput>
    create: XOR<RatingCardTemplateCreateWithoutCategoriesInput, RatingCardTemplateUncheckedCreateWithoutCategoriesInput>
    where?: RatingCardTemplateWhereInput
  }

  export type RatingCardTemplateUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: RatingCardTemplateWhereInput
    data: XOR<RatingCardTemplateUpdateWithoutCategoriesInput, RatingCardTemplateUncheckedUpdateWithoutCategoriesInput>
  }

  export type RatingCardTemplateUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumRatingCardTypeFieldUpdateOperationsInput | $Enums.RatingCardType
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutRatingCardTemplatesNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutRatingCardTemplateNestedInput
  }

  export type RatingCardTemplateUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    type?: EnumRatingCardTypeFieldUpdateOperationsInput | $Enums.RatingCardType
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutRatingCardTemplateNestedInput
  }

  export type CategoryScoreUpsertWithWhereUniqueWithoutRatingCategoryInput = {
    where: CategoryScoreWhereUniqueInput
    update: XOR<CategoryScoreUpdateWithoutRatingCategoryInput, CategoryScoreUncheckedUpdateWithoutRatingCategoryInput>
    create: XOR<CategoryScoreCreateWithoutRatingCategoryInput, CategoryScoreUncheckedCreateWithoutRatingCategoryInput>
  }

  export type CategoryScoreUpdateWithWhereUniqueWithoutRatingCategoryInput = {
    where: CategoryScoreWhereUniqueInput
    data: XOR<CategoryScoreUpdateWithoutRatingCategoryInput, CategoryScoreUncheckedUpdateWithoutRatingCategoryInput>
  }

  export type CategoryScoreUpdateManyWithWhereWithoutRatingCategoryInput = {
    where: CategoryScoreScalarWhereInput
    data: XOR<CategoryScoreUpdateManyMutationInput, CategoryScoreUncheckedUpdateManyWithoutRatingCategoryInput>
  }

  export type CategoryScoreScalarWhereInput = {
    AND?: CategoryScoreScalarWhereInput | CategoryScoreScalarWhereInput[]
    OR?: CategoryScoreScalarWhereInput[]
    NOT?: CategoryScoreScalarWhereInput | CategoryScoreScalarWhereInput[]
    id?: StringFilter<"CategoryScore"> | string
    candidateRatingId?: StringFilter<"CategoryScore"> | string
    ratingCategoryId?: StringFilter<"CategoryScore"> | string
    score?: IntFilter<"CategoryScore"> | number
    comments?: StringNullableFilter<"CategoryScore"> | string | null
  }

  export type ApplicationCreateWithoutCandidateRatingsInput = {
    id?: string
    appliedAt?: Date | string
    currentStageId?: string | null
    status?: $Enums.ApplicationStatus
    disqualificationReason?: string | null
    archivedAt?: Date | string | null
    hiredAt?: Date | string | null
    source?: string | null
    job: JobCreateNestedOneWithoutApplicationsInput
    candidate: CandidateCreateNestedOneWithoutApplicationsInput
    candidateAnswers?: CandidateAnswerCreateNestedManyWithoutApplicationInput
    messages?: MessageThreadCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutCandidateRatingsInput = {
    id?: string
    jobId: string
    candidateId: string
    appliedAt?: Date | string
    currentStageId?: string | null
    status?: $Enums.ApplicationStatus
    disqualificationReason?: string | null
    archivedAt?: Date | string | null
    hiredAt?: Date | string | null
    source?: string | null
    candidateAnswers?: CandidateAnswerUncheckedCreateNestedManyWithoutApplicationInput
    messages?: MessageThreadUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutCandidateRatingsInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutCandidateRatingsInput, ApplicationUncheckedCreateWithoutCandidateRatingsInput>
  }

  export type UserCreateWithoutCandidateRatingsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeCreateNestedManyWithoutUserInput
    companiesOwned?: CompanyCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCandidateRatingsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingUncheckedCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeUncheckedCreateNestedManyWithoutUserInput
    companiesOwned?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationUncheckedCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogUncheckedCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCandidateRatingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCandidateRatingsInput, UserUncheckedCreateWithoutCandidateRatingsInput>
  }

  export type RatingCardTemplateCreateWithoutCandidateRatingsInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.RatingCardType
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutRatingCardTemplatesInput
    categories?: RatingCategoryCreateNestedManyWithoutRatingCardTemplateInput
  }

  export type RatingCardTemplateUncheckedCreateWithoutCandidateRatingsInput = {
    id?: string
    name: string
    description?: string | null
    companyId: string
    type?: $Enums.RatingCardType
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: RatingCategoryUncheckedCreateNestedManyWithoutRatingCardTemplateInput
  }

  export type RatingCardTemplateCreateOrConnectWithoutCandidateRatingsInput = {
    where: RatingCardTemplateWhereUniqueInput
    create: XOR<RatingCardTemplateCreateWithoutCandidateRatingsInput, RatingCardTemplateUncheckedCreateWithoutCandidateRatingsInput>
  }

  export type CategoryScoreCreateWithoutCandidateRatingInput = {
    id?: string
    score: number
    comments?: string | null
    ratingCategory: RatingCategoryCreateNestedOneWithoutCategoryScoresInput
  }

  export type CategoryScoreUncheckedCreateWithoutCandidateRatingInput = {
    id?: string
    ratingCategoryId: string
    score: number
    comments?: string | null
  }

  export type CategoryScoreCreateOrConnectWithoutCandidateRatingInput = {
    where: CategoryScoreWhereUniqueInput
    create: XOR<CategoryScoreCreateWithoutCandidateRatingInput, CategoryScoreUncheckedCreateWithoutCandidateRatingInput>
  }

  export type CategoryScoreCreateManyCandidateRatingInputEnvelope = {
    data: CategoryScoreCreateManyCandidateRatingInput | CategoryScoreCreateManyCandidateRatingInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationUpsertWithoutCandidateRatingsInput = {
    update: XOR<ApplicationUpdateWithoutCandidateRatingsInput, ApplicationUncheckedUpdateWithoutCandidateRatingsInput>
    create: XOR<ApplicationCreateWithoutCandidateRatingsInput, ApplicationUncheckedCreateWithoutCandidateRatingsInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutCandidateRatingsInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutCandidateRatingsInput, ApplicationUncheckedUpdateWithoutCandidateRatingsInput>
  }

  export type ApplicationUpdateWithoutCandidateRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStageId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    disqualificationReason?: NullableStringFieldUpdateOperationsInput | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    job?: JobUpdateOneRequiredWithoutApplicationsNestedInput
    candidate?: CandidateUpdateOneRequiredWithoutApplicationsNestedInput
    candidateAnswers?: CandidateAnswerUpdateManyWithoutApplicationNestedInput
    messages?: MessageThreadUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutCandidateRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStageId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    disqualificationReason?: NullableStringFieldUpdateOperationsInput | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    candidateAnswers?: CandidateAnswerUncheckedUpdateManyWithoutApplicationNestedInput
    messages?: MessageThreadUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type UserUpsertWithoutCandidateRatingsInput = {
    update: XOR<UserUpdateWithoutCandidateRatingsInput, UserUncheckedUpdateWithoutCandidateRatingsInput>
    create: XOR<UserCreateWithoutCandidateRatingsInput, UserUncheckedCreateWithoutCandidateRatingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCandidateRatingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCandidateRatingsInput, UserUncheckedUpdateWithoutCandidateRatingsInput>
  }

  export type UserUpdateWithoutCandidateRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUpdateManyWithoutUserNestedInput
    companiesOwned?: CompanyUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCandidateRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUncheckedUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUncheckedUpdateManyWithoutUserNestedInput
    companiesOwned?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUncheckedUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUncheckedUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RatingCardTemplateUpsertWithoutCandidateRatingsInput = {
    update: XOR<RatingCardTemplateUpdateWithoutCandidateRatingsInput, RatingCardTemplateUncheckedUpdateWithoutCandidateRatingsInput>
    create: XOR<RatingCardTemplateCreateWithoutCandidateRatingsInput, RatingCardTemplateUncheckedCreateWithoutCandidateRatingsInput>
    where?: RatingCardTemplateWhereInput
  }

  export type RatingCardTemplateUpdateToOneWithWhereWithoutCandidateRatingsInput = {
    where?: RatingCardTemplateWhereInput
    data: XOR<RatingCardTemplateUpdateWithoutCandidateRatingsInput, RatingCardTemplateUncheckedUpdateWithoutCandidateRatingsInput>
  }

  export type RatingCardTemplateUpdateWithoutCandidateRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumRatingCardTypeFieldUpdateOperationsInput | $Enums.RatingCardType
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutRatingCardTemplatesNestedInput
    categories?: RatingCategoryUpdateManyWithoutRatingCardTemplateNestedInput
  }

  export type RatingCardTemplateUncheckedUpdateWithoutCandidateRatingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    type?: EnumRatingCardTypeFieldUpdateOperationsInput | $Enums.RatingCardType
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: RatingCategoryUncheckedUpdateManyWithoutRatingCardTemplateNestedInput
  }

  export type CategoryScoreUpsertWithWhereUniqueWithoutCandidateRatingInput = {
    where: CategoryScoreWhereUniqueInput
    update: XOR<CategoryScoreUpdateWithoutCandidateRatingInput, CategoryScoreUncheckedUpdateWithoutCandidateRatingInput>
    create: XOR<CategoryScoreCreateWithoutCandidateRatingInput, CategoryScoreUncheckedCreateWithoutCandidateRatingInput>
  }

  export type CategoryScoreUpdateWithWhereUniqueWithoutCandidateRatingInput = {
    where: CategoryScoreWhereUniqueInput
    data: XOR<CategoryScoreUpdateWithoutCandidateRatingInput, CategoryScoreUncheckedUpdateWithoutCandidateRatingInput>
  }

  export type CategoryScoreUpdateManyWithWhereWithoutCandidateRatingInput = {
    where: CategoryScoreScalarWhereInput
    data: XOR<CategoryScoreUpdateManyMutationInput, CategoryScoreUncheckedUpdateManyWithoutCandidateRatingInput>
  }

  export type CandidateRatingCreateWithoutCategoryScoresInput = {
    id?: string
    jobWorkflowStageId: string
    overallScore: number
    comments?: string | null
    submittedAt?: Date | string
    application: ApplicationCreateNestedOneWithoutCandidateRatingsInput
    rater: UserCreateNestedOneWithoutCandidateRatingsInput
    ratingCardTemplate: RatingCardTemplateCreateNestedOneWithoutCandidateRatingsInput
  }

  export type CandidateRatingUncheckedCreateWithoutCategoryScoresInput = {
    id?: string
    applicationId: string
    jobWorkflowStageId: string
    raterId: string
    ratingCardTemplateId: string
    overallScore: number
    comments?: string | null
    submittedAt?: Date | string
  }

  export type CandidateRatingCreateOrConnectWithoutCategoryScoresInput = {
    where: CandidateRatingWhereUniqueInput
    create: XOR<CandidateRatingCreateWithoutCategoryScoresInput, CandidateRatingUncheckedCreateWithoutCategoryScoresInput>
  }

  export type RatingCategoryCreateWithoutCategoryScoresInput = {
    id?: string
    name: string
    description?: string | null
    order: number
    ratingCardTemplate: RatingCardTemplateCreateNestedOneWithoutCategoriesInput
  }

  export type RatingCategoryUncheckedCreateWithoutCategoryScoresInput = {
    id?: string
    ratingCardTemplateId: string
    name: string
    description?: string | null
    order: number
  }

  export type RatingCategoryCreateOrConnectWithoutCategoryScoresInput = {
    where: RatingCategoryWhereUniqueInput
    create: XOR<RatingCategoryCreateWithoutCategoryScoresInput, RatingCategoryUncheckedCreateWithoutCategoryScoresInput>
  }

  export type CandidateRatingUpsertWithoutCategoryScoresInput = {
    update: XOR<CandidateRatingUpdateWithoutCategoryScoresInput, CandidateRatingUncheckedUpdateWithoutCategoryScoresInput>
    create: XOR<CandidateRatingCreateWithoutCategoryScoresInput, CandidateRatingUncheckedCreateWithoutCategoryScoresInput>
    where?: CandidateRatingWhereInput
  }

  export type CandidateRatingUpdateToOneWithWhereWithoutCategoryScoresInput = {
    where?: CandidateRatingWhereInput
    data: XOR<CandidateRatingUpdateWithoutCategoryScoresInput, CandidateRatingUncheckedUpdateWithoutCategoryScoresInput>
  }

  export type CandidateRatingUpdateWithoutCategoryScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobWorkflowStageId?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutCandidateRatingsNestedInput
    rater?: UserUpdateOneRequiredWithoutCandidateRatingsNestedInput
    ratingCardTemplate?: RatingCardTemplateUpdateOneRequiredWithoutCandidateRatingsNestedInput
  }

  export type CandidateRatingUncheckedUpdateWithoutCategoryScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    jobWorkflowStageId?: StringFieldUpdateOperationsInput | string
    raterId?: StringFieldUpdateOperationsInput | string
    ratingCardTemplateId?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingCategoryUpsertWithoutCategoryScoresInput = {
    update: XOR<RatingCategoryUpdateWithoutCategoryScoresInput, RatingCategoryUncheckedUpdateWithoutCategoryScoresInput>
    create: XOR<RatingCategoryCreateWithoutCategoryScoresInput, RatingCategoryUncheckedCreateWithoutCategoryScoresInput>
    where?: RatingCategoryWhereInput
  }

  export type RatingCategoryUpdateToOneWithWhereWithoutCategoryScoresInput = {
    where?: RatingCategoryWhereInput
    data: XOR<RatingCategoryUpdateWithoutCategoryScoresInput, RatingCategoryUncheckedUpdateWithoutCategoryScoresInput>
  }

  export type RatingCategoryUpdateWithoutCategoryScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    ratingCardTemplate?: RatingCardTemplateUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type RatingCategoryUncheckedUpdateWithoutCategoryScoresInput = {
    id?: StringFieldUpdateOperationsInput | string
    ratingCardTemplateId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
  }

  export type ApplicationCreateWithoutMessagesInput = {
    id?: string
    appliedAt?: Date | string
    currentStageId?: string | null
    status?: $Enums.ApplicationStatus
    disqualificationReason?: string | null
    archivedAt?: Date | string | null
    hiredAt?: Date | string | null
    source?: string | null
    job: JobCreateNestedOneWithoutApplicationsInput
    candidate: CandidateCreateNestedOneWithoutApplicationsInput
    candidateAnswers?: CandidateAnswerCreateNestedManyWithoutApplicationInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutMessagesInput = {
    id?: string
    jobId: string
    candidateId: string
    appliedAt?: Date | string
    currentStageId?: string | null
    status?: $Enums.ApplicationStatus
    disqualificationReason?: string | null
    archivedAt?: Date | string | null
    hiredAt?: Date | string | null
    source?: string | null
    candidateAnswers?: CandidateAnswerUncheckedCreateNestedManyWithoutApplicationInput
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutMessagesInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutMessagesInput, ApplicationUncheckedCreateWithoutMessagesInput>
  }

  export type MessageCreateWithoutThreadInput = {
    id?: string
    content: string
    sentAt?: Date | string
    isInternalNote?: boolean
    visibility?: $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
    sender: UserCreateNestedOneWithoutSentMessagesInput
  }

  export type MessageUncheckedCreateWithoutThreadInput = {
    id?: string
    senderId: string
    content: string
    sentAt?: Date | string
    isInternalNote?: boolean
    visibility?: $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MessageCreateOrConnectWithoutThreadInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutThreadInput, MessageUncheckedCreateWithoutThreadInput>
  }

  export type MessageCreateManyThreadInputEnvelope = {
    data: MessageCreateManyThreadInput | MessageCreateManyThreadInput[]
    skipDuplicates?: boolean
  }

  export type ApplicationUpsertWithoutMessagesInput = {
    update: XOR<ApplicationUpdateWithoutMessagesInput, ApplicationUncheckedUpdateWithoutMessagesInput>
    create: XOR<ApplicationCreateWithoutMessagesInput, ApplicationUncheckedCreateWithoutMessagesInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutMessagesInput, ApplicationUncheckedUpdateWithoutMessagesInput>
  }

  export type ApplicationUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStageId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    disqualificationReason?: NullableStringFieldUpdateOperationsInput | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    job?: JobUpdateOneRequiredWithoutApplicationsNestedInput
    candidate?: CandidateUpdateOneRequiredWithoutApplicationsNestedInput
    candidateAnswers?: CandidateAnswerUpdateManyWithoutApplicationNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStageId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    disqualificationReason?: NullableStringFieldUpdateOperationsInput | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    candidateAnswers?: CandidateAnswerUncheckedUpdateManyWithoutApplicationNestedInput
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type MessageUpsertWithWhereUniqueWithoutThreadInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutThreadInput, MessageUncheckedUpdateWithoutThreadInput>
    create: XOR<MessageCreateWithoutThreadInput, MessageUncheckedCreateWithoutThreadInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutThreadInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutThreadInput, MessageUncheckedUpdateWithoutThreadInput>
  }

  export type MessageUpdateManyWithWhereWithoutThreadInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutThreadInput>
  }

  export type MessageThreadCreateWithoutMessagesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    application: ApplicationCreateNestedOneWithoutMessagesInput
  }

  export type MessageThreadUncheckedCreateWithoutMessagesInput = {
    id?: string
    applicationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageThreadCreateOrConnectWithoutMessagesInput = {
    where: MessageThreadWhereUniqueInput
    create: XOR<MessageThreadCreateWithoutMessagesInput, MessageThreadUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutSentMessagesInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    meetingsOwned?: MeetingCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSentMessagesInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    meetingsOwned?: MeetingUncheckedCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeUncheckedCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationUncheckedCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogUncheckedCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSentMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
  }

  export type MessageThreadUpsertWithoutMessagesInput = {
    update: XOR<MessageThreadUpdateWithoutMessagesInput, MessageThreadUncheckedUpdateWithoutMessagesInput>
    create: XOR<MessageThreadCreateWithoutMessagesInput, MessageThreadUncheckedCreateWithoutMessagesInput>
    where?: MessageThreadWhereInput
  }

  export type MessageThreadUpdateToOneWithWhereWithoutMessagesInput = {
    where?: MessageThreadWhereInput
    data: XOR<MessageThreadUpdateWithoutMessagesInput, MessageThreadUncheckedUpdateWithoutMessagesInput>
  }

  export type MessageThreadUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageThreadUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutSentMessagesInput = {
    update: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
    create: XOR<UserCreateWithoutSentMessagesInput, UserUncheckedCreateWithoutSentMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSentMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSentMessagesInput, UserUncheckedUpdateWithoutSentMessagesInput>
  }

  export type UserUpdateWithoutSentMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    meetingsOwned?: MeetingUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSentMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    meetingsOwned?: MeetingUncheckedUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUncheckedUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUncheckedUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUncheckedUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutMeetingsOwnedInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    meetingAttendees?: MeetingAttendeeCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMeetingsOwnedInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    meetingAttendees?: MeetingAttendeeUncheckedCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationUncheckedCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogUncheckedCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMeetingsOwnedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMeetingsOwnedInput, UserUncheckedCreateWithoutMeetingsOwnedInput>
  }

  export type MeetingAttendeeCreateWithoutMeetingInput = {
    id?: string
    candidateId?: string | null
    email: string
    name?: string | null
    status?: $Enums.AttendeeStatus
    isCandidate?: boolean
    user?: UserCreateNestedOneWithoutMeetingAttendeesInput
  }

  export type MeetingAttendeeUncheckedCreateWithoutMeetingInput = {
    id?: string
    userId?: string | null
    candidateId?: string | null
    email: string
    name?: string | null
    status?: $Enums.AttendeeStatus
    isCandidate?: boolean
  }

  export type MeetingAttendeeCreateOrConnectWithoutMeetingInput = {
    where: MeetingAttendeeWhereUniqueInput
    create: XOR<MeetingAttendeeCreateWithoutMeetingInput, MeetingAttendeeUncheckedCreateWithoutMeetingInput>
  }

  export type MeetingAttendeeCreateManyMeetingInputEnvelope = {
    data: MeetingAttendeeCreateManyMeetingInput | MeetingAttendeeCreateManyMeetingInput[]
    skipDuplicates?: boolean
  }

  export type MeetingTemplateCreateWithoutMeetingsInput = {
    id?: string
    companyId: string
    name: string
    title: string
    duration: number
    meetingType: $Enums.MeetingType
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingTemplateUncheckedCreateWithoutMeetingsInput = {
    id?: string
    companyId: string
    name: string
    title: string
    duration: number
    meetingType: $Enums.MeetingType
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingTemplateCreateOrConnectWithoutMeetingsInput = {
    where: MeetingTemplateWhereUniqueInput
    create: XOR<MeetingTemplateCreateWithoutMeetingsInput, MeetingTemplateUncheckedCreateWithoutMeetingsInput>
  }

  export type AINoteTakingConfigCreateWithoutMeetingInput = {
    id?: string
    isEnabled?: boolean
    transcript?: string | null
    summary?: string | null
    actionItems?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type AINoteTakingConfigUncheckedCreateWithoutMeetingInput = {
    id?: string
    isEnabled?: boolean
    transcript?: string | null
    summary?: string | null
    actionItems?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: Date | string
  }

  export type AINoteTakingConfigCreateOrConnectWithoutMeetingInput = {
    where: AINoteTakingConfigWhereUniqueInput
    create: XOR<AINoteTakingConfigCreateWithoutMeetingInput, AINoteTakingConfigUncheckedCreateWithoutMeetingInput>
  }

  export type UserUpsertWithoutMeetingsOwnedInput = {
    update: XOR<UserUpdateWithoutMeetingsOwnedInput, UserUncheckedUpdateWithoutMeetingsOwnedInput>
    create: XOR<UserCreateWithoutMeetingsOwnedInput, UserUncheckedCreateWithoutMeetingsOwnedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMeetingsOwnedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMeetingsOwnedInput, UserUncheckedUpdateWithoutMeetingsOwnedInput>
  }

  export type UserUpdateWithoutMeetingsOwnedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    meetingAttendees?: MeetingAttendeeUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMeetingsOwnedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    meetingAttendees?: MeetingAttendeeUncheckedUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUncheckedUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUncheckedUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MeetingAttendeeUpsertWithWhereUniqueWithoutMeetingInput = {
    where: MeetingAttendeeWhereUniqueInput
    update: XOR<MeetingAttendeeUpdateWithoutMeetingInput, MeetingAttendeeUncheckedUpdateWithoutMeetingInput>
    create: XOR<MeetingAttendeeCreateWithoutMeetingInput, MeetingAttendeeUncheckedCreateWithoutMeetingInput>
  }

  export type MeetingAttendeeUpdateWithWhereUniqueWithoutMeetingInput = {
    where: MeetingAttendeeWhereUniqueInput
    data: XOR<MeetingAttendeeUpdateWithoutMeetingInput, MeetingAttendeeUncheckedUpdateWithoutMeetingInput>
  }

  export type MeetingAttendeeUpdateManyWithWhereWithoutMeetingInput = {
    where: MeetingAttendeeScalarWhereInput
    data: XOR<MeetingAttendeeUpdateManyMutationInput, MeetingAttendeeUncheckedUpdateManyWithoutMeetingInput>
  }

  export type MeetingTemplateUpsertWithoutMeetingsInput = {
    update: XOR<MeetingTemplateUpdateWithoutMeetingsInput, MeetingTemplateUncheckedUpdateWithoutMeetingsInput>
    create: XOR<MeetingTemplateCreateWithoutMeetingsInput, MeetingTemplateUncheckedCreateWithoutMeetingsInput>
    where?: MeetingTemplateWhereInput
  }

  export type MeetingTemplateUpdateToOneWithWhereWithoutMeetingsInput = {
    where?: MeetingTemplateWhereInput
    data: XOR<MeetingTemplateUpdateWithoutMeetingsInput, MeetingTemplateUncheckedUpdateWithoutMeetingsInput>
  }

  export type MeetingTemplateUpdateWithoutMeetingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    meetingType?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingTemplateUncheckedUpdateWithoutMeetingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    meetingType?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AINoteTakingConfigUpsertWithoutMeetingInput = {
    update: XOR<AINoteTakingConfigUpdateWithoutMeetingInput, AINoteTakingConfigUncheckedUpdateWithoutMeetingInput>
    create: XOR<AINoteTakingConfigCreateWithoutMeetingInput, AINoteTakingConfigUncheckedCreateWithoutMeetingInput>
    where?: AINoteTakingConfigWhereInput
  }

  export type AINoteTakingConfigUpdateToOneWithWhereWithoutMeetingInput = {
    where?: AINoteTakingConfigWhereInput
    data: XOR<AINoteTakingConfigUpdateWithoutMeetingInput, AINoteTakingConfigUncheckedUpdateWithoutMeetingInput>
  }

  export type AINoteTakingConfigUpdateWithoutMeetingInput = {
    id?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    transcript?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    actionItems?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AINoteTakingConfigUncheckedUpdateWithoutMeetingInput = {
    id?: StringFieldUpdateOperationsInput | string
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    transcript?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    actionItems?: NullableJsonNullValueInput | InputJsonValue
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingCreateWithoutAttendeesInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    type: $Enums.MeetingType
    location?: string | null
    videoCallLink?: string | null
    jobId?: string | null
    applicationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizer: UserCreateNestedOneWithoutMeetingsOwnedInput
    meetingTemplate?: MeetingTemplateCreateNestedOneWithoutMeetingsInput
    aiNoteTakingConfig?: AINoteTakingConfigCreateNestedOneWithoutMeetingInput
  }

  export type MeetingUncheckedCreateWithoutAttendeesInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    type: $Enums.MeetingType
    location?: string | null
    videoCallLink?: string | null
    jobId?: string | null
    applicationId?: string | null
    organizerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meetingTemplateId?: string | null
    aiNoteTakingConfig?: AINoteTakingConfigUncheckedCreateNestedOneWithoutMeetingInput
  }

  export type MeetingCreateOrConnectWithoutAttendeesInput = {
    where: MeetingWhereUniqueInput
    create: XOR<MeetingCreateWithoutAttendeesInput, MeetingUncheckedCreateWithoutAttendeesInput>
  }

  export type UserCreateWithoutMeetingAttendeesInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingCreateNestedManyWithoutOrganizerInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMeetingAttendeesInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingUncheckedCreateNestedManyWithoutOrganizerInput
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationUncheckedCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogUncheckedCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMeetingAttendeesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMeetingAttendeesInput, UserUncheckedCreateWithoutMeetingAttendeesInput>
  }

  export type MeetingUpsertWithoutAttendeesInput = {
    update: XOR<MeetingUpdateWithoutAttendeesInput, MeetingUncheckedUpdateWithoutAttendeesInput>
    create: XOR<MeetingCreateWithoutAttendeesInput, MeetingUncheckedCreateWithoutAttendeesInput>
    where?: MeetingWhereInput
  }

  export type MeetingUpdateToOneWithWhereWithoutAttendeesInput = {
    where?: MeetingWhereInput
    data: XOR<MeetingUpdateWithoutAttendeesInput, MeetingUncheckedUpdateWithoutAttendeesInput>
  }

  export type MeetingUpdateWithoutAttendeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    videoCallLink?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: UserUpdateOneRequiredWithoutMeetingsOwnedNestedInput
    meetingTemplate?: MeetingTemplateUpdateOneWithoutMeetingsNestedInput
    aiNoteTakingConfig?: AINoteTakingConfigUpdateOneWithoutMeetingNestedInput
  }

  export type MeetingUncheckedUpdateWithoutAttendeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    videoCallLink?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    organizerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
    aiNoteTakingConfig?: AINoteTakingConfigUncheckedUpdateOneWithoutMeetingNestedInput
  }

  export type UserUpsertWithoutMeetingAttendeesInput = {
    update: XOR<UserUpdateWithoutMeetingAttendeesInput, UserUncheckedUpdateWithoutMeetingAttendeesInput>
    create: XOR<UserCreateWithoutMeetingAttendeesInput, UserUncheckedCreateWithoutMeetingAttendeesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMeetingAttendeesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMeetingAttendeesInput, UserUncheckedUpdateWithoutMeetingAttendeesInput>
  }

  export type UserUpdateWithoutMeetingAttendeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUpdateManyWithoutOrganizerNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMeetingAttendeesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUncheckedUpdateManyWithoutOrganizerNestedInput
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUncheckedUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUncheckedUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MeetingCreateWithoutMeetingTemplateInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    type: $Enums.MeetingType
    location?: string | null
    videoCallLink?: string | null
    jobId?: string | null
    applicationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizer: UserCreateNestedOneWithoutMeetingsOwnedInput
    attendees?: MeetingAttendeeCreateNestedManyWithoutMeetingInput
    aiNoteTakingConfig?: AINoteTakingConfigCreateNestedOneWithoutMeetingInput
  }

  export type MeetingUncheckedCreateWithoutMeetingTemplateInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    type: $Enums.MeetingType
    location?: string | null
    videoCallLink?: string | null
    jobId?: string | null
    applicationId?: string | null
    organizerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    attendees?: MeetingAttendeeUncheckedCreateNestedManyWithoutMeetingInput
    aiNoteTakingConfig?: AINoteTakingConfigUncheckedCreateNestedOneWithoutMeetingInput
  }

  export type MeetingCreateOrConnectWithoutMeetingTemplateInput = {
    where: MeetingWhereUniqueInput
    create: XOR<MeetingCreateWithoutMeetingTemplateInput, MeetingUncheckedCreateWithoutMeetingTemplateInput>
  }

  export type MeetingCreateManyMeetingTemplateInputEnvelope = {
    data: MeetingCreateManyMeetingTemplateInput | MeetingCreateManyMeetingTemplateInput[]
    skipDuplicates?: boolean
  }

  export type MeetingUpsertWithWhereUniqueWithoutMeetingTemplateInput = {
    where: MeetingWhereUniqueInput
    update: XOR<MeetingUpdateWithoutMeetingTemplateInput, MeetingUncheckedUpdateWithoutMeetingTemplateInput>
    create: XOR<MeetingCreateWithoutMeetingTemplateInput, MeetingUncheckedCreateWithoutMeetingTemplateInput>
  }

  export type MeetingUpdateWithWhereUniqueWithoutMeetingTemplateInput = {
    where: MeetingWhereUniqueInput
    data: XOR<MeetingUpdateWithoutMeetingTemplateInput, MeetingUncheckedUpdateWithoutMeetingTemplateInput>
  }

  export type MeetingUpdateManyWithWhereWithoutMeetingTemplateInput = {
    where: MeetingScalarWhereInput
    data: XOR<MeetingUpdateManyMutationInput, MeetingUncheckedUpdateManyWithoutMeetingTemplateInput>
  }

  export type CompanyCreateWithoutCareersPageSettingsInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompaniesOwnedInput
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
    locations?: JobLocationCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateCreateNestedManyWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateCreateNestedManyWithoutCompanyInput
    questions?: QuestionCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutCareersPageSettingsInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
    locations?: JobLocationUncheckedCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateUncheckedCreateNestedManyWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateUncheckedCreateNestedManyWithoutCompanyInput
    questions?: QuestionUncheckedCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutCareersPageSettingsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutCareersPageSettingsInput, CompanyUncheckedCreateWithoutCareersPageSettingsInput>
  }

  export type CompanyUpsertWithoutCareersPageSettingsInput = {
    update: XOR<CompanyUpdateWithoutCareersPageSettingsInput, CompanyUncheckedUpdateWithoutCareersPageSettingsInput>
    create: XOR<CompanyCreateWithoutCareersPageSettingsInput, CompanyUncheckedCreateWithoutCareersPageSettingsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutCareersPageSettingsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutCareersPageSettingsInput, CompanyUncheckedUpdateWithoutCareersPageSettingsInput>
  }

  export type CompanyUpdateWithoutCareersPageSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompaniesOwnedNestedInput
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUpdateManyWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutCareersPageSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUncheckedUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingUncheckedCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeUncheckedCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationUncheckedCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogUncheckedCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUncheckedUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUncheckedUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUncheckedUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUncheckedUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type JobCreateWithoutAiScreeningConfigInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutJobsInput
    department?: DepartmentCreateNestedOneWithoutJobsInput
    location?: JobLocationCreateNestedOneWithoutJobsInput
    applicationForm?: ApplicationFormFieldCreateNestedManyWithoutJobInput
    hiringTeam?: JobHiringMemberCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowCreateNestedOneWithoutJobInput
    applications?: ApplicationCreateNestedManyWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigCreateNestedOneWithoutJobInput
  }

  export type JobUncheckedCreateWithoutAiScreeningConfigInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    companyId: string
    departmentId?: string | null
    locationId?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationForm?: ApplicationFormFieldUncheckedCreateNestedManyWithoutJobInput
    hiringTeam?: JobHiringMemberUncheckedCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowUncheckedCreateNestedOneWithoutJobInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedCreateNestedOneWithoutJobInput
  }

  export type JobCreateOrConnectWithoutAiScreeningConfigInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutAiScreeningConfigInput, JobUncheckedCreateWithoutAiScreeningConfigInput>
  }

  export type JobUpsertWithoutAiScreeningConfigInput = {
    update: XOR<JobUpdateWithoutAiScreeningConfigInput, JobUncheckedUpdateWithoutAiScreeningConfigInput>
    create: XOR<JobCreateWithoutAiScreeningConfigInput, JobUncheckedCreateWithoutAiScreeningConfigInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutAiScreeningConfigInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutAiScreeningConfigInput, JobUncheckedUpdateWithoutAiScreeningConfigInput>
  }

  export type JobUpdateWithoutAiScreeningConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    department?: DepartmentUpdateOneWithoutJobsNestedInput
    location?: JobLocationUpdateOneWithoutJobsNestedInput
    applicationForm?: ApplicationFormFieldUpdateManyWithoutJobNestedInput
    hiringTeam?: JobHiringMemberUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUpdateOneWithoutJobNestedInput
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUpdateOneWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutAiScreeningConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationForm?: ApplicationFormFieldUncheckedUpdateManyWithoutJobNestedInput
    hiringTeam?: JobHiringMemberUncheckedUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUncheckedUpdateOneWithoutJobNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedUpdateOneWithoutJobNestedInput
  }

  export type JobCreateWithoutAiSchedulingConfigInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutJobsInput
    department?: DepartmentCreateNestedOneWithoutJobsInput
    location?: JobLocationCreateNestedOneWithoutJobsInput
    applicationForm?: ApplicationFormFieldCreateNestedManyWithoutJobInput
    hiringTeam?: JobHiringMemberCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowCreateNestedOneWithoutJobInput
    applications?: ApplicationCreateNestedManyWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigCreateNestedOneWithoutJobInput
  }

  export type JobUncheckedCreateWithoutAiSchedulingConfigInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    companyId: string
    departmentId?: string | null
    locationId?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    applicationForm?: ApplicationFormFieldUncheckedCreateNestedManyWithoutJobInput
    hiringTeam?: JobHiringMemberUncheckedCreateNestedManyWithoutJobInput
    jobWorkflow?: JobWorkflowUncheckedCreateNestedOneWithoutJobInput
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    aiScreeningConfig?: AIScreeningConfigUncheckedCreateNestedOneWithoutJobInput
  }

  export type JobCreateOrConnectWithoutAiSchedulingConfigInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutAiSchedulingConfigInput, JobUncheckedCreateWithoutAiSchedulingConfigInput>
  }

  export type JobUpsertWithoutAiSchedulingConfigInput = {
    update: XOR<JobUpdateWithoutAiSchedulingConfigInput, JobUncheckedUpdateWithoutAiSchedulingConfigInput>
    create: XOR<JobCreateWithoutAiSchedulingConfigInput, JobUncheckedCreateWithoutAiSchedulingConfigInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutAiSchedulingConfigInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutAiSchedulingConfigInput, JobUncheckedUpdateWithoutAiSchedulingConfigInput>
  }

  export type JobUpdateWithoutAiSchedulingConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    department?: DepartmentUpdateOneWithoutJobsNestedInput
    location?: JobLocationUpdateOneWithoutJobsNestedInput
    applicationForm?: ApplicationFormFieldUpdateManyWithoutJobNestedInput
    hiringTeam?: JobHiringMemberUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUpdateOneWithoutJobNestedInput
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUpdateOneWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutAiSchedulingConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationForm?: ApplicationFormFieldUncheckedUpdateManyWithoutJobNestedInput
    hiringTeam?: JobHiringMemberUncheckedUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUncheckedUpdateOneWithoutJobNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUncheckedUpdateOneWithoutJobNestedInput
  }

  export type MeetingCreateWithoutAiNoteTakingConfigInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    type: $Enums.MeetingType
    location?: string | null
    videoCallLink?: string | null
    jobId?: string | null
    applicationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    organizer: UserCreateNestedOneWithoutMeetingsOwnedInput
    attendees?: MeetingAttendeeCreateNestedManyWithoutMeetingInput
    meetingTemplate?: MeetingTemplateCreateNestedOneWithoutMeetingsInput
  }

  export type MeetingUncheckedCreateWithoutAiNoteTakingConfigInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    type: $Enums.MeetingType
    location?: string | null
    videoCallLink?: string | null
    jobId?: string | null
    applicationId?: string | null
    organizerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meetingTemplateId?: string | null
    attendees?: MeetingAttendeeUncheckedCreateNestedManyWithoutMeetingInput
  }

  export type MeetingCreateOrConnectWithoutAiNoteTakingConfigInput = {
    where: MeetingWhereUniqueInput
    create: XOR<MeetingCreateWithoutAiNoteTakingConfigInput, MeetingUncheckedCreateWithoutAiNoteTakingConfigInput>
  }

  export type MeetingUpsertWithoutAiNoteTakingConfigInput = {
    update: XOR<MeetingUpdateWithoutAiNoteTakingConfigInput, MeetingUncheckedUpdateWithoutAiNoteTakingConfigInput>
    create: XOR<MeetingCreateWithoutAiNoteTakingConfigInput, MeetingUncheckedCreateWithoutAiNoteTakingConfigInput>
    where?: MeetingWhereInput
  }

  export type MeetingUpdateToOneWithWhereWithoutAiNoteTakingConfigInput = {
    where?: MeetingWhereInput
    data: XOR<MeetingUpdateWithoutAiNoteTakingConfigInput, MeetingUncheckedUpdateWithoutAiNoteTakingConfigInput>
  }

  export type MeetingUpdateWithoutAiNoteTakingConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    videoCallLink?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: UserUpdateOneRequiredWithoutMeetingsOwnedNestedInput
    attendees?: MeetingAttendeeUpdateManyWithoutMeetingNestedInput
    meetingTemplate?: MeetingTemplateUpdateOneWithoutMeetingsNestedInput
  }

  export type MeetingUncheckedUpdateWithoutAiNoteTakingConfigInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    videoCallLink?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    organizerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
    attendees?: MeetingAttendeeUncheckedUpdateManyWithoutMeetingNestedInput
  }

  export type UserCreateWithoutAiInteractionLogsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAiInteractionLogsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingUncheckedCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeUncheckedCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    calendarIntegrations?: CalendarIntegrationUncheckedCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAiInteractionLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAiInteractionLogsInput, UserUncheckedCreateWithoutAiInteractionLogsInput>
  }

  export type UserUpsertWithoutAiInteractionLogsInput = {
    update: XOR<UserUpdateWithoutAiInteractionLogsInput, UserUncheckedUpdateWithoutAiInteractionLogsInput>
    create: XOR<UserCreateWithoutAiInteractionLogsInput, UserUncheckedCreateWithoutAiInteractionLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAiInteractionLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAiInteractionLogsInput, UserUncheckedUpdateWithoutAiInteractionLogsInput>
  }

  export type UserUpdateWithoutAiInteractionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAiInteractionLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUncheckedUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUncheckedUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    calendarIntegrations?: CalendarIntegrationUncheckedUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutCalendarIntegrationsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sentMessages?: MessageCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCalendarIntegrationsInput = {
    id?: string
    email: string
    password: string
    firstName?: string | null
    lastName?: string | null
    jobTitle?: string | null
    departmentName?: string | null
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sentMessages?: MessageUncheckedCreateNestedManyWithoutSenderInput
    meetingsOwned?: MeetingUncheckedCreateNestedManyWithoutOrganizerInput
    meetingAttendees?: MeetingAttendeeUncheckedCreateNestedManyWithoutUserInput
    candidateRatings?: CandidateRatingUncheckedCreateNestedManyWithoutRaterInput
    companiesOwned?: CompanyUncheckedCreateNestedManyWithoutOwnerInput
    companyMemberships?: CompanyMemberUncheckedCreateNestedManyWithoutUserInput
    aiInteractionLogs?: AIInteractionLogUncheckedCreateNestedManyWithoutUserInput
    jobHiringMembers?: JobHiringMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCalendarIntegrationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCalendarIntegrationsInput, UserUncheckedCreateWithoutCalendarIntegrationsInput>
  }

  export type UserUpsertWithoutCalendarIntegrationsInput = {
    update: XOR<UserUpdateWithoutCalendarIntegrationsInput, UserUncheckedUpdateWithoutCalendarIntegrationsInput>
    create: XOR<UserCreateWithoutCalendarIntegrationsInput, UserUncheckedCreateWithoutCalendarIntegrationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCalendarIntegrationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCalendarIntegrationsInput, UserUncheckedUpdateWithoutCalendarIntegrationsInput>
  }

  export type UserUpdateWithoutCalendarIntegrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCalendarIntegrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    jobTitle?: NullableStringFieldUpdateOperationsInput | string | null
    departmentName?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sentMessages?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    meetingsOwned?: MeetingUncheckedUpdateManyWithoutOrganizerNestedInput
    meetingAttendees?: MeetingAttendeeUncheckedUpdateManyWithoutUserNestedInput
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutRaterNestedInput
    companiesOwned?: CompanyUncheckedUpdateManyWithoutOwnerNestedInput
    companyMemberships?: CompanyMemberUncheckedUpdateManyWithoutUserNestedInput
    aiInteractionLogs?: AIInteractionLogUncheckedUpdateManyWithoutUserNestedInput
    jobHiringMembers?: JobHiringMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CompanyCreateWithoutJobBoardIntegrationsInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompaniesOwnedInput
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
    locations?: JobLocationCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingCreateNestedOneWithoutCompanyInput
    messageTemplates?: MessageTemplateCreateNestedManyWithoutCompanyInput
    questions?: QuestionCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutJobBoardIntegrationsInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
    locations?: JobLocationUncheckedCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateUncheckedCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingUncheckedCreateNestedOneWithoutCompanyInput
    messageTemplates?: MessageTemplateUncheckedCreateNestedManyWithoutCompanyInput
    questions?: QuestionUncheckedCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutJobBoardIntegrationsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutJobBoardIntegrationsInput, CompanyUncheckedCreateWithoutJobBoardIntegrationsInput>
  }

  export type CompanyUpsertWithoutJobBoardIntegrationsInput = {
    update: XOR<CompanyUpdateWithoutJobBoardIntegrationsInput, CompanyUncheckedUpdateWithoutJobBoardIntegrationsInput>
    create: XOR<CompanyCreateWithoutJobBoardIntegrationsInput, CompanyUncheckedCreateWithoutJobBoardIntegrationsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutJobBoardIntegrationsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutJobBoardIntegrationsInput, CompanyUncheckedUpdateWithoutJobBoardIntegrationsInput>
  }

  export type CompanyUpdateWithoutJobBoardIntegrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompaniesOwnedNestedInput
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUpdateOneWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutJobBoardIntegrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUncheckedUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUncheckedUpdateOneWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateWithoutMessageTemplatesInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompaniesOwnedInput
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
    locations?: JobLocationCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationCreateNestedManyWithoutCompanyInput
    questions?: QuestionCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutMessageTemplatesInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
    locations?: JobLocationUncheckedCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateUncheckedCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingUncheckedCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    questions?: QuestionUncheckedCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutMessageTemplatesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutMessageTemplatesInput, CompanyUncheckedCreateWithoutMessageTemplatesInput>
  }

  export type CompanyUpsertWithoutMessageTemplatesInput = {
    update: XOR<CompanyUpdateWithoutMessageTemplatesInput, CompanyUncheckedUpdateWithoutMessageTemplatesInput>
    create: XOR<CompanyCreateWithoutMessageTemplatesInput, CompanyUncheckedCreateWithoutMessageTemplatesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutMessageTemplatesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutMessageTemplatesInput, CompanyUncheckedUpdateWithoutMessageTemplatesInput>
  }

  export type CompanyUpdateWithoutMessageTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompaniesOwnedNestedInput
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutMessageTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUncheckedUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUncheckedUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateWithoutQuestionsInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompaniesOwnedInput
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
    locations?: JobLocationCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutQuestionsInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
    locations?: JobLocationUncheckedCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateUncheckedCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingUncheckedCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateUncheckedCreateNestedManyWithoutCompanyInput
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutQuestionsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutQuestionsInput, CompanyUncheckedCreateWithoutQuestionsInput>
  }

  export type QuestionOptionCreateWithoutQuestionInput = {
    id?: string
    value: string
  }

  export type QuestionOptionUncheckedCreateWithoutQuestionInput = {
    id?: string
    value: string
  }

  export type QuestionOptionCreateOrConnectWithoutQuestionInput = {
    where: QuestionOptionWhereUniqueInput
    create: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionOptionCreateManyQuestionInputEnvelope = {
    data: QuestionOptionCreateManyQuestionInput | QuestionOptionCreateManyQuestionInput[]
    skipDuplicates?: boolean
  }

  export type QuestionSetCreateWithoutQuestionsInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutQuestionSetsInput
  }

  export type QuestionSetUncheckedCreateWithoutQuestionsInput = {
    id?: string
    companyId: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionSetCreateOrConnectWithoutQuestionsInput = {
    where: QuestionSetWhereUniqueInput
    create: XOR<QuestionSetCreateWithoutQuestionsInput, QuestionSetUncheckedCreateWithoutQuestionsInput>
  }

  export type CompanyUpsertWithoutQuestionsInput = {
    update: XOR<CompanyUpdateWithoutQuestionsInput, CompanyUncheckedUpdateWithoutQuestionsInput>
    create: XOR<CompanyCreateWithoutQuestionsInput, CompanyUncheckedCreateWithoutQuestionsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutQuestionsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutQuestionsInput, CompanyUncheckedUpdateWithoutQuestionsInput>
  }

  export type CompanyUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompaniesOwnedNestedInput
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUncheckedUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUncheckedUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type QuestionOptionUpsertWithWhereUniqueWithoutQuestionInput = {
    where: QuestionOptionWhereUniqueInput
    update: XOR<QuestionOptionUpdateWithoutQuestionInput, QuestionOptionUncheckedUpdateWithoutQuestionInput>
    create: XOR<QuestionOptionCreateWithoutQuestionInput, QuestionOptionUncheckedCreateWithoutQuestionInput>
  }

  export type QuestionOptionUpdateWithWhereUniqueWithoutQuestionInput = {
    where: QuestionOptionWhereUniqueInput
    data: XOR<QuestionOptionUpdateWithoutQuestionInput, QuestionOptionUncheckedUpdateWithoutQuestionInput>
  }

  export type QuestionOptionUpdateManyWithWhereWithoutQuestionInput = {
    where: QuestionOptionScalarWhereInput
    data: XOR<QuestionOptionUpdateManyMutationInput, QuestionOptionUncheckedUpdateManyWithoutQuestionInput>
  }

  export type QuestionOptionScalarWhereInput = {
    AND?: QuestionOptionScalarWhereInput | QuestionOptionScalarWhereInput[]
    OR?: QuestionOptionScalarWhereInput[]
    NOT?: QuestionOptionScalarWhereInput | QuestionOptionScalarWhereInput[]
    id?: StringFilter<"QuestionOption"> | string
    questionId?: StringFilter<"QuestionOption"> | string
    value?: StringFilter<"QuestionOption"> | string
  }

  export type QuestionSetUpsertWithWhereUniqueWithoutQuestionsInput = {
    where: QuestionSetWhereUniqueInput
    update: XOR<QuestionSetUpdateWithoutQuestionsInput, QuestionSetUncheckedUpdateWithoutQuestionsInput>
    create: XOR<QuestionSetCreateWithoutQuestionsInput, QuestionSetUncheckedCreateWithoutQuestionsInput>
  }

  export type QuestionSetUpdateWithWhereUniqueWithoutQuestionsInput = {
    where: QuestionSetWhereUniqueInput
    data: XOR<QuestionSetUpdateWithoutQuestionsInput, QuestionSetUncheckedUpdateWithoutQuestionsInput>
  }

  export type QuestionSetUpdateManyWithWhereWithoutQuestionsInput = {
    where: QuestionSetScalarWhereInput
    data: XOR<QuestionSetUpdateManyMutationInput, QuestionSetUncheckedUpdateManyWithoutQuestionsInput>
  }

  export type QuestionCreateWithoutOptionsInput = {
    id?: string
    text: string
    responseType: string
    visibility: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutQuestionsInput
    questionSets?: QuestionSetCreateNestedManyWithoutQuestionsInput
  }

  export type QuestionUncheckedCreateWithoutOptionsInput = {
    id?: string
    companyId: string
    text: string
    responseType: string
    visibility: string
    createdAt?: Date | string
    updatedAt?: Date | string
    questionSets?: QuestionSetUncheckedCreateNestedManyWithoutQuestionsInput
  }

  export type QuestionCreateOrConnectWithoutOptionsInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutOptionsInput, QuestionUncheckedCreateWithoutOptionsInput>
  }

  export type QuestionUpsertWithoutOptionsInput = {
    update: XOR<QuestionUpdateWithoutOptionsInput, QuestionUncheckedUpdateWithoutOptionsInput>
    create: XOR<QuestionCreateWithoutOptionsInput, QuestionUncheckedCreateWithoutOptionsInput>
    where?: QuestionWhereInput
  }

  export type QuestionUpdateToOneWithWhereWithoutOptionsInput = {
    where?: QuestionWhereInput
    data: XOR<QuestionUpdateWithoutOptionsInput, QuestionUncheckedUpdateWithoutOptionsInput>
  }

  export type QuestionUpdateWithoutOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    responseType?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutQuestionsNestedInput
    questionSets?: QuestionSetUpdateManyWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateWithoutOptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    responseType?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questionSets?: QuestionSetUncheckedUpdateManyWithoutQuestionsNestedInput
  }

  export type CompanyCreateWithoutQuestionSetsInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompaniesOwnedInput
    members?: CompanyMemberCreateNestedManyWithoutCompanyInput
    jobs?: JobCreateNestedManyWithoutCompanyInput
    departments?: DepartmentCreateNestedManyWithoutCompanyInput
    locations?: JobLocationCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateCreateNestedManyWithoutCompanyInput
    questions?: QuestionCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutQuestionSetsInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    ownerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: CompanyMemberUncheckedCreateNestedManyWithoutCompanyInput
    jobs?: JobUncheckedCreateNestedManyWithoutCompanyInput
    departments?: DepartmentUncheckedCreateNestedManyWithoutCompanyInput
    locations?: JobLocationUncheckedCreateNestedManyWithoutCompanyInput
    workflowTemplates?: WorkflowTemplateUncheckedCreateNestedManyWithoutCompanyInput
    ratingCardTemplates?: RatingCardTemplateUncheckedCreateNestedManyWithoutCompanyInput
    careersPageSettings?: CareersPageSettingUncheckedCreateNestedOneWithoutCompanyInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedCreateNestedManyWithoutCompanyInput
    messageTemplates?: MessageTemplateUncheckedCreateNestedManyWithoutCompanyInput
    questions?: QuestionUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutQuestionSetsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutQuestionSetsInput, CompanyUncheckedCreateWithoutQuestionSetsInput>
  }

  export type QuestionCreateWithoutQuestionSetsInput = {
    id?: string
    text: string
    responseType: string
    visibility: string
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutQuestionsInput
    options?: QuestionOptionCreateNestedManyWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutQuestionSetsInput = {
    id?: string
    companyId: string
    text: string
    responseType: string
    visibility: string
    createdAt?: Date | string
    updatedAt?: Date | string
    options?: QuestionOptionUncheckedCreateNestedManyWithoutQuestionInput
  }

  export type QuestionCreateOrConnectWithoutQuestionSetsInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutQuestionSetsInput, QuestionUncheckedCreateWithoutQuestionSetsInput>
  }

  export type CompanyUpsertWithoutQuestionSetsInput = {
    update: XOR<CompanyUpdateWithoutQuestionSetsInput, CompanyUncheckedUpdateWithoutQuestionSetsInput>
    create: XOR<CompanyCreateWithoutQuestionSetsInput, CompanyUncheckedCreateWithoutQuestionSetsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutQuestionSetsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutQuestionSetsInput, CompanyUncheckedUpdateWithoutQuestionSetsInput>
  }

  export type CompanyUpdateWithoutQuestionSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompaniesOwnedNestedInput
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutQuestionSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUncheckedUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUncheckedUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type QuestionUpsertWithWhereUniqueWithoutQuestionSetsInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutQuestionSetsInput, QuestionUncheckedUpdateWithoutQuestionSetsInput>
    create: XOR<QuestionCreateWithoutQuestionSetsInput, QuestionUncheckedCreateWithoutQuestionSetsInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutQuestionSetsInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutQuestionSetsInput, QuestionUncheckedUpdateWithoutQuestionSetsInput>
  }

  export type QuestionUpdateManyWithWhereWithoutQuestionSetsInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutQuestionSetsInput>
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    type: $Enums.NotificationType
    message: string
    link?: string | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type MessageCreateManySenderInput = {
    id?: string
    threadId: string
    content: string
    sentAt?: Date | string
    isInternalNote?: boolean
    visibility?: $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MeetingCreateManyOrganizerInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    type: $Enums.MeetingType
    location?: string | null
    videoCallLink?: string | null
    jobId?: string | null
    applicationId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meetingTemplateId?: string | null
  }

  export type MeetingAttendeeCreateManyUserInput = {
    id?: string
    meetingId: string
    candidateId?: string | null
    email: string
    name?: string | null
    status?: $Enums.AttendeeStatus
    isCandidate?: boolean
  }

  export type CandidateRatingCreateManyRaterInput = {
    id?: string
    applicationId: string
    jobWorkflowStageId: string
    ratingCardTemplateId: string
    overallScore: number
    comments?: string | null
    submittedAt?: Date | string
  }

  export type CompanyCreateManyOwnerInput = {
    id?: string
    name: string
    website?: string | null
    phoneNumber?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyMemberCreateManyUserInput = {
    id?: string
    companyId: string
    role: $Enums.CompanyMemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CalendarIntegrationCreateManyUserInput = {
    id?: string
    provider: $Enums.CalendarProvider
    accessToken: string
    refreshToken?: string | null
    expiresAt?: Date | string | null
    scopes?: string | null
    calendarId?: string | null
    connectedAt?: Date | string
    updatedAt?: Date | string
  }

  export type AIInteractionLogCreateManyUserInput = {
    id?: string
    inputType: string
    input: string
    output?: string | null
    timestamp?: Date | string
  }

  export type JobHiringMemberCreateManyUserInput = {
    id?: string
    jobId: string
    role: $Enums.CompanyMemberRole
    isExternalRecruiter?: boolean
    createdAt?: Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    message?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    message?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    message?: StringFieldUpdateOperationsInput | string
    link?: NullableStringFieldUpdateOperationsInput | string | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternalNote?: BoolFieldUpdateOperationsInput | boolean
    visibility?: NullableEnumCommentVisibilityFieldUpdateOperationsInput | $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
    thread?: MessageThreadUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    threadId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternalNote?: BoolFieldUpdateOperationsInput | boolean
    visibility?: NullableEnumCommentVisibilityFieldUpdateOperationsInput | $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MessageUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    threadId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternalNote?: BoolFieldUpdateOperationsInput | boolean
    visibility?: NullableEnumCommentVisibilityFieldUpdateOperationsInput | $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MeetingUpdateWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    videoCallLink?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: MeetingAttendeeUpdateManyWithoutMeetingNestedInput
    meetingTemplate?: MeetingTemplateUpdateOneWithoutMeetingsNestedInput
    aiNoteTakingConfig?: AINoteTakingConfigUpdateOneWithoutMeetingNestedInput
  }

  export type MeetingUncheckedUpdateWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    videoCallLink?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
    attendees?: MeetingAttendeeUncheckedUpdateManyWithoutMeetingNestedInput
    aiNoteTakingConfig?: AINoteTakingConfigUncheckedUpdateOneWithoutMeetingNestedInput
  }

  export type MeetingUncheckedUpdateManyWithoutOrganizerInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    videoCallLink?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetingTemplateId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MeetingAttendeeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    isCandidate?: BoolFieldUpdateOperationsInput | boolean
    meeting?: MeetingUpdateOneRequiredWithoutAttendeesNestedInput
  }

  export type MeetingAttendeeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    isCandidate?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MeetingAttendeeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetingId?: StringFieldUpdateOperationsInput | string
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    isCandidate?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CandidateRatingUpdateWithoutRaterInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobWorkflowStageId?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutCandidateRatingsNestedInput
    ratingCardTemplate?: RatingCardTemplateUpdateOneRequiredWithoutCandidateRatingsNestedInput
    categoryScores?: CategoryScoreUpdateManyWithoutCandidateRatingNestedInput
  }

  export type CandidateRatingUncheckedUpdateWithoutRaterInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    jobWorkflowStageId?: StringFieldUpdateOperationsInput | string
    ratingCardTemplateId?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryScores?: CategoryScoreUncheckedUpdateManyWithoutCandidateRatingNestedInput
  }

  export type CandidateRatingUncheckedUpdateManyWithoutRaterInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    jobWorkflowStageId?: StringFieldUpdateOperationsInput | string
    ratingCardTemplateId?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUpdateManyWithoutCompanyNestedInput
    jobs?: JobUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: CompanyMemberUncheckedUpdateManyWithoutCompanyNestedInput
    jobs?: JobUncheckedUpdateManyWithoutCompanyNestedInput
    departments?: DepartmentUncheckedUpdateManyWithoutCompanyNestedInput
    locations?: JobLocationUncheckedUpdateManyWithoutCompanyNestedInput
    workflowTemplates?: WorkflowTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    ratingCardTemplates?: RatingCardTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    careersPageSettings?: CareersPageSettingUncheckedUpdateOneWithoutCompanyNestedInput
    jobBoardIntegrations?: JobBoardIntegrationUncheckedUpdateManyWithoutCompanyNestedInput
    messageTemplates?: MessageTemplateUncheckedUpdateManyWithoutCompanyNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutCompanyNestedInput
    questionSets?: QuestionSetUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyMemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutMembersNestedInput
  }

  export type CompanyMemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyMemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalendarIntegrationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: EnumCalendarProviderFieldUpdateOperationsInput | $Enums.CalendarProvider
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    calendarId?: NullableStringFieldUpdateOperationsInput | string | null
    connectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalendarIntegrationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: EnumCalendarProviderFieldUpdateOperationsInput | $Enums.CalendarProvider
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    calendarId?: NullableStringFieldUpdateOperationsInput | string | null
    connectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalendarIntegrationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: EnumCalendarProviderFieldUpdateOperationsInput | $Enums.CalendarProvider
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scopes?: NullableStringFieldUpdateOperationsInput | string | null
    calendarId?: NullableStringFieldUpdateOperationsInput | string | null
    connectedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIInteractionLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    inputType?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIInteractionLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    inputType?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AIInteractionLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    inputType?: StringFieldUpdateOperationsInput | string
    input?: StringFieldUpdateOperationsInput | string
    output?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobHiringMemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    isExternalRecruiter?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutHiringTeamNestedInput
  }

  export type JobHiringMemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    isExternalRecruiter?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobHiringMemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    isExternalRecruiter?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyMemberCreateManyCompanyInput = {
    id?: string
    userId: string
    role: $Enums.CompanyMemberRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobCreateManyCompanyInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    departmentId?: string | null
    locationId?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentCreateManyCompanyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobLocationCreateManyCompanyInput = {
    id?: string
    address?: string | null
    country: string
    city: string
    stateRegion?: string | null
    zipPostal?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowTemplateCreateManyCompanyInput = {
    id?: string
    name: string
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RatingCardTemplateCreateManyCompanyInput = {
    id?: string
    name: string
    description?: string | null
    type?: $Enums.RatingCardType
    isDefault?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobBoardIntegrationCreateManyCompanyInput = {
    id?: string
    boardName: string
    apiKey?: string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isEnabled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageTemplateCreateManyCompanyInput = {
    id?: string
    name: string
    subject: string
    content: string
    description?: string | null
    isRequired?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionCreateManyCompanyInput = {
    id?: string
    text: string
    responseType: string
    visibility: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuestionSetCreateManyCompanyInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyMemberUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCompanyMembershipsNestedInput
  }

  export type CompanyMemberUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyMemberUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentUpdateOneWithoutJobsNestedInput
    location?: JobLocationUpdateOneWithoutJobsNestedInput
    applicationForm?: ApplicationFormFieldUpdateManyWithoutJobNestedInput
    hiringTeam?: JobHiringMemberUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUpdateOneWithoutJobNestedInput
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUpdateOneWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUpdateOneWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationForm?: ApplicationFormFieldUncheckedUpdateManyWithoutJobNestedInput
    hiringTeam?: JobHiringMemberUncheckedUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUncheckedUpdateOneWithoutJobNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUncheckedUpdateOneWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedUpdateOneWithoutJobNestedInput
  }

  export type JobUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobLocationUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    stateRegion?: NullableStringFieldUpdateOperationsInput | string | null
    zipPostal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUpdateManyWithoutLocationNestedInput
  }

  export type JobLocationUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    stateRegion?: NullableStringFieldUpdateOperationsInput | string | null
    zipPostal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type JobLocationUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    country?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    stateRegion?: NullableStringFieldUpdateOperationsInput | string | null
    zipPostal?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowTemplateUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stages?: WorkflowStageTemplateUpdateManyWithoutWorkflowTemplateNestedInput
    jobWorkflows?: JobWorkflowUpdateManyWithoutWorkflowTemplateNestedInput
  }

  export type WorkflowTemplateUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stages?: WorkflowStageTemplateUncheckedUpdateManyWithoutWorkflowTemplateNestedInput
    jobWorkflows?: JobWorkflowUncheckedUpdateManyWithoutWorkflowTemplateNestedInput
  }

  export type WorkflowTemplateUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RatingCardTemplateUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumRatingCardTypeFieldUpdateOperationsInput | $Enums.RatingCardType
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: RatingCategoryUpdateManyWithoutRatingCardTemplateNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutRatingCardTemplateNestedInput
  }

  export type RatingCardTemplateUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumRatingCardTypeFieldUpdateOperationsInput | $Enums.RatingCardType
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: RatingCategoryUncheckedUpdateManyWithoutRatingCardTemplateNestedInput
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutRatingCardTemplateNestedInput
  }

  export type RatingCardTemplateUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumRatingCardTypeFieldUpdateOperationsInput | $Enums.RatingCardType
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobBoardIntegrationUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardName?: StringFieldUpdateOperationsInput | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobBoardIntegrationUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardName?: StringFieldUpdateOperationsInput | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobBoardIntegrationUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    boardName?: StringFieldUpdateOperationsInput | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    config?: NullableJsonNullValueInput | InputJsonValue
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageTemplateUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageTemplateUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageTemplateUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    responseType?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: QuestionOptionUpdateManyWithoutQuestionNestedInput
    questionSets?: QuestionSetUpdateManyWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    responseType?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput
    questionSets?: QuestionSetUncheckedUpdateManyWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    responseType?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionSetUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUpdateManyWithoutQuestionSetsNestedInput
  }

  export type QuestionSetUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    questions?: QuestionUncheckedUpdateManyWithoutQuestionSetsNestedInput
  }

  export type QuestionSetUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationFormFieldCreateManyJobInput = {
    id?: string
    fieldName: string
    label: string
    fieldType: $Enums.FieldType
    isRequired?: boolean
    isOptional?: boolean
    isDisabled?: boolean
    customQuestionId?: string | null
    order: number
  }

  export type JobHiringMemberCreateManyJobInput = {
    id?: string
    userId: string
    role: $Enums.CompanyMemberRole
    isExternalRecruiter?: boolean
    createdAt?: Date | string
  }

  export type ApplicationCreateManyJobInput = {
    id?: string
    candidateId: string
    appliedAt?: Date | string
    currentStageId?: string | null
    status?: $Enums.ApplicationStatus
    disqualificationReason?: string | null
    archivedAt?: Date | string | null
    hiredAt?: Date | string | null
    source?: string | null
  }

  export type ApplicationFormFieldUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    fieldType?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isOptional?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    customQuestion?: CustomQuestionUpdateOneWithoutApplicationFormFieldsNestedInput
  }

  export type ApplicationFormFieldUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    fieldType?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isOptional?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
    customQuestionId?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
  }

  export type ApplicationFormFieldUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    fieldType?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isOptional?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
    customQuestionId?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
  }

  export type JobHiringMemberUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    isExternalRecruiter?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutJobHiringMembersNestedInput
  }

  export type JobHiringMemberUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    isExternalRecruiter?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobHiringMemberUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumCompanyMemberRoleFieldUpdateOperationsInput | $Enums.CompanyMemberRole
    isExternalRecruiter?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStageId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    disqualificationReason?: NullableStringFieldUpdateOperationsInput | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    candidate?: CandidateUpdateOneRequiredWithoutApplicationsNestedInput
    candidateAnswers?: CandidateAnswerUpdateManyWithoutApplicationNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutApplicationNestedInput
    messages?: MessageThreadUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStageId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    disqualificationReason?: NullableStringFieldUpdateOperationsInput | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    candidateAnswers?: CandidateAnswerUncheckedUpdateManyWithoutApplicationNestedInput
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutApplicationNestedInput
    messages?: MessageThreadUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStageId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    disqualificationReason?: NullableStringFieldUpdateOperationsInput | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobCreateManyDepartmentInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    companyId: string
    locationId?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    location?: JobLocationUpdateOneWithoutJobsNestedInput
    applicationForm?: ApplicationFormFieldUpdateManyWithoutJobNestedInput
    hiringTeam?: JobHiringMemberUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUpdateOneWithoutJobNestedInput
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUpdateOneWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUpdateOneWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationForm?: ApplicationFormFieldUncheckedUpdateManyWithoutJobNestedInput
    hiringTeam?: JobHiringMemberUncheckedUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUncheckedUpdateOneWithoutJobNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUncheckedUpdateOneWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedUpdateOneWithoutJobNestedInput
  }

  export type JobUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    locationId?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCreateManyLocationInput = {
    id?: string
    title: string
    description: string
    employmentType: $Enums.EmploymentType
    workType: $Enums.WorkType
    salaryMin?: number | null
    salaryMax?: number | null
    currency?: string | null
    payPeriod?: string | null
    displaySalary?: boolean
    status?: $Enums.JobStatus
    jobCode?: string | null
    companyId: string
    departmentId?: string | null
    minYearsExperience?: number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutJobsNestedInput
    department?: DepartmentUpdateOneWithoutJobsNestedInput
    applicationForm?: ApplicationFormFieldUpdateManyWithoutJobNestedInput
    hiringTeam?: JobHiringMemberUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUpdateOneWithoutJobNestedInput
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUpdateOneWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUpdateOneWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicationForm?: ApplicationFormFieldUncheckedUpdateManyWithoutJobNestedInput
    hiringTeam?: JobHiringMemberUncheckedUpdateManyWithoutJobNestedInput
    jobWorkflow?: JobWorkflowUncheckedUpdateOneWithoutJobNestedInput
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    aiScreeningConfig?: AIScreeningConfigUncheckedUpdateOneWithoutJobNestedInput
    aiSchedulingConfig?: AISchedulingConfigUncheckedUpdateOneWithoutJobNestedInput
  }

  export type JobUncheckedUpdateManyWithoutLocationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    employmentType?: EnumEmploymentTypeFieldUpdateOperationsInput | $Enums.EmploymentType
    workType?: EnumWorkTypeFieldUpdateOperationsInput | $Enums.WorkType
    salaryMin?: NullableFloatFieldUpdateOperationsInput | number | null
    salaryMax?: NullableFloatFieldUpdateOperationsInput | number | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    payPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    displaySalary?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    jobCode?: NullableStringFieldUpdateOperationsInput | string | null
    companyId?: StringFieldUpdateOperationsInput | string
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    minYearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    skills?: NullableJsonNullValueInput | InputJsonValue
    jobBoards?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationFormFieldCreateManyCustomQuestionInput = {
    id?: string
    jobId: string
    fieldName: string
    label: string
    fieldType: $Enums.FieldType
    isRequired?: boolean
    isOptional?: boolean
    isDisabled?: boolean
    order: number
  }

  export type CandidateAnswerCreateManyCustomQuestionInput = {
    id?: string
    applicationId: string
    answerText?: string | null
    answerFileUrl?: string | null
    answeredAt?: Date | string
    candidateId: string
  }

  export type ApplicationFormFieldUpdateWithoutCustomQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    fieldType?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isOptional?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    job?: JobUpdateOneRequiredWithoutApplicationFormNestedInput
  }

  export type ApplicationFormFieldUncheckedUpdateWithoutCustomQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    fieldType?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isOptional?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
  }

  export type ApplicationFormFieldUncheckedUpdateManyWithoutCustomQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    fieldType?: EnumFieldTypeFieldUpdateOperationsInput | $Enums.FieldType
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    isOptional?: BoolFieldUpdateOperationsInput | boolean
    isDisabled?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
  }

  export type CandidateAnswerUpdateWithoutCustomQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    answerText?: NullableStringFieldUpdateOperationsInput | string | null
    answerFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutCandidateAnswersNestedInput
    candidate?: CandidateUpdateOneRequiredWithoutCandidateAnswersNestedInput
  }

  export type CandidateAnswerUncheckedUpdateWithoutCustomQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    answerText?: NullableStringFieldUpdateOperationsInput | string | null
    answerFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateAnswerUncheckedUpdateManyWithoutCustomQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    answerText?: NullableStringFieldUpdateOperationsInput | string | null
    answerFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
  }

  export type ApplicationCreateManyCandidateInput = {
    id?: string
    jobId: string
    appliedAt?: Date | string
    currentStageId?: string | null
    status?: $Enums.ApplicationStatus
    disqualificationReason?: string | null
    archivedAt?: Date | string | null
    hiredAt?: Date | string | null
    source?: string | null
  }

  export type CandidateAnswerCreateManyCandidateInput = {
    id?: string
    applicationId: string
    customQuestionId: string
    answerText?: string | null
    answerFileUrl?: string | null
    answeredAt?: Date | string
  }

  export type ApplicationUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStageId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    disqualificationReason?: NullableStringFieldUpdateOperationsInput | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    job?: JobUpdateOneRequiredWithoutApplicationsNestedInput
    candidateAnswers?: CandidateAnswerUpdateManyWithoutApplicationNestedInput
    candidateRatings?: CandidateRatingUpdateManyWithoutApplicationNestedInput
    messages?: MessageThreadUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStageId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    disqualificationReason?: NullableStringFieldUpdateOperationsInput | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
    candidateAnswers?: CandidateAnswerUncheckedUpdateManyWithoutApplicationNestedInput
    candidateRatings?: CandidateRatingUncheckedUpdateManyWithoutApplicationNestedInput
    messages?: MessageThreadUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentStageId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    disqualificationReason?: NullableStringFieldUpdateOperationsInput | string | null
    archivedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    hiredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    source?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CandidateAnswerUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    answerText?: NullableStringFieldUpdateOperationsInput | string | null
    answerFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutCandidateAnswersNestedInput
    customQuestion?: CustomQuestionUpdateOneRequiredWithoutCandidateAnswersNestedInput
  }

  export type CandidateAnswerUncheckedUpdateWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    customQuestionId?: StringFieldUpdateOperationsInput | string
    answerText?: NullableStringFieldUpdateOperationsInput | string | null
    answerFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateAnswerUncheckedUpdateManyWithoutCandidateInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    customQuestionId?: StringFieldUpdateOperationsInput | string
    answerText?: NullableStringFieldUpdateOperationsInput | string | null
    answerFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CandidateAnswerCreateManyApplicationInput = {
    id?: string
    customQuestionId: string
    answerText?: string | null
    answerFileUrl?: string | null
    answeredAt?: Date | string
    candidateId: string
  }

  export type CandidateRatingCreateManyApplicationInput = {
    id?: string
    jobWorkflowStageId: string
    raterId: string
    ratingCardTemplateId: string
    overallScore: number
    comments?: string | null
    submittedAt?: Date | string
  }

  export type MessageThreadCreateManyApplicationInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CandidateAnswerUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    answerText?: NullableStringFieldUpdateOperationsInput | string | null
    answerFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customQuestion?: CustomQuestionUpdateOneRequiredWithoutCandidateAnswersNestedInput
    candidate?: CandidateUpdateOneRequiredWithoutCandidateAnswersNestedInput
  }

  export type CandidateAnswerUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    customQuestionId?: StringFieldUpdateOperationsInput | string
    answerText?: NullableStringFieldUpdateOperationsInput | string | null
    answerFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateAnswerUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    customQuestionId?: StringFieldUpdateOperationsInput | string
    answerText?: NullableStringFieldUpdateOperationsInput | string | null
    answerFileUrl?: NullableStringFieldUpdateOperationsInput | string | null
    answeredAt?: DateTimeFieldUpdateOperationsInput | Date | string
    candidateId?: StringFieldUpdateOperationsInput | string
  }

  export type CandidateRatingUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobWorkflowStageId?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rater?: UserUpdateOneRequiredWithoutCandidateRatingsNestedInput
    ratingCardTemplate?: RatingCardTemplateUpdateOneRequiredWithoutCandidateRatingsNestedInput
    categoryScores?: CategoryScoreUpdateManyWithoutCandidateRatingNestedInput
  }

  export type CandidateRatingUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobWorkflowStageId?: StringFieldUpdateOperationsInput | string
    raterId?: StringFieldUpdateOperationsInput | string
    ratingCardTemplateId?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryScores?: CategoryScoreUncheckedUpdateManyWithoutCandidateRatingNestedInput
  }

  export type CandidateRatingUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobWorkflowStageId?: StringFieldUpdateOperationsInput | string
    raterId?: StringFieldUpdateOperationsInput | string
    ratingCardTemplateId?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageThreadUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUpdateManyWithoutThreadNestedInput
  }

  export type MessageThreadUncheckedUpdateWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutThreadNestedInput
  }

  export type MessageThreadUncheckedUpdateManyWithoutApplicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowStageTemplateCreateManyWorkflowTemplateInput = {
    id?: string
    name: string
    type: $Enums.StageType
    order: number
    isDefault?: boolean
    canBeDeleted?: boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    visibilityToReviewers?: boolean
  }

  export type JobWorkflowCreateManyWorkflowTemplateInput = {
    id?: string
    jobId: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowStageTemplateUpdateWithoutWorkflowTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    order?: IntFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canBeDeleted?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    visibilityToReviewers?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WorkflowStageTemplateUncheckedUpdateWithoutWorkflowTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    order?: IntFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canBeDeleted?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    visibilityToReviewers?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WorkflowStageTemplateUncheckedUpdateManyWithoutWorkflowTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    order?: IntFieldUpdateOperationsInput | number
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    canBeDeleted?: BoolFieldUpdateOperationsInput | boolean
    settings?: NullableJsonNullValueInput | InputJsonValue
    visibilityToReviewers?: BoolFieldUpdateOperationsInput | boolean
  }

  export type JobWorkflowUpdateWithoutWorkflowTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutJobWorkflowNestedInput
    stages?: JobWorkflowStageUpdateManyWithoutJobWorkflowNestedInput
  }

  export type JobWorkflowUncheckedUpdateWithoutWorkflowTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stages?: JobWorkflowStageUncheckedUpdateManyWithoutJobWorkflowNestedInput
  }

  export type JobWorkflowUncheckedUpdateManyWithoutWorkflowTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobWorkflowStageCreateManyJobWorkflowInput = {
    id?: string
    name: string
    type: $Enums.StageType
    order: number
    settings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JobWorkflowStageUpdateWithoutJobWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    order?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JobWorkflowStageUncheckedUpdateWithoutJobWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    order?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JobWorkflowStageUncheckedUpdateManyWithoutJobWorkflowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumStageTypeFieldUpdateOperationsInput | $Enums.StageType
    order?: IntFieldUpdateOperationsInput | number
    settings?: NullableJsonNullValueInput | InputJsonValue
  }

  export type RatingCategoryCreateManyRatingCardTemplateInput = {
    id?: string
    name: string
    description?: string | null
    order: number
  }

  export type CandidateRatingCreateManyRatingCardTemplateInput = {
    id?: string
    applicationId: string
    jobWorkflowStageId: string
    raterId: string
    overallScore: number
    comments?: string | null
    submittedAt?: Date | string
  }

  export type RatingCategoryUpdateWithoutRatingCardTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    categoryScores?: CategoryScoreUpdateManyWithoutRatingCategoryNestedInput
  }

  export type RatingCategoryUncheckedUpdateWithoutRatingCardTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    categoryScores?: CategoryScoreUncheckedUpdateManyWithoutRatingCategoryNestedInput
  }

  export type RatingCategoryUncheckedUpdateManyWithoutRatingCardTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
  }

  export type CandidateRatingUpdateWithoutRatingCardTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobWorkflowStageId?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutCandidateRatingsNestedInput
    rater?: UserUpdateOneRequiredWithoutCandidateRatingsNestedInput
    categoryScores?: CategoryScoreUpdateManyWithoutCandidateRatingNestedInput
  }

  export type CandidateRatingUncheckedUpdateWithoutRatingCardTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    jobWorkflowStageId?: StringFieldUpdateOperationsInput | string
    raterId?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categoryScores?: CategoryScoreUncheckedUpdateManyWithoutCandidateRatingNestedInput
  }

  export type CandidateRatingUncheckedUpdateManyWithoutRatingCardTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    applicationId?: StringFieldUpdateOperationsInput | string
    jobWorkflowStageId?: StringFieldUpdateOperationsInput | string
    raterId?: StringFieldUpdateOperationsInput | string
    overallScore?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryScoreCreateManyRatingCategoryInput = {
    id?: string
    candidateRatingId: string
    score: number
    comments?: string | null
  }

  export type CategoryScoreUpdateWithoutRatingCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    candidateRating?: CandidateRatingUpdateOneRequiredWithoutCategoryScoresNestedInput
  }

  export type CategoryScoreUncheckedUpdateWithoutRatingCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateRatingId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryScoreUncheckedUpdateManyWithoutRatingCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateRatingId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryScoreCreateManyCandidateRatingInput = {
    id?: string
    ratingCategoryId: string
    score: number
    comments?: string | null
  }

  export type CategoryScoreUpdateWithoutCandidateRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    ratingCategory?: RatingCategoryUpdateOneRequiredWithoutCategoryScoresNestedInput
  }

  export type CategoryScoreUncheckedUpdateWithoutCandidateRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    ratingCategoryId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryScoreUncheckedUpdateManyWithoutCandidateRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    ratingCategoryId?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    comments?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageCreateManyThreadInput = {
    id?: string
    senderId: string
    content: string
    sentAt?: Date | string
    isInternalNote?: boolean
    visibility?: $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MessageUpdateWithoutThreadInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternalNote?: BoolFieldUpdateOperationsInput | boolean
    visibility?: NullableEnumCommentVisibilityFieldUpdateOperationsInput | $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
    sender?: UserUpdateOneRequiredWithoutSentMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutThreadInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternalNote?: BoolFieldUpdateOperationsInput | boolean
    visibility?: NullableEnumCommentVisibilityFieldUpdateOperationsInput | $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MessageUncheckedUpdateManyWithoutThreadInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    sentAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isInternalNote?: BoolFieldUpdateOperationsInput | boolean
    visibility?: NullableEnumCommentVisibilityFieldUpdateOperationsInput | $Enums.CommentVisibility | null
    attachments?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MeetingAttendeeCreateManyMeetingInput = {
    id?: string
    userId?: string | null
    candidateId?: string | null
    email: string
    name?: string | null
    status?: $Enums.AttendeeStatus
    isCandidate?: boolean
  }

  export type MeetingAttendeeUpdateWithoutMeetingInput = {
    id?: StringFieldUpdateOperationsInput | string
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    isCandidate?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneWithoutMeetingAttendeesNestedInput
  }

  export type MeetingAttendeeUncheckedUpdateWithoutMeetingInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    isCandidate?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MeetingAttendeeUncheckedUpdateManyWithoutMeetingInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    candidateId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumAttendeeStatusFieldUpdateOperationsInput | $Enums.AttendeeStatus
    isCandidate?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MeetingCreateManyMeetingTemplateInput = {
    id?: string
    title: string
    description?: string | null
    startTime: Date | string
    endTime: Date | string
    type: $Enums.MeetingType
    location?: string | null
    videoCallLink?: string | null
    jobId?: string | null
    applicationId?: string | null
    organizerId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingUpdateWithoutMeetingTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    videoCallLink?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organizer?: UserUpdateOneRequiredWithoutMeetingsOwnedNestedInput
    attendees?: MeetingAttendeeUpdateManyWithoutMeetingNestedInput
    aiNoteTakingConfig?: AINoteTakingConfigUpdateOneWithoutMeetingNestedInput
  }

  export type MeetingUncheckedUpdateWithoutMeetingTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    videoCallLink?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    organizerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendees?: MeetingAttendeeUncheckedUpdateManyWithoutMeetingNestedInput
    aiNoteTakingConfig?: AINoteTakingConfigUncheckedUpdateOneWithoutMeetingNestedInput
  }

  export type MeetingUncheckedUpdateManyWithoutMeetingTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumMeetingTypeFieldUpdateOperationsInput | $Enums.MeetingType
    location?: NullableStringFieldUpdateOperationsInput | string | null
    videoCallLink?: NullableStringFieldUpdateOperationsInput | string | null
    jobId?: NullableStringFieldUpdateOperationsInput | string | null
    applicationId?: NullableStringFieldUpdateOperationsInput | string | null
    organizerId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionOptionCreateManyQuestionInput = {
    id?: string
    value: string
  }

  export type QuestionOptionUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionOptionUncheckedUpdateWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionOptionUncheckedUpdateManyWithoutQuestionInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionSetUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutQuestionSetsNestedInput
  }

  export type QuestionSetUncheckedUpdateWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionSetUncheckedUpdateManyWithoutQuestionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestionUpdateWithoutQuestionSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    responseType?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutQuestionsNestedInput
    options?: QuestionOptionUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutQuestionSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    responseType?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    options?: QuestionOptionUncheckedUpdateManyWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutQuestionSetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    responseType?: StringFieldUpdateOperationsInput | string
    visibility?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}