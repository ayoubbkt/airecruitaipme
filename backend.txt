=== Contenu de frontend\src\App.js ===
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

// Layouts
import DashboardLayout from './layouts/DashboardLayout';
import AuthLayout from './layouts/AuthLayout';


// Pages - Auth
import Login from './pages/auth/Login';
import Register from './pages/auth/Register';
import ForgotPassword from './pages/auth/ForgotPassword';

// Pages - Dashboard
import Dashboard from './pages/dashboard/Dashboard';
import CVAnalysis from './pages/cv/CVAnalysis';
import CVDetail from './pages/cv/CVDetail';
import CandidateProfile from './pages/cv/CandidateProfile';
import TalentPool from './pages/talent/TalentPool';
import CandidateManagement from './pages/talent/CandidateManagement';
import CandidateKanbanView from './pages/talent/CandidateKanbanView';
import CandidatePipelineView from './pages/talent/CandidatePipelineView';
import JobListings from './pages/jobs/JobListings';
import JobManagement from './pages/jobs/JobManagement';
import JobDetail from './pages/jobs/JobDetail';
import JobCreate from './pages/jobs/JobCreate';
import Interviews from './pages/interviews/Interviews';
import InterviewDetail from './pages/interviews/InterviewDetail';
import Reports from './pages/reports/Reports';
import ATSIntegration from './pages/settings/ATSIntegration';
import Settings from './pages/settings/Settings';
import CandidateInbox from './pages/messages/CandidateInbox';

import RecruitingSettings from './pages/settings/RecruitingSettings';
import RecruitingWorkflows from './pages/settings/RecruitingWorkflows';
import ComingSoon from './components/common/ComingSoon';
import MeetingTemplates from './pages/settings/MeetingTemplates';
import MessageTemplates from './pages/settings/MessageTemplates';
import RecruitingQuestions from './pages/settings/RecruitingQuestions';
import RecruitingRatingCards from './pages/settings/RecruitingRatingCards';
import CompanySettings from './pages/settings/CompanySettings';
import CompanyProfile from './pages/settings/company/CompanyProfile';
import CompanyLocations from './pages/settings/company/CompanyLocations';
import Departments from './pages/settings/company/Departments';

// Auth Guard
import PrivateRoute from './components/auth/PrivateRoute';

// Context Providers
import { AuthProvider } from './contexts/AuthContext';
import { SettingsProvider } from './contexts/SettingsProvider';

function App() {
  return (
      <AuthProvider>
        <SettingsProvider>
          <Router>
            <Routes>
              {/* Auth Routes */}
              <Route element={<AuthLayout />}>
                <Route path="/login" element={<Login />} />
                <Route path="/register" element={<Register />} />
                <Route path="/forgot-password" element={<ForgotPassword />} />
              </Route>

              {/* Protected Dashboard Routes */}
              <Route element={<PrivateRoute />}>
                <Route element={<DashboardLayout />}>
                  {/* Dashboard */}
                  <Route path="/" element={<Dashboard />} />

                  {/* CV Analysis & Candidate Management */}
                  <Route path="/cv-analysis" element={<CVAnalysis />} />
                  <Route path="/cv/:id" element={<CVDetail />} />
                  <Route path="/candidate/:id" element={<CandidateProfile />} />

                  {/* Talent Management */}
                  <Route path="/talent-pool" element={<TalentPool />} />
                  <Route path="/candidates" element={<CandidateManagement />} />
                  <Route path="/candidates/kanban" element={<CandidateKanbanView />} />
                  <Route path="/candidates/kanban/:jobId" element={<CandidateKanbanView />} />
                  <Route path="/candidates/pipeline" element={<CandidatePipelineView />} />
                  <Route path="/candidates/pipeline/:jobId" element={<CandidatePipelineView />} />

                  {/* Job Management */}
                  <Route path="/jobs" element={<JobManagement />} />
                  <Route path="/jobs/listings" element={<JobListings />} />
                  <Route path="/jobs/create" element={<JobCreate />} />
                  <Route path="/jobs/:id" element={<JobDetail />} />

                  {/* Interviews */}
                  <Route path="/interviews" element={<Interviews />} />
                  <Route path="/interviews/:id" element={<InterviewDetail />} />

                  {/* Messages */}
                  <Route path="/inbox" element={<CandidateInbox />} />

                  {/* Reports */}
                  <Route path="/reports" element={<Reports />} />

                  {/* Settings */}
                  <Route path="/ats-integration" element={<ATSIntegration />} />
                  <Route path="/settings" element={<Settings />} />
                  <Route path="/settings/company" element={<CompanySettings />}>
                    <Route path="profile" element={<CompanyProfile title="Profil de l'entreprise"  />} />
                    <Route path="locations" element={<CompanyLocations   title="Emplacements"/>} />
                    <Route path="departments" element={<Departments  title="Départements" />} />
                  </Route>
                  <Route path="/settings/recruiting" element={<RecruitingSettings />}>
                    <Route path="workflows" element={<RecruitingWorkflows />} />
                    <Route path="meeting-templates" element={<MeetingTemplates title="Meeting Templates" />} />
                    <Route path="message-templates" element={<MessageTemplates  title="Message Templates" />} />
                    <Route path="questions" element={<RecruitingQuestions title="Questions" />} />
                    <Route path="ratingcards" element={<RecruitingRatingCards title="Rating Cards" />} />
                  </Route>
                  <Route path="/settings/workflows" element={<RecruitingWorkflows />} />
                </Route>
              </Route>
            </Routes>
          </Router>
          <ToastContainer position="top-right" autoClose={3000} />
        </SettingsProvider>
      </AuthProvider>
  );
}

export default App;
=== FIN ===

=== Contenu de frontend\src\index.js ===
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);



// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
=== FIN ===

=== Contenu de frontend\src\main.jsx ===
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.jsx';
import './index.css';
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


=== FIN ===

=== Contenu de frontend\src\reportWebVitals.js ===
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};


export default reportWebVitals;

=== FIN ===

=== Contenu de frontend\src\contexts\AuthContext.jsx ===
import React, { createContext, useContext, useState, useEffect } from 'react';
import { authService } from '../services/api';
import axios from '../utils/axios';

const AuthContext = createContext(null);

export const useAuth = () => useContext(AuthContext);



export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [companyId, setCompanyId] = useState(null);
  const [companies, setCompanies] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    const initAuth = async () => {
      try {
        const token = localStorage.getItem('token');
        
        if (token) {
          // Configure default auth header
          axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
          
          // Get current user data
          const userData = await authService.getCurrentUser();
          setUser(userData);

          const companyResponse = await axios.get('/companies/my-companies');
         
          const companiesData = companyResponse.data.data || [];
          setCompanies(companiesData);
          if (companiesData.length > 0) {
            setCompanyId(companiesData[0].id);
          } else {
            setError('Aucune entreprise trouvée. Veuillez créer une entreprise.');
          }
        }
      } catch (err) {
        console.error('Failed to initialize auth:', err);
        localStorage.removeItem('token');
      } finally {
        setLoading(false);
      }
    };
    
    initAuth();
  }, []);
  
  const login = async (email, password) => {
    try {
      setError(null);
      const { token, user } = await authService.login(email, password);
      console.log('Login response:', { token, user }); // Vérifie la réponse
      // Store token and configure axios
      localStorage.setItem('token', token);
      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
      
      setUser(user);
      
      // Récupérer les entreprises après connexion
      const companyResponse = await axios.get('/companies/my-companies');
      
      const companiesData = companyResponse.data.data || [];
      setCompanies(companiesData);

      if (companiesData.length > 0) {
        setCompanyId(companiesData[0].id);
      } else {
        setError('Aucune entreprise trouvée pour cet utilisateur.');
      }

      return user;
    } catch (err) {
      const errorMessage = err.response?.data?.message || 'Erreur lors de la connexion';
      setError(errorMessage);
      throw new Error(errorMessage);
    }
  };
  
  const register = async (data) => {
    try {
      setError(null);
      const response = await authService.register(data);
      return response;
    } catch (err) {
      const errorMessage = err.response?.data?.message || 'Erreur lors de l\'inscription';
      setError(errorMessage);
      throw new Error(errorMessage);
    }
  };
  
  const logout = async () => {
    try {
      await authService.logout();
    } catch (err) {
      console.error('Logout error:', err);
    } finally {
      localStorage.removeItem('token');
      delete axios.defaults.headers.common['Authorization'];
      setUser(null);
      setCompanyId(null);
      setCompanies([]);
      setError(null);
    }
  };
  
  const forgotPassword = async (email) => {
    try {
      setError(null);
      await authService.forgotPassword(email);
    } catch (err) {
      const errorMessage = err.response?.data?.message || 'Erreur lors de la réinitialisation du mot de passe';
      setError(errorMessage);
      throw new Error(errorMessage);
    }
  };
  
  const resetPassword = async (token, password) => {
    try {
      setError(null);
      await authService.resetPassword(token, password);
    } catch (err) {
      const errorMessage = err.response?.data?.message || 'Erreur lors de la mise à jour du mot de passe';
      setError(errorMessage);
      throw new Error(errorMessage);
    }
  };
  
  return (
    <AuthContext.Provider value={{
      user,
      companyId,
        setCompanyId, // Permet de changer l'entreprise active
        companies,
      loading,
      error,
      login,
      register,
      logout,
      forgotPassword,
      resetPassword,
      isAuthenticated: !!user
    }}>
      {children}
    </AuthContext.Provider>
  );
};
=== FIN ===

=== Contenu de frontend\src\contexts\SettingsProvider.js ===
import React, { createContext, useContext, useState, useEffect } from 'react';

const SettingsContext = createContext(null);



export const useSettings = () => useContext(SettingsContext);

export const SettingsProvider = ({ children }) => {
  const [settings, setSettings] = useState({
    theme: 'light',
    language: 'fr',
    notificationsEnabled: true,
    dashboardLayout: 'default',
  });
  
  useEffect(() => {
    // Load settings from localStorage
    const savedSettings = localStorage.getItem('settings');
    if (savedSettings) {
      try {
        setSettings(JSON.parse(savedSettings));
      } catch (error) {
        console.error('Error parsing saved settings:', error);
      }
    }
  }, []);
  
  const updateSettings = (newSettings) => {
    const updatedSettings = { ...settings, ...newSettings };
    setSettings(updatedSettings);
    localStorage.setItem('settings', JSON.stringify(updatedSettings));
  };
  
  return (
    <SettingsContext.Provider value={{ settings, updateSettings }}>
      {children}
    </SettingsContext.Provider>
  );
};
=== FIN ===

=== Contenu de frontend\src\contexts\UserContext.jsx ===
// import React, { createContext, useState, useContext, useEffect } from 'react';
// import axios from 'axios';



// const UsersContext = createContext({
//   user: null,
//   setUser: () => {},
//   login: () => {},
//   register: () => {},
//   logout: () => {},
// });

// export const UsersProvider = ({ children }) => {
//   const [user, setUser] = useState(null);

//   useEffect(() => {
//     const storedUser = localStorage.getItem('user');
//     if (storedUser) {
//       setUser(JSON.parse(storedUser));
//     }
//   }, []);

//   const login = async (email, password) => {
//     try {
//       const response = await axios.post('http://localhost:5000/api/v1/auth/login', {
//         email,
//         password,
//       });
//       const userData = response.data;
//       setUser(userData);
//       localStorage.setItem('user', JSON.stringify(userData));
//     } catch (error) {
//       console.error('Login failed:', error);
//       throw error;
//     }
//   };

//   const register = async (email, password, name) => {
//     try {
//       const response = await axios.post('http://localhost:5000/api/v1/auth/register', {
//         email,
//         password,
//         name,
//       });
//       const userData = response.data;
//       setUser(userData);
//       localStorage.setItem('user', JSON.stringify(userData));
//     } catch (error) {
//       console.error('Registration failed:', error);
//       throw error;
//     }
//   };

//   const logout = () => {
//     setUser(null);
//     localStorage.removeItem('user');
//   };

//   return (
//     <UsersContext.Provider value={{ user, setUser, login, register, logout }}>
//       {children}
//     </UsersContext.Provider>
//   );
// };

// export const useUsers = () => useContext(UsersContext);
=== FIN ===

=== Contenu de frontend\src\layouts\AuthLayout.jsx ===
import React from 'react';
import { Outlet, Navigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import LoadingSpinner from '../components/common/LoadingSpinner';

const AuthLayout = () => {
  const { isAuthenticated, loading } = useAuth();

  if (loading) {
    return <LoadingSpinner />;
  }


  if (isAuthenticated) {
    return <Navigate to="/" />;
  }

  return (
    <div className="min-h-screen bg-slate-50 flex items-center justify-center p-4">
      <div className="w-full max-w-md bg-white rounded-xl shadow-lg p-6">
        <Outlet />
      </div>
    </div>
  );
};

export default AuthLayout;
=== FIN ===

=== Contenu de frontend\src\layouts\DashboardLayout.jsx ===
import React, { useState } from 'react';
import { Outlet, useLocation, Link } from 'react-router-dom';
import {
    Menu,
    Home,
    BriefcaseBusiness,
    Users,
    Calendar,
    BarChart2,
    Settings,
    Brain,
    LogOut,
    User,
    Bell,
    Search,
    MessageCircle
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

const DashboardLayout = () => {
    const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
    const [settingsMenuOpen, setSettingsMenuOpen] = useState(false);
    const { user, logout } = useAuth();
    const location = useLocation();

    const toggleSidebar = () => {
        setSidebarCollapsed(!sidebarCollapsed);
    };

    const toggleSettingsMenu = (e) => {
        e.preventDefault();
        e.stopPropagation();
        setSettingsMenuOpen(!settingsMenuOpen);
    };

    // La fonction isActive a besoin d'être améliorée pour mieux détecter les routes actives
    const isActive = (path) => {
        if (path === '/') {
            return location.pathname === '/';
        }
        // Pour les autres routes, vérifier si le chemin commence par le chemin donné
        return location.pathname.startsWith(path);
    };

    const handleLogout = async () => {
        try {
            await logout();
            window.location.href = '/login';
        } catch (error) {
            console.error('Logout error:', error);
        }
    };

    // Fermer le menu des paramètres si on clique ailleurs
    const closeSettingsMenu = () => {
        setSettingsMenuOpen(false);
    };

    return (
        <div className="flex h-screen bg-slate-50" onClick={closeSettingsMenu}>
            {/* Sidebar */}
            <div className={`bg-white border-r border-slate-200 transition-all duration-300 flex flex-col ${sidebarCollapsed ? 'w-20' : 'w-64'}`}>
                {/* Logo */}
                <div className="flex items-center justify-between p-4 border-b border-slate-100">
                    {!sidebarCollapsed && <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">RecrutPME</h1>}
                    {sidebarCollapsed && <div className="h-10 w-10 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-xl flex items-center justify-center text-white font-bold text-xl mx-auto">R</div>}
                </div>

                {/* Navigation Items */}
                <div className="mt-6 px-3 flex-1 overflow-y-auto">
                    <nav>
                        <Link
                            to="/"
                            className={`flex items-center py-3 px-3 rounded-xl cursor-pointer ${
                                isActive('/')
                                    ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white'
                                    : 'text-slate-600 hover:bg-slate-50'
                            }`}
                        >
                            <Home size={20} />
                            {!sidebarCollapsed && <span className="ml-3 font-medium">Tableau de bord</span>}
                        </Link>

                        <Link
                            to="/cv-analysis"
                            className={`flex items-center py-3 px-3 rounded-xl cursor-pointer mt-1 ${
                                isActive('/cv-analysis')
                                    ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white'
                                    : 'text-slate-600 hover:bg-slate-50'
                            }`}
                        >
                            <Brain size={20} />
                            {!sidebarCollapsed && <span className="ml-3 font-medium">Analyse des CV</span>}
                        </Link>

                        <Link
                            to="/candidates"
                            className={`flex items-center py-3 px-3 rounded-xl cursor-pointer mt-1 ${
                                isActive('/candidates') || isActive('/talent-pool')
                                    ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white'
                                    : 'text-slate-600 hover:bg-slate-50'
                            }`}
                        >
                            <Users size={20} />
                            {!sidebarCollapsed && <span className="ml-3 font-medium">Candidats</span>}
                        </Link>

                        <Link
                            to="/jobs"
                            className={`flex items-center py-3 px-3 rounded-xl cursor-pointer mt-1 ${
                                isActive('/jobs')
                                    ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white'
                                    : 'text-slate-600 hover:bg-slate-50'
                            }`}
                        >
                            <BriefcaseBusiness size={20} />
                            {!sidebarCollapsed && <span className="ml-3 font-medium">Offres d'emploi</span>}
                        </Link>

                        <Link
                            to="/interviews"
                            className={`flex items-center py-3 px-3 rounded-xl cursor-pointer mt-1 ${
                                isActive('/interviews')
                                    ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white'
                                    : 'text-slate-600 hover:bg-slate-50'
                            }`}
                        >
                            <Calendar size={20} />
                            {!sidebarCollapsed && <span className="ml-3 font-medium">Entretiens</span>}
                        </Link>

                        <Link
                            to="/inbox"
                            className={`flex items-center py-3 px-3 rounded-xl cursor-pointer mt-1 ${
                                isActive('/inbox')
                                    ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white'
                                    : 'text-slate-600 hover:bg-slate-50'
                            }`}
                        >
                            <MessageCircle size={20} />
                            {!sidebarCollapsed && <span className="ml-3 font-medium">Messagerie</span>}
                        </Link>

                        <Link
                            to="/reports"
                            className={`flex items-center py-3 px-3 rounded-xl cursor-pointer mt-1 ${
                                isActive('/reports')
                                    ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white'
                                    : 'text-slate-600 hover:bg-slate-50'
                            }`}
                        >
                            <BarChart2 size={20} />
                            {!sidebarCollapsed && <span className="ml-3 font-medium">Rapports</span>}
                        </Link>

                        {/* Settings link that opens the dropdown */}

                        {/* Settings link that opens the dropdown */}
                        <div className="relative">
                            <Link
                                to="#"
                                className={`flex items-center py-3 px-3 rounded-xl cursor-pointer mt-1 ${
                                    isActive('/settings')
                                        ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white'
                                        : 'text-slate-600 hover:bg-slate-50'
                                }`}
                                onClick={toggleSettingsMenu}
                            >
                                <Settings size={20} />
                                {!sidebarCollapsed && <span className="ml-3 font-medium">Paramètres</span>}
                            </Link>
                        </div>

                        {/* Settings dropdown menu - as a separate floating element */}
                        {settingsMenuOpen && (
                            <div
                                className="fixed inset-0 z-20"
                                onClick={closeSettingsMenu}
                            >
                                <div
                                    className="absolute left-64 top-[calc(100vh-330px)] w-60 bg-white rounded-lg shadow-md py-1 border border-slate-200"
                                    onClick={(e) => e.stopPropagation()}
                                >
                                    <Link
                                        to="/user-settings"
                                        className="flex items-center px-4 py-3 hover:bg-slate-50 text-slate-700"
                                        onClick={() => setSettingsMenuOpen(false)}
                                    >
                                        <div className="w-6 h-6 flex items-center justify-center text-slate-500 mr-3">
                                            <User size={18} />
                                        </div>
                                        <span>User settings</span>
                                    </Link>

                                    <Link
                                        to="/careers-site"
                                        className="flex items-center px-4 py-3 hover:bg-slate-50 text-slate-700"
                                        onClick={() => setSettingsMenuOpen(false)}
                                    >
                                        <div className="w-6 h-6 flex items-center justify-center text-slate-500 mr-3">
                                            <BriefcaseBusiness size={18} />
                                        </div>
                                        <span>Careers site</span>
                                    </Link>

                                    <Link
                                        to="/settings/recruiting/workflows"
                                        className="flex items-center px-4 py-3 hover:bg-slate-50 text-slate-700"
                                        onClick={() => setSettingsMenuOpen(false)}
                                    >
                                        <div className="w-6 h-6 flex items-center justify-center text-slate-500 mr-3">
                                            <Calendar size={18} />
                                        </div>
                                        <span>Recruiting settings</span>
                                    </Link>

                                    <Link
                                        to="/settings/company/profile"
                                        className="flex items-center px-4 py-3 hover:bg-slate-50 text-slate-700"
                                        onClick={() => setSettingsMenuOpen(false)}
                                    >
                                        <div className="w-6 h-6 flex items-center justify-center text-slate-500 mr-3">
                                            <BriefcaseBusiness size={18} />
                                        </div>
                                        <span>Company settings</span>
                                    </Link>

                                    <Link
                                        to="/ai-settings"
                                        className="flex items-center px-4 py-3 hover:bg-slate-50 text-slate-700"
                                        onClick={() => setSettingsMenuOpen(false)}
                                    >
                                        <div className="w-6 h-6 flex items-center justify-center text-slate-500 mr-3">
                                            <Brain size={18} />
                                        </div>
                                        <span>AI settings</span>
                                    </Link>

                                    <div className="border-t border-slate-100 my-1"></div>

                                    <button
                                        onClick={handleLogout}
                                        className="w-full text-left flex items-center px-4 py-3 hover:bg-slate-50 text-red-600"
                                    >
                                        <div className="w-6 h-6 flex items-center justify-center text-red-500 mr-3">
                                            <LogOut size={18} />
                                        </div>
                                        <span>Sign out</span>
                                    </button>
                                </div>
                            </div>
                        )}
                    </nav>
                </div>

                {/* User Profile */}
                {user && (
                    <div className="p-4 border-t border-slate-100">
                        <div className="flex items-center p-2 bg-slate-50 rounded-lg">
                            <div className="w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-indigo-600 flex items-center justify-center text-white font-medium">
                                {user.firstName?.charAt(0)}{user.lastName?.charAt(0)}
                            </div>
                            {!sidebarCollapsed && (
                                <div className="ml-3 flex-1">
                                    <p className="text-sm font-medium text-slate-900">{user.firstName} {user.lastName}</p>
                                    <p className="text-xs text-slate-500">{user.email}</p>
                                </div>
                            )}
                            {!sidebarCollapsed && (
                                <button
                                    onClick={handleLogout}
                                    className="p-1 text-slate-400 hover:text-slate-600 rounded-full hover:bg-slate-100"
                                >
                                    <LogOut size={16} />
                                </button>
                            )}
                        </div>
                    </div>
                )}
            </div>

            {/* Main Content Area */}
            <div className="flex-1 flex flex-col overflow-hidden">
                {/* Header */}
                <header className="bg-white border-b border-slate-200 py-3 px-6 flex items-center justify-between">
                    <div className="flex items-center">
                        <button
                            onClick={toggleSidebar}
                            className="p-2 rounded-lg text-slate-500 hover:bg-slate-100 focus:outline-none mr-4"
                        >
                            <Menu size={20} />
                        </button>

                        <div className="hidden md:flex items-center bg-slate-50 rounded-lg px-3 py-2">
                            <Search size={18} className="text-slate-400" />
                            <input
                                type="text"
                                placeholder="Rechercher..."
                                className="bg-transparent border-none focus:outline-none text-sm ml-2 w-64"
                            />
                        </div>
                    </div>

                    <div className="flex items-center space-x-3">
                        <button className="p-2 rounded-lg text-slate-500 hover:bg-slate-100 relative">
                            <Bell size={20} />
                            <span className="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full"></span>
                        </button>

                        <button className="p-2 rounded-lg text-slate-500 hover:bg-slate-100">
                            <User size={20} />
                        </button>
                    </div>
                </header>

                {/* Main Content */}
                <main className="flex-1 overflow-auto p-6">
                    <Outlet />
                </main>
            </div>
        </div>
    );
};

export default DashboardLayout;
=== FIN ===

=== Contenu de frontend\src\pages\auth\ForgotPassword.jsx ===
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { toast } from 'react-toastify';
import { useAuth } from '../../contexts/AuthContext';

const ForgotPassword = () => {
  const [email, setEmail] = useState('');
  const [loading, setLoading] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  
  const { forgotPassword } = useAuth();


  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!email) {
      toast.error('Veuillez entrer votre adresse email');
      return;
    }
    
    try {
      setLoading(true);
      await forgotPassword(email);
      setSubmitted(true);
      toast.success('Instructions de réinitialisation envoyées à votre email');
    } catch (error) {
      console.error('Forgot password error:', error);
      toast.error(error.message || 'Erreur lors de l\'envoi des instructions');
    } finally {
      setLoading(false);
    }
  };

  if (submitted) {
    return (
      <div className="w-full max-w-md mx-auto p-6">
        <div className="mb-10 text-center">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">RecrutPME</h1>
          <p className="mt-3 text-slate-500">Réinitialisation de mot de passe</p>
        </div>
        
        <div className="bg-blue-50 p-4 rounded-lg text-center">
          <p className="text-blue-800 mb-4">
            Si un compte est associé à l'email <strong>{email}</strong>, vous recevrez un email avec des instructions pour réinitialiser votre mot de passe.
          </p>
          <p className="text-blue-800 mb-4">
            Veuillez vérifier votre boîte de réception et suivre les instructions.
          </p>
          <Link to="/login" className="text-blue-600 font-medium hover:text-blue-800">
            Retourner à la page de connexion
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full max-w-md mx-auto p-6">
      <div className="mb-10 text-center">
        <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">RecrutPME</h1>
        <p className="mt-3 text-slate-500">Réinitialisation de mot de passe</p>
      </div>
      
      <form className="space-y-5" onSubmit={handleSubmit}>
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-slate-700 mb-1">Email</label>
          <input
            id="email"
            type="email"
            className="w-full p-3 border border-slate-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="votre@email.com"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        
        <div>
          <button
            type="submit"
            className="w-full p-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg shadow hover:from-blue-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-70"
            disabled={loading}
          >
            {loading ? 'Envoi en cours...' : 'Envoyer les instructions'}
          </button>
        </div>
      </form>
      
      <div className="mt-8 text-center">
        <p className="text-sm text-slate-600">
          <Link to="/login" className="text-blue-600 hover:text-blue-800 font-medium">Retourner à la connexion</Link>
        </p>
      </div>
    </div>
  );
};

export default ForgotPassword;
=== FIN ===

=== Contenu de frontend\src\pages\auth\Login.jsx ===
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import { useAuth } from '../../contexts/AuthContext';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  
  const { login } = useAuth();
  const navigate = useNavigate();


  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!email || !password) {
      toast.error('Veuillez remplir tous les champs');
      return;
    }
    
    try {
      setLoading(true);
      await login(email, password);
      toast.success('Connexion réussie');
      navigate('/');
    } catch (error) {
      console.error('Login error:', error);
      toast.error(error.message || 'Échec de la connexion');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="w-full max-w-md mx-auto p-6">
      <div className="mb-10 text-center">
        <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">RecrutPME</h1>
        <p className="mt-3 text-slate-500">Connexion à votre compte</p>
      </div>
      
      <form className="space-y-5" onSubmit={handleSubmit}>
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-slate-700 mb-1">Email</label>
          <input
            id="email"
            type="email"
            className="w-full p-3 border border-slate-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="votre@email.com"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>
        
        <div>
          <div className="flex justify-between mb-1">
            <label htmlFor="password" className="block text-sm font-medium text-slate-700">Mot de passe</label>
            <Link to="/forgot-password" className="text-sm text-blue-600 hover:text-blue-800">Mot de passe oublié?</Link>
          </div>
          <input
            id="password"
            type="password"
            className="w-full p-3 border border-slate-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="••••••••"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>
        
        <div>
          <button
            type="submit"
            className="w-full p-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg shadow hover:from-blue-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-70"
            disabled={loading}
          >
            {loading ? 'Connexion en cours...' : 'Se connecter'}
          </button>
        </div>
      </form>
      
      <div className="mt-8 text-center">
        <p className="text-sm text-slate-600">
          Vous n'avez pas de compte? <Link to="/register" className="text-blue-600 hover:text-blue-800 font-medium">S'inscrire</Link>
        </p>
      </div>
    </div>
  );
};

export default Login;
=== FIN ===

=== Contenu de frontend\src\pages\auth\LoginPage.jsx ===
=== FIN ===

=== Contenu de frontend\src\pages\auth\Register.jsx ===
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import { useAuth } from '../../contexts/AuthContext';

const Register = () => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    companyName: '',
    password: '',
    confirmPassword: ''
  });

  const [loading, setLoading] = useState(false);
  
  const { register } = useAuth();
  const navigate = useNavigate();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (formData.password !== formData.confirmPassword) {
      toast.error('Les mots de passe ne correspondent pas');
      return;
    }
    
    try {
      setLoading(true);
      
      const data = {
        ...formData,
        // Remove confirmPassword as the backend doesn't need it
        confirmPassword: undefined
      };
      
      await register(data);
      toast.success('Inscription réussie ! Vous pouvez maintenant vous connecter');
      navigate('/login');
    } catch (error) {
      console.error('Registration error:', error);
      toast.error(error.message || 'Échec de l\'inscription');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="w-full max-w-md mx-auto p-6">
      <div className="mb-10 text-center">
        <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">RecrutPME</h1>
        <p className="mt-3 text-slate-500">Créer votre compte</p>
      </div>
      
      <form className="space-y-4" onSubmit={handleSubmit}>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label htmlFor="firstName" className="block text-sm font-medium text-slate-700 mb-1">Prénom</label>
            <input
              id="firstName"
              name="firstName"
              type="text"
              className="w-full p-3 border border-slate-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Prénom"
              value={formData.firstName}
              onChange={handleChange}
              required
            />
          </div>
          
          <div>
            <label htmlFor="lastName" className="block text-sm font-medium text-slate-700 mb-1">Nom</label>
            <input
              id="lastName"
              name="lastName"
              type="text"
              className="w-full p-3 border border-slate-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Nom"
              value={formData.lastName}
              onChange={handleChange}
              required
            />
          </div>
        </div>
        
        <div>
          <label htmlFor="email" className="block text-sm font-medium text-slate-700 mb-1">Email</label>
          <input
            id="email"
            name="email"
            type="email"
            className="w-full p-3 border border-slate-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="votre@email.com"
            value={formData.email}
            onChange={handleChange}
            required
          />
        </div>
        
        <div>
          <label htmlFor="companyName" className="block text-sm font-medium text-slate-700 mb-1">Entreprise</label>
          <input
            id="companyName"
            name="companyName"
            type="text"
            className="w-full p-3 border border-slate-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Nom de votre entreprise"
            value={formData.companyName}
            onChange={handleChange}
          />
        </div>
        
        <div>
          <label htmlFor="password" className="block text-sm font-medium text-slate-700 mb-1">Mot de passe</label>
          <input
            id="password"
            name="password"
            type="password"
            className="w-full p-3 border border-slate-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="••••••••"
            value={formData.password}
            onChange={handleChange}
            required
            minLength={8}
          />
        </div>
        
        <div>
          <label htmlFor="confirmPassword" className="block text-sm font-medium text-slate-700 mb-1">Confirmer le mot de passe</label>
          <input
            id="confirmPassword"
            name="confirmPassword"
            type="password"
            className="w-full p-3 border border-slate-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="••••••••"
            value={formData.confirmPassword}
            onChange={handleChange}
            required
            minLength={8}
          />
        </div>
        
        <div>
          <button
            type="submit"
            className="w-full p-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg shadow hover:from-blue-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-70"
            disabled={loading}
          >
            {loading ? 'Inscription en cours...' : 'S\'inscrire'}
          </button>
        </div>
      </form>
      
      <div className="mt-8 text-center">
        <p className="text-sm text-slate-600">
          Vous avez déjà un compte? <Link to="/login" className="text-blue-600 hover:text-blue-800 font-medium">Se connecter</Link>
        </p>
      </div>
    </div>
  );
};

export default Register;
=== FIN ===

=== Contenu de frontend\src\pages\cv\CandidateProfile.jsx ===
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Edit, ArrowLeft, Download, Mail, Phone, MapPin, Star, X, Check, MessageCircle, FileText, Activity } from 'lucide-react';
import { cvService } from '../../services/api';

const CandidateProfile = () => {
    const [activeTab, setActiveTab] = useState('overview');
    const [candidate, setCandidate] = useState(null);
    const [loading, setLoading] = useState(true);
    const { id } = useParams();
    const navigate = useNavigate();

    useEffect(() => {
        const fetchCandidateDetails = async () => {
            try {
                setLoading(true);
                const response = await cvService.getCVById(id);
                setCandidate(response);
            } catch (error) {
                console.error('Error fetching candidate details:', error);
            } finally {
                setLoading(false);
            }
        };

        fetchCandidateDetails();
    }, [id]);

    if (loading) {
        return (
            <div className="flex items-center justify-center h-64">
                <div className="w-12 h-12 border-4 border-t-blue-500 border-blue-200 rounded-full animate-spin"></div>
            </div>
        );
    }

    if (!candidate) {
        return (
            <div className="text-center py-12">
                <h2 className="text-2xl font-semibold text-slate-800 mb-2">Candidat non trouvé</h2>
                <p className="text-slate-600 mb-6">Le candidat que vous recherchez n'existe pas ou a été supprimé.</p>
            </div>
        );
    }

    return (
        <div className="bg-white rounded-xl shadow-sm overflow-hidden max-w-6xl mx-auto">
            {/* Header with navigation */}
            <div className="p-4 border-b border-slate-100 flex items-center">
                <button
                    className="p-2 mr-2 rounded-full hover:bg-slate-100"
                    onClick={() => navigate(-1)}
                >
                    <ArrowLeft className="w-5 h-5 text-slate-600" />
                </button>
                <h1 className="text-xl font-semibold text-slate-800">Profil du candidat</h1>

                <div className="ml-auto flex space-x-2">
                    <button
                        className="p-2 rounded-full hover:bg-slate-100"
                        onClick={() => window.open(`mailto:${candidate.email}`)}
                    >
                        <Mail className="w-5 h-5 text-slate-600" />
                    </button>
                    <button
                        className="p-2 rounded-full hover:bg-slate-100"
                        onClick={() => cvService.downloadCV(candidate.id)}
                    >
                        <Download className="w-5 h-5 text-slate-600" />
                    </button>
                    <button className="px-3 py-1 bg-gradient-to-r from-blue-500 to-indigo-600 text-white text-sm rounded-md hover:from-blue-600 hover:to-indigo-700">
                        Avancer
                    </button>
                    <button className="px-3 py-1 bg-red-100 text-red-600 text-sm rounded-md hover:bg-red-200">
                        Disqualifier
                    </button>
                </div>
            </div>

            {/* Candidate General Info */}
            <div className="p-6 flex flex-col md:flex-row gap-6">
                {/* Left column - Candidates in Stage */}
                <div className="w-full md:w-1/4">
                    <h3 className="text-sm font-medium text-slate-700 mb-3">Candidats dans l'étape</h3>
                    <div className="space-y-2">
                        <div className="bg-blue-100 p-3 rounded-md">
                            <div className="flex items-center">
                                <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 flex items-center justify-center text-white font-semibold">
                                    {candidate.firstName.charAt(0)}{candidate.lastName.charAt(0)}
                                </div>
                                <div className="ml-2">
                                    <p className="text-sm font-medium text-slate-800">{candidate.firstName} {candidate.lastName}</p>
                                    <p className="text-xs text-slate-500">dans cette étape depuis 9h</p>
                                </div>
                            </div>
                        </div>

                        {/* Mock data for others in the same stage */}
                        <div className="p-3 rounded-md hover:bg-slate-50">
                            <div className="flex items-center">
                                <div className="w-8 h-8 rounded-full bg-pink-100 flex items-center justify-center text-pink-600 font-semibold">
                                    MG
                                </div>
                                <div className="ml-2">
                                    <p className="text-sm font-medium text-slate-800">Marie Giraud</p>
                                    <p className="text-xs text-slate-500">dans cette étape depuis 1h</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Center column - Main Profile */}
                <div className="w-full md:w-2/4">
                    <div className="flex items-start mb-6">
                        <div className="w-16 h-16 rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 flex items-center justify-center text-white text-xl font-semibold">
                            {candidate.firstName.charAt(0)}{candidate.lastName.charAt(0)}
                        </div>
                        <div className="ml-4">
                            <div className="flex items-center">
                                <h2 className="text-xl font-bold text-slate-800">{candidate.firstName} {candidate.lastName}</h2>
                                <button className="ml-2 p-1 rounded hover:bg-slate-100">
                                    <Edit className="w-4 h-4 text-slate-400" />
                                </button>
                            </div>
                            <p className="text-slate-600">{candidate.title}</p>
                            <p className="text-sm text-slate-500 mt-1">
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 mr-2">
                  Leads
                </span>
                                Ajouté il y a 9 heures
                            </p>
                        </div>
                    </div>

                    {/* Tabs Navigation */}
                    <div className="border-b border-slate-200 mb-4">
                        <nav className="flex -mb-px">
                            <button
                                onClick={() => setActiveTab('overview')}
                                className={`px-4 py-2 text-sm font-medium border-b-2 ${
                                    activeTab === 'overview'
                                        ? 'border-blue-500 text-blue-600'
                                        : 'border-transparent text-slate-500 hover:text-slate-700'
                                }`}
                            >
                                Aperçu
                            </button>
                            <button
                                onClick={() => setActiveTab('resume')}
                                className={`px-4 py-2 text-sm font-medium border-b-2 ${
                                    activeTab === 'resume'
                                        ? 'border-blue-500 text-blue-600'
                                        : 'border-transparent text-slate-500 hover:text-slate-700'
                                }`}
                            >
                                CV
                            </button>
                            <button
                                onClick={() => setActiveTab('messages')}
                                className={`px-4 py-2 text-sm font-medium border-b-2 ${
                                    activeTab === 'messages'
                                        ? 'border-blue-500 text-blue-600'
                                        : 'border-transparent text-slate-500 hover:text-slate-700'
                                }`}
                            >
                                Messages
                            </button>
                            <button
                                onClick={() => setActiveTab('files')}
                                className={`px-4 py-2 text-sm font-medium border-b-2 ${
                                    activeTab === 'files'
                                        ? 'border-blue-500 text-blue-600'
                                        : 'border-transparent text-slate-500 hover:text-slate-700'
                                }`}
                            >
                                Fichiers
                            </button>
                            <button
                                onClick={() => setActiveTab('ratings')}
                                className={`px-4 py-2 text-sm font-medium border-b-2 ${
                                    activeTab === 'ratings'
                                        ? 'border-blue-500 text-blue-600'
                                        : 'border-transparent text-slate-500 hover:text-slate-700'
                                }`}
                            >
                                Évaluations
                            </button>
                            <button
                                onClick={() => setActiveTab('activity')}
                                className={`px-4 py-2 text-sm font-medium border-b-2 ${
                                    activeTab === 'activity'
                                        ? 'border-blue-500 text-blue-600'
                                        : 'border-transparent text-slate-500 hover:text-slate-700'
                                }`}
                            >
                                Activité
                            </button>
                        </nav>
                    </div>

                    {/* Tab Content */}
                    {activeTab === 'overview' && (
                        <div className="space-y-4">
                            {/* Experience Section */}
                            <div className="border border-slate-200 rounded-md overflow-hidden">
                                <div className="flex justify-between items-center p-4 bg-slate-50">
                                    <h3 className="font-medium text-slate-700">Expérience</h3>
                                    <button className="p-1 rounded hover:bg-slate-200">
                                        <Edit className="w-4 h-4 text-slate-500" />
                                    </button>
                                </div>
                                {candidate.experience && candidate.experience.length > 0 ? (
                                    <div className="p-4">
                                        {candidate.experience.map((exp, index) => (
                                            <div key={index} className="mb-4 last:mb-0">
                                                <div className="flex justify-between">
                                                    <h4 className="font-medium text-slate-800">{exp.title}</h4>
                                                    <span className="text-sm text-slate-500">{exp.period}</span>
                                                </div>
                                                <div className="text-sm text-slate-600">{exp.company}, {exp.location}</div>
                                                <p className="text-sm text-slate-600 mt-1">{exp.description}</p>
                                            </div>
                                        ))}
                                    </div>
                                ) : (
                                    <div className="p-6 flex items-center justify-center text-slate-400 text-sm">
                                        <div className="text-center p-6">
                                            <FileText className="w-8 h-8 mx-auto mb-2 text-slate-300" />
                                            <p>Aucune expérience n'a été ajoutée.</p>
                                            <button className="mt-2 text-blue-500 hover:text-blue-700">+ Ajouter une expérience</button>
                                        </div>
                                    </div>
                                )}
                            </div>

                            {/* Education Section */}
                            <div className="border border-slate-200 rounded-md overflow-hidden">
                                <div className="flex justify-between items-center p-4 bg-slate-50">
                                    <h3 className="font-medium text-slate-700">Formation</h3>
                                    <button className="p-1 rounded hover:bg-slate-200">
                                        <Edit className="w-4 h-4 text-slate-500" />
                                    </button>
                                </div>
                                {candidate.education && candidate.education.length > 0 ? (
                                    <div className="p-4">
                                        {candidate.education.map((edu, index) => (
                                            <div key={index} className="mb-4 last:mb-0">
                                                <div className="flex justify-between">
                                                    <h4 className="font-medium text-slate-800">{edu.degree}</h4>
                                                    <span className="text-sm text-slate-500">{edu.period}</span>
                                                </div>
                                                <div className="text-sm text-slate-600">{edu.institution}</div>
                                            </div>
                                        ))}
                                    </div>
                                ) : (
                                    <div className="p-6 flex items-center justify-center text-slate-400 text-sm">
                                        <div className="text-center p-6">
                                            <FileText className="w-8 h-8 mx-auto mb-2 text-slate-300" />
                                            <p>Aucune formation n'a été ajoutée.</p>
                                            <button className="mt-2 text-blue-500 hover:text-blue-700">+ Ajouter une formation</button>
                                        </div>
                                    </div>
                                )}
                            </div>

                            {/* Skills Section */}
                            <div className="border border-slate-200 rounded-md overflow-hidden">
                                <div className="flex justify-between items-center p-4 bg-slate-50">
                                    <h3 className="font-medium text-slate-700">Compétences</h3>
                                    <button className="p-1 rounded hover:bg-slate-200">
                                        <Edit className="w-4 h-4 text-slate-500" />
                                    </button>
                                </div>
                                <div className="p-6">
                                    <div className="flex flex-wrap gap-2">
                                        {candidate.skills && candidate.skills.map((skill, index) => (
                                            <span key={index} className="px-3 py-1 bg-blue-50 text-blue-700 rounded-full text-sm">
                        {skill}
                      </span>
                                        ))}
                                        <button className="px-3 py-1 border border-dashed border-slate-300 rounded-full text-sm text-slate-500 hover:bg-slate-50">
                                            + Ajouter
                                        </button>
                                    </div>
                                </div>
                            </div>

                            {/* Questions/Answers Section */}
                            <div className="border border-slate-200 rounded-md overflow-hidden">
                                <div className="flex justify-between items-center p-4 bg-slate-50">
                                    <h3 className="font-medium text-slate-700">Questions / Réponses</h3>
                                </div>
                                <div className="p-6 flex items-center justify-center text-slate-400 text-sm">
                                    <div className="text-center p-6">
                                        <MessageCircle className="w-8 h-8 mx-auto mb-2 text-slate-300" />
                                        <p>Aucune question n'a été posée à ce candidat.</p>
                                        <button className="mt-2 text-blue-500 hover:text-blue-700">+ Ajouter une question</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {activeTab === 'resume' && (
                        <div className="text-center py-12 text-slate-500">
                            <FileText className="w-12 h-12 mx-auto mb-4 text-slate-300" />
                            <p>Le CV du candidat sera affiché ici.</p>
                            <button
                                className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
                                onClick={() => cvService.downloadCV(candidate.id)}
                            >
                                Télécharger le CV
                            </button>
                        </div>
                    )}

                    {activeTab === 'messages' && (
                        <div className="text-center py-12 text-slate-500">
                            <MessageCircle className="w-12 h-12 mx-auto mb-4 text-slate-300" />
                            <p>Les messages échangés avec le candidat seront affichés ici.</p>
                            <button className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600">
                                Envoyer un message
                            </button>
                        </div>
                    )}

                    {activeTab === 'activity' && (
                        <div className="text-center py-12 text-slate-500">
                            <Activity className="w-12 h-12 mx-auto mb-4 text-slate-300" />
                            <p>L'historique d'activité du candidat sera affiché ici.</p>
                        </div>
                    )}
                </div>

                {/* Right column - Status & Details */}
                <div className="w-full md:w-1/4">
                    <div className="mb-6">
                        <h3 className="text-sm font-medium text-slate-700 mb-3">Statut</h3>
                        <div className="bg-white border border-slate-200 rounded-md p-4">
                            <div className="space-y-3">
                                <div className="flex justify-between">
                                    <span className="text-sm text-slate-500">Étape</span>
                                    <span className="text-sm font-medium">Leads</span>
                                </div>
                                <div className="flex justify-between">
                                    <span className="text-sm text-slate-500">Entré dans l'étape</span>
                                    <span className="text-sm">il y a 9 heures</span>
                                </div>
                                <div className="flex justify-between">
                                    <span className="text-sm text-slate-500">Ajouté</span>
                                    <span className="text-sm">{new Date(candidate.createdAt).toLocaleDateString('fr-FR')}</span>
                                </div>
                                <div className="flex justify-between">
                                    <span className="text-sm text-slate-500">Dernière mise à jour</span>
                                    <span className="text-sm">{new Date(candidate.updatedAt || candidate.createdAt).toLocaleDateString('fr-FR')}</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div className="mb-6">
                        <div className="flex justify-between items-center mb-3">
                            <h3 className="text-sm font-medium text-slate-700">Coordonnées</h3>
                            <button className="p-1 rounded hover:bg-slate-100">
                                <Edit className="w-4 h-4 text-slate-400" />
                            </button>
                        </div>
                        <div className="bg-white border border-slate-200 rounded-md p-4">
                            <div className="space-y-3">
                                <div className="flex items-start">
                                    <Mail className="w-4 h-4 text-slate-400 mt-1 mr-2 flex-shrink-0" />
                                    <div>
                                        <span className="text-sm text-slate-500 block">Email</span>
                                        <span className="text-sm">{candidate.email}</span>
                                    </div>
                                </div>
                                <div className="flex items-start">
                                    <Phone className="w-4 h-4 text-slate-400 mt-1 mr-2 flex-shrink-0" />
                                    <div>
                                        <span className="text-sm text-slate-500 block">Téléphone</span>
                                        <span className="text-sm">{candidate.phone || 'Non spécifié'}</span>
                                    </div>
                                </div>
                                <div className="flex items-start">
                                    <MapPin className="w-4 h-4 text-slate-400 mt-1 mr-2 flex-shrink-0" />
                                    <div>
                                        <span className="text-sm text-slate-500 block">Adresse</span>
                                        <span className="text-sm">{candidate.location || 'Non spécifiée'}</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div className="mb-6">
                        <h3 className="text-sm font-medium text-slate-700 mb-3">Score IA</h3>
                        <div className="bg-white border border-slate-200 rounded-md p-4">
                            <div className="flex items-center justify-between">
                                <div className="flex items-center">
                                    <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                                        candidate.score >= 80 ? 'bg-green-100 text-green-700' :
                                            candidate.score >= 60 ? 'bg-yellow-100 text-yellow-700' :
                                                'bg-red-100 text-red-700'
                                    }`}>
                                        {candidate.score}%
                                    </div>
                                    <span className="ml-3 text-sm font-medium">
                    {candidate.score >= 80 ? 'Excellent' :
                        candidate.score >= 60 ? 'Bon' :
                            'À améliorer'}
                  </span>
                                </div>
                                <button className="text-blue-500 text-sm hover:text-blue-700">
                                    Détails
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default CandidateProfile;
=== FIN ===

=== Contenu de frontend\src\pages\cv\CVAnalysis.jsx ===
import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Upload, BriefcaseBusiness, ChevronDown, Brain, Filter, CheckCircle, Star, Activity } from 'lucide-react';
import axios from '../../utils/axios';
import { toast } from 'react-toastify';
import AnalysisCard from '../../components/analysis/AnalysisCard';
import CandidateAnalysisRow from '../../components/analysis/CandidateAnalysisRow';
import { cvService, jobService } from '../../services/api';


const CVAnalysis = () => {
  const navigate = useNavigate();
  const [files, setFiles] = useState([]);
  const [selectedJobId, setSelectedJobId] = useState(null);
  const [jobs, setJobs] = useState([]);
  const [analysisInProgress, setAnalysisInProgress] = useState(false);
  const [progress, setProgress] = useState(0);
  const [activeTab, setActiveTab] = useState('all');
  const [candidates, setCandidates] = useState([]);
  const [analyzedStats, setAnalyzedStats] = useState({
    skillsDetected: 0,
    recommendedCandidates: 0,
    topCandidateName: '',
    topCandidateScore: 0
  });
  const fileInputRef = useRef(null);
  
  useEffect(() => {
    const fetchJobs = async () => {
      try {
        const response = await jobService.getJobs({ status: 'ACTIVE' });
        setJobs(response);
        if (response.length > 0) {
          setSelectedJobId(response[0].id);
        }
      } catch (error) {
        console.error('Error fetching jobs:', error);
        toast.error('Erreur lors du chargement des offres d\'emploi');
      }
    };
    
    fetchJobs();
  }, []);
  
  const handleFileChange = (e) => {
    setFiles(Array.from(e.target.files));
  };
  
  const handleDrop = (e) => {
    e.preventDefault();
    setFiles(Array.from(e.dataTransfer.files));
  };
  
  const handleDragOver = (e) => {
    e.preventDefault();
  };
  
  const handleBrowseClick = () => {
    fileInputRef.current.click();
  };
  
  const handleAnalyzeClick = async () => {
    if (!selectedJobId) {
      toast.warning('Veuillez sélectionner une offre d\'emploi');
      return;
    }
    
    if (files.length === 0) {
      toast.warning('Veuillez ajouter au moins un CV');
      return;
    }
    
    try {
      setAnalysisInProgress(true);
      setProgress(0);
      
      // Start batch analysis
      const analysisId = await cvService.analyzeBatch(files, selectedJobId);
      
      // Poll for analysis progress
      const progressInterval = setInterval(async () => {
        try {
          const progressResponse = await cvService.getAnalysisProgress(analysisId);
          const { progress, completed, results, stats } = progressResponse;
          
          setProgress(progress);
          
          if (completed) {
            clearInterval(progressInterval);
            setAnalysisInProgress(false);
            setCandidates(results);
            setAnalyzedStats(stats);
            toast.success('Analyse des CV terminée avec succès');
          }
        } catch (error) {
          console.error('Error checking analysis progress:', error);
          clearInterval(progressInterval);
          setAnalysisInProgress(false);
          toast.error('Erreur lors de la vérification de la progression de l\'analyse');
        }
      }, 2000);
      
    } catch (error) {
      console.error('Error analyzing CVs:', error);
      setAnalysisInProgress(false);
      toast.error('Erreur lors de l\'analyse des CV');
    }
  };
  
  const filteredCandidates = React.useMemo(() => {
    switch (activeTab) {
      case 'recommended':
        return candidates.filter(candidate => candidate.score >= 85);
      case 'consider':
        return candidates.filter(candidate => candidate.score >= 70 && candidate.score < 85);
      case 'rejected':
        return candidates.filter(candidate => candidate.score < 70);
      default:
        return candidates;
    }
  }, [activeTab, candidates]);
  
  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold text-slate-800">Analyse des CV par IA</h1>
          <p className="text-slate-500 mt-1">Importez des CV et notre IA identifiera les meilleurs candidats pour vos postes</p>
        </div>
      </div>

      {/* Upload and Job Selection */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        {/* CV Upload */}
        <div className="bg-white rounded-xl shadow-sm p-6">
          <h2 className="text-lg font-medium text-slate-800 mb-4">Importer des CV</h2>
          <div 
            className="border-2 border-dashed border-slate-200 rounded-xl p-8 text-center"
            onDrop={handleDrop}
            onDragOver={handleDragOver}
          >
            <div className="mx-auto w-16 h-16 flex items-center justify-center bg-blue-50 rounded-full mb-4">
              <Upload className="h-8 w-8 text-blue-500" />
            </div>
            <p className="text-slate-600 mb-2">
              {files.length > 0 
                ? `${files.length} fichier${files.length > 1 ? 's' : ''} sélectionné${files.length > 1 ? 's' : ''}`
                : 'Glissez-déposez vos fichiers CV ici'
              }
            </p>
            <p className="text-slate-400 text-sm mb-4">ou</p>
            <button 
              className="px-4 py-2.5 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg shadow-sm hover:from-blue-700 hover:to-indigo-700 transition font-medium"
              onClick={handleBrowseClick}
            >
              Parcourir les fichiers
            </button>
            <input 
              type="file" 
              ref={fileInputRef}
              onChange={handleFileChange}
              className="hidden"
              multiple
              accept=".pdf,.doc,.docx,.txt,.rtf"
            />
          </div>
        </div>
        
        {/* Job selection */}
        <div className="bg-white rounded-xl shadow-sm p-6">
          <h2 className="text-lg font-medium text-slate-800 mb-4">Sélectionner le poste</h2>
          <p className="text-slate-500 text-sm mb-4">Choisissez l'offre pour laquelle analyser les CV</p>
          
          <div className="relative mb-4">
            <select
              className="w-full p-3 border border-slate-200 rounded-lg appearance-none focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={selectedJobId || ''}
              onChange={(e) => setSelectedJobId(e.target.value)}
            >
              <option value="" disabled>Sélectionnez une offre</option>
              {jobs.map(job => (
                <option key={job.id} value={job.id}>{job.title}</option>
              ))}
            </select>
            <div className="absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
              <ChevronDown className="h-5 w-5 text-slate-400" />
            </div>
          </div>
          
          <button 
            className="w-full px-4 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg shadow-sm hover:from-blue-700 hover:to-indigo-700 transition font-medium flex items-center justify-center"
            onClick={handleAnalyzeClick}
            disabled={analysisInProgress || !selectedJobId || files.length === 0}
          >
            <Brain className="h-5 w-5 mr-2" />
            Analyser
          </button>
        </div>
      </div>
      
      {/* Analysis Results */}
      {(analysisInProgress || candidates.length > 0) && (
        <div className="bg-white rounded-xl shadow-sm overflow-hidden mb-8">
          <div className="p-6 pb-3 border-b border-slate-100">
            <div className="flex justify-between items-center">
              <h2 className="text-lg font-semibold text-slate-800">Résultats de l'analyse</h2>
              <div className="flex items-center space-x-2 text-slate-600">
                <Filter className="h-4 w-4" />
                <span className="text-sm">Filtrer</span>
              </div>
            </div>
          </div>
          
          {/* Progress bar if analysis is in progress */}
          {analysisInProgress && (
            <div className="p-6 bg-blue-50">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center">
                  <Activity className="h-5 w-5 text-blue-600 mr-2" />
                  <p className="text-sm font-medium text-slate-700">Analyse en cours: {Math.round(progress * files.length / 100)}/{files.length} CV traités</p>
                </div>
                <p className="text-sm font-medium text-blue-600">{progress}%</p>
              </div>
              <div className="w-full bg-slate-200 rounded-full h-2">
                <div 
                  className="bg-gradient-to-r from-blue-600 to-indigo-600 h-2 rounded-full"
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
            </div>
          )}
          
          {/* Tab navigation */}
          {!analysisInProgress && candidates.length > 0 && (
            <>
              <div className="flex border-b border-slate-100">
                <button 
                  className={`px-6 py-4 text-sm font-medium ${activeTab === 'all' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-slate-600 hover:text-slate-800'}`}
                  onClick={() => setActiveTab('all')}
                >
                  Tous ({candidates.length})
                </button>
                <button 
                  className={`px-6 py-4 text-sm font-medium ${activeTab === 'recommended' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-slate-600 hover:text-slate-800'}`}
                  onClick={() => setActiveTab('recommended')}
                >
                  Recommandés ({candidates.filter(c => c.score >= 85).length})
                </button>
                <button 
                  className={`px-6 py-4 text-sm font-medium ${activeTab === 'consider' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-slate-600 hover:text-slate-800'}`}
                  onClick={() => setActiveTab('consider')}
                >
                  À considérer ({candidates.filter(c => c.score >= 70 && c.score < 85).length})
                </button>
                <button 
                  className={`px-6 py-4 text-sm font-medium ${activeTab === 'rejected' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-slate-600 hover:text-slate-800'}`}
                  onClick={() => setActiveTab('rejected')}
                >
                  Écartés ({candidates.filter(c => c.score < 70).length})
                </button>
              </div>
              
              {/* Candidates table */}
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="bg-slate-50">
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Nom</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Compétences détectées</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Expérience</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Score IA</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Correspondance</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-slate-100">
                    {filteredCandidates.map((candidate) => (
                      <CandidateAnalysisRow
                        key={candidate.id}
                        candidate={candidate}
                        onViewDetails={() => navigate(`/cv/${candidate.id}`)}
                      />
                    ))}
                    {filteredCandidates.length === 0 && (
                      <tr>
                        <td colSpan="6" className="px-6 py-10 text-center text-slate-500">
                          Aucun candidat dans cette catégorie
                        </td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
            </>
          )}
        </div>
      )}
      
      {/* AI Analysis Highlights */}
      {!analysisInProgress && candidates.length > 0 && (
        <div className="bg-white rounded-xl shadow-sm overflow-hidden">
          <div className="p-6 pb-3 border-b border-slate-100">
            <h2 className="text-lg font-semibold text-slate-800">Points forts de l'analyse IA</h2>
          </div>
          
          <div className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <AnalysisCard
                icon={<Brain className="h-6 w-6 text-blue-600" />}
                title="Détection des compétences"
                description={`Notre IA a identifié ${analyzedStats.skillsDetected} compétences différentes dans les ${files.length} CV analysés.`}
              />
              <AnalysisCard
                icon={<CheckCircle className="h-6 w-6 text-green-600" />}
                title="Candidats recommandés"
                description={`${analyzedStats.recommendedCandidates} candidat${analyzedStats.recommendedCandidates > 1 ? 's ont' : ' a'} un excellent score de correspondance (>85%).`}
              />
              <AnalysisCard
                icon={<Star className="h-6 w-6 text-amber-500" />}
                title="Candidat exceptionnel"
                description={analyzedStats.topCandidateName ? `${analyzedStats.topCandidateName} se démarque avec ${analyzedStats.topCandidateScore}% de correspondance.` : 'Aucun candidat exceptionnel identifié.'}
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CVAnalysis;
=== FIN ===

=== Contenu de frontend\src\pages\cv\CVDetail.jsx ===
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { ChevronLeft, Download, Share2, Mail, Phone, Calendar, Brain, BriefcaseBusiness, CheckCircle, Star, ArrowUpRight, Eye } from 'lucide-react';
import { toast } from 'react-toastify';
import LoadingSpinner from '../../components/common/LoadingSpinner';
import SkillMatch from '../../components/analysis/SkillMatch';
import { cvService } from '../../services/api';


const CVDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [candidate, setCandidate] = useState(null);
  const [activeTab, setActiveTab] = useState('resume');
  
  useEffect(() => {
    const fetchCandidateDetails = async () => {
      try {
        setLoading(true);
        const response = await cvService.getCVById(id);
        setCandidate(response);
      } catch (error) {
        console.error('Error fetching candidate details:', error);
        toast.error('Erreur lors du chargement des détails du candidat');
        navigate('/cv-analysis');
      } finally {
        setLoading(false);
      }
    };
    
    fetchCandidateDetails();
  }, [id, navigate]);
  
  if (loading) {
    return <LoadingSpinner />;
  }
  
  if (!candidate) {
    return (
      <div className="text-center py-12">
        <h2 className="text-2xl font-semibold text-slate-800 mb-2">Candidat non trouvé</h2>
        <p className="text-slate-600 mb-6">Le candidat que vous recherchez n'existe pas ou a été supprimé.</p>
        <Link to="/cv-analysis" className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
          Retour à l'analyse des CV
        </Link>
      </div>
    );
  }

  return (
    <div>
      {/* Candidate Header */}
      <div className="mb-8">
        <div className="flex items-center mb-6">
          <button 
            className="p-2 rounded-full hover:bg-slate-100 mr-2"
            onClick={() => navigate(-1)}
          >
            <ChevronLeft className="w-5 h-5 text-slate-600" />
          </button>
          <h1 className="text-2xl font-bold text-slate-800">Profil du candidat</h1>
        </div>
        
        <div className="flex justify-between items-start">
          <div className="flex items-center">
            <div className="w-20 h-20 rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 flex items-center justify-center text-white text-2xl font-medium">
              {candidate.firstName.charAt(0)}{candidate.lastName.charAt(0)}
            </div>
            <div className="ml-6">
              <h1 className="text-2xl font-bold text-slate-800">{candidate.firstName} {candidate.lastName}</h1>
              <p className="text-lg text-slate-600">{candidate.title}</p>
              <div className="flex items-center mt-2">
                {candidate.email && (
                  <div className="flex items-center mr-4">
                    <Mail className="w-4 h-4 text-slate-500 mr-1" />
                    <span className="text-sm text-slate-600">{candidate.email}</span>
                  </div>
                )}
                {candidate.phone && (
                  <div className="flex items-center">
                    <Phone className="w-4 h-4 text-slate-500 mr-1" />
                    <span className="text-sm text-slate-600">{candidate.phone}</span>
                  </div>
                )}
              </div>
            </div>
          </div>
          
          <div className="flex items-start space-x-3">
            <button className="px-4 py-2 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg shadow-sm hover:from-blue-700 hover:to-indigo-700 transition font-medium flex items-center">
              <Mail className="w-4 h-4 mr-2" />
              Contacter
            </button>
            <button className="px-4 py-2 border border-slate-200 text-slate-700 rounded-lg shadow-sm hover:bg-slate-50 transition font-medium flex items-center">
              <Calendar className="w-4 h-4 mr-2" />
              Entretien
            </button>
            <button 
              className="p-2 rounded-full hover:bg-slate-100"
              onClick={() => cvService.downloadCV(id)}
            >
              <Download className="w-5 h-5 text-slate-600" />
            </button>
            <button className="p-2 rounded-full hover:bg-slate-100">
              <Share2 className="w-5 h-5 text-slate-600" />
            </button>
          </div>
        </div>
      </div>
      
      {/* AI Analysis Summary */}
      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-6 mb-8">
        <div className="flex items-start">
          <div className="flex-shrink-0 p-3 bg-white rounded-lg shadow-sm">
            <Brain className="w-8 h-8 text-indigo-600" />
          </div>
          <div className="ml-4">
            <h2 className="text-lg font-semibold text-slate-800">Analyse IA</h2>
            <div className="mt-1 grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="flex items-center">
                <div className="w-12 h-12 rounded-lg bg-green-100 flex items-center justify-center">
                  <span className="text-lg font-bold text-green-700">{candidate.score}%</span>
                </div>
                <div className="ml-3">
                  <p className="text-xs text-slate-500">Score global</p>
                  <p className="text-sm font-medium text-slate-700">
                    {candidate.score >= 85 ? 'Correspondance excellente' : 
                     candidate.score >= 70 ? 'Correspondance bonne' : 
                     candidate.score >= 50 ? 'Correspondance moyenne' : 
                     'Correspondance insuffisante'
                    }
                  </p>
                </div>
              </div>
              
              <div className="flex items-center">
                <div className="w-12 h-12 rounded-lg bg-blue-100 flex items-center justify-center">
                  <CheckCircle className="w-6 h-6 text-blue-600" />
                </div>
                <div className="ml-3">
                  <p className="text-xs text-slate-500">Compétences</p>
                  <p className="text-sm font-medium text-slate-700">
                    {candidate.requiredSkillsMatch}/{candidate.requiredSkillsTotal} requises | {candidate.preferredSkillsMatch}/{candidate.preferredSkillsTotal} préférées
                  </p>
                </div>
              </div>
              
              <div className="flex items-center">
                <div className="w-12 h-12 rounded-lg bg-indigo-100 flex items-center justify-center">
                  <BriefcaseBusiness className="w-6 h-6 text-indigo-600" />
                </div>
                <div className="ml-3">
                  <p className="text-xs text-slate-500">Expérience</p>
                  <p className="text-sm font-medium text-slate-700">{candidate.yearsOfExperience} ans d'expérience pertinente</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Tabs and Content */}
      <div className="bg-white rounded-xl shadow-sm overflow-hidden mb-8">
        <div className="border-b border-slate-200">
          <nav className="flex -mb-px">
            <button 
              onClick={() => setActiveTab('resume')} 
              className={`px-6 py-4 text-sm font-medium ${
                activeTab === 'resume'
                  ? 'border-b-2 border-blue-600 text-blue-600'
                  : 'text-slate-500 hover:text-slate-700 hover:border-slate-300'
              }`}
            >
              CV analysé
            </button>
            <button 
              onClick={() => setActiveTab('aiAnalysis')} 
              className={`px-6 py-4 text-sm font-medium ${
                activeTab === 'aiAnalysis'
                  ? 'border-b-2 border-blue-600 text-blue-600'
                  : 'text-slate-500 hover:text-slate-700 hover:border-slate-300'
              }`}
            >
              Analyse IA détaillée
            </button>
            <button 
              onClick={() => setActiveTab('notes')} 
              className={`px-6 py-4 text-sm font-medium ${
                activeTab === 'notes'
                  ? 'border-b-2 border-blue-600 text-blue-600'
                  : 'text-slate-500 hover:text-slate-700 hover:border-slate-300'
              }`}
            >
              Notes
            </button>
          </nav>
        </div>
        
        <div className="p-6">
          {activeTab === 'resume' && (
            <div className="flex">
              {/* Resume Preview */}
              <div className="w-1/2 pr-6 border-r border-slate-200">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-medium text-slate-800">Aperçu du CV</h3>
                  <div className="flex space-x-2">
                    <button 
                      className="p-1.5 rounded bg-slate-50 text-slate-600 hover:bg-slate-100"
                      onClick={() => window.open(`/api/cv/view/${candidate.id}`, '_blank')}
                    >
                      <Eye className="h-4 w-4" />
                    </button>
                    <button 
                      className="p-1.5 rounded bg-slate-50 text-slate-600 hover:bg-slate-100"
                      onClick={() => cvService.downloadCV(candidate.id)}
                    >
                      <Download className="h-4 w-4" />
                    </button>
                  </div>
                </div>
                
                <div className="bg-slate-50 rounded-lg p-4 h-[500px] overflow-auto">
                  <div className="bg-white shadow-sm rounded-lg p-6">
                    <h2 className="text-xl font-bold text-slate-800 mb-2">{candidate.firstName} {candidate.lastName}</h2>
                    <p className="text-slate-600 mb-4">{candidate.title} | {candidate.email} | {candidate.phone}</p>
                    
                    {/* Expérience */}
                    <div className="mb-6">
                      <h3 className="text-md font-semibold text-slate-800 border-b border-slate-200 pb-1 mb-2">Expérience professionnelle</h3>
                      {candidate.experience.map((exp, index) => (
                        <div key={index} className="mb-3">
                          <div className="flex justify-between">
                            <p className="font-medium text-slate-800">{exp.title}</p>
                            <p className="text-sm text-slate-600">{exp.startDate} - {exp.endDate || 'présent'}</p>
                          </div>
                          <p className="text-sm text-slate-700 mb-1">{exp.company}, {exp.location}</p>
                          <ul className="text-sm text-slate-600 pl-4 list-disc">
                            {exp.description.split('\n').map((line, i) => (
                              <li key={i}>{line}</li>
                            ))}
                          </ul>
                        </div>
                      ))}
                    </div>
                    
                    {/* Éducation */}
                    <div className="mb-6">
                      <h3 className="text-md font-semibold text-slate-800 border-b border-slate-200 pb-1 mb-2">Formation</h3>
                      {candidate.education.map((edu, index) => (
                        <div key={index} className="mb-2">
                          <div className="flex justify-between">
                            <p className="font-medium text-slate-800">{edu.degree}</p>
                            <p className="text-sm text-slate-600">{edu.startYear} - {edu.endYear}</p>
                          </div>
                          <p className="text-sm text-slate-600">{edu.institution}, {edu.location}</p>
                        </div>
                      ))}
                    </div>
                    
                    {/* Compétences */}
                    <div>
                      <h3 className="text-md font-semibold text-slate-800 border-b border-slate-200 pb-1 mb-2">Compétences</h3>
                      <div className="flex flex-wrap gap-2">
                        {candidate.skills.map((skill, index) => (
                          <span key={index} className="px-2.5 py-1 rounded-full text-xs font-medium bg-blue-50 text-blue-700">
                            {skill}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* AI Annotations */}
              <div className="w-1/2 pl-6">
                <h3 className="text-lg font-medium text-slate-800 mb-4">Annotations IA</h3>
                
                <div className="space-y-6">
                  {/* Skills matching */}
                  <div>
                    <h4 className="text-md font-medium text-slate-700 mb-3">Correspondance des compétences</h4>
                    
                    <div className="bg-slate-50 rounded-lg p-4">
                      <p className="text-sm font-medium text-slate-700 mb-3">Compétences requises</p>
                      {candidate.requiredSkillsAnalysis.map((skill, index) => (
                        <SkillMatch
                          key={index}
                          name={skill.name}
                          matched={skill.matched}
                          confidence={skill.confidence}
                        />
                      ))}
                      
                      {candidate.preferredSkillsAnalysis.length > 0 && (
                        <>
                          <p className="text-sm font-medium text-slate-700 mt-6 mb-3">Compétences préférées</p>
                          {candidate.preferredSkillsAnalysis.map((skill, index) => (
                            <SkillMatch
                              key={index}
                              name={skill.name}
                              matched={skill.matched}
                              confidence={skill.confidence}
                            />
                          ))}
                        </>
                      )}
                    </div>
                  </div>
                  
                  {/* Experience analysis */}
                  <div>
                    <h4 className="text-md font-medium text-slate-700 mb-3">Analyse de l'expérience</h4>
                    
                    <div className="bg-slate-50 rounded-lg p-4">
                      <ul className="space-y-2">
                        {candidate.experienceInsights.map((insight, index) => (
                          <li key={index} className="flex items-start">
                            <div className="flex-shrink-0 w-5 h-5 rounded-full bg-blue-100 flex items-center justify-center mt-0.5">
                              <div className="w-2 h-2 rounded-full bg-blue-600" />
                            </div>
                            <p className="ml-2 text-sm text-slate-700">{insight}</p>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                  
                  {/* Education analysis */}
                  <div>
                    <h4 className="text-md font-medium text-slate-700 mb-3">Analyse de la formation</h4>
                    
                    <div className="bg-slate-50 rounded-lg p-4">
                      <ul className="space-y-2">
                        {candidate.educationInsights.map((insight, index) => (
                          <li key={index} className="flex items-start">
                            <div className="flex-shrink-0 w-5 h-5 rounded-full bg-indigo-100 flex items-center justify-center mt-0.5">
                              <div className="w-2 h-2 rounded-full bg-indigo-600" />
                            </div>
                            <p className="ml-2 text-sm text-slate-700">{insight}</p>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          {activeTab === 'aiAnalysis' && (
            <div className="space-y-8">
              <div>
                <h3 className="text-lg font-medium text-slate-800 mb-4">Analyse détaillée</h3>
                
                <div className="bg-slate-50 rounded-lg p-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {/* Strengths */}
                    <div className="bg-green-50 rounded-lg p-4">
                      <h4 className="text-md font-medium text-green-800 mb-3 flex items-center">
                        <Star className="h-5 w-5 mr-2" />
                        Points forts
                      </h4>
                      <ul className="space-y-2">
                        {candidate.strengths.map((strength, index) => (
                          <li key={index} className="flex items-start">
                            <CheckCircle className="h-4 w-4 text-green-600 mt-0.5 mr-2 flex-shrink-0" />
                            <p className="text-sm text-slate-700">{strength}</p>
                          </li>
                        ))}
                      </ul>
                    </div>
                    
                    {/* Areas for improvement */}
                    <div className="bg-amber-50 rounded-lg p-4">
                      <h4 className="text-md font-medium text-amber-800 mb-3 flex items-center">
                        <Star className="h-5 w-5 mr-2" />
                        Axes d'amélioration
                      </h4>
                      <ul className="space-y-2">
                        {candidate.areasForImprovement.map((area, index) => (
                          <li key={index} className="flex items-start">
                            <Star className="h-4 w-4 text-amber-600 mt-0.5 mr-2 flex-shrink-0" />
                            <p className="text-sm text-slate-700">{area}</p>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                  
                  {/* Position fit */}
                  <div className="mt-6">
                    <h4 className="text-md font-medium text-slate-700 mb-3">Adéquation au poste</h4>
                    <p className="text-sm text-slate-700 mb-4">{candidate.jobFitAnalysis}</p>
                    
                    <h5 className="text-sm font-medium text-slate-700 mb-2">Score d'adéquation par catégorie</h5>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {candidate.categoryScores.map((category, index) => (
                        <div key={index}>
                          <div className="flex justify-between items-center mb-1">
                            <p className="text-xs text-slate-600">{category.name}</p>
                            <p className="text-xs font-medium text-slate-700">{category.score}%</p>
                          </div>
                          <div className="w-full bg-slate-200 rounded-full h-2">
                            <div 
                              className="bg-gradient-to-r from-blue-600 to-indigo-600 h-2 rounded-full"
                              style={{ width: `${category.score}%` }}
                            ></div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Interview suggestions */}
              <div>
                <h3 className="text-lg font-medium text-slate-800 mb-4">Suggestions pour l'entretien</h3>
                
                <div className="bg-slate-50 rounded-lg p-6">
                  <p className="text-sm text-slate-700 mb-4">Voici quelques questions pertinentes pour explorer davantage le profil de {candidate.firstName} :</p>
                  
                  <ul className="space-y-3">
                    {candidate.interviewQuestions.map((question, index) => (
                      <li key={index} className="p-3 bg-white rounded-lg shadow-sm">
                        <p className="text-sm font-medium text-slate-800">{question.question}</p>
                        {question.rationale && (
                          <p className="text-xs text-slate-500 mt-1">{question.rationale}</p>
                        )}
                      </li>
                    ))}
                  </ul>
                  
                  <button className="flex items-center mt-4 text-sm font-medium text-blue-600 hover:text-blue-800">
                    <span className="mr-1">Générer plus de questions</span>
                    <ArrowUpRight className="h-3 w-3" />
                  </button>
                </div>
              </div>
              </div>
          )}
          
          {activeTab === 'notes' && (
            <div>
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-medium text-slate-800">Notes et commentaires</h3>
                <button className="px-3 py-1.5 bg-blue-600 text-white rounded-lg text-sm">Ajouter une note</button>
              </div>
              
              {candidate.notes && candidate.notes.length > 0 ? (
                <div className="space-y-4">
                  {candidate.notes.map((note, index) => (
                    <div key={index} className="bg-slate-50 rounded-lg p-4">
                      <div className="flex justify-between items-start mb-2">
                        <div className="flex items-center">
                          <div className="w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 font-medium text-sm">
                            {note.authorInitials}
                          </div>
                          <div className="ml-2">
                            <p className="text-sm font-medium text-slate-800">{note.authorName}</p>
                            <p className="text-xs text-slate-500">{new Date(note.date).toLocaleDateString()}</p>
                          </div>
                        </div>
                        <div className="px-2 py-1 rounded-full text-xs font-medium bg-blue-50 text-blue-700">
                          {note.type}
                        </div>
                      </div>
                      <p className="text-sm text-slate-700">{note.content}</p>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-12 bg-slate-50 rounded-lg">
                  <p className="text-slate-500">Aucune note pour ce candidat</p>
                  <button className="mt-2 px-4 py-2 bg-blue-600 text-white rounded-lg text-sm font-medium">
                    Ajouter la première note
                  </button>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CVDetail;
=== FIN ===

=== Contenu de frontend\src\pages\cv\JobCreate.jsx ===
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { PlusCircle, Info, MapPin, Building, DollarSign, Briefcase, Users, Calendar, Star } from 'lucide-react';
import { jobService } from '../../services/api';
import { toast } from 'react-toastify';

const JobCreateForm = () => {
    const navigate = useNavigate();
    const [formData, setFormData] = useState({
        title: '',
        employmentType: '',
        workType: 'on-site',
        location: '',
        department: '',
        jobCode: '',
        salaryFrom: '',
        salaryTo: '',
        currency: 'EUR',
        payPeriod: 'annual',
        displaySalary: false,
        description: '',
        requiredSkills: [],
        preferredSkills: [],
        minYearsExperience: ''
    });

    const [newSkill, setNewSkill] = useState('');
    const [newPreferredSkill, setNewPreferredSkill] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);

    const handleChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }));
    };

    const handleWorkTypeChange = (type) => {
        setFormData(prev => ({
            ...prev,
            workType: type
        }));
    };

    const addRequiredSkill = () => {
        if (newSkill.trim()) {
            setFormData(prev => ({
                ...prev,
                requiredSkills: [...prev.requiredSkills, newSkill.trim()]
            }));
            setNewSkill('');
        }
    };

    const removeRequiredSkill = (index) => {
        setFormData(prev => ({
            ...prev,
            requiredSkills: prev.requiredSkills.filter((_, i) => i !== index)
        }));
    };

    const addPreferredSkill = () => {
        if (newPreferredSkill.trim()) {
            setFormData(prev => ({
                ...prev,
                preferredSkills: [...prev.preferredSkills, newPreferredSkill.trim()]
            }));
            setNewPreferredSkill('');
        }
    };

    const removePreferredSkill = (index) => {
        setFormData(prev => ({
            ...prev,
            preferredSkills: prev.preferredSkills.filter((_, i) => i !== index)
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        try {
            setIsSubmitting(true);

            // Conversion des données pour le format attendu par l'API
            const jobData = {
                title: formData.title,
                description: formData.description,
                requiredSkills: formData.requiredSkills,
                preferredSkills: formData.preferredSkills,
                location: formData.location,
                jobType: formData.employmentType,
                workType: formData.workType,
                minYearsExperience: parseInt(formData.minYearsExperience) || 0,
                salaryRange: formData.displaySalary ? `${formData.salaryFrom}-${formData.salaryTo} ${formData.currency} ${formData.payPeriod}` : null,
                department: formData.department,
                jobCode: formData.jobCode
            };

            const createdJob = await jobService.createJob(jobData);

            toast.success('Offre d\'emploi créée avec succès!');
            navigate(`/jobs/${createdJob.id}`);
        } catch (error) {
            console.error('Erreur lors de la création de l\'offre:', error);
            toast.error('Erreur lors de la création de l\'offre d\'emploi');
        } finally {
            setIsSubmitting(false);
        }
    };

    const generateDescription = () => {
        // Simuler une génération d'IA
        const generatedDescription = `Nous recherchons un(e) ${formData.title} passionné(e) et talentueux(se) pour rejoindre notre équipe ${formData.department || 'dynamique'}.

Vous serez responsable de concevoir, développer et maintenir des solutions innovantes qui auront un impact direct sur notre activité.

Le candidat idéal possède une solide expérience dans ${formData.requiredSkills.join(', ') || 'le domaine'} et est capable de travailler de manière autonome tout en collaborant efficacement avec une équipe pluridisciplinaire.`;

        setFormData(prev => ({
            ...prev,
            description: generatedDescription
        }));
    };

    return (
        <div className="bg-white rounded-xl shadow-sm p-6 max-w-5xl mx-auto">
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-2xl font-bold text-slate-800">Créer une offre d'emploi</h1>
                <button
                    onClick={handleSubmit}
                    disabled={isSubmitting}
                    className="px-4 py-2 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg shadow-sm hover:from-blue-700 hover:to-indigo-700 flex items-center disabled:opacity-70"
                >
                    <PlusCircle className="w-4 h-4 mr-2" />
                    <span>{isSubmitting ? 'Publication...' : 'Publier l\'offre'}</span>
                </button>
            </div>

            <form onSubmit={handleSubmit}>
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                    {/* Section principale */}
                    <div className="lg:col-span-2 space-y-6">
                        {/* Informations de base */}
                        <div className="bg-white rounded-xl border border-slate-200 p-6">
                            <h2 className="text-lg font-semibold text-slate-800 mb-4">Informations de base</h2>

                            <div className="space-y-4">
                                <div>
                                    <label className="block text-sm font-medium text-slate-700 mb-1">
                                        Titre du poste <span className="text-red-500">*</span>
                                    </label>
                                    <input
                                        type="text"
                                        name="title"
                                        value={formData.title}
                                        onChange={handleChange}
                                        placeholder="ex: Développeur Full Stack"
                                        className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                        required
                                    />
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-slate-700 mb-1">
                                        Type d'emploi <span className="text-red-500">*</span>
                                    </label>
                                    <select
                                        name="employmentType"
                                        value={formData.employmentType}
                                        onChange={handleChange}
                                        className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                        required
                                    >
                                        <option value="">Sélectionner un type</option>
                                        <option value="full-time">CDI</option>
                                        <option value="part-time">CDD</option>
                                        <option value="contract">Freelance</option>
                                        <option value="internship-paid">Stage rémunéré</option>
                                        <option value="internship-unpaid">Stage non rémunéré</option>
                                        <option value="temporary">Intérim</option>
                                        <option value="other">Autre</option>
                                    </select>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-slate-700 mb-1">
                                        Mode de travail <span className="text-red-500">*</span>
                                    </label>
                                    <div className="grid grid-cols-3 gap-3">
                                        <div
                                            className={`flex flex-col items-center justify-center p-3 border ${formData.workType === 'on-site' ? 'border-blue-500 bg-blue-50' : 'border-slate-200'} rounded-lg cursor-pointer hover:bg-slate-50`}
                                            onClick={() => handleWorkTypeChange('on-site')}
                                        >
                                            <Building className={`h-5 w-5 ${formData.workType === 'on-site' ? 'text-blue-500' : 'text-slate-500'}`} />
                                            <span className={`mt-1 text-sm ${formData.workType === 'on-site' ? 'font-medium text-blue-700' : 'text-slate-700'}`}>Sur site</span>
                                        </div>
                                        <div
                                            className={`flex flex-col items-center justify-center p-3 border ${formData.workType === 'remote' ? 'border-blue-500 bg-blue-50' : 'border-slate-200'} rounded-lg cursor-pointer hover:bg-slate-50`}
                                            onClick={() => handleWorkTypeChange('remote')}
                                        >
                                            <Briefcase className={`h-5 w-5 ${formData.workType === 'remote' ? 'text-blue-500' : 'text-slate-500'}`} />
                                            <span className={`mt-1 text-sm ${formData.workType === 'remote' ? 'font-medium text-blue-700' : 'text-slate-700'}`}>Télétravail</span>
                                        </div>
                                        <div
                                            className={`flex flex-col items-center justify-center p-3 border ${formData.workType === 'hybrid' ? 'border-blue-500 bg-blue-50' : 'border-slate-200'} rounded-lg cursor-pointer hover:bg-slate-50`}
                                            onClick={() => handleWorkTypeChange('hybrid')}
                                        >
                                            <Users className={`h-5 w-5 ${formData.workType === 'hybrid' ? 'text-blue-500' : 'text-slate-500'}`} />
                                            <span className={`mt-1 text-sm ${formData.workType === 'hybrid' ? 'font-medium text-blue-700' : 'text-slate-700'}`}>Hybride</span>
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-slate-700 mb-1">
                                        Localisation <span className="text-red-500">*</span>
                                    </label>
                                    <div className="relative">
                                        <MapPin className="w-5 h-5 text-slate-400 absolute left-3 top-3" />
                                        <input
                                            type="text"
                                            name="location"
                                            value={formData.location}
                                            onChange={handleChange}
                                            placeholder="ex: Paris, France"
                                            className="w-full pl-10 p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                            required
                                        />
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Description du poste */}
                        <div className="bg-white rounded-xl border border-slate-200 p-6">
                            <div className="flex justify-between items-center mb-4">
                                <h2 className="text-lg font-semibold text-slate-800">Description du poste</h2>
                                <button
                                    type="button"
                                    onClick={generateDescription}
                                    className="px-3 py-1.5 bg-blue-50 text-blue-600 rounded-lg text-sm flex items-center hover:bg-blue-100"
                                >
                                    <span>Générer avec IA</span>
                                </button>
                            </div>

                            <textarea
                                name="description"
                                value={formData.description}
                                onChange={handleChange}
                                placeholder="Décrivez les responsabilités, exigences et avantages du poste..."
                                className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 min-h-48"
                                required
                            />
                        </div>

                        {/* Compétences */}
                        <div className="bg-white rounded-xl border border-slate-200 p-6">
                            <h2 className="text-lg font-semibold text-slate-800 mb-4">Compétences</h2>

                            <div className="space-y-4">
                                <div>
                                    <label className="block text-sm font-medium text-slate-700 mb-1">
                                        Compétences requises
                                    </label>
                                    <div className="flex gap-2">
                                        <input
                                            type="text"
                                            value={newSkill}
                                            onChange={(e) => setNewSkill(e.target.value)}
                                            placeholder="ex: JavaScript"
                                            className="flex-1 p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                            onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addRequiredSkill())}
                                        />
                                        <button
                                            type="button"
                                            onClick={addRequiredSkill}
                                            className="p-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                                        >
                                            <PlusCircle className="w-5 h-5" />
                                        </button>
                                    </div>

                                    <div className="flex flex-wrap gap-2 mt-3">
                                        {formData.requiredSkills.map((skill, index) => (
                                            <div key={index} className="bg-blue-50 text-blue-700 px-3 py-1 rounded-full flex items-center">
                                                <span>{skill}</span>
                                                <button
                                                    type="button"
                                                    onClick={() => removeRequiredSkill(index)}
                                                    className="ml-2 text-blue-600 hover:text-blue-800"
                                                >
                                                    ×
                                                </button>
                                            </div>
                                        ))}
                                    </div>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-slate-700 mb-1">
                                        Compétences souhaitées
                                    </label>
                                    <div className="flex gap-2">
                                        <input
                                            type="text"
                                            value={newPreferredSkill}
                                            onChange={(e) => setNewPreferredSkill(e.target.value)}
                                            placeholder="ex: React"
                                            className="flex-1 p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                            onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addPreferredSkill())}
                                        />
                                        <button
                                            type="button"
                                            onClick={addPreferredSkill}
                                            className="p-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                                        >
                                            <PlusCircle className="w-5 h-5" />
                                        </button>
                                    </div>

                                    <div className="flex flex-wrap gap-2 mt-3">
                                        {formData.preferredSkills.map((skill, index) => (
                                            <div key={index} className="bg-indigo-50 text-indigo-700 px-3 py-1 rounded-full flex items-center">
                                                <span>{skill}</span>
                                                <button
                                                    type="button"
                                                    onClick={() => removePreferredSkill(index)}
                                                    className="ml-2 text-indigo-600 hover:text-indigo-800"
                                                >
                                                    ×
                                                </button>
                                            </div>
                                        ))}
                                    </div>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-slate-700 mb-1">
                                        Expérience minimale (années)
                                    </label>
                                    <input
                                        type="number"
                                        name="minYearsExperience"
                                        value={formData.minYearsExperience}
                                        onChange={handleChange}
                                        placeholder="ex: 3"
                                        min="0"
                                        max="20"
                                        className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    />
                                </div>
                            </div>
                        </div>

                        {/* Salaire et avantages */}
                        <div className="bg-white rounded-xl border border-slate-200 p-6">
                            <h2 className="text-lg font-semibold text-slate-800 mb-4">Rémunération</h2>

                            <div className="space-y-4">
                                <div className="grid grid-cols-2 gap-4">
                                    <div>
                                        <label className="block text-sm font-medium text-slate-700 mb-1">
                                            Salaire minimum
                                        </label>
                                        <div className="relative">
                                            <DollarSign className="w-5 h-5 text-slate-400 absolute left-3 top-3" />
                                            <input
                                                type="text"
                                                name="salaryFrom"
                                                value={formData.salaryFrom}
                                                onChange={handleChange}
                                                placeholder="ex: 45000"
                                                className="w-full pl-10 p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                            />
                                        </div>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-slate-700 mb-1">
                                            Salaire maximum
                                        </label>
                                        <div className="relative">
                                            <DollarSign className="w-5 h-5 text-slate-400 absolute left-3 top-3" />
                                            <input
                                                type="text"
                                                name="salaryTo"
                                                value={formData.salaryTo}
                                                onChange={handleChange}
                                                placeholder="ex: 65000"
                                                className="w-full pl-10 p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                            />
                                        </div>
                                    </div>
                                </div>

                                <div className="grid grid-cols-2 gap-4">
                                    <div>
                                        <label className="block text-sm font-medium text-slate-700 mb-1">
                                            Devise
                                        </label>
                                        <select
                                            name="currency"
                                            value={formData.currency}
                                            onChange={handleChange}
                                            className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                        >
                                            <option value="EUR">EUR (€)</option>
                                            <option value="USD">USD ($)</option>
                                            <option value="GBP">GBP (£)</option>
                                            <option value="CAD">CAD ($)</option>
                                            <option value="CHF">CHF</option>
                                        </select>
                                    </div>
                                    <div>
                                        <label className="block text-sm font-medium text-slate-700 mb-1">
                                            Période
                                        </label>
                                        <select
                                            name="payPeriod"
                                            value={formData.payPeriod}
                                            onChange={handleChange}
                                            className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                        >
                                            <option value="annual">Annuel</option>
                                            <option value="monthly">Mensuel</option>
                                            <option value="hourly">Horaire</option>
                                        </select>
                                    </div>
                                </div>

                                <div>
                                    <label className="flex items-center">
                                        <input
                                            type="checkbox"
                                            name="displaySalary"
                                            checked={formData.displaySalary}
                                            onChange={handleChange}
                                            className="h-4 w-4 text-blue-600 rounded focus:ring-blue-500"
                                        />
                                        <span className="ml-2 text-sm text-slate-700">Afficher le salaire sur l'offre d'emploi</span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* Sidebar */}
                    <div className="space-y-6">
                        {/* Détails supplémentaires */}
                        <div className="bg-white rounded-xl border border-slate-200 p-6">
                            <h2 className="text-lg font-semibold text-slate-800 mb-4">Détails supplémentaires</h2>

                            <div className="space-y-4">
                                <div>
                                    <label className="block text-sm font-medium text-slate-700 mb-1">
                                        Département
                                    </label>
                                    <select
                                        name="department"
                                        value={formData.department}
                                        onChange={handleChange}
                                        className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    >
                                        <option value="">Sélectionner un département</option>
                                        <option value="IT">Informatique</option>
                                        <option value="Marketing">Marketing</option>
                                        <option value="Sales">Ventes</option>
                                        <option value="HR">Ressources Humaines</option>
                                        <option value="Finance">Finance</option>
                                        <option value="Operations">Opérations</option>
                                        <option value="RD">R&D</option>
                                        <option value="Legal">Juridique</option>
                                    </select>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium text-slate-700 mb-1">
                                        Code du poste
                                    </label>
                                    <input
                                        type="text"
                                        name="jobCode"
                                        value={formData.jobCode}
                                        onChange={handleChange}
                                        placeholder="ex: DEV-2023-42"
                                        className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    />
                                </div>
                            </div>
                        </div>

                        {/* Astuces */}
                        <div className="bg-blue-50 rounded-xl p-6">
                            <h3 className="flex items-center text-blue-700 font-medium mb-2">
                                <Info className="h-5 w-5 mr-2" />
                                Astuces pour une offre efficace
                            </h3>
                            <ul className="space-y-2 text-sm text-blue-700">
                                <li className="flex items-start">
                                    <Star className="h-4 w-4 mr-2 mt-0.5 flex-shrink-0" />
                                    <span>Soyez précis sur les responsabilités et les attentes</span>
                                </li>
                                <li className="flex items-start">
                                    <Star className="h-4 w-4 mr-2 mt-0.5 flex-shrink-0" />
                                    <span>Mentionnez la culture d'entreprise et les avantages</span>
                                </li>
                                <li className="flex items-start">
                                    <Star className="h-4 w-4 mr-2 mt-0.5 flex-shrink-0" />
                                    <span>Utilisez des mots-clés pertinents pour améliorer la visibilité</span>
                                </li>
                                <li className="flex items-start">
                                    <Star className="h-4 w-4 mr-2 mt-0.5 flex-shrink-0" />
                                    <span>Évitez le jargon technique excessif</span>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    );
};
export default JobCreateForm;
=== FIN ===

=== Contenu de frontend\src\pages\dashboard\Dashboard.jsx ===
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Calendar, User, Briefcase, CheckCircle, Star, Play, Users } from 'lucide-react';
import { dashboardService } from '../../services/api';
import LoadingSpinner from '../../components/common/LoadingSpinner';

const DashboardCard = ({ children, className = "" }) => (
    <div className={`bg-white rounded-xl shadow-sm p-5 ${className}`}>
      {children}
    </div>
);

const Dashboard = () => {
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState(null);
  const [meetings, setMeetings] = useState([]);
  const [tasks, setTasks] = useState([]);
  const [pinnedJobs, setPinnedJobs] = useState([]);
  const [pinnedCandidates, setPinnedCandidates] = useState([]);
  const [jobs, setJobs] = useState([]);

  useEffect(() => {
    const fetchDashboardData = async () => {
      try {
        setLoading(true);
        const dashboardData = await dashboardService.getDashboardData();

        setStats(dashboardData.stats);
        setMeetings(dashboardData.meetings);
        setTasks(dashboardData.tasks);
        setPinnedJobs(dashboardData.pinnedJobs);
        setPinnedCandidates(dashboardData.pinnedCandidates);
        setJobs(dashboardData.jobs);
      } catch (error) {
        console.error('Error fetching dashboard data:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchDashboardData();
  }, []);

  const today = new Date();
  const formattedDate = today.toLocaleDateString('fr-FR', { weekday: 'long', day: 'numeric', month: 'long' });
  const formattedDateCapitalized = formattedDate.charAt(0).toUpperCase() + formattedDate.slice(1);

  if (loading) {
    return <LoadingSpinner />;
  }

  return (
      <div className="min-h-screen bg-slate-50 text-slate-800">
        {/* Main content */}
        <div className="p-6">
          {/* Header */}
          <div className="mb-6">
            <div className="flex items-center gap-2 text-slate-500 mb-2">
              <Calendar size={16} />
              <span>{formattedDateCapitalized}</span>
            </div>
            <div className="text-xl font-bold text-slate-800">
              Les emails s'accumulent,<br />
              Les candidats attendent un appel,<br />
              {formattedDateCapitalized.split(' ')[0]} ouvre la voie.
            </div>
          </div>

          {/* Dashboard grid */}
          <div className="grid grid-cols-12 gap-5">
            {/* Upcoming Meetings */}
            <DashboardCard className="col-span-12 md:col-span-4">
              <div className="flex items-center gap-2 mb-4">
                <Calendar size={16} />
                <h3 className="font-medium">Entretiens à venir</h3>
              </div>

              {meetings && meetings.length > 0 ? (
                  <div className="space-y-3">
                    {meetings.map((meeting, index) => (
                        <div key={index} className="bg-blue-50 p-4 rounded-lg">
                          <div className="flex gap-3">
                            <div className="text-center">
                              <div className="text-lg font-bold">{new Date(meeting.date).getDate()}</div>
                              <div className="text-xs text-slate-500">
                                {new Date(meeting.date).toLocaleDateString('fr-FR', { month: 'short' })}
                              </div>
                            </div>
                            <div>
                              <div className="font-medium">{meeting.candidateName}</div>
                              <div className="text-xs text-slate-500">{meeting.time}</div>
                              <div className="text-xs text-slate-500">{meeting.position}</div>
                            </div>
                          </div>
                        </div>
                    ))}
                  </div>
              ) : (
                  <div className="text-center py-6 text-slate-400">
                    <Calendar className="w-10 h-10 mx-auto mb-2" />
                    <p>Aucun entretien planifié</p>
                  </div>
              )}
            </DashboardCard>

            {/* Tasks */}
            <DashboardCard className="col-span-12 md:col-span-4">
              <div className="flex items-center gap-2 mb-4">
                <CheckCircle size={16} />
                <h3 className="font-medium">Évaluations</h3>
              </div>

              {tasks && tasks.length > 0 ? (
                  <div className="space-y-3">
                    {tasks.map((task, index) => (
                        <div key={index} className="flex justify-between items-center p-2 hover:bg-slate-50 rounded-lg">
                          <div>
                            <div className="font-medium">{task.title}</div>
                            <div className="text-xs text-slate-500">{task.subtitle}</div>
                          </div>
                          <div className={`px-3 py-1 ${task.status === 'completed' ? 'bg-green-100 text-green-800' : 'bg-amber-100 text-amber-800'} rounded-full text-xs`}>
                            {task.status === 'completed' ? 'Terminé' : 'En attente'}
                          </div>
                        </div>
                    ))}
                  </div>
              ) : (
                  <div className="text-center py-6 text-slate-400">
                    <CheckCircle className="w-10 h-10 mx-auto mb-2" />
                    <p>Aucune évaluation en attente</p>
                  </div>
              )}
            </DashboardCard>

            {/* Pinned content */}
            <div className="col-span-12 md:col-span-4 space-y-5">
              {/* Pinned Jobs */}
              <DashboardCard>
                <div className="flex items-center gap-2 mb-3">
                  <Star size={16} />
                  <h3 className="font-medium">Offres épinglées</h3>
                </div>

                {pinnedJobs && pinnedJobs.length > 0 ? (
                    <div className="space-y-2">
                      {pinnedJobs.map((job, index) => (
                          <Link to={`/jobs/${job.id}`} key={index} className="block bg-white border border-slate-100 rounded-lg p-2 hover:border-blue-200 hover:bg-blue-50">
                            <div className="font-medium">{job.title}</div>
                            <div className="flex text-sm text-slate-500 mt-1 gap-4">
                              <div className="flex gap-1 items-center">
                                <span className="w-2 h-2 bg-amber-500 rounded-full"></span>
                                <span>{job.inReview} en évaluation</span>
                              </div>
                              <div className="flex gap-1 items-center">
                                <span className="w-2 h-2 bg-green-500 rounded-full"></span>
                                <span>{job.inInterview} en entretien</span>
                              </div>
                            </div>
                          </Link>
                      ))}
                    </div>
                ) : (
                    <div className="text-center py-4 text-slate-400">
                      <p>Aucune offre épinglée</p>
                      <Link to="/jobs" className="text-blue-500 text-sm hover:underline mt-1 inline-block">
                        Épingler une offre
                      </Link>
                    </div>
                )}
              </DashboardCard>

              {/* Pinned Candidates */}
              <DashboardCard>
                <div className="flex items-center gap-2 mb-3">
                  <Star size={16} />
                  <h3 className="font-medium">Candidats épinglés</h3>
                </div>

                {pinnedCandidates && pinnedCandidates.length > 0 ? (
                    <div className="space-y-2">
                      {pinnedCandidates.map((candidate, index) => (
                          <Link to={`/cv/${candidate.id}`} key={index} className="flex items-center gap-3 p-2 hover:bg-slate-50 rounded-lg">
                            <div className="w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 font-medium">
                              {candidate.firstName.charAt(0)}{candidate.lastName.charAt(0)}
                            </div>
                            <div>
                              <div className="font-medium">{candidate.firstName} {candidate.lastName}</div>
                              <div className="text-xs text-slate-500">{candidate.position}</div>
                            </div>
                          </Link>
                      ))}
                    </div>
                ) : (
                    <div className="text-center py-4 text-slate-400">
                      <p>Aucun candidat épinglé</p>
                    </div>
                )}
              </DashboardCard>
            </div>

            {/* Jobs section */}
            <DashboardCard className="col-span-12 md:col-span-8">
              <div className="flex justify-between items-center mb-4">
                <div className="flex items-center gap-2">
                  <Briefcase size={16} />
                  <h3 className="font-medium">Offres d'emploi</h3>
                </div>
                <Link to="/jobs/create" className="px-3 py-1.5 bg-blue-600 text-white rounded-lg text-sm">
                  Ajouter offre
                </Link>
              </div>

              {jobs && jobs.length > 0 ? (
                  <div className="space-y-4">
                    {jobs.map((job, index) => (
                        <div key={index} className="flex justify-between items-center p-3 border-b border-slate-100">
                          <div>
                            <div className="font-medium">{job.title}</div>
                            <div className="text-xs text-slate-500 flex gap-3 mt-1">
                              {job.internal && (
                                  <span className="inline-flex items-center gap-1">
                            <span className="w-2 h-2 bg-slate-400 rounded-full"></span>
                            Offre interne
                          </span>
                              )}
                              <span className="inline-flex items-center gap-1">
                          <span className="w-2 h-2 bg-blue-400 rounded-full"></span>
                                {job.department}
                        </span>
                              <span className="inline-flex items-center gap-1">
                          <span className="w-2 h-2 bg-green-400 rounded-full"></span>
                          Créée il y a {job.daysAgo} jours
                        </span>
                            </div>
                          </div>
                          <div className="flex gap-4 text-sm">
                            <div>{job.evaluation} en évaluation</div>
                            <div>{job.interview} en entretien</div>
                            <div>{job.hired} recrutés</div>
                            <div className="font-semibold">{job.total} total</div>
                          </div>
                        </div>
                    ))}
                  </div>
              ) : (
                  <div className="text-center py-8 text-slate-400">
                    <Briefcase className="w-12 h-12 mx-auto mb-2" />
                    <p>Aucune offre d'emploi active</p>
                    <Link to="/jobs/create" className="text-blue-500 text-sm hover:underline mt-2 inline-block">
                      Créer une offre
                    </Link>
                  </div>
              )}
            </DashboardCard>

            {/* Getting Started */}
            <DashboardCard className="col-span-12 md:col-span-4">
              <div className="flex items-center gap-2 mb-3">
                <CheckCircle size={16} />
                <h3 className="font-medium">Démarrage</h3>
              </div>
              <div className="bg-slate-100 rounded-lg p-3 flex items-center gap-3 cursor-pointer hover:bg-slate-200">
                <div className="w-10 h-10 bg-indigo-600 rounded-lg flex items-center justify-center">
                  <Play className="h-5 w-5 text-white" />
                </div>
                <div className="flex-1">
                  <div className="text-sm font-medium">Guide de démarrage</div>
                  <div className="text-xs text-slate-500">Découvrez comment utiliser RecrutPME</div>
                </div>
                <div className="w-10 h-10 rounded-full overflow-hidden">
                  <img src="/api/placeholder/40/40" alt="User" className="w-full h-full object-cover" />
                </div>
              </div>
            </DashboardCard>
          </div>
        </div>
      </div>
  );
};

export default Dashboard;
=== FIN ===

=== Contenu de frontend\src\pages\interviews\InterviewDetail.jsx ===
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { ChevronLeft, Calendar, Mail, Phone, Download, User, CheckCircle, XCircle, MessageSquare, Clock } from 'lucide-react';
import { toast } from 'react-toastify';
import { interviewService, cvService } from '../../services/api';
import LoadingSpinner from '../../components/common/LoadingSpinner';

const InterviewDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [interview, setInterview] = useState(null);
  const [feedbackForm, setFeedbackForm] = useState({
    interviewer: '',
    technicalScore: 3,
    behavioralScore: 3,
    recommendation: 'CONSIDER',
    comments: ''
  });

  const [showFeedbackForm, setShowFeedbackForm] = useState(false);

  useEffect(() => {
    const fetchInterviewDetails = async () => {
      try {
        setLoading(true);
        const response = await interviewService.getInterviewById(id);
        setInterview(response);
      } catch (error) {
        console.error('Error fetching interview details:', error);
        toast.error('Erreur lors du chargement des détails de l\'entretien');
        navigate('/interviews');
      } finally {
        setLoading(false);
      }
    };

    fetchInterviewDetails();
  }, [id, navigate]);

  const handleFeedbackChange = (e) => {
    const { name, value } = e.target;
    setFeedbackForm(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmitFeedback = async (e) => {
    e.preventDefault();
    try {
      await interviewService.addFeedback(id, feedbackForm);
      toast.success('Feedback ajouté avec succès');
      setShowFeedbackForm(false);
      // Refresh interview details
      const updatedInterview = await interviewService.getInterviewById(id);
      setInterview(updatedInterview);
    } catch (error) {
      console.error('Error submitting feedback:', error);
      toast.error('Erreur lors de l\'ajout du feedback');
    }
  };

  const handleCancelInterview = async () => {
    const reason = prompt('Veuillez indiquer la raison de l\'annulation:');
    if (!reason) return;

    try {
      await interviewService.cancelInterview(id, reason);
      toast.success('Entretien annulé avec succès');
      navigate('/interviews');
    } catch (error) {
      console.error('Error cancelling interview:', error);
      toast.error('Erreur lors de l\'annulation de l\'entretien');
    }
  };

  const handleCompleteInterview = async () => {
    const outcome = window.confirm('L\'entretien s\'est-il bien passé? Cliquez sur OK pour marquer comme réussi ou sur Annuler pour indiquer un échec.');
    
    try {
      await interviewService.completeInterview(id, outcome ? 'SUCCESS' : 'FAILED');
      toast.success('Entretien marqué comme terminé');
      // Refresh interview details
      const updatedInterview = await interviewService.getInterviewById(id);
      setInterview(updatedInterview);
    } catch (error) {
      console.error('Error completing interview:', error);
      toast.error('Erreur lors de la finalisation de l\'entretien');
    }
  };

  if (loading) {
    return <LoadingSpinner />;
  }

  if (!interview) {
    return (
      <div className="text-center py-12">
        <h2 className="text-2xl font-semibold text-slate-800 mb-2">Entretien non trouvé</h2>
        <p className="text-slate-600 mb-6">L'entretien que vous recherchez n'existe pas ou a été supprimé.</p>
        <Link to="/interviews" className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
          Retour aux entretiens
        </Link>
      </div>
    );
  }

  const formatDate = (dateString) => {
    const options = { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    };
    return new Date(dateString).toLocaleDateString('fr-FR', options);
  };

  const formatDuration = (minutes) => {
    if (minutes < 60) {
      return `${minutes} min`;
    }
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    return `${hours}h${remainingMinutes > 0 ? ` ${remainingMinutes}min` : ''}`;
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'SCHEDULED':
        return 'bg-blue-100 text-blue-800';
      case 'COMPLETED':
        return 'bg-green-100 text-green-800';
      case 'CANCELLED':
        return 'bg-red-100 text-red-800';
      case 'NO_SHOW':
        return 'bg-yellow-100 text-yellow-800';
      case 'FEEDBACK_COMPLETE':
        return 'bg-indigo-100 text-indigo-800';
      default:
        return 'bg-slate-100 text-slate-800';
    }
  };

  const getStatusLabel = (status) => {
    switch (status) {
      case 'SCHEDULED':
        return 'Planifié';
      case 'COMPLETED':
        return 'Terminé';
      case 'CANCELLED':
        return 'Annulé';
      case 'NO_SHOW':
        return 'Absence';
      case 'FEEDBACK_COMPLETE':
        return 'Feedback complété';
      default:
        return status;
    }
  };

  return (
    <div>
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center mb-6">
          <button 
            className="p-2 rounded-full hover:bg-slate-100 mr-2"
            onClick={() => navigate(-1)}
          >
            <ChevronLeft className="w-5 h-5 text-slate-600" />
          </button>
          <h1 className="text-2xl font-bold text-slate-800">Détails de l'entretien</h1>
        </div>

        <div className="flex justify-between items-start">
          <div>
            <div className="flex items-center">
              <Calendar className="w-5 h-5 text-blue-600 mr-2" />
              <h2 className="text-xl font-semibold text-slate-800">
                Entretien {interview.interviewType === 'VIDEO' ? 'vidéo' : 
                          interview.interviewType === 'PHONE' ? 'téléphonique' : 'en personne'} {' '}
                avec {interview.candidateName}
              </h2>
            </div>
            <div className="mt-2 flex items-center">
              <span className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(interview.status)}`}>
                {getStatusLabel(interview.status)}
              </span>
              <span className="ml-4 text-sm text-slate-500">
                <Clock className="inline w-4 h-4 mr-1" />
                {formatDuration(interview.duration)}
              </span>
            </div>
          </div>

          <div className="flex space-x-3">
            {interview.status === 'SCHEDULED' && (
              <>
                <button 
                  onClick={handleCompleteInterview}
                  className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition font-medium"
                >
                  Terminer
                </button>
                <button 
                  onClick={handleCancelInterview}
                  className="px-4 py-2 border border-red-200 text-red-600 rounded-lg hover:bg-red-50 transition font-medium"
                >
                  Annuler
                </button>
              </>
            )}
            {(interview.status === 'COMPLETED' || interview.status === 'FEEDBACK_COMPLETE') && (
              <button 
                onClick={() => setShowFeedbackForm(!showFeedbackForm)}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium"
              >
                {showFeedbackForm ? 'Masquer le formulaire' : 'Ajouter un feedback'}
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Left column - Interview details */}
        <div className="md:col-span-2 space-y-6">
          {/* Interview information */}
          <div className="bg-white rounded-xl shadow-sm p-6">
            <h3 className="text-lg font-medium text-slate-800 mb-4">Informations sur l'entretien</h3>
            
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <p className="text-sm text-slate-500 mb-1">Date et heure</p>
                  <p className="text-slate-800 font-medium">{formatDate(interview.scheduledTime)}</p>
                </div>
                <div>
                  <p className="text-sm text-slate-500 mb-1">Durée</p>
                  <p className="text-slate-800 font-medium">{formatDuration(interview.duration)}</p>
                </div>
              </div>
              
              <div>
                <p className="text-sm text-slate-500 mb-1">Type d'entretien</p>
                <p className="text-slate-800 font-medium">
                  {interview.interviewType === 'VIDEO' ? 'Entretien vidéo' : 
                   interview.interviewType === 'PHONE' ? 'Entretien téléphonique' : 
                   'Entretien en personne'}
                </p>
              </div>
              
              {interview.location && (
                <div>
                  <p className="text-sm text-slate-500 mb-1">Lieu / Lien</p>
                  <p className="text-slate-800 font-medium">{interview.location}</p>
                </div>
              )}
              
              <div>
                <p className="text-sm text-slate-500 mb-1">Interviewers</p>
                <div className="flex flex-wrap gap-2 mt-1">
                  {interview.interviewers.map((interviewer, idx) => (
                    <div key={idx} className="flex items-center px-3 py-1 bg-slate-100 rounded-full">
                      <User className="w-4 h-4 text-slate-600 mr-1" />
                      <span className="text-sm text-slate-700">{interviewer}</span>
                    </div>
                  ))}
                </div>
              </div>
              
              {interview.jobTitle && (
                <div>
                  <p className="text-sm text-slate-500 mb-1">Poste concerné</p>
                  <div className="px-3 py-1 bg-blue-50 text-blue-700 rounded-lg inline-block">
                    {interview.jobTitle}
                  </div>
                </div>
              )}
              
              {interview.notes && (
                <div>
                  <p className="text-sm text-slate-500 mb-1">Notes préparatoires</p>
                  <p className="text-slate-700 p-3 bg-slate-50 rounded-lg">{interview.notes}</p>
                </div>
              )}
              
              {interview.cancellationReason && (
                <div>
                  <p className="text-sm text-slate-500 mb-1">Raison d'annulation</p>
                  <p className="text-red-600 p-3 bg-red-50 rounded-lg">{interview.cancellationReason}</p>
                </div>
              )}
            </div>
          </div>
          
          {/* Feedback form */}
          {showFeedbackForm && (
            <div className="bg-white rounded-xl shadow-sm p-6">
              <h3 className="text-lg font-medium text-slate-800 mb-4">Ajouter un feedback</h3>
              
              <form onSubmit={handleSubmitFeedback} className="space-y-4">
                <div>
                  <label htmlFor="interviewer" className="block text-sm font-medium text-slate-700 mb-1">Interviewer</label>
                  <input
                    id="interviewer"
                    name="interviewer"
                    type="text"
                    className="w-full p-2 border border-slate-200 rounded-lg"
                    value={feedbackForm.interviewer}
                    onChange={handleFeedbackChange}
                    required
                  />
                </div>
                
                <div>
                  <label htmlFor="technicalScore" className="block text-sm font-medium text-slate-700 mb-1">Score technique (1-5)</label>
                  <select
                    id="technicalScore"
                    name="technicalScore"
                    className="w-full p-2 border border-slate-200 rounded-lg"
                    value={feedbackForm.technicalScore}
                    onChange={handleFeedbackChange}
                    required
                  >
                    {[1, 2, 3, 4, 5].map(score => (
                      <option key={score} value={score}>{score}</option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label htmlFor="behavioralScore" className="block text-sm font-medium text-slate-700 mb-1">Score comportemental (1-5)</label>
                  <select
                    id="behavioralScore"
                    name="behavioralScore"
                    className="w-full p-2 border border-slate-200 rounded-lg"
                    value={feedbackForm.behavioralScore}
                    onChange={handleFeedbackChange}
                    required
                  >
                    {[1, 2, 3, 4, 5].map(score => (
                      <option key={score} value={score}>{score}</option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label htmlFor="recommendation" className="block text-sm font-medium text-slate-700 mb-1">Recommendation</label>
                  <select
                    id="recommendation"
                    name="recommendation"
                    className="w-full p-2 border border-slate-200 rounded-lg"
                    value={feedbackForm.recommendation}
                    onChange={handleFeedbackChange}
                    required
                  >
                    <option value="HIRE">Recommande l'embauche</option>
                    <option value="CONSIDER">À considérer</option>
                    <option value="REJECT">Ne recommande pas</option>
                  </select>
                </div>
                
                <div>
                  <label htmlFor="comments" className="block text-sm font-medium text-slate-700 mb-1">Commentaires</label>
                  <textarea
                    id="comments"
                    name="comments"
                    rows={5}
                    className="w-full p-2 border border-slate-200 rounded-lg"
                    value={feedbackForm.comments}
                    onChange={handleFeedbackChange}
                    required
                  />
                </div>
                
                <div className="flex justify-end space-x-3">
                  <button
                    type="button"
                    className="px-4 py-2 border border-slate-200 text-slate-700 rounded-lg hover:bg-slate-50"
                    onClick={() => setShowFeedbackForm(false)}
                  >
                    Annuler
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                  >
                    Enregistrer le feedback
                  </button>
                </div>
              </form>
            </div>
          )}
          
          {/* Feedbacks */}
          {interview.feedbacks && interview.feedbacks.length > 0 && (
            <div className="bg-white rounded-xl shadow-sm p-6">
              <h3 className="text-lg font-medium text-slate-800 mb-4">Feedbacks ({interview.feedbacks.length})</h3>
              
              <div className="space-y-4">
                {interview.feedbacks.map((feedback, idx) => (
                  <div key={idx} className="p-4 border border-slate-100 rounded-lg">
                    <div className="flex justify-between items-start mb-3">
                      <div className="flex items-center">
                        <div className="w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 font-medium text-sm">
                          {feedback.interviewer.charAt(0)}
                        </div>
                        <div className="ml-2">
                          <p className="text-sm font-medium text-slate-800">{feedback.interviewer}</p>
                          <p className="text-xs text-slate-500">{new Date(feedback.createdAt).toLocaleDateString()}</p>
                        </div>
                      </div>
                      <div className={`px-3 py-1 rounded-full text-xs font-medium 
                        ${feedback.recommendation === 'HIRE' ? 'bg-green-100 text-green-800' : 
                         feedback.recommendation === 'CONSIDER' ? 'bg-yellow-100 text-yellow-800' : 
                         'bg-red-100 text-red-800'}`}
                      >
                        {feedback.recommendation === 'HIRE' ? 'Recommandé' : 
                         feedback.recommendation === 'CONSIDER' ? 'À considérer' : 
                         'Non recommandé'}
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-3 mb-3">
                      <div className="p-2 bg-slate-50 rounded-lg">
                        <p className="text-xs text-slate-500 mb-1">Score technique</p>
                        <div className="flex items-center">
                          {Array.from({ length: 5 }).map((_, i) => (
                            <div 
                              key={i} 
                              className={`w-5 h-5 rounded-full mr-1 flex items-center justify-center
                                ${i < feedback.technicalScore ? 'bg-blue-500 text-white' : 'bg-slate-200'}`}
                            >
                              {i < feedback.technicalScore && <CheckCircle className="w-3 h-3" />}
                            </div>
                          ))}
                          <span className="ml-2 text-sm font-medium">{feedback.technicalScore}/5</span>
                        </div>
                      </div>
                      
                      <div className="p-2 bg-slate-50 rounded-lg">
                        <p className="text-xs text-slate-500 mb-1">Score comportemental</p>
                        <div className="flex items-center">
                          {Array.from({ length: 5 }).map((_, i) => (
                            <div 
                              key={i} 
                              className={`w-5 h-5 rounded-full mr-1 flex items-center justify-center
                                ${i < feedback.behavioralScore ? 'bg-indigo-500 text-white' : 'bg-slate-200'}`}
                            >
                              {i < feedback.behavioralScore && <CheckCircle className="w-3 h-3" />}
                            </div>
                          ))}
                          <span className="ml-2 text-sm font-medium">{feedback.behavioralScore}/5</span>
                        </div>
                      </div>
                    </div>
                    
                    <p className="text-sm text-slate-700 bg-slate-50 p-3 rounded-lg">{feedback.comments}</p>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
        
        {/* Right column - Candidate information */}
        <div className="space-y-6">
          <div className="bg-white rounded-xl shadow-sm p-6">
            <h3 className="text-lg font-medium text-slate-800 mb-4">Candidat</h3>
            
            <div className="flex items-center mb-4">
              <div className="w-12 h-12 rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 flex items-center justify-center text-white font-medium text-lg">
                {interview.candidateName.split(' ').map(n => n[0]).join('')}
              </div>
              <div className="ml-3">
                <p className="font-medium text-slate-800">{interview.candidateName}</p>
                <p className="text-sm text-slate-500">{interview.jobTitle || 'Candidat'}</p>
              </div>
            </div>
            
            <div className="space-y-3 mb-4">
              {interview.candidateEmail && (
                <div className="flex items-center">
                  <Mail className="w-4 h-4 text-slate-400 mr-2" />
                  <a href={`mailto:${interview.candidateEmail}`} className="text-sm text-blue-600 hover:underline">
                    {interview.candidateEmail}
                  </a>
                </div>
              )}
              
              {interview.candidatePhone && (
                <div className="flex items-center">
                  <Phone className="w-4 h-4 text-slate-400 mr-2" />
                  <a href={`tel:${interview.candidatePhone}`} className="text-sm text-slate-700">
                    {interview.candidatePhone}
                  </a>
                </div>
              )}
            </div>
            
            <div className="pt-4 border-t border-slate-100">
              <Link
                to={`/cv/${interview.candidateId}`}
                className="w-full py-2 flex items-center justify-center bg-blue-50 text-blue-700 rounded-lg text-sm font-medium hover:bg-blue-100"
              >
                Voir le profil complet
              </Link>
            </div>
          </div>
          
          {/* Interview Questions */}
          <div className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium text-slate-800">Questions suggérées</h3>
              <button className="text-sm text-blue-600 hover:text-blue-800">
                Générer plus
              </button>
            </div>
            
            <div className="space-y-3">
              {interview.questions ? (
                interview.questions.map((question, idx) => (
                  <div key={idx} className="p-3 bg-slate-50 rounded-lg">
                    <p className="text-sm text-slate-800">{question.question}</p>
                  </div>
                ))
              ) : (
                <div className="text-center p-4">
                  <MessageSquare className="w-10 h-10 text-slate-300 mx-auto mb-2" />
                  <p className="text-slate-500">Pas de questions suggérées</p>
                  <button 
                    className="mt-3 px-4 py-2 bg-blue-600 text-white rounded-lg text-sm"
                    onClick={() => interviewService.generateInterviewQuestions(interview.candidateId, interview.jobId)}
                  >
                    Générer des questions
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default InterviewDetail;
=== FIN ===

=== Contenu de frontend\src\pages\interviews\Interviews.jsx ===
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Calendar, Plus, Filter, ChevronDown, Search, User, Video, Phone, MapPin } from 'lucide-react';
import { toast } from 'react-toastify';
import { interviewService } from '../../services/api';
import LoadingSpinner from '../../components/common/LoadingSpinner';

const Interviews = () => {
  const [loading, setLoading] = useState(true);
  const [interviews, setInterviews] = useState([]);
  const [selectedStatus, setSelectedStatus] = useState('');
  const [selectedDateRange, setSelectedDateRange] = useState('all');
  
  useEffect(() => {
    fetchInterviews();
  }, [selectedStatus, selectedDateRange]);


  const fetchInterviews = async () => {
    try {
      setLoading(true);
      
      // Prepare filters
      const filters = {};
      if (selectedStatus) {
        filters.status = selectedStatus;
      }
      
      if (selectedDateRange !== 'all') {
        const today = new Date();
        const from = new Date();
        
        if (selectedDateRange === 'today') {
          // No change to 'from', it's today
        } else if (selectedDateRange === 'week') {
          from.setDate(today.getDate() - 7);
        } else if (selectedDateRange === 'month') {
          from.setMonth(today.getMonth() - 1);
        }
        
        filters.from = from.toISOString().split('T')[0];
        filters.to = new Date(today.getTime() + 86400000).toISOString().split('T')[0]; // Tomorrow
      }
      
      const response = await interviewService.getInterviews(filters);
      setInterviews(response);
    } catch (error) {
      console.error('Error fetching interviews:', error);
      toast.error('Erreur lors du chargement des entretiens');
    } finally {
      setLoading(false);
    }
  };
  
  const formatDate = (dateString) => {
    const options = { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    };
    return new Date(dateString).toLocaleDateString('fr-FR', options);
  };
  
  const getStatusColor = (status) => {
    switch (status) {
      case 'SCHEDULED':
        return 'bg-blue-100 text-blue-800';
      case 'COMPLETED':
        return 'bg-green-100 text-green-800';
      case 'CANCELLED':
        return 'bg-red-100 text-red-800';
      case 'NO_SHOW':
        return 'bg-yellow-100 text-yellow-800';
      case 'FEEDBACK_COMPLETE':
        return 'bg-indigo-100 text-indigo-800';
      default:
        return 'bg-slate-100 text-slate-800';
    }
  };
  
  const getStatusLabel = (status) => {
    switch (status) {
      case 'SCHEDULED':
        return 'Planifié';
      case 'COMPLETED':
        return 'Terminé';
      case 'CANCELLED':
        return 'Annulé';
      case 'NO_SHOW':
        return 'Absence';
      case 'FEEDBACK_COMPLETE':
        return 'Feedback complété';
      default:
        return status;
    }
  };
  
  const getInterviewTypeIcon = (type) => {
    switch (type) {
      case 'VIDEO':
        return <Video className="w-4 h-4 text-blue-500" />;
      case 'PHONE':
        return <Phone className="w-4 h-4 text-green-500" />;
      case 'IN_PERSON':
        return <MapPin className="w-4 h-4 text-purple-500" />;
      default:
        return <Calendar className="w-4 h-4 text-slate-500" />;
    }
  };
  
  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold text-slate-800">Entretiens</h1>
          <p className="text-slate-500 mt-1">Gérez vos entretiens avec les candidats</p>
        </div>
        <Link 
          to="/interviews/schedule" 
          className="flex items-center px-4 py-2.5 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-xl shadow-sm hover:from-blue-700 hover:to-indigo-700"
        >
          <Plus className="h-4 w-4 mr-2" />
          <span className="text-sm font-medium">Planifier un entretien</span>
        </Link>
      </div>
      
      {/* Filters */}
      <div className="bg-white rounded-xl shadow-sm p-4 mb-6">
        <div className="flex flex-wrap gap-4">
          <div className="flex-1 min-w-[200px]">
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Search className="h-4 w-4 text-slate-400" />
              </div>
              <input
                type="text"
                className="block w-full pl-10 pr-3 py-2 border border-slate-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                placeholder="Rechercher un candidat..."
              />
            </div>
          </div>
          
          <div className="w-48">
            <div className="relative">
              <select
                className="block w-full pl-3 pr-10 py-2 border border-slate-200 rounded-lg appearance-none focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                value={selectedStatus}
                onChange={(e) => setSelectedStatus(e.target.value)}
              >
                <option value="">Tous les statuts</option>
                <option value="SCHEDULED">Planifiés</option>
                <option value="COMPLETED">Terminés</option>
                <option value="FEEDBACK_COMPLETE">Feedback complété</option>
                <option value="CANCELLED">Annulés</option>
                <option value="NO_SHOW">Absences</option>
              </select>
              <div className="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
                <ChevronDown className="h-4 w-4 text-slate-400" />
              </div>
            </div>
          </div>
          
          <div className="w-48">
            <div className="relative">
              <select
                className="block w-full pl-3 pr-10 py-2 border border-slate-200 rounded-lg appearance-none focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                value={selectedDateRange}
                onChange={(e) => setSelectedDateRange(e.target.value)}
              >
                <option value="all">Toutes les dates</option>
                <option value="today">Aujourd'hui</option>
                <option value="week">Cette semaine</option>
                <option value="month">Ce mois</option>
              </select>
              <div className="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
                <ChevronDown className="h-4 w-4 text-slate-400" />
              </div>
            </div>
          </div>
          
          <button 
            className="px-4 py-2 bg-slate-100 text-slate-700 rounded-lg hover:bg-slate-200 flex items-center text-sm"
            onClick={() => {
              setSelectedStatus('');
              setSelectedDateRange('all');
            }}
          >
            <Filter className="h-4 w-4 mr-2" />
            Réinitialiser
          </button>
        </div>
      </div>
      
      {/* Interviews List */}
      {loading ? (
        <LoadingSpinner />
      ) : (
        <div className="bg-white rounded-xl shadow-sm overflow-hidden">
          {interviews.length === 0 ? (
            <div className="py-12 text-center">
              <Calendar className="w-12 h-12 text-slate-300 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-slate-700 mb-2">Aucun entretien trouvé</h3>
              <p className="text-slate-500 mb-6">Aucun entretien ne correspond à vos critères de recherche</p>
              <Link 
                to="/interviews/schedule" 
                className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
              >
                <Plus className="h-4 w-4 mr-2" />
                Planifier un entretien
              </Link>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="bg-slate-50">
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Candidat</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Type</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Date & Heure</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Poste</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Statut</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-slate-100">
                  {interviews.map((interview) => (
                    <tr key={interview.id} className="hover:bg-slate-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 flex items-center justify-center text-white text-xs font-medium">
                            {interview.candidateName.split(' ').map(n => n[0]).join('')}
                          </div>
                          <div className="ml-3">
                            <p className="text-sm font-medium text-slate-800">{interview.candidateName}</p>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          {getInterviewTypeIcon(interview.interviewType)}
                          <span className="ml-2 text-sm text-slate-700">
                            {interview.interviewType === 'VIDEO' ? 'Vidéo' : 
                             interview.interviewType === 'PHONE' ? 'Téléphone' : 
                             'En personne'}
                          </span>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className="text-sm text-slate-700">{formatDate(interview.scheduledTime)}</span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {interview.jobTitle ? (
                          <span className="px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-50 text-blue-700">
                            {interview.jobTitle}
                          </span>
                        ) : (
                          <span className="text-sm text-slate-500">-</span>
                        )}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(interview.status)}`}>
                          {getStatusLabel(interview.status)}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <Link 
                          to={`/interviews/${interview.id}`}
                          className="px-3 py-1.5 bg-blue-50 text-blue-700 rounded-lg text-xs font-medium hover:bg-blue-100"
                        >
                          Voir détails
                        </Link>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default Interviews;
=== FIN ===

=== Contenu de frontend\src\pages\jobs\JobCreate.jsx ===
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { PlusCircle, Info, MapPin, Building, DollarSign, Briefcase, Users, Calendar, Star, X, Check, ChevronDown, Save } from 'lucide-react';
import { jobService, questionService, workflowService , companyService,userService} from '../../services/api';
import { toast } from 'react-toastify';
import { useAuth } from '../../contexts/AuthContext';

const JobCreate = () => {
  const { companyId } = useAuth();
  const navigate = useNavigate();
  const [currentStep, setCurrentStep] = useState(0);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    requiredSkills: [],
    preferredSkills: [],
    employmentType: '',
    workType: '',
    minYearsExperience: '',
    salaryFrom: '',
    salaryTo: '',
    currency: '',
    payPeriod: '',
    displaySalary: false,
    department: '',
    location: '',
    jobCode: '',
    applicationFields: {
      name: { required: true },
      email: { required: true },
      phone: { required: false },
      resume: { required: true },
      coverLetter: { required: false },
    },
    customQuestions: [],
    hiringTeam: [],
    workflowId: '',
    workflowStages: [],
    jobBoards: [],
  });
  const [availableQuestions, setAvailableQuestions] = useState([]);
  const [availableWorkflows, setAvailableWorkflows] = useState([]);
  const [departmentOptions, setDepartmentOptions] = useState([]);
  const [locationOptions, setLocationOptions] = useState([]); // Ajout de locationOptions
  const [newSkill, setNewSkill] = useState('');
  const [newPreferredSkill, setNewPreferredSkill] = useState('');
  const [showAddQuestionModal, setShowAddQuestionModal] = useState(false);
  const [showTeamMemberModal, setShowTeamMemberModal] = useState(false);
   
  const [newQuestion, setNewQuestion] = useState({
    text: '',
    responseType: 'short_text',
    visibility: 'public'
  });
  const [teamRoles] = useState([
    { id: 'recruiting_admin', name: 'Admin Recrutement', description: 'Accès à toutes les fonctionnalités au niveau de l\'offre, y compris voir tous les candidats, effectuer des actions sur les candidats, publier des offres et acheter des publicités.' },
    { id: 'hiring_manager', name: 'Responsable du Recrutement', description: 'Peut voir les commentaires privés de l\'équipe et les emails des candidats, ainsi qu\'envoyer des offres et planifier des réunions.' },
    { id: 'reviewer', name: 'Évaluateur', description: 'Peut uniquement évaluer les candidats, remplir les fiches d\'évaluation et laisser des commentaires internes.' }
  ]);
  const [newTeamMember, setNewTeamMember] = useState({
    email: '',
    role: 'reviewer'
  });

  // Définir les champs requis pour chaque étape
  const requiredFields = {
    details: ['title', 'employmentType', 'workType', 'location', 'description'],
    application: [], // Pas de champs strictement requis ici
    team: ['hiringTeam'],
    workflow: ['workflowId', 'workflowStages'],
    advertise: ['jobPostingStatus']
  };

  // Fonction de validation pour une étape spécifique
  const validateStep = (stepId) => {
    const fields = requiredFields[stepId] || [];
    return fields.every(field => {
      if (field === 'title' || field === 'location' || field === 'description' || field === 'employmentType' || field === 'workType' || field === 'workflowId' || field === 'jobPostingStatus') {
        return formData[field]?.trim() !== '';
      }
      if (field === 'hiringTeam' || field === 'workflowStages') {
        return Array.isArray(formData[field]) && formData[field].length > 0;
      }
      return true;
    });
  };

  // Valider toutes les étapes avant publication
  const validateAllSteps = () => {
    return steps.every(step => {
      const isValid = validateStep(step.id);
      if (!isValid) {
        toast.error(`Veuillez remplir tous les champs requis dans l'étape "${step.title}"`);
      }
      return isValid;
    });
  };

  useEffect(() => {
    const fetchInitialData = async () => {
      try {
        const departments = await companyService.getDepartments(companyId);
        setDepartmentOptions(Array.isArray(departments) ? departments : []);

        const locations = await companyService.getCompanyLocations(companyId);
         
        
        setLocationOptions(Array.isArray(locations) ? locations : []);

        const questions = await questionService.getCustomQuestions(companyId);
        setAvailableQuestions(questions || []);

        let workflows = await workflowService.getWorkflows(companyId);

        let defaultWorkflow = workflows.find(w => w.name.toLowerCase() === 'workflow par défaut');
        if (!defaultWorkflow) {
          defaultWorkflow = await workflowService.createWorkflow(companyId, {
            name: 'Workflow par défaut',
          });
          workflows = [defaultWorkflow, ...workflows];
        } else {
          const refreshedWorkflow = await workflowService.getWorkflowStages(companyId, defaultWorkflow.id);
          defaultWorkflow.stages = refreshedWorkflow;
        }

        setAvailableWorkflows(workflows);

        const defaultStages = await workflowService.getWorkflowStages(companyId, defaultWorkflow.id);
        setFormData(prev => ({
          ...prev,
          workflowId: defaultWorkflow.id,
          workflowStages: defaultStages
        }));
      } catch (error) {
         
        toast.error('Erreur lors du chargement des données. Veuillez réessayer.');
        setDepartmentOptions([]);
        setLocationOptions([]);
      }
    };

    fetchInitialData();
  }, [companyId]);

  const steps = [
    { id: 'details', title: 'Détails de l\'offre' },
    
    { id: 'application', title: 'Formulaire de candidature' },
    { id: 'team', title: 'Équipe de recrutement' },
    { id: 'workflow', title: 'Processus de recrutement' },
    { id: 'advertise', title: 'Diffusion de l\'offre' }
  ];

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleWorkTypeChange = (type) => {
    setFormData(prev => ({
      ...prev,
      workType: type
    }));
  };

  const addRequiredSkill = () => {
    if (newSkill.trim()) {
      setFormData(prev => ({
        ...prev,
        requiredSkills: [...prev.requiredSkills, newSkill.trim()]
      }));
      setNewSkill('');
    }
  };

  const removeRequiredSkill = (index) => {
    setFormData(prev => ({
      ...prev,
      requiredSkills: prev.requiredSkills.filter((_, i) => i !== index)
    }));
  };

  const addPreferredSkill = () => {
    if (newPreferredSkill.trim()) {
      setFormData(prev => ({
        ...prev,
        preferredSkills: [...prev.preferredSkills, newPreferredSkill.trim()]
      }));
      setNewPreferredSkill('');
    }
  };

  const removePreferredSkill = (index) => {
    setFormData(prev => ({
      ...prev,
      preferredSkills: prev.preferredSkills.filter((_, i) => i !== index)
    }));
  };

  const handleAddQuestion = () => {
    setShowAddQuestionModal(true);
  };

  const handleQuestionChange = (e) => {
    const { name, value } = e.target;
    setNewQuestion(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const saveQuestion = () => {
    // Validation
    if (!newQuestion.text.trim()) {
      toast.error('Veuillez saisir une question');
      return;
    }

    // Ajouter la question personnalisée
    setFormData(prev => ({
      ...prev,
      customQuestions: [...prev.customQuestions, {
        ...newQuestion,
        id: `temp-${Date.now()}`,  // ID temporaire
        isOptional: true
      }]
    }));

    // Réinitialiser et fermer
    setNewQuestion({
      text: '',
      responseType: 'short_text',
      visibility: 'public'
    });
    setShowAddQuestionModal(false);
  };

  const handleAddTeamMember = () => {
    setShowTeamMemberModal(true);
  };

  const handleTeamMemberChange = (e) => {
    const { name, value } = e.target;
    setNewTeamMember(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const saveTeamMember = () => {
    // Validation
    if (!newTeamMember.email.trim()) {
      toast.error('Veuillez saisir une adresse email');
      return;
    }

    // Ajouter le membre d'équipe
    setFormData(prev => ({
      ...prev,
      hiringTeam: [...prev.hiringTeam, {
        ...newTeamMember,
        id: `temp-${Date.now()}`,  // ID temporaire
        name: newTeamMember.email.split('@')[0]  // Nom provisoire basé sur l'email
      }]
    }));

    // Réinitialiser et fermer
    setNewTeamMember({
      email: '',
      role: 'reviewer'
    });
    setShowTeamMemberModal(false);
  };

  const handleWorkflowChange = async (workflowId) => {
    try {
      // Charger les étapes du workflow sélectionné
      const stages = await workflowService.getWorkflowStages(workflowId);

      setFormData(prev => ({
        ...prev,
        workflowId,
        workflowStages: stages
      }));
    } catch (error) {
       
      toast.error('Erreur lors du chargement des étapes du workflow');
    }
  };

  const handleSelectPredefinedQuestion = (questionId) => {
    const question = availableQuestions.find(q => q.id === questionId);
    if (question) {
      // Vérifier si cette question est déjà ajoutée
      const isAlreadyAdded = formData.customQuestions.some(q => q.id === question.id);

      if (!isAlreadyAdded) {
        setFormData(prev => ({
          ...prev,
          customQuestions: [...prev.customQuestions, {
            ...question,
            isOptional: true
          }]
        }));
      } else {
        toast.info('Cette question est déjà ajoutée');
      }
    }
  };

  const removeQuestion = (index) => {
    setFormData(prev => ({
      ...prev,
      customQuestions: prev.customQuestions.filter((_, i) => i !== index)
    }));
  };

  const removeTeamMember = (index) => {
    setFormData(prev => ({
      ...prev,
      hiringTeam: prev.hiringTeam.filter((_, i) => i !== index)
    }));
  };

  const handleToggleRequiredField = (field) => {
    setFormData(prev => ({
      ...prev,
      applicationFields: {
        ...prev.applicationFields,
        [field]: {
          ...prev.applicationFields[field],
          required: !prev.applicationFields[field].required
        }
      }
    }));
  };

  const toggleQuestionRequired = (index, isRequired) => {
    setFormData(prev => ({
      ...prev,
      customQuestions: prev.customQuestions.map((q, i) =>
          i === index ? { ...q, isOptional: !isRequired } : q
      )
    }));
  };

  const generateDescription = () => {
    // Simuler une génération d'IA
    const generatedDescription = `Nous recherchons un(e) ${formData.title} passionné(e) et talentueux(se) pour rejoindre notre équipe ${formData.department || 'dynamique'}.

Vous serez responsable de concevoir, développer et maintenir des solutions innovantes qui auront un impact direct sur notre activité.

Le candidat idéal possède une solide expérience dans ${formData.requiredSkills.join(', ') || 'le domaine'} et est capable de travailler de manière autonome tout en collaborant efficacement avec une équipe pluridisciplinaire.`;

    setFormData(prev => ({
      ...prev,
      description: generatedDescription
    }));
  };

  const handleSaveAsDraft = async () => {
    try {
      setIsSubmitting(true);

      // Validation des étapes avant sauvegarde
      const stepsToValidate = steps.filter(step => step.id !== 'advertise');
      const allStepsValid = stepsToValidate.every(step => {
        const isValid = validateStep(step.id);
        if (!isValid) {
          toast.error(`Veuillez remplir tous les champs requis dans l'étape "${step.title}"`);
        }
        return isValid;
      });

      if (!allStepsValid) {
        setIsSubmitting(false);
        return;
      }

      if (formData.description?.trim().length < 50) {
        toast.error('La description doit contenir au moins 50 caractères.');
        setIsSubmitting(false);
        return;
      }

      const jobData = {
        title: formData.title?.trim() || null,
        description: formData.description?.trim() || null,
        requiredSkills: formData.requiredSkills || [],
        preferredSkills: formData.preferredSkills || [],
        employmentType: formData.employmentType ? formData.employmentType.toUpperCase().replace('-', '_') : null,
        workType: formData.workType ? formData.workType.toUpperCase().replace('-', '_') : 'ON_SITE',
        minYearsExperience: parseInt(formData.minYearsExperience) || 0,
        salaryMin: formData.displaySalary ? parseFloat(formData.salaryFrom) || 0 : 0,
        salaryMax: formData.displaySalary ? parseFloat(formData.salaryTo) || 0 : 0,
        currency: formData.currency || 'EUR',
        payPeriod: formData.payPeriod ? formData.payPeriod.toUpperCase() : 'ANNUAL',
        displaySalary: formData.displaySalary || false,
        departmentId: departmentOptions.find(d => d.name.toLowerCase() === formData.department?.toLowerCase())?.id || null,
        locationId: locationOptions.find(l => l.name.toLowerCase() === formData.location?.toLowerCase())?.id || null,
        jobCode: formData.jobCode?.trim() || null,
        status: 'DRAFT',
        applicationFields: Object.fromEntries(
          Object.entries(formData.applicationFields || {}).map(([name, field]) => [
            name?.trim() || 'defaultField',
            { required: field.required || false }
          ])
        ),
        customQuestions: (formData.customQuestions || []).map(question => ({
          id: question.id,
          text: question.text,
          responseType: question.responseType,
          visibility: question.visibility,
          options: question.options || [],
          isOptional: question.isOptional || false
        })),
        hiringTeam: (formData.hiringTeam || []).map(member => ({
          userId: member.email?.trim() || null,
          role: member.role ? member.role.toUpperCase().replace('recruiting_admin', 'RECRUITING_ADMIN') : 'REVIEWER'
        })),
        workflowId: formData.workflowId || null,
  requiredSkills: formData.requiredSkills || [], // Changement ici
  preferredSkills: formData.preferredSkills || [], // Changement ici
  jobBoards: (formData.jobBoards || []).map(board => ({
    id: board.id || null,
    price: parseFloat(board.price) || 0
  }))
      };

      

      if (isNaN(jobData.minYearsExperience) || (jobData.displaySalary && (isNaN(jobData.salaryMin) || isNaN(jobData.salaryMax)))) {
        throw new Error('Les valeurs numériques (expérience ou salaire) sont invalides.');
      }

      const createdJob = await jobService.createJob(companyId, jobData);

      toast.success('Offre d\'emploi enregistrée en brouillon !');
      navigate(`/jobs/${createdJob.id}`);
    } catch (error) {
       
      toast.error('Erreur lors de la création de l\'offre d\'emploi: ' + (error.response?.data?.message || error.message));
    } finally {
      setIsSubmitting(false);
    }
  };

  const handlePublish = async () => {
    try {
      setIsSubmitting(true);

      if (!validateAllSteps()) {
        setIsSubmitting(false);
        return;
      }

      if (formData.description?.trim().length < 50) {
        toast.error('La description doit contenir au moins 50 caractères.');
        setIsSubmitting(false);
        return;
      }

      if (!departmentOptions || !Array.isArray(departmentOptions) || !locationOptions || !Array.isArray(locationOptions)) {
       
        toast.error('Les données des départements ou des localisations ne sont pas encore chargées. Veuillez réessayer.');
        setIsSubmitting(false);
        return;
      }

       

      // Convertir les emails en userId avec getUserIdByEmail
      const hiringTeamWithUserIds = await Promise.all(
        (formData.hiringTeam || []).map(async (member) => {
          const userId = await userService.getUserIdByEmail(member.email?.trim());
          return {
            userId: userId,
            role: member.role ? member.role.toUpperCase().replace('recruiting_admin', 'RECRUITING_ADMIN') : 'RECRUITER',
            isExternalRecruiter: false, // Ajout de la valeur par défaut
          };
        })
      );

      const jobData = {
        title: formData.title?.trim() || null,
        description: formData.description?.trim() || null,
        employmentType: formData.employmentType ? formData.employmentType.toUpperCase().replace('-', '_') : null,
        workType: formData.workType ? formData.workType.toUpperCase().replace('-', '_') : 'ON_SITE',
        minYearsExperience: parseInt(formData.minYearsExperience) || null,
        salaryMin: formData.displaySalary ? parseFloat(formData.salaryFrom) || null : null,
        salaryMax: formData.displaySalary ? parseFloat(formData.salaryTo) || null : null,
        currency: formData.currency || 'EUR',
        payPeriod: formData.payPeriod ? formData.payPeriod.toUpperCase() : 'ANNUAL',
        displaySalary: formData.displaySalary || false,
        departmentId: departmentOptions.find(d => d.name?.toLowerCase() === formData.department?.toLowerCase())?.id || null,
        locationId: locationOptions.find(l => 
          (l.city + ', ' + l.country).toLowerCase().replace(/\s/g, '') === formData.location?.toLowerCase().replace(/\s/g, '')
        )?.id || null,
        jobCode: formData.jobCode?.trim() || null,
        status: 'PUBLISHED',
        applicationFields: Object.fromEntries(
          Object.entries(formData.applicationFields || {}).map(([name, field]) => [
            name,
            { required: field.required || false },
          ])
        ),
        hiringTeam: hiringTeamWithUserIds,
        workflowId: formData.workflowId || null,
        requiredSkills: formData.requiredSkills || [],
        preferredSkills: formData.preferredSkills || [],
        jobBoards: (formData.jobBoards || []).map(board => ({
          id: board.id || null,
          price: parseFloat(board.price) || 0
        }))
      };

       

      if (isNaN(jobData.minYearsExperience) || (jobData.displaySalary && (jobData.salaryMin === null || jobData.salaryMax === null))) {
        throw new Error('Les valeurs numériques (expérience ou salaire) sont invalides.');
      }

      const createdJob = await jobService.createJob(companyId, jobData);

      toast.success('Offre d\'emploi publiée avec succès !');
      navigate(`/jobs/${createdJob.id}`);
    } catch (error) {
       
      toast.error('Erreur lors de la publication de l\'offre d\'emploi: ' + (error.response?.data?.message || error.message));
    } finally {
      setIsSubmitting(false);
    }
  };



  const nextStep = () => {
    if (currentStep < steps.length - 1) {
      // Valider l'étape actuelle avant de passer à la suivante
      if (validateStep(steps[currentStep].id)) {
        setCurrentStep(currentStep + 1);
      } else {
        toast.error('Veuillez remplir tous les champs requis avant de continuer.');
      }
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const toggleJobBoard = (boardId, price) => {
    setFormData(prev => {
      const currentBoards = [...prev.jobBoards];
      const existingIndex = currentBoards.findIndex(board => board.id === boardId);

      if (existingIndex >= 0) {
        // Supprimer si déjà présent
        currentBoards.splice(existingIndex, 1);
      } else {
        // Ajouter si pas encore présent
        currentBoards.push({
          id: boardId,
          price: price
        });
      }

      return {
        ...prev,
        jobBoards: currentBoards
      };
    });
  };

  // Rendu des étapes
  const renderStep = () => {
    switch (steps[currentStep].id) {
      case 'details':
        return (
            <div className="space-y-6">
              <div className="bg-white rounded-xl border border-slate-200 p-6">
                <h2 className="text-lg font-semibold text-slate-800 mb-4">Informations de base</h2>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">
                      Titre du poste <span className="text-red-500">*</span>
                    </label>
                    <input
                        type="text"
                        name="title"
                        value={formData.title}
                        onChange={handleChange}
                        placeholder="ex: Développeur Full Stack"
                        className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">
                      Type d'emploi <span className="text-red-500">*</span>
                    </label>
                    <select
                        name="employmentType"
                        value={formData.employmentType}
                        onChange={handleChange}
                        className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        required
                    >
                      <option value="">Sélectionner un type</option>
                      <option value="full-time">CDI</option>
                      <option value="part-time">CDD</option>
                      <option value="contract">Freelance</option>
                      <option value="internship-paid">Stage rémunéré</option>
                      <option value="internship-unpaid">Stage non rémunéré</option>
                      <option value="temporary">Intérim</option>
                      <option value="other">Autre</option>
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">
                      Mode de travail <span className="text-red-500">*</span>
                    </label>
                    <div className="grid grid-cols-3 gap-3">
                      <div
                          className={`flex flex-col items-center justify-center p-3 border ${formData.workType === 'on-site' ? 'border-blue-500 bg-blue-50' : 'border-slate-200'} rounded-lg cursor-pointer hover:bg-slate-50`}
                          onClick={() => handleWorkTypeChange('on-site')}
                      >
                        <Building className={`h-5 w-5 ${formData.workType === 'on-site' ? 'text-blue-500' : 'text-slate-500'}`} />
                        <span className={`mt-1 text-sm ${formData.workType === 'on-site' ? 'font-medium text-blue-700' : 'text-slate-700'}`}>Sur site</span>
                      </div>
                      <div
                          className={`flex flex-col items-center justify-center p-3 border ${formData.workType === 'remote' ? 'border-blue-500 bg-blue-50' : 'border-slate-200'} rounded-lg cursor-pointer hover:bg-slate-50`}
                          onClick={() => handleWorkTypeChange('remote')}
                      >
                        <Briefcase className={`h-5 w-5 ${formData.workType === 'remote' ? 'text-blue-500' : 'text-slate-500'}`} />
                        <span className={`mt-1 text-sm ${formData.workType === 'remote' ? 'font-medium text-blue-700' : 'text-slate-700'}`}>Télétravail</span>
                      </div>
                      <div
                          className={`flex flex-col items-center justify-center p-3 border ${formData.workType === 'hybrid' ? 'border-blue-500 bg-blue-50' : 'border-slate-200'} rounded-lg cursor-pointer hover:bg-slate-50`}
                          onClick={() => handleWorkTypeChange('hybrid')}
                      >
                        <Users className={`h-5 w-5 ${formData.workType === 'hybrid' ? 'text-blue-500' : 'text-slate-500'}`} />
                        <span className={`mt-1 text-sm ${formData.workType === 'hybrid' ? 'font-medium text-blue-700' : 'text-slate-700'}`}>Hybride</span>
                      </div>
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">
                      Localisation <span className="text-red-500">*</span>
                    </label>
                    <div className="relative">
                      <MapPin className="w-5 h-5 text-slate-400 absolute left-3 top-3" />
                      <select
                        name="location"
                        value={formData.location || ''}
                        onChange={handleChange}
                        className="w-full pl-10 p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        required
                      >
                        <option value="">Sélectionnez une localisation</option>
                        {locationOptions.map((loc) => (
                          <option key={loc.id} value={loc.city + ', ' + loc.country}>
                            {loc.city + ', ' + loc.country}
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>
                </div>
              </div>

              {/* Description du poste */}
              <div className="bg-white rounded-xl border border-slate-200 p-6">
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-lg font-semibold text-slate-800">Description du poste</h2>
                  <button
                      type="button"
                      onClick={generateDescription}
                      className="px-3 py-1.5 bg-blue-50 text-blue-600 rounded-lg text-sm flex items-center hover:bg-blue-100"
                  >
                    <span>Générer avec IA</span>
                  </button>
                </div>

                <textarea
                    name="description"
                    value={formData.description}
                    onChange={handleChange}
                    placeholder="Décrivez les responsabilités, exigences et avantages du poste..."
                    className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 min-h-48"
                    required
                />
              </div>

              {/* Compétences */}
              <div className="bg-white rounded-xl border border-slate-200 p-6">
                <h2 className="text-lg font-semibold text-slate-800 mb-4">Compétences</h2>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">
                      Compétences requises
                    </label>
                    <div className="flex gap-2">
                      <input
                          type="text"
                          value={newSkill}
                          onChange={(e) => setNewSkill(e.target.value)}
                          placeholder="ex: JavaScript"
                          className="flex-1 p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addRequiredSkill())}
                      />
                      <button
                          type="button"
                          onClick={addRequiredSkill}
                          className="p-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                      >
                        <PlusCircle className="w-5 h-5" />
                      </button>
                    </div>

                    <div className="flex flex-wrap gap-2 mt-3">
                      {formData.requiredSkills.map((skill, index) => (
                          <div key={index} className="bg-blue-50 text-blue-700 px-3 py-1 rounded-full flex items-center">
                            <span>{skill}</span>
                            <button
                                type="button"
                                onClick={() => removeRequiredSkill(index)}
                                className="ml-2 text-blue-600 hover:text-blue-800"
                            >
                              ×
                            </button>
                          </div>
                      ))}
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">
                      Compétences souhaitées
                    </label>
                    <div className="flex gap-2">
                      <input
                          type="text"
                          value={newPreferredSkill}
                          onChange={(e) => setNewPreferredSkill(e.target.value)}
                          placeholder="ex: React"
                          className="flex-1 p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addPreferredSkill())}
                      />
                      <button
                          type="button"
                          onClick={addPreferredSkill}
                          className="p-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                      >
                        <PlusCircle className="w-5 h-5" />
                      </button>
                    </div>

                    <div className="flex flex-wrap gap-2 mt-3">
                      {formData.preferredSkills.map((skill, index) => (
                          <div key={index} className="bg-indigo-50 text-indigo-700 px-3 py-1 rounded-full flex items-center">
                            <span>{skill}</span>
                            <button
                                type="button"
                                onClick={() => removePreferredSkill(index)}
                                className="ml-2 text-indigo-600 hover:text-indigo-800"
                            >
                              ×
                            </button>
                          </div>
                      ))}
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">
                      Expérience minimale (années)
                    </label>
                    <input
                        type="number"
                        name="minYearsExperience"
                        value={formData.minYearsExperience}
                        onChange={handleChange}
                        placeholder="ex: 3"
                        min="0"
                        max="20"
                        className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>
              </div>

              {/* Salaire et avantages */}
              <div className="bg-white rounded-xl border border-slate-200 p-6">
                <h2 className="text-lg font-semibold text-slate-800 mb-4">Rémunération</h2>

                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-slate-700 mb-1">
                        Salaire minimum
                      </label>
                      <div className="relative">
                        <DollarSign className="w-5 h-5 text-slate-400 absolute left-3 top-3" />
                        <input
                            type="text"
                            name="salaryFrom"
                            value={formData.salaryFrom}
                            onChange={handleChange}
                            placeholder="ex: 45000"
                            className="w-full pl-10 p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        />
                      </div>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-slate-700 mb-1">
                        Salaire maximum
                      </label>
                      <div className="relative">
                        <DollarSign className="w-5 h-5 text-slate-400 absolute left-3 top-3" />
                        <input
                            type="text"
                            name="salaryTo"
                            value={formData.salaryTo}
                            onChange={handleChange}
                            placeholder="ex: 65000"
                            className="w-full pl-10 p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        />
                      </div>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-slate-700 mb-1">
                        Devise
                      </label>
                      <select
                          name="currency"
                          value={formData.currency}
                          onChange={handleChange}
                          className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      >
                        <option value="EUR">EUR (€)</option>
                        <option value="USD">USD ($)</option>
                        <option value="GBP">GBP (£)</option>
                        <option value="CAD">CAD ($)</option>
                        <option value="CHF">CHF</option>
                      </select>
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-slate-700 mb-1">
                        Période
                      </label>
                      <select
                          name="payPeriod"
                          value={formData.payPeriod}
                          onChange={handleChange}
                          className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      >
                        <option value="annual">Annuel</option>
                        <option value="monthly">Mensuel</option>
                        <option value="hourly">Horaire</option>
                      </select>
                    </div>
                  </div>

                  <div>
                    <label className="flex items-center">
                      <input
                          type="checkbox"
                          name="displaySalary"
                          checked={formData.displaySalary}
                          onChange={handleChange}
                          className="h-4 w-4 text-blue-600 rounded focus:ring-blue-500"
                      />
                      <span className="ml-2 text-sm text-slate-700">Afficher le salaire sur l'offre d'emploi</span>
                    </label>
                  </div>
                </div>
              </div>

              {/* Détails supplémentaires */}
              <div className="bg-white rounded-xl border border-slate-200 p-6">
                <h2 className="text-lg font-semibold text-slate-800 mb-4">Détails supplémentaires</h2>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">
                      Département
                    </label>
                    <select
                        name="department"
                        value={formData.department}
                        onChange={handleChange}
                        className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="">Sélectionner un département</option>
                      {departmentOptions.map(dept => (
                          <option key={dept.id} value={dept.name}>{dept.name}</option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">
                      Code du poste
                    </label>
                    <input
                        type="text"
                        name="jobCode"
                        value={formData.jobCode}
                        onChange={handleChange}
                        placeholder="ex: DEV-2023-42"
                        className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>
              </div>
            </div>
        );

      case 'application':
        return (
            <div className="space-y-6">
              <div className="bg-white rounded-xl border border-slate-200 p-6">
                <h2 className="text-lg font-semibold text-slate-800 mb-4">Informations requises</h2>
                <p className="text-sm text-slate-500 mb-4">
                  Configurez les informations que les candidats devront obligatoirement fournir.
                </p>

                <div className="space-y-4">
                  <div className="flex justify-between items-center p-3 border-b border-slate-100">
                    <span className="font-medium">Nom</span>
                    <div className="px-3 py-1.5 bg-blue-100 text-blue-700 rounded-lg text-sm">
                      Obligatoire
                    </div>
                  </div>

                  <div className="flex justify-between items-center p-3 border-b border-slate-100">
                    <span className="font-medium">Email</span>
                    <div className="px-3 py-1.5 bg-blue-100 text-blue-700 rounded-lg text-sm">
                      Obligatoire
                    </div>
                  </div>

                  <div className="flex justify-between items-center p-3 border-b border-slate-100">
                    <span className="font-medium">Numéro de téléphone</span>
                    <button
                        onClick={() => handleToggleRequiredField('phone')}
                        className={`px-3 py-1.5 rounded-lg text-sm ${
                            formData.applicationFields.phone.required
                                ? 'bg-blue-100 text-blue-700'
                                : 'bg-slate-100 text-slate-700'
                        }`}
                    >
                      {formData.applicationFields.phone.required ? 'Obligatoire' : 'Optionnel'}
                    </button>
                  </div>

                  <div className="flex justify-between items-center p-3 border-b border-slate-100">
                    <span className="font-medium">CV / Résumé</span>
                    <div className="px-3 py-1.5 bg-blue-100 text-blue-700 rounded-lg text-sm">
                      Obligatoire
                    </div>
                  </div>

                  <div className="flex justify-between items-center p-3 border-b border-slate-100">
                    <span className="font-medium">Lettre de motivation</span>
                    <button
                        onClick={() => handleToggleRequiredField('coverLetter')}
                        className={`px-3 py-1.5 rounded-lg text-sm ${
                            formData.applicationFields.coverLetter.required
                                ? 'bg-blue-100 text-blue-700'
                                : 'bg-slate-100 text-slate-700'
                        }`}
                    >
                      {formData.applicationFields.coverLetter.required ? 'Obligatoire' : 'Optionnel'}
                    </button>
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-xl border border-slate-200 p-6">
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-lg font-semibold text-slate-800">Questions personnalisées</h2>
                  <button
                      type="button"
                      onClick={handleAddQuestion}
                      className="px-3 py-1.5 bg-blue-50 text-blue-600 rounded-lg text-sm flex items-center hover:bg-blue-100"
                  >
                    <PlusCircle className="w-4 h-4 mr-1" />
                    <span>Ajouter une question</span>
                  </button>
                </div>

                <p className="text-sm text-slate-500 mb-4">
                  Les questions personnalisées sont un excellent moyen d'en savoir plus sur les candidats dès le départ. Utilisez-en peu pour ne pas alourdir le processus.
                </p>

                {formData.customQuestions.length > 0 ? (
                    <div className="space-y-3">
                      {formData.customQuestions.map((question, index) => (
                          <div key={index} className="flex justify-between items-center p-3 bg-slate-50 rounded-lg">
                            <div>
                              <p className="font-medium text-slate-800">{question.text}</p>
                              <div className="flex items-center mt-1 text-xs text-slate-500">
                          <span className="px-2 py-0.5 bg-blue-50 text-blue-700 rounded-full mr-2">
                            {question.responseType === 'short_text' ? 'Texte court' :
                                question.responseType === 'paragraph' ? 'Paragraphe' :
                                    question.responseType === 'yes_no' ? 'Oui/Non' :
                                        question.responseType === 'multiple_choice' ? 'Choix multiple' :
                                            'Autre'}
                          </span>
                                <span className={`px-2 py-0.5 rounded-full ${
                                    question.visibility === 'public'
                                        ? 'bg-green-50 text-green-700'
                                        : 'bg-amber-50 text-amber-700'
                                }`}>
                            {question.visibility === 'public' ? 'Visible par tous' : 'Visible par le recruteur'}
                          </span>
                              </div>
                            </div>
                            <div className="flex items-center">
                              <button
                                  onClick={() => toggleQuestionRequired(index, !question.isOptional)}
                                  className={`px-2 py-1 text-xs rounded-lg mr-2 ${
                                      !question.isOptional
                                          ? 'bg-blue-100 text-blue-700'
                                          : 'bg-slate-100 text-slate-700'
                                  }`}
                              >
                                {!question.isOptional ? 'Obligatoire' : 'Optionnelle'}
                              </button>
                              <button
                                  onClick={() => removeQuestion(index)}
                                  className="p-1 text-slate-400 hover:text-red-500 rounded-full"
                              >
                                <X className="w-4 h-4" />
                              </button>
                            </div>
                          </div>
                      ))}
                    </div>
                ) : (
                    <div className="text-center py-6 bg-slate-50 rounded-lg">
                      <p className="text-slate-500 mb-2">Aucune question personnalisée ajoutée</p>
                      <p className="text-sm text-slate-400">Ajoutez des questions pour en savoir plus sur vos candidats</p>
                    </div>
                )}

                <div className="mt-4">
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Ajouter depuis les questions existantes
                  </label>
                  <select
                      className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      onChange={(e) => handleSelectPredefinedQuestion(e.target.value)}
                      value=""
                  >
                    <option value="">Sélectionner une question...</option>
                    {availableQuestions.map(question => (
                        <option key={question.id} value={question.id}>{question.text}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>
        );

      case 'team':
        return (
            <div className="space-y-6">
              <div className="bg-white rounded-xl border border-slate-200 p-6">
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-lg font-semibold text-slate-800">Équipe de recrutement</h2>
                  <button
                      type="button"
                      onClick={handleAddTeamMember}
                      className="px-3 py-1.5 bg-blue-50 text-blue-600 rounded-lg text-sm flex items-center hover:bg-blue-100"
                  >
                    <PlusCircle className="w-4 h-4 mr-1" />
                    <span>Ajouter un membre</span>
                  </button>
                </div>

                <p className="text-sm text-slate-500 mb-4">
                  Les membres de l'équipe de recrutement peuvent accéder à cette offre et participer au processus de sélection des candidats.
                </p>

                {formData.hiringTeam.length > 0 ? (
                    <div className="space-y-3">
                      {formData.hiringTeam.map((member, index) => (
                          <div key={index} className="flex justify-between items-center p-3 bg-slate-50 rounded-lg">
                            <div className="flex items-center">
                              <div className="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 font-medium">
                                {member.name.charAt(0).toUpperCase()}
                              </div>
                              <div className="ml-3">
                                <p className="font-medium text-slate-800">{member.name}</p>
                                <p className="text-xs text-slate-500">{member.email}</p>
                              </div>
                            </div>
                            <div className="flex items-center">
                        <span className="px-2 py-1 text-xs rounded-lg bg-blue-50 text-blue-700 mr-2">
                          {member.role === 'recruiting_admin' ? 'Admin Recrutement' :
                              member.role === 'hiring_manager' ? 'Responsable' :
                                  'Évaluateur'}
                        </span>
                              <button
                                  onClick={() => removeTeamMember(index)}
                                  className="p-1 text-slate-400 hover:text-red-500 rounded-full"
                              >
                                <X className="w-4 h-4" />
                              </button>
                            </div>
                          </div>
                      ))}
                    </div>
                ) : (
                    <div className="text-center py-6 bg-slate-50 rounded-lg">
                      <p className="text-slate-500 mb-2">Aucun membre dans l'équipe de recrutement</p>
                      <p className="text-sm text-slate-400">Ajoutez des membres pour collaborer sur ce recrutement</p>
                    </div>
                )}
              </div>

              <div className="bg-white rounded-xl border border-slate-200 p-6">
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-lg font-semibold text-slate-800">Recruteurs externes</h2>
                  <button
                      type="button"
                      className="px-3 py-1.5 bg-blue-50 text-blue-600 rounded-lg text-sm flex items-center hover:bg-blue-100"
                  >
                    <PlusCircle className="w-4 h-4 mr-1" />
                    <span>Ajouter un recruteur</span>
                  </button>
                </div>

                <p className="text-sm text-slate-500 mb-4">
                  Les recruteurs externes peuvent vous aider à trouver des candidats pour cette offre.
                </p>

                <div className="text-center py-6 bg-slate-50 rounded-lg">
                  <p className="text-slate-500 mb-2">Aucun recruteur externe ajouté</p>
                  <p className="text-sm text-slate-400">Ajoutez des recruteurs externes pour accélérer votre processus</p>
                </div>
              </div>
            </div>
        );

      case 'workflow':
        return (
            <div className="space-y-6">
              <div className="bg-white rounded-xl border border-slate-200 p-6">
                <h2 className="text-lg font-semibold text-slate-800 mb-4">Processus de recrutement</h2>

                <div className="mb-4">
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Sélectionner un workflow
                  </label>
                  <select
                      className="w-full p-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      value={formData.workflowId}
                      onChange={(e) => handleWorkflowChange(e.target.value)}
                  >
                    {availableWorkflows.map(workflow => (
                        <option key={workflow.id} value={workflow.id}>{workflow.name}</option>
                    ))}
                  </select>
                </div>

                <h3 className="font-medium text-slate-700 mb-2">Étapes du processus:</h3>
                <div className="space-y-4">
                  {formData.workflowStages.map((stage) => (
                      <div key={stage.id} className="border border-slate-200 rounded-lg p-4">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center">
                            <div className="w-8 h-8 rounded-lg bg-blue-100 flex items-center justify-center text-blue-600 mr-3">
                              <span className="text-sm font-medium">{stage.order + 1}</span>
                            </div>
                            <div>
                              <h4 className="font-medium text-slate-800">{stage.name}</h4>
                              <p className="text-xs text-slate-500 mt-1">
                                Type: {stage.type === 'lead' ? 'Lead' :
                                  stage.type === 'applied' ? 'Candidat' :
                                      stage.type === 'review' ? 'Évaluation' :
                                          stage.type === 'interview' ? 'Entretien' :
                                              stage.type === 'offer' ? 'Offre' :
                                                  stage.type === 'hired' ? 'Embauché' :
                                                      stage.type === 'rejected' ? 'Rejeté' : 'Autre'}
                              </p>
                            </div>
                          </div>
                          {stage.dueDays && (
                              <div className="px-2 py-1 bg-blue-50 text-blue-700 rounded text-xs">
                                Délai: {stage.dueDays} jours
                              </div>
                          )}
                        </div>
                      </div>
                  ))}
                </div>
              </div>
            </div>
        );

      case 'advertise':
        return (
            <div className="space-y-6">
              <div className="bg-white rounded-xl border border-slate-200 p-6">
                <h2 className="text-lg font-semibold text-slate-800 mb-4">Publication de l'offre</h2>

                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6 flex items-start">
                  <Info className="text-blue-500 w-5 h-5 mt-0.5 mr-2 flex-shrink-0" />
                  <div>
                    <p className="text-blue-700 text-sm">Votre entreprise est en cours de vérification.</p>
                    <p className="text-blue-600 text-xs mt-1">Une fois vérifiée, vous pourrez distribuer vos offres d'emploi à nos partenaires externes.</p>
                  </div>
                </div>

                <div className="mb-4">
                  <label className="block text-sm font-medium text-slate-700 mb-2">
                    Statut de publication
                  </label>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                    <div
                        className={`border ${formData.jobPostingStatus === 'published' ? 'border-green-500 bg-green-50' : 'border-slate-200'} rounded-lg p-3 cursor-pointer hover:bg-slate-50`}
                        onClick={() => setFormData(prev => ({ ...prev, jobPostingStatus: 'published' }))}
                    >
                      <div className="flex items-center">
                        <div className={`w-4 h-4 rounded-full ${formData.jobPostingStatus === 'published' ? 'bg-green-500' : 'border border-slate-300'} mr-2 flex-shrink-0`}>
                          {formData.jobPostingStatus === 'published' && (
                              <Check className="text-white w-3 h-3" />
                          )}
                        </div>
                        <span className="font-medium">Publier</span>
                      </div>
                      <p className="text-xs text-slate-500 mt-1 ml-6">L'offre sera visible sur votre site Carrières et les sites d'emploi.</p>
                    </div>

                    <div
                        className={`border ${formData.jobPostingStatus === 'internal' ? 'border-blue-500 bg-blue-50' : 'border-slate-200'} rounded-lg p-3 cursor-pointer hover:bg-slate-50`}
                        onClick={() => setFormData(prev => ({ ...prev, jobPostingStatus: 'internal' }))}
                    >
                      <div className="flex items-center">
                        <div className={`w-4 h-4 rounded-full ${formData.jobPostingStatus === 'internal' ? 'bg-blue-500' : 'border border-slate-300'} mr-2 flex-shrink-0`}>
                          {formData.jobPostingStatus === 'internal' && (
                              <Check className="text-white w-3 h-3" />
                          )}
                        </div>
                        <span className="font-medium">Interne uniquement</span>
                      </div>
                      <p className="text-xs text-slate-500 mt-1 ml-6">Visible uniquement pour les membres de votre organisation.</p>
                    </div>

                    <div
                        className={`border ${formData.jobPostingStatus === 'confidential' ? 'border-amber-500 bg-amber-50' : 'border-slate-200'} rounded-lg p-3 cursor-pointer hover:bg-slate-50`}
                        onClick={() => setFormData(prev => ({ ...prev, jobPostingStatus: 'confidential' }))}
                    >
                      <div className="flex items-center">
                        <div className={`w-4 h-4 rounded-full ${formData.jobPostingStatus === 'confidential' ? 'bg-amber-500' : 'border border-slate-300'} mr-2 flex-shrink-0`}>
                          {formData.jobPostingStatus === 'confidential' && (
                              <Check className="text-white w-3 h-3" />
                          )}
                        </div>
                        <span className="font-medium">Confidentiel</span>
                      </div>
                      <p className="text-xs text-slate-500 mt-1 ml-6">Visible uniquement pour les administrateurs et l'équipe de recrutement.</p>
                    </div>
                  </div>
                </div>

                <h3 className="font-medium text-slate-700 mb-2">Sites d'emploi recommandés</h3>
                <p className="text-sm text-slate-500 mb-4">
                  Diffuser votre offre sur les sites d'emploi pour atteindre plus de candidats qualifiés.
                </p>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {/* Sites d'emploi */}
                  <div className="border border-slate-200 rounded-lg p-4 text-center">
                    <img src="/api/placeholder/120/40" alt="Monster" className="h-10 mx-auto mb-2" />
                    <p className="text-slate-700 font-medium">Monster</p>
                    <p className="text-slate-500 text-sm">€199 pour 30 jours</p>
                    <button
                        type="button"
                        className={`mt-2 px-3 py-1.5 rounded-lg text-sm ${
                            formData.jobBoards.some(b => b.id === 'monster')
                                ? 'bg-green-500 text-white'
                                : 'border border-green-500 text-green-600'
                        }`}
                        onClick={() => toggleJobBoard('monster', 199)}
                    >
                      {formData.jobBoards.some(b => b.id === 'monster') ? 'Ajouté' : 'Ajouter'}
                    </button>
                  </div>

                  <div className="border border-slate-200 rounded-lg p-4 text-center">
                    <img src="/api/placeholder/120/40" alt="Indeed" className="h-10 mx-auto mb-2" />
                    <p className="text-slate-700 font-medium">Indeed</p>
                    <p className="text-slate-500 text-sm">€149 pour 30 jours</p>
                    <button
                        type="button"
                        className={`mt-2 px-3 py-1.5 rounded-lg text-sm ${
                            formData.jobBoards.some(b => b.id === 'indeed')
                                ? 'bg-green-500 text-white'
                                : 'border border-green-500 text-green-600'
                        }`}
                        onClick={() => toggleJobBoard('indeed', 149)}
                    >
                      {formData.jobBoards.some(b => b.id === 'indeed') ? 'Ajouté' : 'Ajouter'}
                    </button>
                  </div>

                  <div className="border border-slate-200 rounded-lg p-4 text-center">
                    <img src="/api/placeholder/120/40" alt="LinkedIn" className="h-10 mx-auto mb-2" />
                    <p className="text-slate-700 font-medium">LinkedIn</p>
                    <p className="text-slate-500 text-sm">€299 pour 30 jours</p>
                    <button
                        type="button"
                        className={`mt-2 px-3 py-1.5 rounded-lg text-sm ${
                            formData.jobBoards.some(b => b.id === 'linkedin')
                                ? 'bg-green-500 text-white'
                                : 'border border-green-500 text-green-600'
                        }`}
                        onClick={() => toggleJobBoard('linkedin', 299)}
                    >
                      {formData.jobBoards.some(b => b.id === 'linkedin') ? 'Ajouté' : 'Ajouter'}
                    </button>
                  </div>
                </div>

                {formData.jobBoards.length > 0 && (
                    <div className="mt-6 p-4 bg-slate-50 rounded-lg">
                      <h4 className="font-medium text-slate-800 mb-2">Votre panier</h4>
                      <div className="space-y-2">
                        {formData.jobBoards.map(board => (
                            <div key={board.id} className="flex justify-between items-center">
                              <span className="text-sm">{board.id.charAt(0).toUpperCase() + board.id.slice(1)}</span>
                              <span className="font-medium">€{board.price}</span>
                            </div>
                        ))}
                        <div className="border-t border-slate-200 pt-2 mt-2 flex justify-between items-center font-medium">
                          <span>Total:</span>
                          <span>€{formData.jobBoards.reduce((sum, board) => sum + board.price, 0)}</span>
                        </div>
                      </div>
                    </div>
                )}
              </div>
            </div>
        );

      default:
        return null;
    }
  };

  // Modal pour l'ajout d'une question personnalisée
  const renderAddQuestionModal = () => {
    if (!showAddQuestionModal) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-slate-800">Ajouter une question</h3>
              <button
                  type="button"
                  onClick={() => setShowAddQuestionModal(false)}
                  className="text-slate-400 hover:text-slate-600"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-1">
                  Question <span className="text-red-500">*</span>
                </label>
                <input
                    type="text"
                    name="text"
                    value={newQuestion.text}
                    onChange={handleQuestionChange}
                    placeholder="Votre question"
                    className="w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-1">
                  Type de réponse <span className="text-red-500">*</span>
                </label>
                <select
                    name="responseType"
                    value={newQuestion.responseType}
                    onChange={handleQuestionChange}
                    className="w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    required
                >
                  <option value="short_text">Réponse courte</option>
                  <option value="paragraph">Paragraphe</option>
                  <option value="yes_no">Oui ou Non</option>
                  <option value="dropdown">Liste déroulante</option>
                  <option value="multiple_choice">Choix multiple</option>
                  <option value="number">Nombre</option>
                  <option value="file">Fichier</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-1">
                  Visibilité <span className="text-red-500">*</span>
                </label>
                <div className="space-y-2">
                  <div className="flex items-center">
                    <input
                        type="radio"
                        id="visibility-public"
                        name="visibility"
                        value="public"
                        checked={newQuestion.visibility === 'public'}
                        onChange={handleQuestionChange}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-slate-300"
                    />
                    <label htmlFor="visibility-public" className="ml-2 text-sm text-slate-700">
                      Visible pour tous sur l'offre
                    </label>
                  </div>
                  <div className="flex items-center">
                    <input
                        type="radio"
                        id="visibility-private"
                        name="visibility"
                        value="private"
                        checked={newQuestion.visibility === 'private'}
                        onChange={handleQuestionChange}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-slate-300"
                    />
                    <label htmlFor="visibility-private" className="ml-2 text-sm text-slate-700">
                      Visible uniquement pour les responsables du recrutement
                    </label>
                  </div>
                </div>
              </div>
            </div>

            <div className="mt-6 flex justify-end">
              <button
                  type="button"
                  onClick={() => setShowAddQuestionModal(false)}
                  className="px-4 py-2 mr-2 text-slate-700 border border-slate-300 rounded-md hover:bg-slate-50"
              >
                Annuler
              </button>
              <button
                  type="button"
                  onClick={saveQuestion}
                  className="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600"
              >
                Ajouter
              </button>
            </div>
          </div>
        </div>
    );
  };

  // Modal pour l'ajout d'un membre d'équipe
  const renderAddTeamMemberModal = () => {
    if (!showTeamMemberModal) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-slate-800">Ajouter un membre</h3>
              <button
                  type="button"
                  onClick={() => setShowTeamMemberModal(false)}
                  className="text-slate-400 hover:text-slate-600"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-slate-700 mb-1">
                  Email du membre <span className="text-red-500">*</span>
                </label>
                <input
                    type="email"
                    name="email"
                    value={newTeamMember.email}
                    onChange={handleTeamMemberChange}
                    placeholder="email@entreprise.fr"
                    className="w-full p-2 border border-slate-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-slate-700 mb-2">
                  Rôle du membre
                </label>

                <div className="space-y-3">
                  {teamRoles.map(role => (
                      <div
                          key={role.id}
                          className={`border rounded-lg p-3 cursor-pointer ${
                              newTeamMember.role === role.id
                                  ? 'border-blue-500 bg-blue-50'
                                  : 'border-slate-200 hover:bg-slate-50'
                          }`}
                          onClick={() => setNewTeamMember(prev => ({ ...prev, role: role.id }))}
                      >
                        <div className="flex items-center">
                          <div className={`w-4 h-4 rounded-full ${
                              newTeamMember.role === role.id
                                  ? 'bg-blue-500'
                                  : 'border border-slate-300'
                          } mr-2`}>
                            {newTeamMember.role === role.id && (
                                <Check className="w-3 h-3 text-white" />
                            )}
                          </div>
                          <span className="font-medium">{role.name}</span>
                        </div>
                        <p className="text-xs text-slate-500 mt-1 ml-6">{role.description}</p>
                      </div>
                  ))}
                </div>
              </div>
            </div>

            <div className="mt-6 flex justify-end">
              <button
                  type="button"
                  onClick={() => setShowTeamMemberModal(false)}
                  className="px-4 py-2 mr-2 text-slate-700 border border-slate-300 rounded-md hover:bg-slate-50"
              >
                Annuler
              </button>
              <button
                  type="button"
                  onClick={saveTeamMember}
                  className="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600"
              >
                Ajouter
              </button>
            </div>
          </div>
        </div>
    );
  };

  return (
      <div className="bg-slate-50 min-h-screen pb-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-8">
          <div className="flex justify-between items-center mb-8">
            <h1 className="text-2xl font-bold text-slate-800">Créer une offre d'emploi</h1>
            <div className="flex space-x-3">
              <button
                  onClick={handleSaveAsDraft}
                  disabled={isSubmitting}
                  className="px-4 py-2 bg-white border border-slate-300 text-slate-700 rounded-lg shadow-sm hover:bg-slate-50 flex items-center"
              >
                <Save className="w-4 h-4 mr-2" />
                <span>Enregistrer comme brouillon</span>
              </button>

              {currentStep === steps.length - 1 ? (
                  <button
                      onClick={handlePublish}
                      disabled={isSubmitting}
                      className="px-4 py-2 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg shadow-sm hover:from-blue-700 hover:to-indigo-700 flex items-center"
                  >
                    <PlusCircle className="w-4 h-4 mr-2" />
                    <span>{isSubmitting ? 'Publication...' : 'Publier l\'offre'}</span>
                  </button>
              ) : (
                  <button
                      onClick={nextStep}
                      className="px-4 py-2 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg shadow-sm hover:from-blue-700 hover:to-indigo-700 flex items-center"
                  >
                    <span>Continuer</span>
                  </button>
              )}
            </div>
          </div>

          {/* Stepper */}
          <div className="mb-8">
            <div className="flex items-center justify-between">
              {steps.map((step, i) => (
                  <div
                      key={step.id}
                      className={`flex flex-col items-center ${i < steps.length - 1 ? 'flex-1' : ''}`}
                  >
                    <div className="flex items-center">
                      <button
                          onClick={() => setCurrentStep(i)}
                          className={`w-10 h-10 rounded-full flex items-center justify-center font-medium ${
                              i < currentStep
                                  ? 'bg-green-100 text-green-800 border-2 border-green-500'
                                  : i === currentStep
                                      ? 'bg-blue-100 text-blue-800 border-2 border-blue-500'
                                      : 'bg-slate-100 text-slate-500'
                          }`}
                      >
                        {i < currentStep ? <Check className="w-5 h-5" /> : i + 1}
                      </button>
                      {i < steps.length - 1 && (
                          <div
                              className={`h-1 flex-1 w-full mx-2 ${
                                  i < currentStep ? 'bg-green-500' : 'bg-slate-200'
                              }`}
                          ></div>
                      )}
                    </div>
                    <span className={`text-xs mt-2 font-medium ${
                        i <= currentStep ? 'text-slate-700' : 'text-slate-400'
                    }`}>
                  {step.title}
                </span>
                  </div>
              ))}
            </div>
          </div>

          {/* Main Form */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div className="lg:col-span-2">
              {renderStep()}
            </div>
            <div className="space-y-6">
              {/* Job Details Card */}
              <div className="bg-white rounded-xl border border-slate-200 p-6">
                <h2 className="text-lg font-semibold text-slate-800 mb-3">
                  <span className="mr-2">📝</span> Détails de l'offre
                </h2>
                <p className="text-sm text-slate-500">
                  Les détails de l'offre sont votre guide pour les responsabilités, qualifications, lieu et avantages du poste.
                </p>
              </div>

              {/* Application Form Card */}
              <div className="bg-white rounded-xl border border-slate-200 p-6">
                <h2 className="text-lg font-semibold text-slate-800 mb-3">
                  <span className="mr-2">📋</span> Formulaire de candidature
                </h2>
                <p className="text-sm text-slate-500">
                  Recueillez toutes les informations essentielles de vos futurs employés.
                </p>
              </div>

              {/* Workflow Card */}
              <div className="bg-white rounded-xl border border-slate-200 p-6">
                <h2 className="text-lg font-semibold text-slate-800 mb-3">
                  <span className="mr-2">🔄</span> Processus de recrutement
                </h2>
                <p className="text-sm text-slate-500">
                  Définissez les étapes et phases que les candidats traverseront, de la candidature à l'offre.
                </p>
              </div>

              {/* Hiring Team Card */}
              <div className="bg-white rounded-xl border border-slate-200 p-6">
                <h2 className="text-lg font-semibold text-slate-800 mb-3">
                  <span className="mr-2">👥</span> Équipe de recrutement
                </h2>
                <p className="text-sm text-slate-500">
                  Constituez l'équipe qui vous aidera à évaluer et embaucher votre prochain collaborateur.
                </p>
              </div>

              {/* Job Advertising Card */}
              <div className="bg-white rounded-xl border border-slate-200 p-6">
                <h2 className="text-lg font-semibold text-slate-800 mb-3">
                  <span className="mr-2">📢</span> Diffusion de l'offre
                </h2>
                <p className="text-sm text-slate-500">
                  Attirez les meilleurs talents en utilisant les sites d'emploi et réseaux sociaux adaptés.
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Modals */}
        {renderAddQuestionModal()}
        {renderAddTeamMemberModal()}
      </div>
  );
};

export default JobCreate;
=== FIN ===

=== Contenu de frontend\src\pages\jobs\JobDetail.jsx ===
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { ChevronLeft, Edit, Trash2, UserPlus, User, MapPin, BriefcaseBusiness, Calendar } from 'lucide-react';
import { jobService } from '../../services/api';
import { toast } from 'react-toastify';
import { useAuth } from '../../contexts/AuthContext';
import LoadingSpinner from '../../components/common/LoadingSpinner';

const JobDetail = () => {
  const { id } = useParams();
  const { companyId } = useAuth();
  const navigate = useNavigate();
  const [job, setJob] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [deleteConfirm, setDeleteConfirm] = useState(false);

  useEffect(() => {
    if (!companyId || !id) {
      
      setError('Données manquantes pour charger l\'offre d\'emploi.');
      setLoading(false);
      return;
    }
    fetchJobDetail();
  }, [id, companyId, navigate]);

  const fetchJobDetail = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const data = await jobService.getJobById(companyId, id);
      
      setJob(data);
    } catch (error) {
      
      setError(`Erreur lors du chargement des détails de l'offre: ${error.response?.data?.message || error.message}`);
      toast.error(`Erreur lors du chargement des détails de l'offre: ${error.response?.data?.message || error.message}`);
      navigate('/jobs');
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async () => {
    try {
      await jobService.deleteJob(companyId, id);
      toast.success('Offre supprimée avec succès');
      navigate('/jobs');
    } catch (error) {
       
      toast.error('Erreur lors de la suppression de l\'offre');
    }
  };

  if (loading) {
    return <LoadingSpinner />;
  }

  if (!job) {
    return (
      <div className="text-center py-12">
        <h2 className="text-2xl font-semibold text-slate-800 mb-2">Offre non trouvée</h2>
        <p className="text-slate-600 mb-6">L'offre d'emploi que vous recherchez n'existe pas ou a été supprimée.</p>
        <Link to="/jobs" className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
          Retour aux offres
        </Link>
      </div>
    );
  }

  return (
    <div className="p-6">
      <div className="flex items-center mb-6">
        <button
          className="p-2 rounded-full hover:bg-slate-100 mr-2"
          onClick={() => navigate(-1)}
        >
          <ChevronLeft className="w-5 h-5 text-slate-600" />
        </button>
        <h1 className="text-2xl font-bold text-slate-800">Détails de l'offre</h1>
      </div>

      {error && (
        <div className="mb-4 p-2 bg-red-50 text-red-600 rounded-md">{error}</div>
      )}

      <div className="mb-6 flex justify-between items-center">
        <div>
          <h2 className="text-xl font-bold text-slate-800">{job.title}</h2>
          <div className="flex items-center mt-1">
            <MapPin className="h-4 w-4 text-slate-500 mr-1" />
            <span className="text-slate-600 mr-4">{job.location ? `${job.location.city}, ${job.location.country}` : 'Non précisé'}</span>
            <BriefcaseBusiness className="h-4 w-4 text-slate-500 mr-1" />
            <span className="text-slate-600">{job.employmentType || 'Non précisé'}</span>
          </div>
        </div>

        <div className="flex space-x-3">
          <Link to={`/jobs/${id}/edit`} className="flex items-center px-3 py-2 bg-white border border-slate-200 rounded-lg shadow-sm hover:bg-slate-50 text-slate-700">
            <Edit className="h-4 w-4 mr-2" />
            <span className="text-sm font-medium">Modifier</span>
          </Link>

          {!deleteConfirm ? (
            <button
              onClick={() => setDeleteConfirm(true)}
              className="flex items-center px-3 py-2 bg-white border border-slate-200 rounded-lg shadow-sm hover:bg-red-50 hover:border-red-200 hover:text-red-600"
            >
              <Trash2 className="h-4 w-4 mr-2" />
              <span className="text-sm font-medium">Supprimer</span>
            </button>
          ) : (
            <div className="flex items-center space-x-2">
              <button
                onClick={handleDelete}
                className="px-3 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 text-sm font-medium"
              >
                Confirmer
              </button>
              <button
                onClick={() => setDeleteConfirm(false)}
                className="px-3 py-2 bg-slate-100 text-slate-700 rounded-lg hover:bg-slate-200 text-sm font-medium"
              >
                Annuler
              </button>
            </div>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          <div className="bg-white rounded-xl shadow-sm mb-6 overflow-hidden">
            <div className="p-6 pb-3 border-b border-slate-100">
              <h3 className="text-lg font-semibold text-slate-800">Description du poste</h3>
            </div>
            <div className="p-6">
              <div className="prose max-w-none" dangerouslySetInnerHTML={{ __html: job.description.replace(/\n/g, '<br>') }}></div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm mb-6 overflow-hidden">
            <div className="p-6 pb-3 border-b border-slate-100">
              <h3 className="text-lg font-semibold text-slate-800">Compétences requises</h3>
            </div>
            <div className="p-6">
              <div className="flex flex-wrap gap-2 mb-4">
                {job.requiredSkills?.map((skill, index) => (
                  <span key={index} className="px-3 py-1 rounded-full text-sm font-medium bg-blue-50 text-blue-700">
                    {skill}
                  </span>
                ))}
              </div>

              <h4 className="text-md font-medium text-slate-700 mt-6 mb-3">Compétences souhaitées</h4>
              <div className="flex flex-wrap gap-2">
                {job.preferredSkills?.length > 0 ? (
                  job.preferredSkills.map((skill, index) => (
                    <span key={index} className="px-3 py-1 rounded-full text-sm font-medium bg-slate-50 text-slate-700">
                      {skill}
                    </span>
                  ))
                ) : (
                  <p className="text-slate-500">Aucune compétence souhaitée spécifiée</p>
                )}
              </div>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm overflow-hidden">
            <div className="p-6 pb-3 border-b border-slate-100">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-semibold text-slate-800">Candidatures récentes</h3>
                <Link to={`/jobs/${id}/applications`} className="text-sm text-blue-600 font-medium">Voir toutes</Link>
              </div>
            </div>

            <div className="p-6">
              {job.recentApplications?.length > 0 ? (
                <div className="space-y-4">
                  {job.recentApplications.map((application) => (
                    <div key={application.id} className="flex items-center justify-between p-3 bg-slate-50 rounded-lg">
                      <div className="flex items-center">
                        <div className="w-10 h-10 rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 flex items-center justify-center text-white text-sm font-medium">
                          {application.candidate.firstName.charAt(0)}{application.candidate.lastName.charAt(0)}
                        </div>
                        <div className="ml-3">
                          <p className="text-sm font-medium text-slate-800">{application.candidate.firstName} {application.candidate.lastName}</p>
                          <p className="text-xs text-slate-500">{application.candidate.title}</p>
                        </div>
                      </div>
                      <Link to={`/cv/${application.candidate.id}`} className="px-3 py-1 text-xs bg-white text-blue-600 border border-blue-200 rounded-lg hover:bg-blue-50">
                        Voir profil
                      </Link>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-8">
                  <User className="h-10 w-10 text-slate-300 mx-auto mb-2" />
                  <p className="text-slate-500">Aucune candidature pour cette offre</p>
                  <Link to="/cv-analysis" className="mt-3 px-4 py-2 bg-blue-600 text-white rounded-lg text-sm inline-block">
                    Analyser des CV
                  </Link>
                </div>
              )}
            </div>
          </div>
        </div>

        <div className="space-y-6">
          <div className="bg-white rounded-xl shadow-sm overflow-hidden">
            <div className="p-6 pb-3 border-b border-slate-100">
              <h3 className="text-lg font-semibold text-slate-800">Informations sur le poste</h3>
            </div>
            <div className="p-6">
              <dl className="space-y-4">
                <div>
                  <dt className="text-sm text-slate-500">Département</dt>
                  <dd className="text-sm font-medium text-slate-800 mt-1">{job.department?.name || 'Non précisé'}</dd>
                </div>
                <div>
                  <dt className="text-sm text-slate-500">Type de contrat</dt>
                  <dd className="text-sm font-medium text-slate-800 mt-1">{job.employmentType || 'Non précisé'}</dd>
                </div>
                <div>
                  <dt className="text-sm text-slate-500">Expérience minimale</dt>
                  <dd className="text-sm font-medium text-slate-800 mt-1">{job.minYearsExperience ? `${job.minYearsExperience} ${job.minYearsExperience > 1 ? 'ans' : 'an'}` : 'Non précisé'}</dd>
                </div>
                <div>
                  <dt className="text-sm text-slate-500">Salaire</dt>
                  <dd className="text-sm font-medium text-slate-800 mt-1">
                    {job.salaryMin && job.salaryMax ? `${job.salaryMin} - ${job.salaryMax} ${job.currency} (${job.payPeriod})` : 'Non précisé'}
                  </dd>
                </div>
                <div>
                  <dt className="text-sm text-slate-500">Statut</dt>
                  <dd className="mt-1">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      job.status === 'ACTIVE' ? 'bg-green-100 text-green-800' :
                      job.status === 'DRAFT' ? 'bg-slate-100 text-slate-800' :
                      'bg-amber-100 text-amber-800'
                    }`}>
                      {job.status === 'ACTIVE' ? 'Active' : job.status === 'DRAFT' ? 'Brouillon' : 'Archivée'}
                    </span>
                  </dd>
                </div>
                <div>
                  <dt className="text-sm text-slate-500">Date de publication</dt>
                  <dd className="text-sm font-medium text-slate-800 mt-1">{new Date(job.createdAt).toLocaleDateString()}</dd>
                </div>
              </dl>
            </div>
          </div>

          <div className="bg-white rounded-xl shadow-sm overflow-hidden">
            <div className="p-6 pb-3 border-b border-slate-100">
              <h3 className="text-lg font-semibold text-slate-800">Statistiques</h3>
            </div>
            <div className="p-6">
              <div className="space-y-4">
                <div>
                  <div className="flex justify-between items-center mb-1">
                    <p className="text-sm text-slate-600">Candidatures totales</p>
                    <p className="text-sm font-medium text-slate-800">{job._count?.applications || 0}</p>
                  </div>
                  <div className="w-full bg-slate-200 rounded-full h-1.5">
                    <div className="bg-blue-600 h-1.5 rounded-full" style={{ width: '100%' }}></div>
                  </div>
                </div>
              </div>

              <div className="mt-6">
                <Link to="/cv-analysis" className="w-full py-2 flex items-center justify-center bg-blue-600 text-white rounded-lg text-sm font-medium hover:bg-blue-700">
                  <UserPlus className="w-4 h-4 mr-2" />
                  Analyser des candidats
                </Link>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default JobDetail;
=== FIN ===

=== Contenu de frontend\src\pages\jobs\JobListings.jsx ===
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { PlusCircle, Filter, BriefcaseBusiness, User, MapPin, Clock } from 'lucide-react';
import { jobService } from '../../services/api';
import { toast } from 'react-toastify';
import { useAuth } from '../../contexts/AuthContext';
import LoadingSpinner from '../../components/common/LoadingSpinner';

const JobListings = () => {
  const { companyId } = useAuth();
  const [jobs, setJobs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [statusFilter, setStatusFilter] = useState('ACTIVE');

  useEffect(() => {
    fetchJobs();
  }, [statusFilter, companyId]);
  
  const fetchJobs = async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await jobService.getJobs(companyId, { status: statusFilter });
      console.log("data",data);
      
      setJobs(data || []);
    } catch (error) {
       
      setError('Erreur lors du chargement des offres d\'emploi');
      toast.error('Erreur lors du chargement des offres d\'emploi');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return <LoadingSpinner />;
  }

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold text-slate-800">Offres d'emploi</h1>
          <p className="text-slate-500 mt-1">Gérez vos offres d'emploi et suivez les candidatures</p>
          {error && (
            <div className="mt-2 p-2 bg-red-50 text-red-600 rounded-md">{error}</div>
          )}
        </div>
        <div className="flex space-x-3">
          <div className="relative">
            <select
              className="appearance-none pl-10 pr-12 py-2.5 bg-white border border-slate-200 rounded-xl shadow-sm hover:bg-slate-50 text-sm font-medium text-slate-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
            >
              <option value="ACTIVE">Actives</option>
              <option value="DRAFT">Brouillons</option>
              <option value="ARCHIVED">Archivées</option>
              <option value="">Toutes</option>
            </select>
            <Filter className="h-4 w-4 text-slate-600 absolute left-3 top-1/2 transform -translate-y-1/2" />
          </div>
          <Link to="/jobs/create" className="flex items-center px-4 py-2.5 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-xl shadow-sm hover:from-blue-700 hover:to-indigo-700">
            <PlusCircle className="h-4 w-4 mr-2" />
            <span className="text-sm font-medium">Nouvelle offre</span>
          </Link>
        </div>
      </div>

      {jobs.length === 0 ? (
        <div className="bg-white rounded-xl shadow-sm p-8 text-center">
          <BriefcaseBusiness className="h-12 w-12 text-slate-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-slate-800 mb-2">Aucune offre d'emploi trouvée</h3>
          <p className="text-slate-500 mb-6">Commencez par créer une nouvelle offre d'emploi pour attirer des candidats.</p>
          <Link to="/jobs/create" className="px-4 py-2 bg-blue-600 text-white rounded-lg shadow-sm hover:bg-blue-700">
            Créer une offre
          </Link>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {jobs.map(job => (
            <Link key={job.id} to={`/jobs/${job.id}`} className="bg-white rounded-xl shadow-sm overflow-hidden hover:shadow-md transition-shadow">
              <div className="p-6">
                <div className="flex justify-between items-start mb-4">
                  <div className="w-10 h-10 rounded-lg bg-blue-50 flex items-center justify-center">
                    <BriefcaseBusiness className="h-5 w-5 text-blue-600" />
                  </div>
                  <span className={`px-2.5 py-1 rounded-full text-xs font-medium ${
                    job.status === 'ACTIVE' ? 'bg-green-100 text-green-800' :
                    job.status === 'DRAFT' ? 'bg-slate-100 text-slate-800' :
                    'bg-amber-100 text-amber-800'
                  }`}>
                    {job.status === 'ACTIVE' ? 'Active' : job.status === 'DRAFT' ? 'Brouillon' : 'Archivée'}
                  </span>
                </div>
                <h3 className="text-lg font-semibold text-slate-800 mb-2">{job.title}</h3>
                <div className="space-y-2 mb-4">
                  <div className="flex items-center text-sm text-slate-600">
                    <MapPin className="h-4 w-4 mr-2 text-slate-400" />
                    {job.location ? `${job.location.city}, ${job.location.country}` : 'Non précisé'}
                  </div>
                  <div className="flex items-center text-sm text-slate-600">
                    <Clock className="h-4 w-4 mr-2 text-slate-400" />
                    {job.employmentType || 'Non précisé'}
                  </div>
                  <div className="flex items-center text-sm text-slate-600">
                    <User className="h-4 w-4 mr-2 text-slate-400" />
                    {job._count?.applications || 0} candidatures
                  </div>
                </div>
                <div className="flex justify-between items-center text-sm">
                  <span className="text-slate-500">
                    Créée le {new Date(job.createdAt).toLocaleDateString()}
                  </span>
                  <span className="text-blue-600 font-medium">Voir détails</span>
                </div>
              </div>
            </Link>
          ))}
        </div>
      )}
    </div>
  );
};

export default JobListings;
=== FIN ===

=== Contenu de frontend\src\pages\jobs\JobManagement.jsx ===
import React, { useState, useEffect } from 'react';
import { Search, Plus, Filter, Calendar, Tag, Building, MapPin, UserPlus, ChevronDown, Clock, Edit, Trash2, Eye, Copy } from 'lucide-react';
import { jobService } from '../../services/api';
import { Link } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import LoadingSpinner from '../../components/common/LoadingSpinner';
import { toast } from 'react-toastify';

const JobManagement = () => {
  const { companyId } = useAuth();
  const [jobs, setJobs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filterStatus, setFilterStatus] = useState([
    { name: "PUBLISHED", checked: true, label: "Published" },
    { name: "INTERNAL", checked: true, label: "Internal" },
    { name: "CONFIDENTIAL", checked: true, label: "Confidential" },
    { name: "DRAFT", checked: true, label: "Draft" },
    { name: "ARCHIVED", checked: false, label: "Archived" }
  ]);

  const [filterLocations, setFilterLocations] = useState([
    { name: "Paris, France", checked: false },
    { name: "Lyon, France", checked: false }
  ]);

  const [filterDepartments, setFilterDepartments] = useState([
    { name: "Customer Support", checked: false },
    { name: "Finance", checked: false },
    { name: "Human Resources", checked: false },
    { name: "Information Technology", checked: false },
    { name: "Legal", checked: false },
    { name: "Marketing", checked: false }
  ]);

  const [searchQuery, setSearchQuery] = useState('');
  const [sortBy, setSortBy] = useState('updatedAt');
  const [sortDirection, setSortDirection] = useState('desc');

  useEffect(() => {
    fetchJobs();
  }, [companyId]);

  const fetchJobs = async () => {
    try {
      setLoading(true);
      setError(null);
      const jobsData = await jobService.getJobs(companyId);
       
      setJobs(jobsData || []);
    } catch (error) {
      
      setError('Erreur lors de la récupération des offres d\'emploi.');
      toast.error('Erreur lors de la récupération des offres d\'emploi.');
    } finally {
      setLoading(false);
    }
  };

  const handleFilterStatusChange = (index) => {
    const newFilterStatus = [...filterStatus];
    newFilterStatus[index].checked = !newFilterStatus[index].checked;
    setFilterStatus(newFilterStatus);
  };

  const handleFilterLocationChange = (index) => {
    const newFilterLocations = [...filterLocations];
    newFilterLocations[index].checked = !newFilterLocations[index].checked;
    setFilterLocations(newFilterLocations);
  };

  const handleFilterDepartmentChange = (index) => {
    const newFilterDepartments = [...filterDepartments];
    newFilterDepartments[index].checked = !newFilterDepartments[index].checked;
    setFilterDepartments(newFilterDepartments);
  };

  const filteredJobs = jobs.filter(job => {
    const activeStatuses = filterStatus.filter(s => s.checked).map(s => s.name);
    
    if (!activeStatuses.includes(job.status)) return false;

    const jobLocation = job.location ? `${job.location.city}, ${job.location.country}` : '';
    if (filterLocations.some(l => l.checked)) {
      const activeLocations = filterLocations.filter(l => l.checked).map(l => l.name);
      if (jobLocation && !activeLocations.includes(jobLocation)) return false;
    }

    const jobDepartment = job.department?.name || '';
    if (filterDepartments.some(d => d.checked)) {
      const activeDepartments = filterDepartments.filter(d => d.checked).map(d => d.name);
      if (jobDepartment && !activeDepartments.includes(jobDepartment)) return false;
    }

    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      return job.title.toLowerCase().includes(query) ||
        (jobDepartment && jobDepartment.toLowerCase().includes(query)) ||
        (jobLocation && jobLocation.toLowerCase().includes(query));
    }

    return true;
  });

  const sortedJobs = [...filteredJobs].sort((a, b) => {
    if (sortBy === 'updatedAt') {
      const dateA = new Date(a.updatedAt);
      const dateB = new Date(b.updatedAt);
      return sortDirection === 'desc' ? dateB - dateA : dateA - dateB;
    }
    return 0;
  });

  if (loading) {
    return <LoadingSpinner />;
  }

  return (
    <div className="flex flex-col bg-gray-50 min-h-screen">
      <div className="bg-white border-b border-gray-200 py-4 px-6">
        <h1 className="text-2xl font-semibold text-gray-800">Offres d'emploi</h1>
        {error && (
          <div className="mt-2 p-2 bg-red-50 text-red-600 rounded-md">{error}</div>
        )}
      </div>

      <div className="flex flex-1">
        <div className="w-64 border-r border-gray-200 bg-white p-4">
          <div className="mb-6">
            <h2 className="text-xs text-gray-500 uppercase font-semibold mb-2">État de l'offre</h2>
            <div className="space-y-1">
              {filterStatus.map((status, index) => (
                <div key={status.name} className="flex items-center">
                  <input
                    type="checkbox"
                    id={`status-${status.name}`}
                    className="mr-2 h-4 w-4 text-blue-500"
                    checked={status.checked}
                    onChange={() => handleFilterStatusChange(index)}
                  />
                  <label htmlFor={`status-${status.name}`} className="text-sm text-gray-700">{status.label}</label>
                </div>
              ))}
            </div>
          </div>

          <div className="mb-6">
            <h2 className="text-xs text-gray-500 uppercase font-semibold mb-2">Emplacements</h2>
            <div className="space-y-1">
              {filterLocations.map((location, index) => (
                <div key={location.name} className="flex items-center">
                  <input
                    type="checkbox"
                    id={`location-${index}`}
                    className="mr-2 h-4 w-4 text-blue-500"
                    checked={location.checked}
                    onChange={() => handleFilterLocationChange(index)}
                  />
                  <label htmlFor={`location-${index}`} className="text-sm text-gray-700 truncate">{location.name}</label>
                </div>
              ))}
            </div>
          </div>

          <div className="mb-6">
            <h2 className="text-xs text-gray-500 uppercase font-semibold mb-2">Départements</h2>
            <div className="space-y-1">
              {filterDepartments.map((dept, index) => (
                <div key={dept.name} className="flex items-center">
                  <input
                    type="checkbox"
                    id={`dept-${index}`}
                    className="mr-2 h-4 w-4 text-blue-500"
                    checked={dept.checked}
                    onChange={() => handleFilterDepartmentChange(index)}
                  />
                  <label htmlFor={`dept-${index}`} className="text-sm text-gray-700">{dept.name}</label>
                </div>
              ))}
            </div>
          </div>
        </div>

        <div className="flex-1 p-6">
          <div className="flex justify-between mb-4">
            <div className="relative w-64">
              <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                <Search size={18} className="text-gray-400" />
              </span>
              <input
                type="text"
                placeholder="Rechercher des offres..."
                className="pl-10 pr-4 py-2 w-full rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>

            <div className="flex space-x-2">
              <div className="relative inline-block">
                <select
                  className="border border-gray-300 rounded-md px-4 py-2 text-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  value={sortBy}
                  onChange={(e) => setSortBy(e.target.value)}
                >
                  <option value="updatedAt">Date de modification</option>
                  <option value="createdAt">Date de création</option>
                </select>
              </div>

              <div className="relative inline-block">
                <select
                  className="border border-gray-300 rounded-md px-4 py-2 text-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  value={sortDirection}
                  onChange={(e) => setSortDirection(e.target.value)}
                >
                  <option value="desc">Plus récent</option>
                  <option value="asc">Plus ancien</option>
                </select>
              </div>

              <Link
                to="/jobs/create"
                className="bg-blue-600 hover:bg-blue-700 text-white rounded-md px-4 py-2 flex items-center"
              >
                <Plus size={18} className="mr-2" />
                <span>Ajouter une offre</span>
              </Link>
            </div>
          </div>

          <div className="bg-white rounded-md shadow">
            {sortedJobs.length === 0 ? (
              <div className="text-center py-10 text-gray-500">
                <p>Aucune offre d'emploi ne correspond à vos critères.</p>
              </div>
            ) : (
              sortedJobs.map(job => (
                <div key={job.id} className="border-b border-gray-200 hover:bg-gray-50 p-4">
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="text-lg font-semibold text-gray-800">
                        <Link to={`/jobs/${job.id}`} className="hover:text-blue-600">
                          {job.title}
                        </Link>
                      </h3>
                      <div className="flex items-center mt-1 text-sm text-gray-500 space-x-4">
                        {job.status === 'PUBLISHED' && (
                          <span className="flex items-center text-emerald-600">
                            <span className="w-2 h-2 rounded-full bg-emerald-600 mr-1.5"></span>
                            Publiée
                          </span>
                        )}
                        {job.status === 'DRAFT' && (
                          <span className="flex items-center">
                            <Edit size={14} className="mr-1" />
                            Brouillon
                          </span>
                        )}
                        {job.status === 'ARCHIVED' && (
                          <span className="flex items-center">
                            <Eye size={14} className="mr-1" />
                            Archivée
                          </span>
                        )}

                        {job.department?.name && (
                          <span className="flex items-center">
                            <Building size={14} className="mr-1" />
                            {job.department.name}
                          </span>
                        )}

                        {job.location && (
                          <span className="flex items-center">
                            <MapPin size={14} className="mr-1" />
                            {job.location.city}, {job.location.country}
                          </span>
                        )}
                      </div>
                    </div>

                    <div className="flex space-x-1">
                      <div className="text-center px-2">
                        <div className="text-gray-700 font-semibold">{job._count?.applications || 0}</div>
                        <div className="text-xs text-gray-500">Candidatures</div>
                      </div>
                      <button className="text-gray-400 hover:text-gray-700 ml-2">
                        <ChevronDown size={20} />
                      </button>
                    </div>
                  </div>

                  <div className="mt-2 text-xs text-gray-500 flex space-x-4">
                    <span className="flex items-center">
                      <Calendar size={12} className="mr-1" />
                      Créée {job.createdAt ? new Date(job.createdAt).toLocaleDateString() : 'N/A'}
                    </span>
                    <span className="flex items-center">
                      <Clock size={12} className="mr-1" />
                      Mise à jour {job.updatedAt ? new Date(job.updatedAt).toLocaleDateString() : 'N/A'}
                    </span>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default JobManagement;
=== FIN ===

=== Contenu de frontend\src\pages\messages\CandidateInbox.jsx ===
import React, { useState, useEffect } from 'react';
import { Search, ChevronDown, MessageSquare, Inbox, Briefcase, Users, Bell, HelpCircle, Settings, User } from 'lucide-react';
import { messageService } from '../../services/api';
import LoadingSpinner from '../../components/common/LoadingSpinner';

const CandidateInbox = () => {
    const [selectedFilter, setSelectedFilter] = useState('your-conversations');
    const [loading, setLoading] = useState(true);
    const [conversations, setConversations] = useState([]);
    const [searchQuery, setSearchQuery] = useState('');

    useEffect(() => {
        const fetchConversations = async () => {
            try {
                setLoading(true);
                const response = await messageService.getConversations({
                    filter: selectedFilter
                });
                setConversations(response);
            } catch (error) {
                console.error('Error fetching conversations:', error);
            } finally {
                setLoading(false);
            }
        };

        fetchConversations();
    }, [selectedFilter]);

    const filteredConversations = conversations.filter(conversation => {
        if (!searchQuery) return true;

        const searchLower = searchQuery.toLowerCase();
        return (
            conversation.candidate.name.toLowerCase().includes(searchLower) ||
            (conversation.lastMessage && conversation.lastMessage.toLowerCase().includes(searchLower))
        );
    });

    return (
        <div className="flex h-screen bg-slate-50 text-slate-800">
            {/* Left Sidebar */}
            <div className="w-16 bg-white border-r border-slate-200 flex flex-col items-center py-6">
                <div className="h-10 w-10 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-xl flex items-center justify-center text-white font-bold text-xl mb-8">
                    R
                </div>
                <div className="flex flex-col gap-6">
                    <button className="p-2 text-slate-400 hover:text-slate-700">
                        <Inbox size={20} />
                    </button>
                    <button className="p-2 text-slate-400 hover:text-slate-700">
                        <Users size={20} />
                    </button>
                    <button className="p-2 text-slate-400 hover:text-slate-700">
                        <Briefcase size={20} />
                    </button>
                    <button className="p-2 text-blue-600">
                        <MessageSquare size={20} />
                    </button>
                </div>
                <div className="mt-auto flex flex-col gap-6 mb-6">
                    <button className="p-2 text-slate-400 hover:text-slate-700">
                        <Settings size={20} />
                    </button>
                    <button className="p-2 text-slate-400 hover:text-slate-700">
                        <HelpCircle size={20} />
                    </button>
                    <button className="w-8 h-8 bg-blue-100 rounded-full overflow-hidden flex items-center justify-center text-blue-700">
                        <User size={16} />
                    </button>
                </div>
            </div>

            {/* Content Area */}
            <div className="flex-1 flex flex-col">
                {/* Header */}
                <header className="h-16 bg-white border-b border-slate-200 flex items-center px-6 justify-between">
                    <h1 className="text-lg font-semibold text-slate-800">Boîte de réception des candidats</h1>
                    <div className="flex items-center gap-4">
                        <button className="p-2 text-slate-400 hover:text-slate-700">
                            <Bell size={20} />
                        </button>
                        <div className="w-8 h-8 bg-blue-100 rounded-full overflow-hidden flex items-center justify-center text-blue-700">
                            <User size={16} />
                        </div>
                    </div>
                </header>

                {/* Main content */}
                <div className="flex flex-1">
                    {/* Left filters panel */}
                    <div className="w-64 border-r border-slate-200 bg-white py-4">
                        <div className="px-4 mb-4">
                            <div className="relative">
                                <Search size={16} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400" />
                                <input
                                    type="text"
                                    placeholder="Rechercher des conversations..."
                                    className="w-full pl-10 pr-4 py-2 rounded-lg border border-slate-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
                                    value={searchQuery}
                                    onChange={(e) => setSearchQuery(e.target.value)}
                                />
                            </div>
                        </div>

                        <div className="px-4 mb-2">
                            <h2 className="text-xs uppercase font-semibold text-slate-500">Filtres de la boîte</h2>
                        </div>

                        <div className="space-y-1 mb-4">
                            <button
                                className={`flex items-center px-4 py-2 w-full text-left ${selectedFilter === 'your-jobs' ? 'text-slate-700' : 'text-slate-600 hover:bg-slate-100'}`}
                                onClick={() => setSelectedFilter('your-jobs')}
                            >
                                <Briefcase size={16} className="mr-3" />
                                <span>Vos offres d'emploi</span>
                            </button>
                            <button
                                className={`flex items-center px-4 py-2 w-full text-left ${selectedFilter === 'your-conversations' ? 'bg-blue-100 text-blue-700 font-medium' : 'text-slate-600 hover:bg-slate-100'}`}
                                onClick={() => setSelectedFilter('your-conversations')}
                            >
                                <MessageSquare size={16} className="mr-3" />
                                <span>Vos conversations</span>
                            </button>
                            <button
                                className={`flex items-center px-4 py-2 w-full text-left ${selectedFilter === 'all-conversations' ? 'text-slate-700' : 'text-slate-600 hover:bg-slate-100'}`}
                                onClick={() => setSelectedFilter('all-conversations')}
                            >
                                <Inbox size={16} className="mr-3" />
                                <span>Toutes les conversations</span>
                            </button>
                        </div>
                    </div>

                    {/* Right content */}
                    <div className="flex-1 p-6">
                        <div className="mb-6">
                            <h2 className="text-lg font-semibold text-slate-800">Vos conversations</h2>
                            <p className="text-sm text-slate-500">
                                {selectedFilter === 'your-jobs' ? 'Conversations liées à vos offres d\'emploi' :
                                    selectedFilter === 'your-conversations' ? 'Conversations auxquelles vous participez' :
                                        'Toutes les conversations'}
                            </p>
                        </div>

                        <div className="flex gap-2 mb-5">
                            <div className="relative">
                                <button className="flex items-center gap-2 px-3 py-2 bg-white border border-slate-200 rounded-lg text-sm">
                                    <span>Conversations ouvertes</span>
                                    <ChevronDown size={16} />
                                </button>
                            </div>

                            <div className="relative">
                                <button className="flex items-center gap-2 px-3 py-2 bg-white border border-slate-200 rounded-lg text-sm">
                                    <span>Plus récentes</span>
                                    <ChevronDown size={16} />
                                </button>
                            </div>
                        </div>

                        {loading ? (
                            <LoadingSpinner />
                        ) : filteredConversations.length > 0 ? (
                            <div className="space-y-2">
                                {filteredConversations.map(conversation => (
                                    <div
                                        key={conversation.id}
                                        className="bg-white border border-slate-200 rounded-lg p-4 hover:border-blue-300 hover:shadow-sm cursor-pointer"
                                    >
                                        <div className="flex items-start">
                                            <div className="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center text-blue-700 flex-shrink-0">
                                                {conversation.candidate.name.split(' ').map(n => n[0]).join('')}
                                            </div>
                                            <div className="ml-3 flex-1">
                                                <div className="flex justify-between items-start">
                                                    <div>
                                                        <h3 className="font-medium text-slate-800">{conversation.candidate.name}</h3>
                                                        <p className="text-sm text-slate-500">{conversation.candidate.position}</p>
                                                    </div>
                                                    <span className="text-xs text-slate-500">{conversation.lastMessageTime}</span>
                                                </div>
                                                <p className="mt-1 text-sm text-slate-600 line-clamp-1">{conversation.lastMessage}</p>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <div className="bg-white border border-slate-200 rounded-xl p-16 flex flex-col items-center justify-center">
                                <div className="bg-slate-100 p-6 rounded-full mb-4">
                                    <MessageSquare size={32} className="text-slate-400" />
                                </div>
                                <h3 className="text-lg font-semibold text-slate-700 mb-1">Aucune conversation trouvée</h3>
                                <p className="text-slate-500 text-center max-w-md mb-6">
                                    Les conversations avec les candidats apparaîtront ici dès que vous commencerez à communiquer avec eux.
                                </p>
                                <button className="px-4 py-2 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg text-sm font-medium hover:from-blue-700 hover:to-indigo-700 transition">
                                    Contacter un candidat
                                </button>
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default CandidateInbox;
=== FIN ===

=== Contenu de frontend\src\pages\reports\Reports.jsx ===
import React, { useState, useEffect } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';
import { Calendar, Clock, Download, Filter, ChevronDown } from 'lucide-react';
import { toast } from 'react-toastify';
import axios from '../../utils/axios';
import LoadingSpinner from '../../components/common/LoadingSpinner';

const Reports = () => {
  const [loading, setLoading] = useState(true);
  const [selectedPeriod, setSelectedPeriod] = useState('30days');
  const [reportData, setReportData] = useState({
    hiringFunnel: [],
    sourceEfficiency: [],
    timeToHire: [],
    skillDistribution: []
  });


  useEffect(() => {
    fetchReportData();
  }, [selectedPeriod]);
  
  const fetchReportData = async () => {
    try {
      setLoading(true);
      
      // Fetch multiple report endpoints in parallel
      const [funnelResponse, sourceResponse, timeResponse, skillResponse] = await Promise.all([
        axios.get(`/api/reports/hiring-funnel?period=${selectedPeriod}`),
        axios.get(`/api/reports/source-efficiency?period=${selectedPeriod}`),
        axios.get(`/api/reports/time-to-hire?period=${selectedPeriod}`),
        axios.get(`/api/reports/skill-distribution?period=${selectedPeriod}`)
      ]);
      
      setReportData({
        hiringFunnel: funnelResponse.data,
        sourceEfficiency: sourceResponse.data,
        timeToHire: timeResponse.data,
        skillDistribution: skillResponse.data
      });
    } catch (error) {
      console.error('Error fetching report data:', error);
      toast.error('Erreur lors du chargement des rapports');
    } finally {
      setLoading(false);
    }
  };
  
  const exportReport = () => {
    toast.info('Export du rapport en cours...');
    // Implement export functionality here
  };
  
  const COLORS = ['#4A6FDC', '#60A5FA', '#34D399', '#F59E0B', '#FB7185', '#A78BFA'];
  
  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold text-slate-800">Rapports d'analyse</h1>
          <p className="text-slate-500 mt-1">Visualisez les performances de votre processus de recrutement</p>
        </div>
        <div className="flex space-x-3">
          <div className="relative">
            <select
              className="appearance-none bg-white border border-slate-200 rounded-xl px-4 py-2.5 pr-8 text-sm font-medium text-slate-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={selectedPeriod}
              onChange={(e) => setSelectedPeriod(e.target.value)}
            >
              <option value="7days">7 derniers jours</option>
              <option value="30days">30 derniers jours</option>
              <option value="90days">3 derniers mois</option>
              <option value="6months">6 derniers mois</option>
              <option value="1year">Année en cours</option>
            </select>
            <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-slate-400">
              <ChevronDown size={16} />
            </div>
          </div>
          <button 
            onClick={exportReport}
            className="flex items-center px-4 py-2.5 bg-white border border-slate-200 rounded-xl text-slate-700 font-medium hover:bg-slate-50"
          >
            <Download className="h-4 w-4 mr-2" />
            <span className="text-sm">Exporter</span>
          </button>
        </div>
      </div>
      
      {loading ? (
        <LoadingSpinner />
      ) : (
        <div className="space-y-6">
          {/* Hiring Funnel */}
          <div className="bg-white rounded-xl shadow-sm p-6">
            <h2 className="text-lg font-semibold text-slate-800 mb-4">Entonnoir de recrutement</h2>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={reportData.hiringFunnel}
                  margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <Tooltip formatter={(value) => [`${value}`, 'Nombre']} />
                  <Legend />
                  <Bar dataKey="value" fill="#4A6FDC" name="Candidats" />
                </BarChart>
              </ResponsiveContainer>
            </div>
            <div className="mt-4 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-4">
              {reportData.hiringFunnel.map((stage, index) => (
                <div key={index} className="bg-slate-50 rounded-lg p-3">
                  <p className="text-xs text-slate-500 mb-1">{stage.name}</p>
                  <p className="text-xl font-semibold text-slate-800">{stage.value}</p>
                  {index > 0 && (
                    <p className={`text-xs ${stage.change >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                      {stage.change >= 0 ? '+' : ''}{stage.change}% vs période précédente
                    </p>
                  )}
                </div>
              ))}
            </div>
          </div>
          
          {/* Source Efficiency and Time to Hire */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Source Efficiency */}
            <div className="bg-white rounded-xl shadow-sm p-6">
              <h2 className="text-lg font-semibold text-slate-800 mb-4">Efficacité des sources</h2>
              <div className="h-64">
                <ResponsiveContainer width="100%" height="100%">
                  <PieChart>
                    <Pie
                      data={reportData.sourceEfficiency}
                      cx="50%"
                      cy="50%"
                      innerRadius={60}
                      outerRadius={80}
                      fill="#8884d8"
                      paddingAngle={5}
                      dataKey="value"
                      label={({ name, percent }) => `${name} (${(percent * 100).toFixed(0)}%)`}
                    >
                      {reportData.sourceEfficiency.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip formatter={(value) => [`${value} candidats`, 'Nombre']} />
                  </PieChart>
                </ResponsiveContainer>
              </div>
              <div className="mt-4 grid grid-cols-2 gap-3">
                {reportData.sourceEfficiency.map((source, index) => (
                  <div key={index} className="flex items-center">
                    <div className="w-3 h-3 rounded-full mr-2" style={{ backgroundColor: COLORS[index % COLORS.length] }} />
                    <div>
                      <p className="text-sm font-medium text-slate-800">{source.name}</p>
                      <p className="text-xs text-slate-500">{source.value} candidats ({source.rate}% de conversion)</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
            {/* Time to Hire */}
            <div className="bg-white rounded-xl shadow-sm p-6">
              <h2 className="text-lg font-semibold text-slate-800 mb-4">Temps moyen d'embauche</h2>
              <div className="h-64">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={reportData.timeToHire}
                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    layout="vertical"
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis type="number" domain={[0, 'dataMax + 5']} />
                    <YAxis dataKey="name" type="category" width={150} />
                    <Tooltip formatter={(value) => [`${value} jours`, 'Durée']} />
                    <Legend />
                    <Bar dataKey="value" name="Jours" fill="#34D399" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
              <div className="mt-4 flex items-center justify-between bg-green-50 p-3 rounded-lg">
                <div className="flex items-center">
                  <Clock className="w-5 h-5 text-green-600 mr-2" />
                  <p className="text-sm font-medium text-slate-800">Durée moyenne totale</p>
                </div>
                <p className="text-xl font-semibold text-green-600">
                  {reportData.timeToHire.reduce((sum, item) => sum + item.value, 0) / reportData.timeToHire.length} jours
                </p>
              </div>
            </div>
          </div>
          
          {/* Top Skills Distribution */}
          <div className="bg-white rounded-xl shadow-sm p-6">
            <h2 className="text-lg font-semibold text-slate-800 mb-4">Distribution des compétences les plus recherchées</h2>
            <div className="h-80">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={reportData.skillDistribution}
                  margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="name" />
                  <YAxis />
                  <Tooltip formatter={(value) => [`${value}%`, 'Fréquence']} />
                  <Legend />
                  <Bar dataKey="demand" name="Demandé" fill="#4A6FDC" />
                  <Bar dataKey="supply" name="Disponible" fill="#34D399" />
                </BarChart>
              </ResponsiveContainer>
            </div>
            <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="bg-blue-50 p-3 rounded-lg">
                <h3 className="text-sm font-medium text-blue-800 mb-2">Compétences les plus demandées</h3>
                <div className="grid grid-cols-2 gap-2">
                  {reportData.skillDistribution
                    .sort((a, b) => b.demand - a.demand)
                    .slice(0, 6)
                    .map((skill, index) => (
                      <div key={index} className="flex items-center">
                        <div className="w-2 h-2 rounded-full bg-blue-600 mr-2" />
                        <p className="text-xs text-slate-700">{skill.name} ({skill.demand}%)</p>
                      </div>
                    ))}
                </div>
              </div>
              <div className="bg-green-50 p-3 rounded-lg">
                <h3 className="text-sm font-medium text-green-800 mb-2">Écarts de compétences</h3>
                <div className="grid grid-cols-2 gap-2">
                  {reportData.skillDistribution
                    .sort((a, b) => (b.demand - b.supply) - (a.demand - a.supply))
                    .slice(0, 6)
                    .map((skill, index) => (
                      <div key={index} className="flex items-center">
                        <div className="w-2 h-2 rounded-full bg-green-600 mr-2" />
                        <p className="text-xs text-slate-700">{skill.name} ({skill.demand - skill.supply}%)</p>
                      </div>
                    ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Reports;
=== FIN ===

=== Contenu de frontend\src\pages\settings\ATSIntegration.jsx ===
import React, { useState } from 'react';
import { toast } from 'react-toastify';
import { CheckCircle, X, HelpCircle, PlusCircle } from 'lucide-react';

const ATSIntegration = () => {
  const [integrations, setIntegrations] = useState([
    { id: 1, name: 'Workable', status: 'connected', lastSync: '2023-02-09T14:30:00' },
    { id: 2, name: 'Greenhouse', status: 'disconnected', lastSync: null },
    { id: 3, name: 'Lever', status: 'disconnected', lastSync: null },
    { id: 4, name: 'SmartRecruiters', status: 'connected', lastSync: '2023-02-10T09:15:00' },
  ]);


  const [showModal, setShowModal] = useState(false);
  const [selectedAts, setSelectedAts] = useState(null);
  const [apiKey, setApiKey] = useState('');

  const handleConnect = (ats) => {
    setSelectedAts(ats);
    setApiKey('');
    setShowModal(true);
  };

  const handleDisconnect = (id) => {
    // Simuler déconnexion
    const updatedIntegrations = integrations.map(integration => 
      integration.id === id 
        ? { ...integration, status: 'disconnected', lastSync: null } 
        : integration
    );
    
    setIntegrations(updatedIntegrations);
    toast.success('Intégration déconnectée avec succès');
  };

  const handleSubmitConnection = (e) => {
    e.preventDefault();
    
    if (!apiKey) {
      toast.error('Veuillez entrer une clé API valide');
      return;
    }
    
    // Simuler connexion
    const updatedIntegrations = integrations.map(integration => 
      integration.id === selectedAts.id 
        ? { ...integration, status: 'connected', lastSync: new Date().toISOString() } 
        : integration
    );
    
    setIntegrations(updatedIntegrations);
    setShowModal(false);
    toast.success(`Intégration avec ${selectedAts.name} établie avec succès`);
  };

  return (
    <div>
      <div className="mb-8">
        <h1 className="text-2xl font-bold text-slate-800">Intégrations ATS</h1>
        <p className="text-slate-500 mt-1">Gérez vos connexions avec les systèmes de suivi des candidatures</p>
      </div>

      <div className="bg-white rounded-xl shadow-sm overflow-hidden">
        <div className="p-6 pb-3 border-b border-slate-100">
          <div className="flex justify-between items-center">
            <h2 className="text-lg font-semibold text-slate-800">Vos intégrations</h2>
            <button className="flex items-center px-3 py-1.5 text-sm bg-slate-100 text-slate-700 rounded-lg hover:bg-slate-200">
              <HelpCircle className="w-4 h-4 mr-1" />
              <span>Documentation</span>
            </button>
          </div>
        </div>

        <div className="p-6">
          <div className="space-y-4">
            {integrations.map((integration) => (
              <div 
                key={integration.id} 
                className="border border-slate-200 rounded-lg p-4 flex items-center justify-between"
              >
                <div className="flex items-center">
                  <div className="w-12 h-12 bg-slate-100 rounded-lg flex items-center justify-center mr-4">
                    <span className="font-semibold text-slate-700">{integration.name.charAt(0)}</span>
                  </div>
                  <div>
                    <h3 className="font-medium text-slate-800">{integration.name}</h3>
                    <div className="flex items-center mt-1">
                      {integration.status === 'connected' ? (
                        <>
                          <span className="flex items-center text-xs text-green-600">
                            <CheckCircle className="w-3 h-3 mr-1" />
                            Connecté
                          </span>
                          <span className="mx-2 text-slate-300">•</span>
                          <span className="text-xs text-slate-500">
                            Dernière synchronisation: {new Date(integration.lastSync).toLocaleString()}
                          </span>
                        </>
                      ) : (
                        <span className="flex items-center text-xs text-slate-500">
                          <X className="w-3 h-3 mr-1" />
                          Non connecté
                        </span>
                      )}
                    </div>
                  </div>
                </div>
                <div>
                  {integration.status === 'connected' ? (
                    <button 
                      onClick={() => handleDisconnect(integration.id)}
                      className="px-3 py-1.5 border border-slate-200 text-slate-700 rounded-lg hover:bg-slate-50 text-sm"
                    >
                      Déconnecter
                    </button>
                  ) : (
                    <button 
                      onClick={() => handleConnect(integration)}
                      className="px-3 py-1.5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm"
                    >
                      Connecter
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>

          <button className="flex items-center mt-6 text-blue-600 text-sm font-medium hover:text-blue-800">
            <PlusCircle className="w-4 h-4 mr-1" />
            Ajouter une nouvelle intégration
          </button>
        </div>
      </div>

      {/* Modal de connexion */}
      {showModal && selectedAts && (
        <div className="fixed inset-0 bg-black bg-opacity-25 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl shadow-lg p-6 max-w-md w-full">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-slate-800">Connecter {selectedAts.name}</h3>
              <button 
                onClick={() => setShowModal(false)}
                className="p-1 rounded-full hover:bg-slate-100"
              >
                <X className="w-5 h-5 text-slate-500" />
              </button>
            </div>
            
            <form onSubmit={handleSubmitConnection}>
              <div className="mb-4">
                <label className="block text-sm font-medium text-slate-700 mb-1">
                  Clé API
                </label>
                <input 
                  type="text" 
                  value={apiKey}
                  onChange={(e) => setApiKey(e.target.value)}
                  className="w-full p-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Entrez votre clé API"
                />
                <p className="mt-1 text-xs text-slate-500">
                  Vous pouvez trouver votre clé API dans les paramètres de votre compte {selectedAts.name}.
                </p>
              </div>
              
              <div className="flex justify-end space-x-3">
                <button 
                  type="button"
                  onClick={() => setShowModal(false)}
                  className="px-4 py-2 border border-slate-300 text-slate-700 rounded-lg hover:bg-slate-50"
                >
                  Annuler
                </button>
                <button 
                  type="submit"
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                >
                  Connecter
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default ATSIntegration;
=== FIN ===

=== Contenu de frontend\src\pages\settings\CompanySettings.jsx ===
import React from 'react';
import { Link, Outlet, useLocation } from 'react-router-dom';
import {
    Building,
    MapPin,
    Users,
    CreditCard,
    LayoutGrid
} from 'lucide-react';

const CompanySettings = () => {
    const location = useLocation();

    const isActive = (path) => {
        return location.pathname.includes(path);
    };

    return (
        <div className="flex min-h-screen bg-slate-50">
            {/* Sidebar */}
            <div className="w-60 bg-white border-r border-slate-200 p-4">
                <h2 className="text-lg font-medium text-slate-800 mb-6">Préférences d'Entreprise</h2>

                <div className="border rounded-lg overflow-hidden bg-white mb-4">
                    <div className="p-3 border-b border-slate-100">
                        <h3 className="text-sm font-medium text-slate-700">Entreprise</h3>
                    </div>

                    <div className="flex flex-col">
                        <Link
                            to="/settings/company/profile"
                            className={`flex items-center gap-2 p-3 ${isActive('/profile') ? 'bg-blue-100 text-blue-700' : 'hover:bg-slate-50 text-slate-700'} text-left`}
                        >
                            <Building className="w-4 h-4" />
                            <span className="text-sm">Profil de l'entreprise</span>
                        </Link>

                        <Link
                            to="/settings/company/locations"
                            className={`flex items-center gap-2 p-3 ${isActive('/locations') ? 'bg-blue-100 text-blue-700' : 'hover:bg-slate-50 text-slate-700'} text-left`}
                        >
                            <MapPin className="w-4 h-4" />
                            <span className="text-sm">Emplacements</span>
                        </Link>

                        <Link
                            to="/settings/company/departments"
                            className={`flex items-center gap-2 p-3 ${isActive('/departments') ? 'bg-blue-100 text-blue-700' : 'hover:bg-slate-50 text-slate-700'} text-left`}
                        >
                            <LayoutGrid className="w-4 h-4" />
                            <span className="text-sm">Départements</span>
                        </Link>

                        <Link
                            to="/settings/company/members"
                            className={`flex items-center gap-2 p-3 ${isActive('/members') ? 'bg-blue-100 text-blue-700' : 'hover:bg-slate-50 text-slate-700'} text-left`}
                        >
                            <Users className="w-4 h-4" />
                            <span className="text-sm">Membres</span>
                        </Link>

                        <Link
                            to="/settings/company/subscription"
                            className={`flex items-center gap-2 p-3 ${isActive('/subscription') ? 'bg-blue-100 text-blue-700' : 'hover:bg-slate-50 text-slate-700'} text-left`}
                        >
                            <CreditCard className="w-4 h-4" />
                            <span className="text-sm">Abonnement</span>
                        </Link>
                    </div>
                </div>
            </div>

            {/* Main content area - will render child routes */}
            <div className="flex-1 p-4">
                <h1 className="text-2xl font-bold text-slate-800 mb-6">Préférences d'Entreprise</h1>
                <Outlet />
            </div>
        </div>
    );
};

export default CompanySettings;
=== FIN ===

=== Contenu de frontend\src\pages\settings\MeetingTemplates.jsx ===
import React, { useState, useEffect } from 'react';
import { Pencil, Plus, Trash2 } from 'lucide-react';
import { meetingTemplateService } from '../../services/api';
import LoadingSpinner from '../../components/common/LoadingSpinner';
import MeetingTemplateForm from '../../components/settings/MeetingTemplateForm';
import { useAuth } from '../../contexts/AuthContext';

const MeetingTemplates = () => {
  const { companyId } = useAuth();
  const [templates, setTemplates] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showAddModal, setShowAddModal] = useState(false);
  const [editingTemplate, setEditingTemplate] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchTemplates();
  }, []);

  const fetchTemplates = async () => {
    try {
      setLoading(true);
      const data = await meetingTemplateService.getMeetingTemplates(companyId);
      setTemplates(data);
    } catch (error) {
      console.error('Erreur lors du chargement des templates d\'entretien:', error);
      setError('Erreur lors du chargement des templates.');
    } finally {
      setLoading(false);
    }
  };

  const handleAddTemplate = () => {
    setEditingTemplate(null);
    setShowAddModal(true);
  };

  const handleEditTemplate = (template) => {
    setEditingTemplate(template);
    setShowAddModal(true);
  };

  const handleSaveTemplate = async (templateData) => {
    try {
      setLoading(true);
      if (editingTemplate) {
        const updatedTemplate = await meetingTemplateService.updateMeetingTemplate(
          companyId,
          editingTemplate.id,
          templateData
        );
        setTemplates(templates.map(t => t.id === updatedTemplate.id ? updatedTemplate : t));
      } else {
        const newTemplate = await meetingTemplateService.createMeetingTemplate(companyId, templateData);
        setTemplates([...templates, newTemplate]);
      }
      setShowAddModal(false);
    } catch (error) {
      console.error('Erreur lors de l\'enregistrement du template:', error);
      setError('Erreur lors de l\'enregistrement du template.');
    } finally {
      setLoading(false);
    }
  };

  const handleCloseModal = () => {
    setShowAddModal(false);
    setEditingTemplate(null);
  };

  const handleDeleteTemplate = async (id) => {
    try {
      await meetingTemplateService.deleteMeetingTemplate(companyId, id);
      setTemplates(templates.filter(t => t.id !== id));
    } catch (err) {
      console.error('Erreur lors de la suppression du template:', err);
      setError('Erreur lors de la suppression du template.');
    }
  };

  if (loading && templates.length === 0) {
    return <LoadingSpinner />;
  }

  return (
    <div className="p-6 bg-white min-h-screen">
      <div className="flex justify-between items-center mb-6 border-b pb-4">
        <div>
          <h2 className="text-2xl font-bold text-gray-800">Templates d'entretien</h2>
          <p className="text-sm text-gray-500 mt-1">Gérez vos templates d'entretien pour structurer vos réunions avec les candidats.</p>
        </div>
        <button
          onClick={handleAddTemplate}
          className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
        >
          <Plus size={18} className="mr-2" />
          Ajouter un template
        </button>
      </div>

      {error && (
        <div className="mb-4 p-3 bg-red-50 text-red-600 rounded-md">{error}</div>
      )}

      <div className="space-y-4">
        {templates.map((template) => (
          <div
            key={template.id}
            className="flex items-center justify-between p-4 bg-gray-50 rounded-lg shadow-sm hover:shadow-md transition-shadow"
          >
            <div>
              <h3 className="text-lg font-medium text-gray-800">{template.name}</h3>
              <p className="text-sm text-gray-500">
                {template.isDefault ? 'Template par défaut' : 'Template personnalisé'}
              </p>
            </div>
            <div className="flex space-x-2">
              <button
                onClick={() => handleEditTemplate(template)}
                className="p-2 text-blue-600 hover:bg-blue-100 rounded-full transition-colors"
                title="Modifier"
              >
                <Pencil size={18} />
              </button>
              <button
                onClick={() => handleDeleteTemplate(template.id)}
                className="p-2 text-red-600 hover:bg-red-100 rounded-full transition-colors"
                title="Supprimer"
              >
                <Trash2 size={18} />
              </button>
            </div>
          </div>
        ))}

        {templates.length === 0 && !loading && (
          <div className="p-6 bg-gray-50 text-center rounded-lg shadow-sm">
            <p className="text-gray-500">Aucun template d'entretien disponible.</p>
            <button
              onClick={handleAddTemplate}
              className="mt-4 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
            >
              Créer votre premier template
            </button>
          </div>
        )}
      </div>

      {showAddModal && (
        <MeetingTemplateForm
          template={editingTemplate}
          onSave={handleSaveTemplate}
          onClose={handleCloseModal}
          companyId={companyId}
        />
      )}
    </div>
  );
};

export default MeetingTemplates;
=== FIN ===

=== Contenu de frontend\src\pages\settings\MessageTemplates.jsx ===
import React, { useState, useEffect } from 'react';
import { Edit2, Trash2, Plus, Link as LinkIcon, Bold, Italic, List, AlignLeft } from 'lucide-react';
import { messageTemplateService } from '../../services/api';
import LoadingSpinner from '../../components/common/LoadingSpinner';
import { useAuth } from '../../contexts/AuthContext';

const MessageTemplates = () => {
    const { companyId } = useAuth();
    const [templates, setTemplates] = useState({
        required: [],
        custom: []
    });
    const [loading, setLoading] = useState(true);
    const [showAddTemplate, setShowAddTemplate] = useState(false);
    const [showEditTemplate, setShowEditTemplate] = useState(false);
    const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);
    const [currentTemplate, setCurrentTemplate] = useState(null);
    const [templateForm, setTemplateForm] = useState({
        id: null,
        name: '',
        subject: '',
        content: ''
    });
    const [error, setError] = useState(null);

    useEffect(() => {
        fetchTemplates();
      }, [companyId]);

      const fetchTemplates = async () => {
        try {
          setLoading(true);
          const data = await messageTemplateService.getMessageTemplates(companyId);
          setTemplates(data);
        } catch (error) {
          console.error('Erreur lors du chargement des templates:', error);
          setError('Erreur lors du chargement des templates.');
        } finally {
          setLoading(false);
        }
      };

    const handleAddTemplate = () => {
        setTemplateForm({
            id: null,
            name: '',
            subject: '',
            content: ''
        });
        setShowAddTemplate(true);
    };

    const handleEditTemplate = (template) => {
        setCurrentTemplate(template);
        setTemplateForm({
            id: template.id,
            name: template.name,
            subject: template.subject,
            content: template.content
        });
        setShowEditTemplate(true);
    };

    const handleDeleteTemplate = (template) => {
        setCurrentTemplate(template);
        setShowDeleteConfirmation(true);
    };

    const confirmDeleteTemplate = async () => {
        if (!currentTemplate) return;
    
        try {
          await messageTemplateService.deleteMessageTemplate(companyId, currentTemplate.id);
          await fetchTemplates();
          setShowDeleteConfirmation(false);
          setCurrentTemplate(null);
        } catch (error) {
          console.error("Erreur lors de la suppression du template:", error);
          setError('Erreur lors de la suppression du template.');
        }
      };

    const handleFormChange = (e) => {
        const { name, value } = e.target;
        setTemplateForm(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const handleSaveTemplate = async () => {
        try {
          if (!templateForm.name || !templateForm.subject || !templateForm.content) {
            setError('Tous les champs (nom, sujet, contenu) sont requis.');
            return;
          }
    
          if (showAddTemplate) {
            await messageTemplateService.createMessageTemplate(companyId, templateForm);
          } else if (showEditTemplate) {
            await messageTemplateService.updateMessageTemplate(companyId, templateForm.id, templateForm);
          }
    
          await fetchTemplates();
          setShowAddTemplate(false);
          setShowEditTemplate(false);
          setError(null);
        } catch (error) {
          console.error("Erreur lors de l'enregistrement du template:", error);
          setError("Erreur lors de l'enregistrement du template.");
        }
      };

    const closeModal = () => {
        setShowAddTemplate(false);
        setShowEditTemplate(false);
        setShowDeleteConfirmation(false);
        setCurrentTemplate(null);
    };

    if (loading) {
        return <LoadingSpinner />;
    }

    return (
        <div className="bg-white rounded-lg shadow-sm p-6">
            <div className="flex justify-between items-center mb-6">
                <div>
                    <h2 className="text-xl font-bold text-slate-800">Templates de Messages</h2>
                    <p className="text-sm text-slate-500 mt-1">
                        Les templates de messages vous aident à gagner du temps lors de la communication avec les candidats.
                        <br />
                        Les variables sont entourées de doubles accolades, par ex. &#123;&#123;nom&#125;&#125;
                    </p>
                </div>
                <button
                    onClick={handleAddTemplate}
                    className="px-4 py-2 bg-emerald-500 hover:bg-emerald-600 text-white rounded-lg flex items-center"
                >
                    <Plus size={18} className="mr-2" />
                    Ajouter Template
                </button>
            </div>

            {/* Templates requis */}
            <div className="mb-8">
                <h3 className="text-lg font-semibold text-slate-800 mb-3">Templates Requis</h3>
                <p className="text-sm text-slate-500 mb-4">
                    Ces templates sont utilisés pour les nouveaux candidats et lors de la disqualification des candidats.
                </p>

                <div className="space-y-4">
                    {templates.required.map(template => (
                        <div
                            key={template.id}
                            className="border border-slate-200 rounded-lg p-4 hover:border-blue-300 transition-colors"
                        >
                            <div className="flex justify-between items-center mb-1">
                                <h4 className="font-medium text-slate-800">{template.name}</h4>
                                <button
                                    onClick={() => handleEditTemplate(template)}
                                    className="p-1 text-slate-400 hover:text-blue-600 rounded"
                                >
                                    <Edit2 size={16} />
                                </button>
                            </div>
                            <p className="text-sm text-slate-500">{template.description}</p>
                        </div>
                    ))}
                </div>
            </div>

            {/* Templates personnalisés */}
            <div>
                <h3 className="text-lg font-semibold text-slate-800 mb-3">Templates Personnalisés</h3>
                <p className="text-sm text-slate-500 mb-4">
                    Ces templates peuvent être utilisés pour tout type de communication avec les candidats.
                </p>

                <div className="space-y-4">
                    {templates.custom.length === 0 ? (
                        <p className="text-sm text-slate-400 italic">
                            Aucun template personnalisé n'a été créé. Cliquez sur "Ajouter Template" pour commencer.
                        </p>
                    ) : (
                        templates.custom.map(template => (
                            <div
                                key={template.id}
                                className="border border-slate-200 rounded-lg p-4 hover:border-blue-300 transition-colors"
                            >
                                <div className="flex justify-between items-center mb-1">
                                    <h4 className="font-medium text-slate-800">{template.name}</h4>
                                    <div className="flex space-x-2">
                                        <button
                                            onClick={() => handleEditTemplate(template)}
                                            className="p-1 text-slate-400 hover:text-blue-600 rounded"
                                        >
                                            <Edit2 size={16} />
                                        </button>
                                        <button
                                            onClick={() => handleDeleteTemplate(template)}
                                            className="p-1 text-slate-400 hover:text-red-600 rounded"
                                        >
                                            <Trash2 size={16} />
                                        </button>
                                    </div>
                                </div>
                            </div>
                        ))
                    )}
                </div>
            </div>

            {/* Modal pour ajouter un template */}
            {showAddTemplate && (
                <div className="fixed inset-0 bg-black bg-opacity-30 flex justify-center items-center z-50">
                    <div className="bg-white rounded-lg w-full max-w-2xl p-6">
                        <h3 className="text-lg font-bold text-slate-800 mb-4">Ajouter un Template de Message</h3>

                        <div className="mb-4">
                            <label className="block text-sm font-medium text-slate-700 mb-1">
                                Nom du Template <span className="text-xs text-blue-600">Obligatoire</span>
                            </label>
                            <input
                                type="text"
                                name="name"
                                className="w-full p-2 border border-slate-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                                placeholder="Nom du template"
                                value={templateForm.name}
                                onChange={handleFormChange}
                            />
                        </div>

                        <div className="mb-4">
                            <label className="block text-sm font-medium text-slate-700 mb-1">
                                Sujet
                            </label>
                            <input
                                type="text"
                                name="subject"
                                className="w-full p-2 border border-slate-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                                placeholder="Sujet du message"
                                value={templateForm.subject}
                                onChange={handleFormChange}
                            />
                        </div>

                        <div className="mb-4">
                            <label className="block text-sm font-medium text-slate-700 mb-1">
                                Contenu
                            </label>
                            <div className="border border-slate-300 rounded-md overflow-hidden">
                                <div className="flex border-b border-slate-300 p-2 bg-slate-50">
                                    <button className="p-1 text-slate-500 hover:text-slate-700 mr-1">
                                        <Bold size={16} />
                                    </button>
                                    <button className="p-1 text-slate-500 hover:text-slate-700 mr-1">
                                        <Italic size={16} />
                                    </button>
                                    <button className="p-1 text-slate-500 hover:text-slate-700 mr-1">
                                        <List size={16} />
                                    </button>
                                    <button className="p-1 text-slate-500 hover:text-slate-700 mr-1">
                                        <AlignLeft size={16} />
                                    </button>
                                    <button className="p-1 text-slate-500 hover:text-slate-700">
                                        <LinkIcon size={16} />
                                    </button>
                                </div>
                                <textarea
                                    name="content"
                                    rows="8"
                                    className="w-full p-3 border-none focus:ring-0"
                                    placeholder="Écrivez votre message ici..."
                                    value={templateForm.content}
                                    onChange={handleFormChange}
                                ></textarea>
                            </div>
                        </div>

                        <div className="flex justify-end">
                            <button
                                onClick={closeModal}
                                className="px-4 py-2 text-slate-600 hover:bg-slate-100 rounded-lg mr-2"
                            >
                                Annuler
                            </button>
                            <button
                                onClick={handleSaveTemplate}
                                className="px-4 py-2 bg-emerald-500 hover:bg-emerald-600 text-white rounded-lg"
                            >
                                Enregistrer
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Modal pour éditer un template */}
            {showEditTemplate && (
                <div className="fixed inset-0 bg-black bg-opacity-30 flex justify-center items-center z-50">
                    <div className="bg-white rounded-lg w-full max-w-2xl p-6">
                        <h3 className="text-lg font-bold text-slate-800 mb-4">Modifier le Template</h3>

                        <div className="mb-4">
                            <label className="block text-sm font-medium text-slate-700 mb-1">
                                Nom du Template <span className="text-xs text-blue-600">Obligatoire</span>
                            </label>
                            <input
                                type="text"
                                name="name"
                                className="w-full p-2 border border-slate-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                                value={templateForm.name}
                                onChange={handleFormChange}
                            />
                        </div>

                        <div className="mb-4">
                            <label className="block text-sm font-medium text-slate-700 mb-1">
                                Sujet
                            </label>
                            <input
                                type="text"
                                name="subject"
                                className="w-full p-2 border border-slate-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                                value={templateForm.subject}
                                onChange={handleFormChange}
                            />
                        </div>

                        <div className="mb-4">
                            <label className="block text-sm font-medium text-slate-700 mb-1">
                                Contenu
                            </label>
                            <div className="border border-slate-300 rounded-md overflow-hidden">
                                <div className="flex border-b border-slate-300 p-2 bg-slate-50">
                                    <button className="p-1 text-slate-500 hover:text-slate-700 mr-1">
                                        <Bold size={16} />
                                    </button>
                                    <button className="p-1 text-slate-500 hover:text-slate-700 mr-1">
                                        <Italic size={16} />
                                    </button>
                                    <button className="p-1 text-slate-500 hover:text-slate-700 mr-1">
                                        <List size={16} />
                                    </button>
                                    <button className="p-1 text-slate-500 hover:text-slate-700 mr-1">
                                        <AlignLeft size={16} />
                                    </button>
                                    <button className="p-1 text-slate-500 hover:text-slate-700">
                                        <LinkIcon size={16} />
                                    </button>
                                </div>
                                <textarea
                                    name="content"
                                    rows="8"
                                    className="w-full p-3 border-none focus:ring-0"
                                    value={templateForm.content}
                                    onChange={handleFormChange}
                                ></textarea>
                            </div>
                        </div>

                        <div className="flex justify-end">
                            <button
                                onClick={closeModal}
                                className="px-4 py-2 text-slate-600 hover:bg-slate-100 rounded-lg mr-2"
                            >
                                Annuler
                            </button>
                            <button
                                onClick={handleSaveTemplate}
                                className="px-4 py-2 bg-emerald-500 hover:bg-emerald-600 text-white rounded-lg"
                            >
                                Enregistrer les modifications
                            </button>
                        </div>
                    </div>
                </div>
            )}

            {/* Modal de confirmation de suppression */}
            {showDeleteConfirmation && currentTemplate && (
                <div className="fixed inset-0 bg-black bg-opacity-30 flex justify-center items-center z-50">
                    <div className="bg-white rounded-lg w-full max-w-md p-6">
                        <div className="flex justify-center mb-4 text-slate-600">
                            <Trash2 size={48} />
                        </div>
                        <h3 className="text-lg font-bold text-center text-slate-800 mb-2">Supprimer ce template ?</h3>
                        <p className="text-center text-slate-600 mb-6">
                            Vous êtes sur le point de supprimer "{currentTemplate.name}".
                        </p>

                        <div className="flex justify-center">
                            <button
                                onClick={closeModal}
                                className="px-4 py-2 text-slate-600 hover:bg-slate-100 rounded-lg mr-2"
                            >
                                Annuler
                            </button>
                            <button
                                onClick={confirmDeleteTemplate}
                                className="px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg"
                            >
                                Continuer
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default MessageTemplates;
=== FIN ===

=== Contenu de frontend\src\pages\settings\RecruitingQuestions.jsx ===
import React, { useState, useEffect } from 'react';
import { Plus, Edit2, Trash2, Eye, EyeOff } from 'lucide-react';
import { questionService } from '../../services/api';
import LoadingSpinner from '../../components/common/LoadingSpinner';
import QuestionModal from '../../components/settings/QuestionModal';
import QuestionSetModal from '../../components/settings/QuestionSetModal';
import { useAuth } from '../../contexts/AuthContext';

const RecruitingQuestions = () => {
  const { companyId } = useAuth();
  const [questions, setQuestions] = useState([]);
  const [questionSets, setQuestionSets] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showAddQuestionModal, setShowAddQuestionModal] = useState(false);
  const [showAddSetModal, setShowAddSetModal] = useState(false);
  const [showEditSetModal, setShowEditSetModal] = useState(false);
  const [editingQuestion, setEditingQuestion] = useState(null);
  const [editingQuestionSet, setEditingQuestionSet] = useState(null);
  const [showDeleteQuestionConfirmation, setShowDeleteQuestionConfirmation] = useState(false);
  const [showDeleteSetConfirmation, setShowDeleteSetConfirmation] = useState(false);
  const [questionToDelete, setQuestionToDelete] = useState(null);
  const [questionSetToDelete, setQuestionSetToDelete] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchQuestionsAndSets();
  }, [companyId]);

  const fetchQuestionsAndSets = async () => {
    try {
      setLoading(true);
      const [questionsData, setsData] = await Promise.all([
        questionService.getCustomQuestions(companyId),
        questionService.getQuestionSets(companyId)
      ]);
      setQuestions(questionsData);
      setQuestionSets(setsData);
    } catch (error) {
      console.error('Erreur lors du chargement des questions:', error);
      setError('Erreur lors du chargement des questions et ensembles.');
    } finally {
      setLoading(false);
    }
  };

  const handleAddQuestion = () => {
    setEditingQuestion(null);
    setShowAddQuestionModal(true);
  };

  const handleEditQuestion = (question) => {
    setEditingQuestion(question);
    setShowAddQuestionModal(true);
  };

  const handleDeleteQuestion = (question) => {
    setQuestionToDelete(question);
    setShowDeleteQuestionConfirmation(true);
  };

  const confirmDeleteQuestion = async () => {
    if (!questionToDelete) return;

    try {
      await questionService.deleteQuestion(companyId, questionToDelete.id);
      setQuestions(questions.filter(q => q.id !== questionToDelete.id));
      setShowDeleteQuestionConfirmation(false);
      setQuestionToDelete(null);
      setError(null);
    } catch (error) {
      console.error('Erreur lors de la suppression de la question:', error);
      setError('Erreur lors de la suppression de la question.');
    }
  };

  const handleAddQuestionSet = () => {
    setEditingQuestionSet(null);
    setShowAddSetModal(true);
  };

  const handleEditQuestionSet = (set) => {
    setEditingQuestionSet(set);
    setShowEditSetModal(true);
  };

  const handleDeleteQuestionSet = (set) => {
    setQuestionSetToDelete(set);
    setShowDeleteSetConfirmation(true);
  };

  const confirmDeleteQuestionSet = async () => {
    if (!questionSetToDelete) return;

    try {
      await questionService.deleteQuestionSet(companyId, questionSetToDelete.id);
      setQuestionSets(questionSets.filter(s => s.id !== questionSetToDelete.id));
      setShowDeleteSetConfirmation(false);
      setQuestionSetToDelete(null);
      setError(null);
    } catch (error) {
      console.error('Erreur lors de la suppression de l\'ensemble de questions:', error);
      setError('Erreur lors de la suppression de l\'ensemble de questions.');
    }
  };

  const closeModal = () => {
    setShowDeleteQuestionConfirmation(false);
    setShowDeleteSetConfirmation(false);
    setQuestionToDelete(null);
    setQuestionSetToDelete(null);
    setError(null);
  };

  const handleQuestionSave = async (questionData) => {
    try {
      if (editingQuestion) {
        const updatedQuestion = await questionService.updateQuestion(companyId, editingQuestion.id, questionData);
        setQuestions(questions.map(q => q.id === editingQuestion.id ? updatedQuestion : q));
      } else {
        const newQuestion = await questionService.createQuestion(companyId, questionData);
        setQuestions([...questions, newQuestion]);
      }
      setShowAddQuestionModal(false);
      setError(null);
    } catch (error) {
      console.error('Erreur lors de l\'enregistrement de la question:', error);
      setError('Erreur lors de l\'enregistrement de la question.');
    }
  };

  const handleQuestionSetSave = async (setData) => {
    try {
      if (editingQuestionSet) {
        const updatedSet = await questionService.updateQuestionSet(companyId, editingQuestionSet.id, setData);
        setQuestionSets(questionSets.map(s => s.id === editingQuestionSet.id ? updatedSet : s));
        setShowEditSetModal(false);
      } else {
        const newSet = await questionService.createQuestionSet(companyId, setData);
        setQuestionSets([...questionSets, newSet]);
        setShowAddSetModal(false);
      }
      setError(null);
    } catch (error) {
      console.error('Erreur lors de l\'enregistrement de l\'ensemble de questions:', error);
      setError('Erreur lors de l\'enregistrement de l\'ensemble de questions.');
    }
  };

  const getResponseTypeLabel = (type) => {
    switch (type) {
      case 'short_text': return 'Réponse courte';
      case 'paragraph': return 'Paragraphe';
      case 'yes_no': return 'Oui ou Non';
      case 'dropdown': return 'Liste déroulante';
      case 'multiple_choice': return 'Choix multiple';
      case 'number': return 'Nombre';
      case 'file': return 'Fichier';
      default: return type;
    }
  };

  const getVisibilityLabel = (visibility) => {
    switch (visibility) {
      case 'public': return 'Visible pour tous sur l\'offre';
      case 'private': return 'Visible pour les responsables du recrutement';
      default: return visibility;
    }
  };

  if (loading) {
    return <LoadingSpinner />;
  }

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-xl font-bold text-slate-800">Questions & Ensembles</h2>
          <p className="text-sm text-slate-500 mt-1">
            Utilisez des questions personnalisées pour en savoir plus sur les candidats pendant le processus de recrutement.
          </p>
        </div>
        <div className="flex space-x-2">
          <button
            onClick={handleAddQuestion}
            className="flex items-center gap-2 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
          >
            <Plus size={18} />
            <span>Ajouter une question</span>
          </button>
          <button
            onClick={handleAddQuestionSet}
            className="flex items-center gap-2 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
          >
            <Plus size={18} />
            <span>Ajouter un ensemble</span>
          </button>
        </div>
      </div>

      {/* Ensembles de questions */}
      <div className="bg-white rounded-lg border border-slate-200 p-6">
        <h3 className="text-lg font-semibold text-slate-800 mb-2">Ensembles de questions</h3>
        <p className="text-sm text-slate-500 mb-4">
          Ce sont des collections prédéfinies de questions structurées utilisées dans les formulaires de candidature.
        </p>

        {questionSets.length === 0 ? (
          <div className="text-center py-8 text-slate-400 bg-slate-50 rounded-lg">
            Aucun ensemble de questions n'a encore été ajouté.
          </div>
        ) : (
          <div className="space-y-4">
            {questionSets.map(set => (
              <div key={set.id} className="p-4 border border-slate-200 rounded-lg hover:bg-slate-50">
                <div className="flex justify-between items-center">
                  <div>
                    <h4 className="font-medium text-slate-800">{set.name}</h4>
                    <p className="text-sm text-slate-600 mt-1">{set.questions?.length || 0} questions</p>
                  </div>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => handleEditQuestionSet(set)}
                      className="p-2 text-slate-400 hover:text-blue-500 rounded"
                      title="Modifier"
                    >
                      <Edit2 size={16} />
                    </button>
                    <button
                      onClick={() => handleDeleteQuestionSet(set)}
                      className="p-2 text-slate-400 hover:text-red-500 rounded"
                      title="Supprimer"
                    >
                      <Trash2 size={16} />
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Questions personnalisées */}
      <div className="bg-white rounded-lg border border-slate-200 p-6">
        <h3 className="text-lg font-semibold text-slate-800 mb-2">Questions personnalisées</h3>
        <p className="text-sm text-slate-500 mb-4">
          Ces questions sont utilisées pour filtrer les candidats.
        </p>

        <div className="space-y-4">
          {questions.map(question => (
            <div key={question.id} className="p-4 border border-slate-200 rounded-lg hover:bg-slate-50">
              <div className="flex justify-between items-start">
                <div>
                  <h4 className="font-medium text-slate-800">{question.text}</h4>
                  <div className="flex mt-2 text-xs">
                    <div className="flex items-center mr-4">
                      <div className="w-2 h-2 rounded-full bg-blue-500 mr-1"></div>
                      <span className="text-slate-600">{getResponseTypeLabel(question.responseType)}</span>
                    </div>
                    <div className="flex items-center">
                      {question.visibility === 'public' ? (
                        <Eye size={12} className="text-slate-400 mr-1" />
                      ) : (
                        <EyeOff size={12} className="text-slate-400 mr-1" />
                      )}
                      <span className="text-slate-600">{getVisibilityLabel(question.visibility)}</span>
                    </div>
                  </div>
                </div>
                <div className="flex space-x-2">
                  <button
                    onClick={() => handleEditQuestion(question)}
                    className="p-2 text-slate-400 hover:text-blue-500 rounded"
                    title="Modifier"
                  >
                    <Edit2 size={16} />
                  </button>
                  <button
                    onClick={() => handleDeleteQuestion(question)}
                    className="p-2 text-slate-400 hover:text-red-500 rounded"
                    title="Supprimer"
                  >
                    <Trash2 size={16} />
                  </button>
                </div>
              </div>
            </div>
          ))}

          {questions.length === 0 && (
            <div className="text-center py-8 text-slate-400 bg-slate-50 rounded-lg">
              Aucune question personnalisée n'a encore été ajoutée.
            </div>
          )}
        </div>
      </div>

      {/* Modales */}
      {showAddQuestionModal && (
        <QuestionModal
          isOpen={showAddQuestionModal}
          onClose={() => setShowAddQuestionModal(false)}
          onSave={handleQuestionSave}
          question={editingQuestion}
        />
      )}

      {showAddSetModal && (
        <QuestionSetModal
          isOpen={showAddSetModal}
          onClose={() => setShowAddSetModal(false)}
          onSave={handleQuestionSetSave}
          availableQuestions={questions}
        />
      )}

      {showEditSetModal && (
        <QuestionSetModal
          isOpen={showEditSetModal}
          onClose={() => setShowEditSetModal(false)}
          onSave={handleQuestionSetSave}
          availableQuestions={questions}
          set={editingQuestionSet}
        />
      )}

      {/* Modal de confirmation de suppression pour les questions */}
      {showDeleteQuestionConfirmation && questionToDelete && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex justify-center items-center z-50">
          <div className="bg-white rounded-lg w-full max-w-md p-6">
            <div className="flex justify-center mb-4 text-slate-600">
              <Trash2 size={48} />
            </div>
            <h3 className="text-lg font-bold text-center text-slate-800 mb-2">Supprimer cette question ?</h3>
            <p className="text-center text-slate-600 mb-6">
              Vous êtes sur le point de supprimer la question "{questionToDelete.text}".
            </p>

            <div className="flex justify-center">
              <button
                onClick={closeModal}
                className="px-4 py-2 text-slate-600 hover:bg-slate-100 rounded-lg mr-2"
              >
                Annuler
              </button>
              <button
                onClick={confirmDeleteQuestion}
                className="px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg"
              >
                Continuer
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal de confirmation de suppression pour les ensembles */}
      {showDeleteSetConfirmation && questionSetToDelete && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex justify-center items-center z-50">
          <div className="bg-white rounded-lg w-full max-w-md p-6">
            <div className="flex justify-center mb-4 text-slate-600">
              <Trash2 size={48} />
            </div>
            <h3 className="text-lg font-bold text-center text-slate-800 mb-2">Supprimer cet ensemble ?</h3>
            <p className="text-center text-slate-600 mb-6">
              Vous êtes sur le point de supprimer l'ensemble "{questionSetToDelete.name}".
            </p>

            <div className="flex justify-center">
              <button
                onClick={closeModal}
                className="px-4 py-2 text-slate-600 hover:bg-slate-100 rounded-lg mr-2"
              >
                Annuler
              </button>
              <button
                onClick={confirmDeleteQuestionSet}
                className="px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg"
              >
                Continuer
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default RecruitingQuestions;
=== FIN ===

=== Contenu de frontend\src\pages\settings\RecruitingRatingCards.jsx ===
import React, { useState, useEffect } from 'react';
import { Edit2, Plus, X } from 'lucide-react';
import { ratingCardService } from '../../services/api';
import LoadingSpinner from '../../components/common/LoadingSpinner';
import RatingCardModal from '../../components/settings/RatingCardModal';
import { useAuth } from '../../contexts/AuthContext';

const RecruitingRatingCards = () => {
  const { companyId, loading: authLoading, error: authError } = useAuth();
  const [ratingCards, setRatingCards] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [selectedCard, setSelectedCard] = useState(null);

  useEffect(() => {
    if (!companyId || authLoading) return;

    const fetchRatingCards = async () => {
      try {
        setLoading(true);
        const data = await ratingCardService.getRatingCards(companyId);
        setRatingCards(data);
      } catch (error) {
        console.error('Erreur lors de la récupération des fiches d\'évaluation:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchRatingCards();
  }, [companyId, authLoading]);

  const handleAddRatingCard = () => {
    setShowAddModal(true);
  };

  const handleEditRatingCard = (card) => {
    setSelectedCard(card);
    setShowEditModal(true);
  };

  const handleCloseModals = () => {
    setShowAddModal(false);
    setShowEditModal(false);
    setSelectedCard(null);
  };

  const handleRatingCardCreated = (newCard) => {
    setRatingCards([...ratingCards, newCard]);
    handleCloseModals();
  };

  const handleRatingCardUpdated = (updatedCard) => {
    setRatingCards(ratingCards.map((card) => (card.id === updatedCard.id ? updatedCard : card)));
    handleCloseModals();
  };

  const handleDeleteRatingCard = async (templateId) => {
    if (window.confirm('Voulez-vous vraiment supprimer cette fiche d\'évaluation ?')) {
      try {
        await ratingCardService.deleteRatingCard(companyId, templateId);
        setRatingCards(ratingCards.filter((card) => card.id !== templateId));
      } catch (error) {
        console.error('Erreur lors de la suppression de la fiche d\'évaluation:', error);
      }
    }
  };

  if (authLoading || loading) {
    return <LoadingSpinner />;
  }

  if (authError) {
    return <div className="text-red-700">{authError}</div>;
  }

  if (!companyId) {
    return <div className="text-red-700">Aucune entreprise sélectionnée.</div>;
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <div>
          <h2 className="text-xl font-bold text-slate-800">Fiches d'évaluation</h2>
          <p className="text-sm text-slate-500">
            Les fiches d'évaluation sont utilisées pour évaluer les candidats à différentes étapes du processus de recrutement.
          </p>
        </div>
        <button
          onClick={handleAddRatingCard}
          className="px-4 py-2 bg-green-500 text-white rounded-md flex items-center hover:bg-green-600"
        >
          <Plus size={18} className="mr-2" />
          Ajouter une fiche d'évaluation
        </button>
      </div>

      <div className="space-y-4">
        {ratingCards.map((card) => (
          <div
            key={card.id}
            className="bg-white rounded-lg border border-slate-200 p-5 hover:shadow-md transition-shadow"
          >
            <div className="flex justify-between items-center">
              <div>
                <h3 className="font-medium text-lg text-slate-800">{card.name}</h3>
                <p className="text-sm text-slate-500 mt-1">
                  {card.isDefault
                    ? "Utilisée par défaut si vous n'avez pas spécifié une fiche personnalisée dans une étape de type Évaluation."
                    : card.description || 'Aucune description'}
                </p>
              </div>
              <div className="flex items-center gap-2">
                <button
                  onClick={() => handleEditRatingCard(card)}
                  className="p-2 text-slate-400 hover:text-blue-600 rounded-full hover:bg-slate-100"
                  disabled={card.isDefault && card.name === 'Default Rating Card'}
                >
                  <Edit2 size={18} />
                </button>
                <button
                  onClick={() => handleDeleteRatingCard(card.id)}
                  className="p-2 text-slate-400 hover:text-red-600 rounded-full hover:bg-slate-100"
                  disabled={card.isDefault}
                >
                  <X size={18} />
                </button>
              </div>
            </div>
          </div>
        ))}

        {ratingCards.length === 0 && (
          <div className="bg-white rounded-lg border border-slate-200 p-8 text-center">
            <p className="text-slate-500 mb-4">Aucune fiche d'évaluation trouvée.</p>
            <button
              onClick={handleAddRatingCard}
              className="px-4 py-2 bg-blue-600 text-white rounded-md"
            >
              Créer votre première fiche d'évaluation
            </button>
          </div>
        )}
      </div>

      {showAddModal && (
        <RatingCardModal
          onClose={handleCloseModals}
          onSave={handleRatingCardCreated}
          companyId={companyId}
        />
      )}

      {showEditModal && selectedCard && (
        <RatingCardModal
          ratingCard={selectedCard}
          onClose={handleCloseModals}
          onSave={handleRatingCardUpdated}
          isEditing={true}
          companyId={companyId}
        />
      )}
    </div>
  );
};

export default RecruitingRatingCards;
=== FIN ===

=== Contenu de frontend\src\pages\settings\RecruitingSettings.jsx ===
import React from 'react';
import { Link, Outlet, useLocation } from 'react-router-dom';
import { FileText, Calendar, MessageCircle, CheckSquare, Star } from 'lucide-react';

const RecruitingSettings = () => {
    const location = useLocation();

    const isActive = (path) => {
        return location.pathname.includes(path);
    };

    return (
        <div className="flex min-h-screen bg-slate-50">
            {/* Sidebar */}
            <div className="w-60 bg-white border-r border-slate-200 p-4">
                <h2 className="text-lg font-medium text-slate-800 mb-6">Préférences de recrutement</h2>

                <div className="border rounded-lg overflow-hidden bg-white mb-4">
                    <div className="p-3 border-b border-slate-100">
                        <h3 className="text-sm font-medium text-slate-700">Templates & Workflows</h3>
                    </div>

                    <div className="flex flex-col">
                        <Link
                            to="/settings/recruiting/workflows"
                            className={`flex items-center gap-2 p-3 ${isActive('/workflows') ? 'bg-blue-100 text-blue-700' : 'hover:bg-slate-50 text-slate-700'} text-left`}
                        >
                            <FileText className="w-4 h-4" />
                            <span className="text-sm">Workflows</span>
                        </Link>

                        <Link
                            to="/settings/recruiting/meeting-templates"
                            className={`flex items-center gap-2 p-3 ${isActive('/meeting-templates') ? 'bg-blue-100 text-blue-700' : 'hover:bg-slate-50 text-slate-700'} text-left`}
                        >
                            <Calendar className="w-4 h-4" />
                            <span className="text-sm">Templates d'entretien</span>
                        </Link>

                        <Link
                            to="/settings/recruiting/message-templates"
                            className={`flex items-center gap-2 p-3 ${isActive('/message-templates') ? 'bg-blue-100 text-blue-700' : 'hover:bg-slate-50 text-slate-700'} text-left`}
                        >
                            <MessageCircle className="w-4 h-4" />
                            <span className="text-sm">Templates de message</span>
                        </Link>

                        <Link
                            to="/settings/recruiting/questions"
                            className={`flex items-center gap-2 p-3 ${isActive('/questions') ? 'bg-blue-100 text-blue-700' : 'hover:bg-slate-50 text-slate-700'} text-left`}
                        >
                            <CheckSquare className="w-4 h-4" />
                            <span className="text-sm">Questions</span>
                        </Link>

                        <Link
                            to="/settings/recruiting/ratingcards"
                            className={`flex items-center gap-2 p-3 ${isActive('/ratingcards') ? 'bg-blue-100 text-blue-700' : 'hover:bg-slate-50 text-slate-700'} text-left`}
                        >
                            <Star className="w-4 h-4" />
                            <span className="text-sm">Fiches d'évaluation</span>
                        </Link>
                    </div>
                </div>
            </div>

            {/* Main content area - will render child routes */}
            <div className="flex-1 p-4">
                <h1 className="text-2xl font-bold text-slate-800 mb-6">Recruiting Preferences</h1>
                <Outlet />
            </div>
        </div>
    );
};

export default RecruitingSettings;
=== FIN ===

=== Contenu de frontend\src\pages\settings\RecruitingWorkflows.jsx ===
import React, { useState, useEffect } from 'react';
import { Calendar, FileText, Plus } from 'lucide-react';
import WorkflowEditor from '../../components/settings/WorkflowEditor';
import { workflowService } from '../../services/api';
import axios from '../../utils/axios';
import LoadingSpinner from '../../components/common/LoadingSpinner';

const RecruitingWorkflows = () => {
    const [workflows, setWorkflows] = useState([]);
    const [selectedWorkflow, setSelectedWorkflow] = useState(null);
    const [loading, setLoading] = useState(true);
    const [creatingWorkflow, setCreatingWorkflow] = useState(false);
    const [newWorkflowName, setNewWorkflowName] = useState('');
    const [companyId, setCompanyId] = useState(null);
    const [errorMessage, setErrorMessage] = useState('');

    useEffect(() => {
        const fetchCompanyId = async () => {
            try {
                const token = localStorage.getItem('token');
                if (!token) {
                    setErrorMessage('Utilisateur non authentifié. Veuillez vous connecter.');
                    return;
                }

                const response = await axios.get('/companies/my-companies');
                const data = response.data;

                if (data.data && data.data.length > 0) {
                    const validCompanyId = data.data[0].id;
                    console.log('Fetched companyId:', validCompanyId); // Débogage
                    setCompanyId(validCompanyId);
                } else {
                    setErrorMessage('Aucune entreprise trouvée. Veuillez créer une entreprise.');
                }
            } catch (error) {
                console.error('Error fetching companies:', error);
                if (error.response) {
                    console.error('Response status:', error.response.status);
                    console.error('Response data:', error.response.data);
                    setErrorMessage(
                        `Erreur ${error.response.status}: ${error.response.data.message || 'Route non trouvée.'}`
                    );
                } else if (error.request) {
                    setErrorMessage('Le serveur est inaccessible. Vérifiez votre connexion.');
                } else {
                    setErrorMessage('Erreur lors de la configuration de la requête.');
                }
            }
        };

        fetchCompanyId();
        if (companyId) {
            fetchWorkflows();
        }
    }, [companyId]);

    const fetchWorkflows = async () => {
        if (!companyId) return;
        try {
            setLoading(true);
            const data = await workflowService.getWorkflows(companyId);
            setWorkflows(data);
            if (data.length > 0) {
                setSelectedWorkflow(data[0]);
            }
        } catch (error) {
            console.error('Error fetching workflows:', error);
            if (error.response && error.response.status === 404) {
                setErrorMessage('La route des workflows n\'existe pas ou l\'ID est invalide.');
            } else {
                setErrorMessage('Erreur lors de la récupération des workflows.');
            }
        } finally {
            setLoading(false);
        }
    };

    const handleAddWorkflow = async () => {
        if (creatingWorkflow) {
            try {
                if (!newWorkflowName.trim()) {
                    setErrorMessage('Le nom du workflow est requis.');
                    return;
                }
                if (!companyId) {
                    setErrorMessage('Aucune entreprise sélectionnée.');
                    return;
                }

                console.log('Creating workflow with companyId:', companyId, 'name:', newWorkflowName); // Débogage
                const newWorkflow = await workflowService.createWorkflow(companyId, {
                    name: newWorkflowName,
                });

                setWorkflows([...workflows, newWorkflow]);
                setSelectedWorkflow(newWorkflow);
                setCreatingWorkflow(false);
                setNewWorkflowName('');
                setErrorMessage('');
            } catch (error) {
                console.error('Error creating workflow:', error);
                if (error.response && error.response.status === 404) {
                    setErrorMessage('La route de création de workflow n\'existe pas.');
                } else {
                    setErrorMessage(error.message || 'Erreur lors de la création du workflow.');
                }
            }
        } else {
            setCreatingWorkflow(true);
        }
    };

    const handleWorkflowUpdate = (updatedWorkflow) => {
        setWorkflows(workflows.map(w => w.id === updatedWorkflow.id ? updatedWorkflow : w));
        setSelectedWorkflow(updatedWorkflow);
    };

    if (loading) {
        return <LoadingSpinner />;
    }

    return (
        <div className="flex h-full">
            <div className="w-1/3 pr-4">
                <div className="bg-white rounded-lg border border-slate-200 p-4">
                    <div className="flex justify-between items-center mb-4">
                        <h2 className="text-lg font-medium text-slate-800">Workflows</h2>
                        <button
                            onClick={handleAddWorkflow}
                            className="h-8 w-8 flex items-center justify-center rounded-full bg-slate-100 hover:bg-slate-200 text-slate-600"
                            disabled={!companyId}
                        >
                            <Plus size={18} />
                        </button>
                    </div>
                    {errorMessage && (
                        <div className="mb-4 text-red-600 text-sm">{errorMessage}</div>
                    )}
                    <p className="text-sm text-slate-500 mb-4">Create & customize hiring workflows.</p>

                    {creatingWorkflow && (
                        <div className="mb-4">
                            <input
                                type="text"
                                placeholder="Enter workflow name"
                                className="w-full p-2 border border-slate-300 rounded-md"
                                value={newWorkflowName}
                                onChange={(e) => setNewWorkflowName(e.target.value)}
                                autoFocus
                            />
                            <div className="flex justify-end mt-2">
                                <button
                                    onClick={() => {
                                        setCreatingWorkflow(false);
                                        setNewWorkflowName('');
                                        setErrorMessage('');
                                    }}
                                    className="px-3 py-1 mr-2 text-slate-600 hover:bg-slate-100 rounded"
                                >
                                    Cancel
                                </button>
                                <button
                                    onClick={handleAddWorkflow}
                                    className="px-3 py-1 bg-blue-600 text-white rounded"
                                >
                                    Create
                                </button>
                            </div>
                        </div>
                    )}

                    <div className="space-y-2">
                        {workflows.map(workflow => (
                            <div
                                key={workflow.id}
                                className={`p-3 rounded-lg border cursor-pointer ${
                                    selectedWorkflow?.id === workflow.id
                                        ? 'border-blue-500 bg-blue-50'
                                        : 'border-slate-200 hover:bg-slate-50'
                                }`}
                                onClick={() => setSelectedWorkflow(workflow)}
                            >
                                <h4 className="text-blue-600 font-medium text-sm mb-1">{workflow.name}</h4>
                                <div className="flex items-center justify-between text-xs text-slate-500">
                                    <div className="flex items-center gap-1">
                                        <FileText className="w-3 h-3" />
                                        <span>{workflow.stages?.length || 0} Stages</span>
                                    </div>
                                    <div className="flex items-center gap-1">
                                        <Calendar className="w-3 h-3" />
                                        <span>Added {new Date(workflow.createdAt).toLocaleDateString()}</span>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div className="w-2/3 pl-4">
            {companyId && selectedWorkflow ? (
                    <WorkflowEditor
                        workflow={selectedWorkflow}
                        companyId={companyId}
                        onWorkflowUpdate={handleWorkflowUpdate}
                    />
                ) : (
                    <div className="bg-white rounded-lg border border-slate-200 p-6 flex flex-col items-center justify-center h-64">
                        <FileText size={48} className="text-slate-300 mb-4" />
                        <p className="text-slate-500">Select a workflow to edit or create a new one</p>
                    </div>
                )}
            </div>
        </div>
    );
};

export default RecruitingWorkflows;
=== FIN ===

=== Contenu de frontend\src\pages\settings\Settings.jsx ===
import React, { useState } from 'react';
import { toast } from 'react-toastify';
import { User, Mail, Building, Phone, Lock, Save } from 'lucide-react';
import { useAuth } from '../../contexts/AuthContext';
import { useSettings } from '../../contexts/SettingsProvider';

const Settings = () => {
  const { user } = useAuth();
  const { settings, updateSettings } = useSettings();


  const [profileForm, setProfileForm] = useState({
    firstName: user?.firstName || '',
    lastName: user?.lastName || '',
    email: user?.email || '',
    companyName: user?.companyName || '',
    phoneNumber: user?.phoneNumber || ''
  });
  
  const [passwordForm, setPasswordForm] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });
  
  const [appSettings, setAppSettings] = useState({
    theme: settings.theme || 'light',
    language: settings.language || 'fr',
    notificationsEnabled: settings.notificationsEnabled !== false,
    emailNotifications: settings.emailNotifications !== false
  });
  
  const [activeTab, setActiveTab] = useState('profile');
  
  const handleProfileChange = (e) => {
    const { name, value } = e.target;
    setProfileForm(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  const handlePasswordChange = (e) => {
    const { name, value } = e.target;
    setPasswordForm(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  const handleSettingsChange = (e) => {
    const { name, type, checked, value } = e.target;
    setAppSettings(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };
  
  const handleProfileSubmit = (e) => {
    e.preventDefault();
    // Simuler mise à jour du profil
    toast.success('Profil mis à jour avec succès');
  };
  
  const handlePasswordSubmit = (e) => {
    e.preventDefault();
    
    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      toast.error('Les mots de passe ne correspondent pas');
      return;
    }
    
    if (passwordForm.newPassword.length < 8) {
      toast.error('Le mot de passe doit contenir au moins 8 caractères');
      return;
    }
    
    // Simuler changement de mot de passe
    toast.success('Mot de passe mis à jour avec succès');
    setPasswordForm({
      currentPassword: '',
      newPassword: '',
      confirmPassword: ''
    });
  };
  
  const handleSettingsSubmit = (e) => {
    e.preventDefault();
    updateSettings(appSettings);
    toast.success('Paramètres mis à jour avec succès');
  };
  
  return (
    <div>
      <div className="mb-8">
        <h1 className="text-2xl font-bold text-slate-800">Paramètres</h1>
        <p className="text-slate-500 mt-1">Gérez votre compte et vos préférences</p>
      </div>
      
      <div className="flex">
        <div className="w-48 flex-shrink-0">
          <div className="bg-white rounded-xl shadow-sm overflow-hidden">
            <div className="p-4">
              <button 
                onClick={() => setActiveTab('profile')}
                className={`w-full text-left px-3 py-2 mb-1 rounded-lg ${activeTab === 'profile' ? 'bg-blue-50 text-blue-600' : 'text-slate-600 hover:bg-slate-50'}`}
              >
                Profil
              </button>
              <button 
                onClick={() => setActiveTab('security')}
                className={`w-full text-left px-3 py-2 mb-1 rounded-lg ${activeTab === 'security' ? 'bg-blue-50 text-blue-600' : 'text-slate-600 hover:bg-slate-50'}`}
              >
                Sécurité
              </button>
              <button 
                onClick={() => setActiveTab('preferences')}
                className={`w-full text-left px-3 py-2 mb-1 rounded-lg ${activeTab === 'preferences' ? 'bg-blue-50 text-blue-600' : 'text-slate-600 hover:bg-slate-50'}`}
              >
                Préférences
              </button>
              <button 
                onClick={() => setActiveTab('notifications')}
                className={`w-full text-left px-3 py-2 mb-1 rounded-lg ${activeTab === 'notifications' ? 'bg-blue-50 text-blue-600' : 'text-slate-600 hover:bg-slate-50'}`}
              >
                Notifications
              </button>
            </div>
          </div>
        </div>
        
        <div className="flex-1 ml-6">
          {activeTab === 'profile' && (
            <div className="bg-white rounded-xl shadow-sm overflow-hidden">
              <div className="p-6 pb-3 border-b border-slate-100">
                <h2 className="text-lg font-semibold text-slate-800">Informations personnelles</h2>
              </div>
              
              <form onSubmit={handleProfileSubmit} className="p-6">
                <div className="grid grid-cols-2 gap-6 mb-6">
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">
                      Prénom
                    </label>
                    <div className="relative">
                      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <User className="h-5 w-5 text-slate-400" />
                      </div>
                      <input
                        type="text"
                        name="firstName"
                        value={profileForm.firstName}
                        onChange={handleProfileChange}
                        className="pl-10 w-full p-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      />
                    </div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-1">
                      Nom
                    </label>
                    <input
                      type="text"
                      name="lastName"
                      value={profileForm.lastName}
                      onChange={handleProfileChange}
                      className="w-full p-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>
                
                <div className="mb-6">
                  <label className="block text-sm font-medium text-slate-700 mb-1">
                    Email
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Mail className="h-5 w-5 text-slate-400" />
                    </div>
                    <input
                      type="email"
                      name="email"
                      value={profileForm.email}
                      onChange={handleProfileChange}
                      className="pl-10 w-full p-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>
                
                <div className="mb-6">
                  <label className="block text-sm font-medium text-slate-700 mb-1">
                    Entreprise
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Building className="h-5 w-5 text-slate-400" />
                    </div>
                    <input
                      type="text"
                      name="companyName"
                      value={profileForm.companyName}
                      onChange={handleProfileChange}
                      className="pl-10 w-full p-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>
                
                <div className="mb-6">
                  <label className="block text-sm font-medium text-slate-700 mb-1">
                    Téléphone
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Phone className="h-5 w-5 text-slate-400" />
                    </div>
                    <input
                      type="tel"
                      name="phoneNumber"
                      value={profileForm.phoneNumber}
                      onChange={handleProfileChange}
                      className="pl-10 w-full p-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>
                
                <div className="flex justify-end">
                  <button 
                    type="submit"
                    className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    Enregistrer
                  </button>
                </div>
              </form>
            </div>
          )}
          
          {activeTab === 'security' && (
            <div className="bg-white rounded-xl shadow-sm overflow-hidden">
              <div className="p-6 pb-3 border-b border-slate-100">
                <h2 className="text-lg font-semibold text-slate-800">Changer le mot de passe</h2>
              </div>
              
              <form onSubmit={handlePasswordSubmit} className="p-6">
                <div className="mb-6">
                  <label className="block text-sm font-medium text-slate-700 mb-1">
                    Mot de passe actuel
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Lock className="h-5 w-5 text-slate-400" />
                    </div>
                    <input
                      type="password"
                      name="currentPassword"
                      value={passwordForm.currentPassword}
                      onChange={handlePasswordChange}
                      className="pl-10 w-full p-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>
                
                <div className="mb-6">
                  <label className="block text-sm font-medium text-slate-700 mb-1">
                    Nouveau mot de passe
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Lock className="h-5 w-5 text-slate-400" />
                    </div>
                    <input
                      type="password"
                      name="newPassword"
                      value={passwordForm.newPassword}
                      onChange={handlePasswordChange}
                      className="pl-10 w-full p-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  <p className="mt-1 text-xs text-slate-500">
                    Le mot de passe doit contenir au moins 8 caractères
                  </p>
                </div>
                
                <div className="mb-6">
                  <label className="block text-sm font-medium text-slate-700 mb-1">
                    Confirmer le nouveau mot de passe
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <Lock className="h-5 w-5 text-slate-400" />
                    </div>
                    <input
                      type="password"
                      name="confirmPassword"
                      value={passwordForm.confirmPassword}
                      onChange={handlePasswordChange}
                      className="pl-10 w-full p-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>
                
                <div className="flex justify-end">
                  <button 
                    type="submit"
                    className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    Mettre à jour
                  </button>
                </div>
              </form>
            </div>
          )}
          
          {activeTab === 'preferences' && (
            <div className="bg-white rounded-xl shadow-sm overflow-hidden">
              <div className="p-6 pb-3 border-b border-slate-100">
                <h2 className="text-lg font-semibold text-slate-800">Préférences de l'application</h2>
              </div>
              
              <form onSubmit={handleSettingsSubmit} className="p-6">
                <div className="mb-6">
                  <label className="block text-sm font-medium text-slate-700 mb-3">
                    Thème
                  </label>
                  <div className="flex space-x-4">
                    <label className="flex items-center">
                      <input
                        type="radio"
                        name="theme"
                        value="light"
                        checked={appSettings.theme === 'light'}
                        onChange={handleSettingsChange}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-slate-300"
                      />
                      <span className="ml-2 text-sm text-slate-700">Clair</span>
                    </label>
                    <label className="flex items-center">
                      <input
                        type="radio"
                        name="theme"
                        value="dark"
                        checked={appSettings.theme === 'dark'}
                        onChange={handleSettingsChange}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-slate-300"
                      />
                      <span className="ml-2 text-sm text-slate-700">Sombre</span>
                    </label>
                    <label className="flex items-center">
                      <input
                        type="radio"
                        name="theme"
                        value="system"
                        checked={appSettings.theme === 'system'}
                        onChange={handleSettingsChange}
                        className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-slate-300"
                      />
                      <span className="ml-2 text-sm text-slate-700">Système</span>
                    </label>
                  </div>
                </div>
                
                <div className="mb-6">
                  <label className="block text-sm font-medium text-slate-700 mb-1">
                    Langue
                  </label>
                  <select
                    name="language"
                    value={appSettings.language}
                    onChange={handleSettingsChange}
                    className="w-full p-2.5 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  >
                    <option value="fr">Français</option>
                    <option value="en">English</option>
                    <option value="es">Español</option>
                  </select>
                </div>
                
                <div className="flex justify-end">
                  <button 
                    type="submit"
                    className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    Enregistrer
                  </button>
                </div>
              </form>
            </div>
          )}
          
          {activeTab === 'notifications' && (
            <div className="bg-white rounded-xl shadow-sm overflow-hidden">
              <div className="p-6 pb-3 border-b border-slate-100">
                <h2 className="text-lg font-semibold text-slate-800">Paramètres de notification</h2>
              </div>
              
              <form onSubmit={handleSettingsSubmit} className="p-6">
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-slate-700">Notifications dans l'application</p>
                      <p className="text-xs text-slate-500">Recevoir des notifications dans l'application</p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input 
                        type="checkbox" 
                        name="notificationsEnabled"
                        checked={appSettings.notificationsEnabled}
                        onChange={handleSettingsChange}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-slate-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm font-medium text-slate-700">Notifications par email</p>
                      <p className="text-xs text-slate-500">Recevoir des notifications par email</p>
                    </div>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input 
                        type="checkbox" 
                        name="emailNotifications"
                        checked={appSettings.emailNotifications}
                        onChange={handleSettingsChange}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-slate-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-slate-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>
                  
                  <div className="mt-6 pt-6 border-t border-slate-100">
                    <p className="text-sm font-medium text-slate-700 mb-3">Notifications à recevoir</p>
                    
                    <div className="space-y-3">
                      <label className="flex items-center">
                        <input
                          type="checkbox"
                          checked={true}
                          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-slate-300 rounded"
                        />
                        <span className="ml-2 text-sm text-slate-700">Nouveaux CV analysés</span>
                      </label>
                      
                      <label className="flex items-center">
                        <input
                          type="checkbox"
                          checked={true}
                          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-slate-300 rounded"
                        />
                        <span className="ml-2 text-sm text-slate-700">Entretiens planifiés</span>
                      </label>
                      
                      <label className="flex items-center">
                        <input
                          type="checkbox"
                          checked={true}
                          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-slate-300 rounded"
                        />
                        <span className="ml-2 text-sm text-slate-700">Nouvelles candidatures</span>
                      </label>
                      
                      <label className="flex items-center">
                        <input
                          type="checkbox"
                          checked={false}
                          className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-slate-300 rounded"
                        />
                        <span className="ml-2 text-sm text-slate-700">Rapports hebdomadaires</span>
                      </label>
                    </div>
                  </div>
                </div>
                
                <div className="flex justify-end mt-6">
                  <button 
                    type="submit"
                    className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                  >
                    <Save className="w-4 h-4 mr-2" />
                    Enregistrer
                  </button>
                </div>
              </form>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default Settings;
=== FIN ===

=== Contenu de frontend\src\pages\settings\company\CompanyLocations.jsx ===
import React, { useState, useEffect } from 'react';
import { MapPin, Edit2, Trash2, Plus, X } from 'lucide-react';
import { companyService } from '../../../services/api';
import { toast } from 'react-toastify';
import LocationFormModal from '../../../components/settings/LocationFormModal';
import ConfirmModal from '../../../components/common/ConfirmModal';

const CompanyLocations = () => {
  const [locations, setLocations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [currentLocation, setCurrentLocation] = useState(null);
  const [companyId, setCompanyId] = useState(null);

  useEffect(() => {
    fetchCompanyAndLocations();
  }, []);

  const fetchCompanyAndLocations = async () => {
    try {
      setLoading(true);
      const companyData = await companyService.getCompanyProfile();
      setCompanyId(companyData.id);
      const data = await companyService.getCompanyLocations(companyData.id);
      setLocations(data);
    } catch (error) {
      console.error('Erreur lors du chargement des emplacements:', error);
      toast.error(error.message || 'Impossible de charger les emplacements');
    } finally {
      setLoading(false);
    }
  };

  const handleAddLocation = () => {
    setCurrentLocation(null);
    setIsAddModalOpen(true);
  };

  const handleEditLocation = (location) => {
    setCurrentLocation(location);
    setIsEditModalOpen(true);
  };

  const handleDeleteLocation = (location) => {
    setCurrentLocation(location);
    setIsDeleteModalOpen(true);
  };

  const handleSaveLocation = async (locationData) => {
    try {
      console.log('Données reçues dans handleSaveLocation:', locationData);
      if (currentLocation && isEditModalOpen) {
        await companyService.updateCompanyLocation(companyId, currentLocation.id, locationData);
        toast.success('Emplacement mis à jour avec succès');
      } else {
        await companyService.addCompanyLocation(companyId, locationData);
        toast.success('Nouvel emplacement ajouté avec succès');
      }
      fetchCompanyAndLocations();
      setIsAddModalOpen(false);
      setIsEditModalOpen(false);
    } catch (error) {
      console.error('Erreur lors de l\'enregistrement de l\'emplacement:', error);
      toast.error(error.message || 'Échec de l\'enregistrement de l\'emplacement');
    }
  };

  const handleConfirmDelete = async () => {
    try {
      await companyService.deleteCompanyLocation(companyId, currentLocation.id);
      toast.success('Emplacement supprimé avec succès');
      fetchCompanyAndLocations();
      setIsDeleteModalOpen(false);
    } catch (error) {
      console.error('Erreur lors de la suppression de l\'emplacement:', error);
      toast.error(error.message || 'Échec de la suppression de l\'emplacement');
    }
  };

  if (loading && locations.length === 0) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <>
      <div className="bg-white rounded-lg shadow-sm p-6">
        <div className="flex justify-between items-center mb-6">
          <div className="flex items-center">
            <MapPin className="h-6 w-6 text-blue-600 mr-2" />
            <h2 className="text-xl font-semibold text-slate-800">Emplacements de bureau</h2>
          </div>
          <button
            onClick={handleAddLocation}
            className="px-4 py-2 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-md shadow-sm hover:from-blue-700 hover:to-indigo-700 flex items-center"
          >
            <Plus className="h-4 w-4 mr-2" />
            Ajouter un emplacement
          </button>
        </div>

        <p className="text-sm text-slate-500 mb-6">
          Les emplacements sont utilisés avec vos offres d'emploi et apparaîtront également comme options filtrables sur votre site carrières.
        </p>

        {locations.length === 0 ? (
          <div className="text-center py-10 border-2 border-dashed border-slate-200 rounded-lg">
            <MapPin className="h-10 w-10 text-slate-400 mx-auto mb-3" />
            <p className="text-slate-500">Aucun emplacement ajouté</p>
            <button
              onClick={handleAddLocation}
              className="mt-3 px-4 py-2 bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200"
            >
              Ajouter votre premier emplacement
            </button>
          </div>
        ) : (
          <div className="space-y-3">
            {locations.map((location) => (
              <div key={location.id} className="flex justify-between items-center p-4 border border-slate-200 rounded-lg">
                <div>
                  <p className="font-medium text-slate-800">{location.city}, {location.country}</p>
                  {location.address && <p className="text-sm text-slate-500">{location.address}</p>}
                  {location.zipPostal && <p className="text-sm text-slate-500">{location.zipPostal}</p>}
                </div>
                <div className="flex space-x-2">
                  <button
                    onClick={() => handleEditLocation(location)}
                    className="p-2 text-slate-400 hover:text-blue-600 hover:bg-blue-50 rounded-full"
                  >
                    <Edit2 className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => handleDeleteLocation(location)}
                    className="p-2 text-slate-400 hover:text-red-600 hover:bg-red-50 rounded-full"
                  >
                    <Trash2 className="h-4 w-4" />
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      <LocationFormModal
        isOpen={isAddModalOpen}
        onClose={() => setIsAddModalOpen(false)}
        onSave={handleSaveLocation}
        title="Ajouter un emplacement"
      />

      <LocationFormModal
        isOpen={isEditModalOpen}
        onClose={() => setIsEditModalOpen(false)}
        onSave={handleSaveLocation}
        location={currentLocation}
        title="Modifier l'emplacement"
      />

      <ConfirmModal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        onConfirm={handleConfirmDelete}
        title="Supprimer cet emplacement ?"
        message={`Êtes-vous sûr de vouloir supprimer l'emplacement ${currentLocation?.city}, ${currentLocation?.country} ?`}
        confirmText="Continuer"
        cancelText="Annuler"
        icon={<Trash2 className="h-6 w-6 text-red-500" />}
      />
    </>
  );
};

export default CompanyLocations;
=== FIN ===

=== Contenu de frontend\src\pages\settings\company\CompanyProfile.jsx ===
import React, { useState, useEffect } from 'react';
import { Building, Save } from 'lucide-react';
import { companyService } from '../../../services/api';
import { toast } from 'react-toastify';

const CompanyProfile = () => {
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [companyData, setCompanyData] = useState({
    name: '',
    website: '',
    phoneNumber: '',
    description: '',
  });
  const [companyId, setCompanyId] = useState(null);
  const [errors, setErrors] = useState({});

  useEffect(() => {
    fetchCompanyProfile();
  }, []);

  const fetchCompanyProfile = async () => {
    try {
      setLoading(true);
      const data = await companyService.getCompanyProfile();
      console.log("data",data);
      if (data) {
        setCompanyData({
          name: data.name || '',
          website: data.website || '',
          phoneNumber: data.phoneNumber || '',
          description: data.description || '',
        });
        setCompanyId(data.id);
      }
    } catch (error) {
      console.error('Erreur lors du chargement du profil de l\'entreprise:', error);
      toast.error(error.message || 'Impossible de charger les informations de l\'entreprise');
    } finally {
      setLoading(false);
    }
  };

  const validateForm = () => {
    const newErrors = {};
    if (!companyData.name.trim()) {
      newErrors.name = 'Le nom de l\'entreprise est requis';
    } else if (!/^[a-zA-Z0-9\s&-_.]+$/.test(companyData.name)) {
      newErrors.name = 'Le nom ne doit contenir que des lettres, chiffres, espaces ou tirets';
    }
    if (companyData.website) {
      try {
        new URL(companyData.website);
        if (!companyData.website.match(/^https?:\/\/[a-zA-Z0-9-]+\.[a-zA-Z]{2,}/)) {
          newErrors.website = 'L\'URL doit être un domaine valide (ex. https://exemple.com)';
        }
      } catch {
        newErrors.website = 'URL invalide';
      }
    }
    if (companyData.description && companyData.description.length < 10) {
      newErrors.description = 'La description doit contenir au moins 10 caractères';
    }
    if (companyData.phoneNumber && !/^\+?\d{10,15}$/.test(companyData.phoneNumber)) {
      newErrors.phoneNumber = 'Numéro de téléphone invalide (10-15 chiffres)';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setCompanyData((prev) => ({
      ...prev,
      [name]: value,
    }));
    setErrors((prev) => ({ ...prev, [name]: '' }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!validateForm()) {
      toast.error('Veuillez corriger les erreurs dans le formulaire');
      return;
    }

    try {
      setSaving(true);
      if (companyId) {
        await companyService.updateCompany(companyId, companyData);
        toast.success('Profil de l\'entreprise mis à jour avec succès');
      } else {
        const response = await companyService.createCompany(companyData);
        console.log("response",response.data);
        setCompanyId(response.data.id);
        toast.success('Entreprise créée avec succès');
      }
    } catch (error) {
      console.error('Erreur lors de la sauvegarde:', error);
      const errorMessage = error.response?.data?.message || 'Échec de la sauvegarde du profil de l\'entreprise';
      toast.error(errorMessage);
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-sm p-6">
      <div className="flex items-center mb-6">
        <Building className="h-6 w-6 text-blue-600 mr-2" />
        <h2 className="text-xl font-semibold text-slate-800">Profil de l'entreprise</h2>
      </div>

      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label htmlFor="name" className="block text-sm font-medium text-slate-700 mb-1">
            Nom de l'entreprise <span className="text-xs text-red-500">Obligatoire</span>
          </label>
          <input
            type="text"
            id="name"
            name="name"
            value={companyData.name}
            onChange={handleChange}
            className={`w-full p-2 border ${errors.name ? 'border-red-500' : 'border-slate-300'} rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500`}
            placeholder="Nom de votre entreprise"
          />
          {errors.name && <p className="text-xs text-red-500 mt-1">{errors.name}</p>}
        </div>

        <div>
          <label htmlFor="website" className="block text-sm font-medium text-slate-700 mb-1">
            Site web de l'entreprise
          </label>
          <input
            type="url"
            id="website"
            name="website"
            value={companyData.website}
            onChange={handleChange}
            className={`w-full p-2 border ${errors.website ? 'border-red-500' : 'border-slate-300'} rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500`}
            placeholder="https://www.votreentreprise.fr"
          />
          {errors.website && <p className="text-xs text-red-500 mt-1">{errors.website}</p>}
        </div>

        <div>
          <label htmlFor="phoneNumber" className="block text-sm font-medium text-slate-700 mb-1">
            Numéro de téléphone
          </label>
          <input
            type="tel"
            id="phoneNumber"
            name="phoneNumber"
            value={companyData.phoneNumber}
            onChange={handleChange}
            className={`w-full p-2 border ${errors.phoneNumber ? 'border-red-500' : 'border-slate-300'} rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500`}
            placeholder="01 23 45 67 89"
          />
          {errors.phoneNumber && <p className="text-xs text-red-500 mt-1">{errors.phoneNumber}</p>}
        </div>

        <div>
          <label htmlFor="description" className="block text-sm font-medium text-slate-700 mb-1">
            Description
          </label>
          <textarea
            id="description"
            name="description"
            value={companyData.description}
            onChange={handleChange}
            className={`w-full p-2 border ${errors.description ? 'border-red-500' : 'border-slate-300'} rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500`}
            placeholder="Description de l'entreprise"
          />
          {errors.description && <p className="text-xs text-red-500 mt-1">{errors.description}</p>}
        </div>

        <div>
          <button
            type="submit"
            disabled={saving}
            className="px-4 py-2 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-md shadow-sm hover:from-blue-700 hover:to-indigo-700 flex items-center"
          >
            <Save className="h-4 w-4 mr-2" />
            {saving ? 'Enregistrement...' : 'Enregistrer les modifications'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default CompanyProfile;
=== FIN ===

=== Contenu de frontend\src\pages\settings\company\Departments.jsx ===
import React, { useState, useEffect } from 'react';
import { Edit2, Trash2, Plus, X, Check } from 'lucide-react';
import { companyService } from '../../../services/api';
import { toast } from 'react-toastify';
import LoadingSpinner from '../../../components/common/LoadingSpinner';
import ConfirmModal from '../../../components/common/ConfirmModal';

const Departments = () => {
  const [departments, setDepartments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [newDepartment, setNewDepartment] = useState('');
  const [isAdding, setIsAdding] = useState(false);
  const [editingDepartment, setEditingDepartment] = useState(null);
  const [confirmDelete, setConfirmDelete] = useState(null);
  const [companyId, setCompanyId] = useState(null);

  useEffect(() => {
    fetchCompanyAndDepartments();
  }, []);

  const fetchCompanyAndDepartments = async () => {
    try {
      setLoading(true);
      const companyData = await companyService.getCompanyProfile();
      setCompanyId(companyData.id);
      const data = await companyService.getDepartments(companyData.id);
      setDepartments(data);
    } catch (error) {
      console.error('Erreur lors du chargement des départements:', error);
      toast.error(error.message || 'Impossible de charger les départements');
    } finally {
      setLoading(false);
    }
  };

  const handleAddDepartment = async () => {
    if (!newDepartment.trim()) {
      toast.error('Le nom du département est requis');
      return;
    }

    try {
      const addedDepartment = await companyService.createDepartment(companyId, {
        name: newDepartment.trim(),
      });
      setDepartments([...departments, addedDepartment]);
      setNewDepartment('');
      setIsAdding(false);
      toast.success('Département ajouté avec succès');
    } catch (error) {
      console.error('Erreur lors de l\'ajout du département:', error);
      toast.error(error.message || 'Échec de l\'ajout du département');
    }
  };

  const handleUpdateDepartment = async (id, newName) => {
    if (!newName.trim()) {
      toast.error('Le nom du département est requis');
      return;
    }

    try {
      await companyService.updateDepartment(companyId, id, { name: newName });
      setDepartments(departments.map((dept) => (dept.id === id ? { ...dept, name: newName } : dept)));
      setEditingDepartment(null);
      toast.success('Département mis à jour avec succès');
    } catch (error) {
      console.error('Erreur lors de la mise à jour du département:', error);
      toast.error(error.message || 'Échec de la mise à jour du département');
    }
  };

  const handleDeleteDepartment = async (id) => {
    try {
      await companyService.deleteDepartment(companyId, id);
      setDepartments(departments.filter((dept) => dept.id !== id));
      setConfirmDelete(null);
      toast.success('Département supprimé avec succès');
    } catch (error) {
      console.error('Erreur lors de la suppression du département:', error);
      toast.error(error.message || 'Échec de la suppression du département');
    }
  };

  if (loading) {
    return <LoadingSpinner />;
  }

  return (
    <div className="bg-white rounded-lg border border-slate-200 p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h2 className="text-xl font-bold text-slate-800">Départements</h2>
          <p className="text-slate-500 mt-1">
            Les départements sont utilisés avec les offres d'emploi et apparaîtront comme options filtrables sur votre site carrière.
            RecrutPME utilisera également les départements pour recommander les membres que vous pourriez vouloir inclure dans les équipes de recrutement.
          </p>
        </div>
        <button
          onClick={() => setIsAdding(true)}
          className="px-4 py-2 bg-green-500 text-white rounded-md flex items-center"
        >
          <Plus size={18} className="mr-2" />
          Ajouter un département
        </button>
      </div>

      <div className="border rounded-lg overflow-hidden">
        {isAdding && (
          <div className="border-b border-slate-200 p-4 bg-blue-50">
            <div className="flex">
              <input
                type="text"
                value={newDepartment}
                onChange={(e) => setNewDepartment(e.target.value)}
                placeholder="Nom du département"
                className="flex-1 p-2 border border-slate-300 rounded-md mr-2"
                autoFocus
              />
              <div className="flex">
                <button
                  onClick={() => setIsAdding(false)}
                  className="p-2 text-slate-500 hover:text-slate-700 rounded-md mr-2"
                >
                  <X size={20} />
                </button>
                <button
                  onClick={handleAddDepartment}
                  className="p-2 bg-green-500 text-white rounded-md"
                  disabled={!newDepartment.trim()}
                >
                  <Check size={20} />
                </button>
              </div>
            </div>
          </div>
        )}

        {departments.length === 0 && !isAdding ? (
          <div className="p-6 text-center text-slate-500">
            Aucun département n'a été ajouté. Cliquez sur "Ajouter un département" pour commencer.
          </div>
        ) : (
          departments.map((department) => (
            <div
              key={department.id}
              className="border-b last:border-b-0 border-slate-200 p-4 flex justify-between items-center"
            >
              {editingDepartment === department.id ? (
                <div className="flex flex-1">
                  <input
                    type="text"
                    value={department.name}
                    onChange={(e) =>
                      setDepartments(departments.map((d) => (d.id === department.id ? { ...d, name: e.target.value } : d)))
                    }
                    className="flex-1 p-2 border border-slate-300 rounded-md mr-2"
                    autoFocus
                  />
                  <div className="flex">
                    <button
                      onClick={() => setEditingDepartment(null)}
                      className="p-2 text-slate-500 hover:text-slate-700 rounded-md mr-2"
                    >
                      <X size={20} />
                    </button>
                    <button
                      onClick={() => handleUpdateDepartment(department.id, department.name)}
                      className="p-2 bg-green-500 text-white rounded-md"
                      disabled={!department.name.trim()}
                    >
                      <Check size={20} />
                    </button>
                  </div>
                </div>
              ) : (
                <>
                  <span className="text-slate-800">{department.name}</span>
                  <div className="flex">
                    <button
                      onClick={() => setEditingDepartment(department.id)}
                      className="p-2 text-slate-400 hover:text-blue-600 rounded-md mr-1"
                    >
                      <Edit2 size={18} />
                    </button>
                    <button
                      onClick={() => setConfirmDelete(department)}
                      className="p-2 text-slate-400 hover:text-red-600 rounded-md"
                    >
                      <Trash2 size={18} />
                    </button>
                  </div>
                </>
              )}
            </div>
          ))
        )}
      </div>

      {confirmDelete && (
        <ConfirmModal
          onClose={() => setConfirmDelete(null)}
          onConfirm={() => handleDeleteDepartment(confirmDelete.id)}
          title="Supprimer le département ?"
          message={`Êtes-vous sûr de vouloir supprimer le département ${confirmDelete.name} ?`}
          confirmText="Continuer"
          cancelText="Annuler"
          icon={<Trash2 className="h-6 w-6 text-red-500" />}
        />
      )}
    </div>
  );
};

export default Departments;
=== FIN ===

=== Contenu de frontend\src\pages\talent\CandidateDetail.jsx ===
// frontend/src/pages/CandidateDetail.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { useParams, Link } from 'react-router-dom';
import { ChevronLeft, Mail, Phone, Linkedin, ChevronDown, Send } from 'lucide-react';
import { cvService } from '../../services/api';

// Le modal d'email (simplifié pour la démo)
const ComposeEmailModal = ({ isOpen, onClose, candidate, onEmailSent }) => {
    // ... (gardez le code du modal de ma réponse précédente)
    // Modifiez seulement la fonction d'envoi :
    const handleSend = async () => {
        // const subject = ...
        // const body = ...
        // await cvService.sendMessage(candidate.id, { subject, body });
        // onEmailSent(); // pour rafraîchir les données
        // onClose();
    }
    // ...
};

const CandidateDetail = () => {
    const { candidateId } = useParams();
    const [candidate, setCandidate] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [activeTab, setActiveTab] = useState('Overview');
    const [isEmailModalOpen, setIsEmailModalOpen] = useState(false);
    const [showAdvanceDropdown, setShowAdvanceDropdown] = useState(false);

    const fetchCandidateDetails = useCallback(async () => {
        try {
            setLoading(true);
            setError(null);
            const response = await cvService.getCandidateById(candidateId);
            setCandidate(response.data);
        } catch (err) {
            setError("Candidat non trouvé ou erreur de chargement.");
            console.error(err);
        } finally {
            setLoading(false);
        }
    }, [candidateId]);

    useEffect(() => {
        fetchCandidateDetails();
    }, [fetchCandidateDetails]);

    const handleStageChange = async (newStage) => {
        if (!candidate) return;
        try {
            const updatedCandidate = await cvService.updateCandidateStage(candidate.id, newStage);
            setCandidate(updatedCandidate.data); // Mettre à jour l'état local avec la réponse de l'API
            setShowAdvanceDropdown(false);
            alert(`Candidat déplacé à l'étape : ${newStage}`);
        } catch (err) {
            alert("Erreur lors du changement d'étape.");
            console.error(err);
        }
    };

    if (loading) return <div className="flex justify-center items-center h-screen">Chargement du profil...</div>;
    if (error) return <div className="flex justify-center items-center h-screen text-red-500">{error}</div>;
    if (!candidate) return null;

    const hiringStages = ['Leads', 'Applicants', 'Short List', 'Screening Call', 'Interview', 'Final review', 'Offer', 'Hired', 'Disqualified', 'Archived'];

    return (
        <div className="flex flex-col h-screen bg-gray-50 font-sans">
            <header className="bg-white p-3 border-b border-gray-200 flex justify-between items-center">
                <Link to="/candidates" className="flex items-center text-gray-600 hover:text-gray-900">
                    <ChevronLeft className="w-5 h-5 mr-1" />
                    Previous page
                </Link>
                <div className="flex items-center space-x-2">
                    <button className="text-gray-600 hover:text-red-600">Disqualify</button>
                    <div className="relative">
                        <button onClick={() => setShowAdvanceDropdown(!showAdvanceDropdown)} className="bg-purple-600 text-white px-4 py-2 rounded-lg flex items-center">
                            Advance <ChevronDown className="w-4 h-4 ml-1" />
                        </button>
                        {showAdvanceDropdown && (
                            <div className="absolute right-0 mt-2 w-56 bg-white rounded-md shadow-lg z-20 border">
                                <div className="p-2 text-xs text-gray-500">Move to:</div>
                                {hiringStages.map(stage => (
                                    <button key={stage} onClick={() => handleStageChange(stage)} className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">
                                        {stage}
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
            </header>

            <main className="flex-1 flex p-4 gap-4 overflow-hidden">
                {/* Colonne centrale: Détails du candidat */}
                <div className="flex-1 bg-white p-4 rounded-lg shadow-sm overflow-y-auto">
                    <div className="flex items-center mb-6">
                        <div className="w-16 h-16 rounded-full bg-pink-100 text-pink-700 flex items-center justify-center font-bold text-3xl">
                            {`${candidate.firstName.charAt(0)}${candidate.lastName.charAt(0)}`.toUpperCase()}
                        </div>
                        <div className="ml-4">
                            <h2 className="text-2xl font-bold">{candidate.firstName} {candidate.lastName}</h2>
                            <p className="text-gray-500">{candidate.job?.title} • {candidate.stage}</p>
                            <p className="text-xs text-gray-400">Added by {candidate.addedBy} - {new Date(candidate.addedAt).toLocaleDateString()}</p>
                        </div>
                    </div>

                    <div className="border-b mb-4">
                        {['Overview', 'Messages', 'Files', 'Ratings', 'Activity'].map(tab => (
                            <button key={tab} onClick={() => setActiveTab(tab)} className={`px-4 py-2 text-sm font-medium ${activeTab === tab ? 'border-b-2 border-purple-600 text-purple-600' : 'text-gray-500'}`}>
                                {tab}
                            </button>
                        ))}
                    </div>

                    {activeTab === 'Messages' && (
                        <div>
                            <div className="flex justify-end mb-4">
                                <button onClick={() => setIsEmailModalOpen(true)} className="bg-purple-600 text-white px-3 py-1 rounded-md text-sm">New Email</button>
                            </div>
                            <div className="text-center py-10 bg-gray-50 rounded-lg">
                                <Mail className="mx-auto h-10 w-10 text-gray-400 mb-2" />
                                <p className="text-gray-500">No emails or texts have been exchanged yet.</p>
                            </div>
                        </div>
                    )}
                    {/* ... Autres onglets ... */}
                </div>

                {/* Colonne de droite: Statut & Contact */}
                <aside className="w-1/4 space-y-4">
                    <div className="bg-white p-4 rounded-lg shadow-sm">
                        <h3 className="font-semibold mb-3">Status</h3>
                        <div className="space-y-2 text-sm">
                            <div className="flex justify-between"><span>Stage</span> <span className="font-medium">{candidate.stage}</span></div>
                            <div className="flex justify-between"><span>Entered Stage</span> <span>{new Date(candidate.enteredStageAt).toLocaleDateString()}</span></div>
                            <div className="flex justify-between"><span>Added</span> <span>{new Date(candidate.addedAt).toLocaleDateString()}</span></div>
                            <div className="flex justify-between"><span>Last Updated</span> <span>{new Date(candidate.lastUpdatedAt).toLocaleDateString()}</span></div>
                        </div>
                    </div>
                     <div className="bg-white p-4 rounded-lg shadow-sm">
                        <h3 className="font-semibold mb-3">Contact details</h3>
                        <div className="space-y-3 text-sm">
                            <div className="flex items-center"><Mail className="w-4 h-4 mr-2 text-gray-400" /> <span>{candidate.email || 'Non fourni'}</span></div>
                            <div className="flex items-center"><Phone className="w-4 h-4 mr-2 text-gray-400" /> <span>{candidate.phone || 'Non fourni'}</span></div>
                            <div className="flex items-center"><Linkedin className="w-4 h-4 mr-2 text-gray-400" /> <a href="#" className="text-purple-600">Profil LinkedIn</a></div>
                        </div>
                    </div>
                </aside>
            </main>
            {/* <ComposeEmailModal isOpen={isEmailModalOpen} onClose={() => setIsEmailModalOpen(false)} candidate={candidate} onEmailSent={fetchCandidateDetails} /> */}
        </div>
    );
};

export default CandidateDetail;
=== FIN ===

=== Contenu de frontend\src\pages\talent\CandidateKanbanView.jsx ===
import React, { useState, useEffect } from 'react';
import { Star, Plus, ChevronRight, Calendar, MessageCircle, X } from 'lucide-react';
import { cvService, jobService } from '../../services/api';
import LoadingSpinner from '../../components/common/LoadingSpinner';
import { useParams } from 'react-router-dom';
import AddCandidateModal from '../../components/candidates/AddCandidateModal'; // Nouveau composant

const CandidateKanbanView = () => {
    const { jobId } = useParams();
    const [loading, setLoading] = useState(true);
    const [candidates, setCandidates] = useState([]);
    const [job, setJob] = useState(null);
    const [stages, setStages] = useState([]);
    const [isModalOpen, setIsModalOpen] = useState(false);

    useEffect(() => {
        const fetchData = async () => {
            try {
                setLoading(true);

                if (jobId) {
                    const jobData = await jobService.getJobById(jobId);
                    setJob(jobData);
                }

                const workflowId = jobId ? jobId : 'default';
                const stagesData = await jobService.getWorkflowStages(workflowId);
                setStages(stagesData);

                const candidatesData = await cvService.getCandidatesByJob(jobId);
                setCandidates(candidatesData);
            } catch (error) {
                console.error('Error fetching data:', error);
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, [jobId]);

    const getCandidateCountByStage = (stageId) => candidates.filter(candidate => candidate.stage === stageId).length;
    const getCandidatesByStage = (stageId) => candidates.filter(candidate => candidate.stage === stageId);

    const handleDragStart = (e, candidateId) => e.dataTransfer.setData('candidateId', candidateId);
    const handleDragOver = (e) => e.preventDefault();
    const handleDrop = async (e, targetStageId) => {
        e.preventDefault();
        const candidateId = e.dataTransfer.getData('candidateId');
        const candidateToUpdate = candidates.find(c => c.id === candidateId);
        if (!candidateToUpdate || candidateToUpdate.stage === targetStageId) return;

        try {
            await cvService.updateCandidateStage(candidateId, targetStageId);
            setCandidates(prevCandidates =>
                prevCandidates.map(c => c.id === candidateId ? { ...c, stage: targetStageId } : c)
            );
        } catch (error) {
            console.error('Error updating candidate stage:', error);
        }
    };

    if (loading) return <LoadingSpinner />;

    return (
        <div className="p-4">
            <div className="flex justify-between items-center mb-4">
                <h1 className="text-xl font-bold text-slate-800">
                    {job ? job.title : 'Tableau Kanban des candidats'}
                </h1>
                <div className="flex items-center space-x-2">
                    {job && (
                        <>
                            <div className="text-sm text-gray-600">
                                {job.isPublished ? 'Publiée sur votre page d\'emploi' : 'Non publiée'}
                            </div>
                            <div className="bg-gray-100 text-gray-700 rounded-md px-2 py-1 text-xs">
                                {job.department || 'Département non spécifié'}
                            </div>
                            <div className="bg-gray-100 text-gray-700 rounded-md px-2 py-1 text-xs">
                                {job.location || 'Emplacement non spécifié'}
                            </div>
                        </>
                    )}
                    <button
                        onClick={() => setIsModalOpen(true)}
                        className="px-4 py-2 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg shadow-sm hover:from-blue-700 hover:to-indigo-700"
                    >
                        <Plus className="h-4 w-4 mr-2 inline" /> Ajouter un candidat
                    </button>
                </div>
            </div>

            <div className="flex overflow-x-auto space-x-4 pb-4" style={{ minHeight: '70vh' }}>
                {stages.map(stage => (
                    <div
                        key={stage.id}
                        className="flex-shrink-0 w-64"
                        onDragOver={handleDragOver}
                        onDrop={(e) => handleDrop(e, stage.id)}
                    >
                        <div className="flex items-center justify-between mb-2">
                            <div className="font-medium text-gray-700">
                                {stage.name} <span className="text-gray-400 text-sm">{getCandidateCountByStage(stage.id)}</span>
                            </div>
                        </div>

                        <div className="bg-gray-50 rounded-lg px-3 py-2 min-h-full">
                            {getCandidatesByStage(stage.id).map(candidate => (
                                <div
                                    key={candidate.id}
                                    className="bg-white rounded-lg shadow-sm mb-3 p-3 cursor-pointer hover:shadow-md transition-shadow"
                                    draggable={true}
                                    onDragStart={(e) => handleDragStart(e, candidate.id)}
                                >
                                    <div className="flex items-center">
                                        <div className={`w-8 h-8 ${candidate.avatarColor || 'bg-blue-400'} rounded-full flex items-center justify-center text-white text-xs font-medium`}>
                                            {candidate.firstName?.charAt(0)}{candidate.lastName?.charAt(0)}
                                        </div>
                                        <div className="ml-2 text-sm font-medium">
                                            {candidate.firstName} {candidate.lastName}
                                        </div>
                                    </div>

                                    <div className="mt-2 flex items-center text-xs text-gray-500">
                                        <div className="flex-1">
                                            {candidate.hours && <span>dans cette étape depuis {candidate.hours} heures</span>}
                                            {candidate.days && <span>dans cette étape depuis {candidate.days} jours</span>}
                                            {!candidate.hours && !candidate.days && <span>ajouté récemment</span>}
                                        </div>
                                    </div>

                                    {candidate.status && (
                                        <div className="mt-2">
                                            {candidate.status === 'waiting_on_feedback' && (
                                                <div className="bg-orange-100 text-orange-700 rounded-md px-2 py-1 text-xs flex items-center justify-center">
                                                    <span>En attente de retour</span>
                                                </div>
                                            )}
                                            {candidate.status === 'needs_scheduling' && (
                                                <div className="bg-blue-50 text-blue-700 rounded-md px-2 py-1 text-xs flex items-center justify-center">
                                                    <Calendar size={12} className="mr-1" />
                                                    <span>À planifier</span>
                                                </div>
                                            )}
                                            {candidate.status === 'feedback_received' && (
                                                <div className="bg-green-100 text-green-700 rounded-md px-2 py-1 text-xs flex items-center justify-center">
                                                    <span>Retour reçu</span>
                                                </div>
                                            )}
                                        </div>
                                    )}

                                    {candidate.rating && (
                                        <div className="mt-2 flex items-center">
                                            {[...Array(5)].map((_, i) => (
                                                <Star
                                                    key={i}
                                                    size={12}
                                                    className={i < Math.floor(candidate.rating) ? "text-yellow-400 fill-yellow-400" : "text-gray-300"}
                                                />
                                            ))}
                                            <span className="ml-1 text-xs text-gray-500">{candidate.rating}</span>
                                        </div>
                                    )}
                                </div>
                            ))}

                            {getCandidatesByStage(stage.id).length === 0 && (
                                <div className="flex justify-center">
                                    <button className="flex items-center justify-center mt-2 text-sm text-gray-500 w-full h-16 border-2 border-dashed border-gray-200 rounded-lg hover:bg-gray-100 transition-colors">
                                        <Plus size={16} className="mr-1" />
                                        Étape vide
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>
                ))}
            </div>
            <AddCandidateModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} jobId={jobId} />
        </div>
    );
};

export default CandidateKanbanView;
=== FIN ===

=== Contenu de frontend\src\pages\talent\CandidateManagement.jsx ===
import React, { useState, useEffect } from 'react';
import { Search, ChevronDown, Plus } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { getCandidates, createCandidate,jobService } from '../../services/api.js';
import { useAuth } from '../../contexts/AuthContext'; // Import AuthContext
import axios from 'axios';
import { toast } from 'react-toastify';
const AddCandidateModal = ({ isOpen, onClose, companyId }) => {
    const [formData, setFormData] = useState({
        firstName: '',
        lastName: '',
        email: '',
        phone: '',
        job: '',
        comment: '',
    });
    const [resumeFile, setResumeFile] = useState(null);
    const [jobs, setJobs] = useState([]);
      const [loading, setLoading] = useState(true);
      const [error, setError] = useState(null);
    const [statusFilter] = useState('PUBLISHED');

    useEffect(() => {
         if (isOpen) {
            console.log("hhhhh");
            console.log("companyId:", companyId);
        fetchJobs();
         }
      }, [isOpen,statusFilter, companyId]);
      
      const fetchJobs = async () => {
        try {
          setLoading(true);
          setError(null);
          
          const data = await jobService.getJobs(companyId, { status: statusFilter });
           console.log("Réponse de l'API:", data);
                
          
          setJobs(data || []);
        } catch (error) {
            console.error("Erreur dans fetchJobs:", error);
            console.error("Détails des erreurs de l'API:", error.response?.data?.errors);
           
          setError('Erreur lors du chargement des offres d\'emploi');
          toast.error('Erreur lors du chargement des offres d\'emploi');
        } finally {
          setLoading(false);
        }
      };
    // console.log("statusFilter1",statusFilter);
    // useEffect(() => {
    //     if (isOpen) {
    //          console.log("statusFilter2",statusFilter);
    //          const data =   jobService.getJobs(companyId, { status: statusFilter });
    //       console.log("response",data);
    //         const fetchJobs = async () => {
    //             try {
                   
    //                  const data = await jobService.getJobs(companyId, { status: statusFilter });
    //       console.log("response",data);
    //       setJobs(data || []);
    //             } catch (error) {
    //                 console.error("Erreur lors de la récupération des jobs", error);
    //             }
    //         };
    //         fetchJobs();
    //     }
    // }, [statusFilter,isOpen, companyId]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleFileChange = (e) => {
        setResumeFile(e.target.files[0]);
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        const submissionData = new FormData();
        Object.keys(formData).forEach(key => {
            submissionData.append(key, formData[key]);
        });
        if (resumeFile) {
            submissionData.append('resume', resumeFile);
        }

        try {
            await createCandidate(companyId, submissionData);
            alert('Candidat ajouté avec succès !');
            onClose();
            window.location.reload();
        } catch (error) {
            console.error("Erreur lors de l'ajout du candidat", error);
            alert("Erreur lors de l'ajout.");
        }
    };

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
            <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-lg">
                <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-bold text-gray-800">Add Candidate</h2>
                    <button onClick={onClose} className="text-gray-500 hover:text-gray-800">×</button>
                </div>
                <form onSubmit={handleSubmit}>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-700">First name <span className="text-red-500">*</span></label>
                            <input type="text" name="firstName" onChange={handleChange} className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2" required />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Last name <span className="text-red-500">*</span></label>
                            <input type="text" name="lastName" onChange={handleChange} className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2" required />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Email address</label>
                            <input type="email" name="email" onChange={handleChange} className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2" />
                        </div>
                        <div>
                            <label className="block text-sm font-medium text-gray-700">Phone number</label>
                            <input type="tel" name="phone" onChange={handleChange} className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2" />
                        </div>
                    </div>
                    <div className="mb-4">
                        <label className="block text-sm font-medium text-gray-700">Drop your resume here or click to browse</label>
                        <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
                            <div className="space-y-1 text-center">
                                <svg className="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true">
                                    <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
                                </svg>
                                <div className="flex text-sm text-gray-600">
                                    <label htmlFor="file-upload" className="relative cursor-pointer bg-white rounded-md font-medium text-indigo-600 hover:text-indigo-500 focus-within:outline-none">
                                        <span>Upload a file</span>
                                        <input id="file-upload" name="resume" type="file" className="sr-only" onChange={handleFileChange} />
                                    </label>
                                    <p className="pl-1">or drag and drop</p>
                                </div>
                                <p className="text-xs text-gray-500">Max. file size 5MB (.pdf, .doc, .docx, .rtf, .txt)</p>
                                {resumeFile && <p className="text-sm text-green-600 mt-2">{resumeFile.name}</p>}
                            </div>
                        </div>
                    </div>
                    <div className="mb-4">
                        <label className="block text-sm font-medium text-gray-700">Job <span className="text-red-500">*</span></label>
                        <select name="job" onChange={handleChange} className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2" required>
                            <option value="">Select a job</option>
                            {jobs.map(job => (
                                <option key={job.id} value={job.id}>{job.title}</option>
                            ))}
                        </select>
                    </div>
                    <div className="mb-4">
                        <label className="block text-sm font-medium text-gray-700">Optional comment about the candidate</label>
                        <textarea name="comment" rows="3" onChange={handleChange} className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"></textarea>
                    </div>
                    <div className="flex justify-end space-x-3">
                        <button type="button" onClick={onClose} className="bg-gray-200 text-gray-800 px-4 py-2 rounded-md">Cancel</button>
                        <button type="submit" className="bg-purple-600 text-white px-4 py-2 rounded-md hover:bg-purple-700">+ Add Candidate</button>
                    </div>
                </form>
            </div>
        </div>
    );
};

const CandidateManagement = () => {
    const [candidates, setCandidates] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const navigate = useNavigate();
    const { companyId } = useAuth(); // Récupérer companyId depuis AuthContext

    useEffect(() => {
        const fetchCandidates = async () => {
            setLoading(true);
            try {
                if (!companyId) {
                    console.error("No companyId found in AuthContext");
                    return;
                }
                const data = await getCandidates(companyId);
                setCandidates(data);
            } catch (error) {
                console.error("Erreur lors de la récupération des candidats:", error);
            } finally {
                setLoading(false);
            }
        };
        fetchCandidates();
    }, [companyId, isModalOpen]);

    const getInitials = (firstName, lastName) => {
        return `${firstName?.charAt(0) || ''}${lastName?.charAt(0) || ''}`.toUpperCase();
    };

    const timeSince = (date) => {
        const seconds = Math.floor((new Date() - date) / 1000);
        let interval = seconds / 31536000;
        if (interval > 1) return Math.floor(interval) + " years ago";
        interval = seconds / 2592000;
        if (interval > 1) return Math.floor(interval) + " months ago";
        interval = seconds / 86400;
        if (interval > 1) return Math.floor(interval) + " days ago";
        interval = seconds / 3600;
        if (interval > 1) return Math.floor(interval) + " hours ago";
        interval = seconds / 60;
        if (interval > 1) return Math.floor(interval) + " minutes ago";
        return "Added just now";
    };

    const handleCandidateClick = (id) => {
        navigate(`/candidates/${id}`);
    };

    return (
        <div className="flex h-screen bg-gray-50 font-sans">
            <div className="w-16 bg-white p-2 flex flex-col items-center space-y-4">
                {/* Icônes de navigation */}
            </div>

            <div className="flex-1 flex flex-col" style={{ backgroundColor: '#F9FAFB' }}>
                <header className="bg-white p-4 border-b border-gray-200">
                    <h1 className="text-2xl font-bold text-gray-800">Candidates</h1>
                </header>

                <main className="flex-1 flex p-4">
                    <aside className="w-64 bg-white p-4 rounded-lg shadow-sm mr-4">
                        <div className="mb-6">
                            <div className="flex justify-between items-center mb-2">
                                <h3 className="font-semibold text-gray-700">Hiring Phase</h3>
                                <button className="text-sm text-purple-600">Clear</button>
                            </div>
                            <div className="space-y-2">
                                {['Leads', 'New Applicants', 'In-Progress', 'Hired', 'Disqualified'].map(phase => (
                                    <div key={phase} className="flex items-center">
                                        <input type="checkbox" defaultChecked className="h-4 w-4 text-purple-600 border-gray-300 rounded" />
                                        <label className="ml-2 text-sm text-gray-600">{phase}</label>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </aside>

                    <div className="flex-1 bg-white p-4 rounded-lg shadow-sm">
                        <div className="flex justify-between items-center mb-4">
                            <div className="relative w-1/3">
                                <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
                                <input type="text" placeholder="Search for candidates..." className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg" />
                            </div>
                            <div className="flex items-center space-x-4">
                                <button className="flex items-center text-gray-600">
                                    Updated date <ChevronDown className="w-4 h-4 ml-1" />
                                </button>
                                <button onClick={() => setIsModalOpen(true)} className="bg-purple-600 text-white px-4 py-2 rounded-lg flex items-center">
                                    <Plus className="w-5 h-5 mr-1" /> Add Candidate
                                </button>
                            </div>
                        </div>

                        {loading ? (
                            <p>Loading...</p>
                        ) : candidates.length === 0 ? (
                            <div className="text-center py-20">
                                <div className="mx-auto bg-gray-100 rounded-full h-24 w-24 flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 24 24" fill="none" stroke="#9CA3AF" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"><path d="M12 8V4H8"/><rect x="4" y="12" width="16" height="8" rx="2"/><path d="M2 12h20"/><path d="M17.5 12v-5a.5.5 0 0 0-.5-.5h-10a.5.5 0 0 0-.5.5v5"/></svg>
                                </div>
                                <h3 className="mt-4 text-lg font-semibold text-gray-800">No candidates found</h3>
                                <p className="text-gray-500">No candidates have applied or been added.</p>
                                <button onClick={() => setIsModalOpen(true)} className="mt-6 bg-purple-600 text-white px-4 py-2 rounded-lg flex items-center mx-auto">
                                    <Plus className="w-5 h-5 mr-1" /> Add Candidate
                                </button>
                            </div>
                        ) : (
                            <div className="border rounded-lg overflow-hidden">
                                <table className="min-w-full">
                                    <tbody className="bg-white divide-y divide-gray-200">
                                        {candidates.map(candidate => (
                                            <tr key={candidate.id} onClick={() => handleCandidateClick(candidate.id)} className="cursor-pointer hover:bg-gray-50">
                                                <td className="px-6 py-4 whitespace-nowrap">
                                                    <input type="checkbox" className="h-4 w-4 text-purple-600 border-gray-300 rounded" />
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap">
                                                    <div className="flex items-center">
                                                        <div className="flex-shrink-0 h-10 w-10 rounded-full bg-pink-100 text-pink-700 flex items-center justify-center font-bold">
                                                            {getInitials(candidate.firstName, candidate.lastName)}
                                                        </div>
                                                        <div className="ml-4">
                                                            <div className="text-sm font-medium text-gray-900">{candidate.firstName} {candidate.lastName}</div>
                                                            <div className="text-sm text-gray-500">{candidate.applications[0]?.jobTitle || 'No Job'}</div>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap">
                                                    <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
                                                        {candidate.applications[0]?.status || 'Leads'}
                                                    </span>
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                    Added {timeSince(candidate.createdAt)}
                                                </td>
                                                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                    <button className="text-gray-500 hover:text-red-600 mr-4">Disqualify</button>
                                                    <button className="border border-gray-300 rounded-md px-3 py-1 text-gray-700 hover:bg-gray-50">
                                                        Advance 
                                                    </button>
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        )}
                    </div>
                </main>
            </div>
            <AddCandidateModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} companyId={companyId} />
        </div>
    );
};

export default CandidateManagement;
=== FIN ===

=== Contenu de frontend\src\pages\talent\CandidatePipelineView.jsx ===
import React, { useState, useEffect } from 'react';
import { X, Check, Star, Calendar, MessageCircle } from 'lucide-react';
import { cvService, jobService } from '../../services/api';
import { useParams, Link } from 'react-router-dom';
import LoadingSpinner from '../../components/common/LoadingSpinner';

const CandidatePipelineView = () => {
    const { jobId } = useParams();
    const [candidates, setCandidates] = useState([]);
    const [selectedStage, setSelectedStage] = useState('all');
    const [loading, setLoading] = useState(true);
    const [job, setJob] = useState(null);
    const [stages, setStages] = useState([]);
    const [selectedCandidates, setSelectedCandidates] = useState([]);

    useEffect(() => {
        const fetchData = async () => {
            try {
                setLoading(true);

                // Fetch job details if jobId is provided
                if (jobId) {
                    const jobData = await jobService.getJobById(jobId);
                    setJob(jobData);
                }

                // Fetch stages for the job or default stages
                const workflowId = jobId || 'default';
                const stagesData = await jobService.getWorkflowStages(workflowId);
                setStages([{ id: 'all', name: 'Tous les candidats' }, ...stagesData]);

                // Fetch candidates for the job
                const candidatesData = await cvService.getCandidatesByJob(jobId);
                setCandidates(candidatesData);
            } catch (error) {
                console.error('Error fetching data:', error);
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, [jobId]);

    const filteredCandidates = selectedStage === 'all'
        ? candidates
        : candidates.filter(candidate => candidate.stage === selectedStage);

    const getStatusBadge = (status) => {
        switch(status) {
            case 'needs_scheduling':
                return <span className="text-xs px-2 py-1 bg-amber-100 text-amber-800 rounded-full">Besoin de planification</span>;
            case 'feedback_received':
                return <span className="text-xs px-2 py-1 bg-green-100 text-green-800 rounded-full">Retour reçu</span>;
            case 'waiting_on_feedback':
                return <span className="text-xs px-2 py-1 bg-orange-100 text-orange-800 rounded-full">En attente de retour</span>;
            default:
                return null;
        }
    };

    const getStageName = (stageId) => {
        const stage = stages.find(s => s.id === stageId);
        return stage ? stage.name : '';
    };

    const handleSelectAllChange = (e) => {
        if (e.target.checked) {
            setSelectedCandidates(filteredCandidates.map(c => c.id));
        } else {
            setSelectedCandidates([]);
        }
    };

    const handleSelectCandidate = (id) => {
        setSelectedCandidates(prev => {
            if (prev.includes(id)) {
                return prev.filter(cId => cId !== id);
            } else {
                return [...prev, id];
            }
        });
    };

    const moveToNextStage = async (candidateId) => {
        try {
            const candidate = candidates.find(c => c.id === candidateId);
            if (!candidate) return;

            // Find the current stage index
            const currentStageIndex = stages.findIndex(s => s.id === candidate.stage);
            if (currentStageIndex === -1 || currentStageIndex === stages.length - 1) return;

            // Get the next stage
            const nextStage = stages[currentStageIndex + 1];

            // Update the candidate's stage
            await cvService.updateCandidateStage(candidateId, nextStage.id);

            // Update local state
            setCandidates(prevCandidates =>
                prevCandidates.map(c =>
                    c.id === candidateId ? { ...c, stage: nextStage.id } : c
                )
            );
        } catch (error) {
            console.error('Error moving candidate to next stage:', error);
        }
    };

    const disqualifyCandidate = async (candidateId) => {
        try {
            // Update the candidate's status
            await cvService.disqualifyCandidate(candidateId);

            // Update local state
            setCandidates(prevCandidates =>
                prevCandidates.filter(c => c.id !== candidateId)
            );
        } catch (error) {
            console.error('Error disqualifying candidate:', error);
        }
    };

    if (loading) {
        return <LoadingSpinner />;
    }

    return (
        <div className="bg-white rounded-xl shadow-sm p-6">
            <div className="flex justify-between items-center mb-6">
                <h1 className="text-2xl font-bold text-slate-800">
                    {job ? job.title : 'Tous les candidats'}
                </h1>
                <Link
                    to="/cv-analysis"
                    className="px-4 py-2 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg"
                >
                    + Ajouter un candidat
                </Link>
            </div>

            <div className="mb-6 flex space-x-4">
                <div className="w-1/3">
                    <input
                        type="text"
                        placeholder="Rechercher des candidats..."
                        className="w-full px-4 py-2 border border-gray-200 rounded-lg"
                    />
                </div>

                <div>
                    <select
                        className="px-4 py-2 border border-gray-200 rounded-lg"
                        value={selectedStage}
                        onChange={(e) => setSelectedStage(e.target.value)}
                    >
                        {stages.map(stage => (
                            <option key={stage.id} value={stage.id}>{stage.name}</option>
                        ))}
                    </select>
                </div>
            </div>

            <div className="overflow-auto">
                <table className="min-w-full">
                    <thead className="bg-gray-50">
                    <tr>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-10">
                            <input
                                type="checkbox"
                                className="rounded border-gray-300"
                                checked={selectedCandidates.length === filteredCandidates.length && filteredCandidates.length > 0}
                                onChange={handleSelectAllChange}
                            />
                        </th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Candidat
                        </th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Étape
                        </th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Statut
                        </th>
                        <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Ajouté
                        </th>
                        <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Actions
                        </th>
                    </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                    {filteredCandidates.length === 0 ? (
                        <tr>
                            <td colSpan="6" className="px-4 py-6 text-center text-gray-500">
                                Aucun candidat dans cette étape
                            </td>
                        </tr>
                    ) : (
                        filteredCandidates.map((candidate) => (
                            <tr key={candidate.id} className="hover:bg-gray-50">
                                <td className="px-4 py-4 whitespace-nowrap">
                                    <input
                                        type="checkbox"
                                        className="rounded border-gray-300"
                                        checked={selectedCandidates.includes(candidate.id)}
                                        onChange={() => handleSelectCandidate(candidate.id)}
                                    />
                                </td>
                                <td className="px-4 py-4 whitespace-nowrap">
                                    <div className="flex items-center">
                                        <div className={`w-10 h-10 rounded-full ${candidate.avatarColor || 'bg-blue-400'} flex items-center justify-center text-white font-semibold`}>
                                            {candidate.firstName?.charAt(0)}{candidate.lastName?.charAt(0)}
                                        </div>
                                        <div className="ml-4">
                                            <Link
                                                to={`/cv/${candidate.id}`}
                                                className="text-sm font-medium text-gray-900 hover:text-blue-600"
                                            >
                                                {candidate.firstName} {candidate.lastName}
                                            </Link>
                                        </div>
                                    </div>
                                </td>
                                <td className="px-4 py-4 whitespace-nowrap">
                                    <div className="text-sm text-gray-900">{getStageName(candidate.stage)}</div>
                                </td>
                                <td className="px-4 py-4 whitespace-nowrap">
                                    {getStatusBadge(candidate.status)}
                                    {candidate.rating && (
                                        <div className="mt-1 flex items-center">
                                            {[...Array(5)].map((_, i) => (
                                                <Star
                                                    key={i}
                                                    size={16}
                                                    className={i < Math.floor(candidate.rating) ? "text-yellow-400 fill-yellow-400" : "text-gray-300"}
                                                />
                                            ))}
                                            <span className="ml-1 text-xs text-gray-600">{candidate.rating}</span>
                                        </div>
                                    )}
                                </td>
                                <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">
                                    {candidate.createdAt ?
                                        `il y a ${Math.floor((new Date() - new Date(candidate.createdAt)) / (1000 * 60 * 60 * 24))} jours` :
                                        'récemment'}
                                </td>
                                <td className="px-4 py-4 whitespace-nowrap text-right text-sm font-medium">
                                    <div className="flex space-x-2 justify-end">
                                        <button
                                            className="px-3 py-1 bg-blue-100 text-blue-600 rounded-md hover:bg-blue-200"
                                            onClick={() => moveToNextStage(candidate.id)}
                                        >
                                            Avancer
                                        </button>
                                        <button
                                            className="p-1 rounded-full text-gray-400 hover:text-gray-600 hover:bg-gray-100"
                                            onClick={() => disqualifyCandidate(candidate.id)}
                                        >
                                            <X size={16} />
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        ))
                    )}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

export default CandidatePipelineView;
=== FIN ===

=== Contenu de frontend\src\pages\talent\ModalCandidate.jsx ===
import React, { useState } from 'react';
import { Modal, Box, TextField, Button, Typography } from '@mui/material';
import axios from 'axios';

const ModalCandidate = ({ open, handleClose, companyId }) => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phoneNumber: '',
    resumeUrl: '',
    coverLetterText: '',
  });

  const handleChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axios.post(`/api/companies/${companyId}/candidates`, formData, {
        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
      });
      handleClose();
      window.location.reload(); // Refresh to reflect new candidate
    } catch (error) {
      console.error('Error creating candidate:', error);
    }
  };

  return (
    <Modal open={open} onClose={handleClose}>
      <Box
        sx={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          width: 400,
          bgcolor: 'background.paper',
          boxShadow: 24,
          p: 4,
        }}
      >
        <Typography variant="h6" gutterBottom>Add New Candidate</Typography>
        <form onSubmit={handleSubmit}>
          <TextField
            fullWidth
            margin="normal"
            name="firstName"
            label="First Name"
            value={formData.firstName}
            onChange={handleChange}
            required
          />
          <TextField
            fullWidth
            margin="normal"
            name="lastName"
            label="Last Name"
            value={formData.lastName}
            onChange={handleChange}
            required
          />
          <TextField
            fullWidth
            margin="normal"
            name="email"
            label="Email"
            type="email"
            value={formData.email}
            onChange={handleChange}
            required
          />
          <TextField
            fullWidth
            margin="normal"
            name="phoneNumber"
            label="Phone Number"
            value={formData.phoneNumber}
            onChange={handleChange}
          />
          <TextField
            fullWidth
            margin="normal"
            name="resumeUrl"
            label="Resume URL"
            value={formData.resumeUrl}
            onChange={handleChange}
          />
          <TextField
            fullWidth
            margin="normal"
            name="coverLetterText"
            label="Cover Letter"
            multiline
            rows={4}
            value={formData.coverLetterText}
            onChange={handleChange}
          />
          <Button type="submit" variant="contained" color="primary" style={{ marginTop: '20px' }}>
            Save
          </Button>
          <Button onClick={handleClose} style={{ marginTop: '20px', marginLeft: '10px' }}>
            Cancel
          </Button>
        </form>
      </Box>
    </Modal>
  );
};

export default ModalCandidate;
=== FIN ===

=== Contenu de frontend\src\pages\talent\TalentDetail.jsx ===
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { ChevronLeft, Download, Share2, Mail, Phone, Calendar, Briefcase, MapPin, Clock, Award, CheckCircle, Star, ArrowRight, Book, Tag } from 'lucide-react';
import { toast } from 'react-toastify';
import axios from '../../utils/axios';
import LoadingSpinner from '../../components/common/LoadingSpinner';
import CandidateDetailCard from './CandidateDetailCard'; // Import

const TalentDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [candidate, setCandidate] = useState(null);
  const [activeTab, setActiveTab] = useState('profile');
  const [jobs, setJobs] = useState([]);
  const [activities, setActivities] = useState([]);

  useEffect(() => {
    const fetchCandidateData = async () => {
      try {
        setLoading(true);
        const [candidateRes, jobsRes, activitiesRes] = await Promise.all([
          axios.get(`/api/candidates/${id}`),
          axios.get('/api/jobs', { params: { status: 'ACTIVE' } }),
          axios.get(`/api/candidates/${id}/activities`)
        ]);
        setCandidate(candidateRes.data);
        setJobs(jobsRes.data);
        setActivities(activitiesRes.data);
      } catch (error) {
        console.error('Error fetching candidate data:', error);
        toast.error('Erreur lors du chargement des détails du candidat');
        navigate('/talent-pool');
      } finally {
        setLoading(false);
      }
    };
    fetchCandidateData();
  }, [id, navigate]);

  const handleStatusChange = async (e) => {
    const newStatus = e.target.value;
    try {
      await axios.put(`/api/candidates/${id}/status`, { status: newStatus });
      setCandidate(prev => ({ ...prev, status: newStatus }));
      toast.success('Statut mis à jour avec succès');
    } catch (error) {
      console.error('Error updating candidate status:', error);
      toast.error('Erreur lors de la mise à jour du statut');
    }
  };

  if (loading) return <LoadingSpinner />;

  if (!candidate) {
    return (
      <div className="text-center py-12">
        <h2 className="text-2xl font-semibold text-slate-800 mb-2">Candidat non trouvé</h2>
        <p className="text-slate-600 mb-6">Le candidat que vous recherchez n'existe pas ou a été supprimé.</p>
        <Link to="/talent-pool" className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
          Retour à la base de talents
        </Link>
      </div>
    );
  }

  return (
    <div>
      <div className="mb-8">
        <div className="flex items-center mb-6">
          <button onClick={() => navigate(-1)} className="p-2 rounded-full hover:bg-slate-100 mr-2">
            <ChevronLeft className="w-5 h-5 text-slate-600" />
          </button>
          <h1 className="text-2xl font-bold text-slate-800">Profil du candidat</h1>
        </div>
        <div className="flex flex-col md:flex-row justify-between md:items-start gap-4">
          <div className="flex items-center">
            <div className="w-20 h-20 rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 flex items-center justify-center text-white text-2xl font-medium">
              {candidate.firstName.charAt(0)}{candidate.lastName.charAt(0)}
            </div>
            <div className="ml-6">
              <h1 className="text-2xl font-bold text-slate-800">{candidate.firstName} {candidate.lastName}</h1>
              <p className="text-lg text-slate-600">{candidate.title}</p>
              <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-4 mt-2">
                {candidate.email && (
                  <div className="flex items-center">
                    <Mail className="w-4 h-4 text-slate-500 mr-1" />
                    <span className="text-sm text-slate-600">{candidate.email}</span>
                  </div>
                )}
                {candidate.phone && (
                  <div className="flex items-center">
                    <Phone className="w-4 h-4 text-slate-500 mr-1" />
                    <span className="text-sm text-slate-600">{candidate.phone}</span>
                  </div>
                )}
              </div>
            </div>
          </div>
          <div className="flex flex-col sm:flex-row items-start gap-3">
            <div className="relative w-full sm:w-auto">
              <select
                className="w-full sm:w-48 p-2.5 border border-slate-200 rounded-lg appearance-none focus:outline-none focus:ring-2 focus:ring-blue-500 font-medium"
                value={candidate.status}
                onChange={handleStatusChange}
              >
                <option value="NEW">Nouveau</option>
                <option value="CONTACTED">Contacté</option>
                <option value="INTERVIEWING">En entretien</option>
                <option value="OFFER_SENT">Offre envoyée</option>
                <option value="HIRED">Embauché</option>
                <option value="REJECTED">Rejeté</option>
              </select>
              <ChevronLeft className="absolute right-3 top-1/2 transform -translate-y-1/2 rotate-90 text-slate-500" size={16} />
            </div>
            <div className="flex gap-2">
              <button className="px-4 py-2.5 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg shadow-sm hover:from-blue-700 hover:to-indigo-700 transition font-medium flex items-center">
                <Mail className="w-4 h-4 mr-2" />
                Contacter
              </button>
              <button className="px-4 py-2.5 border border-slate-200 text-slate-700 rounded-lg shadow-sm hover:bg-slate-50 transition font-medium flex items-center">
                <Calendar className="w-4 h-4 mr-2" />
                Entretien
              </button>
              <button className="p-2.5 border border-slate-200 text-slate-700 rounded-lg shadow-sm hover:bg-slate-50 transition">
                <Download className="w-4 h-4" />
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          <div className="bg-white rounded-t-xl shadow-sm">
            <div className="flex border-b border-slate-200">
              <button
                onClick={() => setActiveTab('profile')}
                className={`px-6 py-4 text-sm font-medium ${
                  activeTab === 'profile' ? 'border-b-2 border-blue-600 text-blue-600' : 'text-slate-500 hover:text-slate-700 hover:border-slate-300'
                }`}
              >
                Profil
              </button>
              <button
                onClick={() => setActiveTab('cv')}
                className={`px-6 py-4 text-sm font-medium ${
                  activeTab === 'cv' ? 'border-b-2 border-blue-600 text-blue-600' : 'text-slate-500 hover:text-slate-700 hover:border-slate-300'
                }`}
              >
                CV
              </button>
              <button
                onClick={() => setActiveTab('activities')}
                className={`px-6 py-4 text-sm font-medium ${
                  activeTab === 'activities' ? 'border-b-2 border-blue-600 text-blue-600' : 'text-slate-500 hover:text-slate-700 hover:border-slate-300'
                }`}
              >
                Activités
              </button>
              <button
                onClick={() => setActiveTab('notes')}
                className={`px-6 py-4 text-sm font-medium ${
                  activeTab === 'notes' ? 'border-b-2 border-blue-600 text-blue-600' : 'text-slate-500 hover:text-slate-700 hover:border-slate-300'
                }`}
              >
                Notes
              </button>
            </div>
          </div>
          <div className="bg-white rounded-b-xl shadow-sm mb-6 p-6">
            {activeTab === 'profile' && <CandidateDetailCard candidate={candidate} />}
            {activeTab === 'cv' && (
              <div>
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-md font-semibold text-slate-800">CV original</h3>
                  <button className="p-2 text-slate-600 hover:text-blue-600 hover:bg-blue-50 rounded">
                    <Download className="w-5 h-5" />
                  </button>
                </div>
                <div className="bg-slate-50 rounded-lg p-4 h-[600px] flex items-center justify-center">
                  <div className="text-center">
                    <p className="text-slate-500 mb-3">Aperçu du CV</p>
                    <button className="px-4 py-2 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg shadow-sm hover:from-blue-700 hover:to-indigo-700 transition font-medium">
                      Voir le CV complet
                    </button>
                  </div>
                </div>
              </div>
            )}
            {activeTab === 'activities' && (
              <div>
                <h3 className="text-md font-semibold text-slate-800 mb-4">Historique d'activités</h3>
                {activities && activities.length > 0 ? (
                  <div className="relative space-y-6">
                    <div className="absolute top-0 left-4 bottom-0 w-0.5 bg-slate-200"></div>
                    {activities.map((activity, index) => (
                      <div key={index} className="relative pl-10">
                        <div className="absolute left-0 top-2 w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center z-10">
                          {activity.type === 'STATUS_CHANGE' && <Tag className="w-4 h-4 text-blue-600" />}
                          {activity.type === 'INTERVIEW' && <Calendar className="w-4 h-4 text-blue-600" />}
                          {activity.type === 'NOTE' && <Star className="w-4 h-4 text-blue-600" />}
                          {activity.type === 'EMAIL' && <Mail className="w-4 h-4 text-blue-600" />}
                        </div>
                        <div className="bg-white p-4 rounded-lg border border-slate-200">
                          <div className="flex justify-between items-start mb-2">
                            <div>
                              <h4 className="text-sm font-medium text-slate-800">{activity.title}</h4>
                              <p className="text-xs text-slate-500">{new Date(activity.timestamp).toLocaleString()}</p>
                            </div>
                            {activity.author && (
                              <div className="flex items-center">
                                <div className="w-6 h-6 rounded-full bg-indigo-100 flex items-center justify-center text-indigo-600 text-xs font-medium mr-1">
                                  {activity.author.substring(0, 2).toUpperCase()}
                                </div>
                                <span className="text-xs text-slate-500">{activity.author}</span>
                              </div>
                            )}
                          </div>
                          <p className="text-sm text-slate-600">{activity.description}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8 bg-slate-50 rounded-lg">
                    <Clock className="mx-auto h-10 w-10 text-slate-400 mb-2" />
                    <p className="text-slate-500">Aucune activité enregistrée pour ce candidat</p>
                  </div>
                )}
              </div>
            )}
            {activeTab === 'notes' && (
              <div>
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-md font-semibold text-slate-800">Notes</h3>
                  <button className="px-3 py-1.5 bg-blue-600 text-white rounded-lg text-sm">Ajouter une note</button>
                </div>
                {candidate.notes && candidate.notes.length > 0 ? (
                  <div className="space-y-4">
                    {candidate.notes.map((note, index) => (
                      <div key={index} className="bg-slate-50 rounded-lg p-4">
                        <div className="flex justify-between items-start mb-2">
                          <div className="flex items-center">
                            <div className="w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 font-medium text-sm">
                              {note.authorInitials}
                            </div>
                            <div className="ml-2">
                              <p className="text-sm font-medium text-slate-800">{note.authorName}</p>
                              <p className="text-xs text-slate-500">{new Date(note.date).toLocaleDateString()}</p>
                            </div>
                          </div>
                          <div className="px-2 py-1 rounded-full text-xs font-medium bg-blue-50 text-blue-700">
                            {note.type}
                          </div>
                        </div>
                        <p className="text-sm text-slate-700">{note.content}</p>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-12 bg-slate-50 rounded-lg">
                    <p className="text-slate-500">Aucune note pour ce candidat</p>
                    <button className="mt-2 px-4 py-2 bg-blue-600 text-white rounded-lg text-sm font-medium">
                      Ajouter la première note
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
        <div className="space-y-6">
          <div className="bg-white rounded-xl shadow-sm p-6">
            <h3 className="text-md font-semibold text-slate-800 mb-4">Informations</h3>
            <ul className="space-y-3">
              <li className="flex items-start">
                <div className="w-8 h-8 rounded-lg bg-blue-50 flex items-center justify-center mt-0.5">
                  <Calendar className="w-4 h-4 text-blue-600" />
                </div>
                <div className="ml-3">
                  <p className="text-xs text-slate-500">Date d'ajout</p>
                  <p className="text-sm font-medium text-slate-800">
                    {new Date(candidate.createdAt).toLocaleDateString()}
                  </p>
                </div>
              </li>
              <li className="flex items-start">
                <div className="w-8 h-8 rounded-lg bg-blue-50 flex items-center justify-center mt-0.5">
                  <Briefcase className="w-4 h-4 text-blue-600" />
                </div>
                <div className="ml-3">
                  <p className="text-xs text-slate-500">Expérience</p>
                  <p className="text-sm font-medium text-slate-800">
                    {candidate.yearsOfExperience || 'N/A'} ans
                  </p>
                </div>
              </li>
              <li className="flex items-start">
                <div className="w-8 h-8 rounded-lg bg-blue-50 flex items-center justify-center mt-0.5">
                  <MapPin className="w-4 h-4 text-blue-600" />
                </div>
                <div className="ml-3">
                  <p className="text-xs text-slate-500">Localisation</p>
                  <p className="text-sm font-medium text-slate-800">
                    {candidate.location || 'Non spécifiée'}
                  </p>
                </div>
              </li>
              <li className="flex items-start">
                <div className="w-8 h-8 rounded-lg bg-blue-50 flex items-center justify-center mt-0.5">
                  <Award className="w-4 h-4 text-blue-600" />
                </div>
                <div className="ml-3">
                  <p className="text-xs text-slate-500">Score IA</p>
                  <p className="text-sm font-medium text-slate-800">
                    {candidate.score || 'N/A'}%
                  </p>
                </div>
              </li>
            </ul>
            {candidate.source && (
              <div className="mt-4 pt-4 border-t border-slate-100">
                <div className="flex items-start">
                  <div className="w-8 h-8 rounded-lg bg-indigo-50 flex items-center justify-center mt-0.5">
                    <Share2 className="w-4 h-4 text-indigo-600" />
                  </div>
                  <div className="ml-3">
                    <p className="text-xs text-slate-500">Source</p>
                    <p className="text-sm font-medium text-slate-800">
                      {candidate.source}
                    </p>
                  </div>
                </div>
              </div>
            )}
          </div>
          <div className="bg-white rounded-xl shadow-sm p-6">
            <h3 className="text-md font-semibold text-slate-800 mb-4">Correspondance aux postes</h3>
            {jobs && jobs.length > 0 ? (
              <div className="space-y-3">
                {jobs.slice(0, 3).map((job) => (
                  <div key={job.id} className="flex items-center justify-between p-3 border border-slate-200 rounded-lg">
                    <div>
                      <h4 className="text-sm font-medium text-slate-800">{job.title}</h4>
                      <div className="flex items-center mt-1">
                        <MapPin className="w-3 h-3 text-slate-400 mr-1" />
                        <span className="text-xs text-slate-500">{job.location}</span>
                      </div>
                    </div>
                    <div className="flex items-center">
                      <div className="w-9 h-9 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 flex items-center justify-center text-white text-xs font-medium">
                        {candidate.jobMatches && candidate.jobMatches[job.id] ? `${candidate.jobMatches[job.id]}%` : '?'}
                      </div>
                      <button className="ml-3 text-slate-400 hover:text-blue-600">
                        <ArrowRight className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                ))}
                {jobs.length > 3 && (
                  <Link to="/jobs" className="block text-center text-sm text-blue-600 hover:text-blue-800 mt-2">
                    Voir tous les postes ({jobs.length})
                  </Link>
                )}
              </div>
            ) : (
              <div className="text-center py-6 bg-slate-50 rounded-lg">
                <p className="text-slate-500 text-sm">Aucun poste disponible</p>
              </div>
            )}
          </div>
          {candidate.similarCandidates && candidate.similarCandidates.length > 0 && (
            <div className="bg-white rounded-xl shadow-sm p-6">
              <h3 className="text-md font-semibold text-slate-800 mb-4">Candidats similaires</h3>
              <div className="space-y-3">
                {candidate.similarCandidates.map((similar) => (
                  <Link key={similar.id} to={`/talent/${similar.id}`} className="flex items-center p-3 border border-slate-200 rounded-lg hover:bg-slate-50">
                    <div className="w-10 h-10 rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 flex items-center justify-center text-white text-sm font-medium">
                      {similar.firstName.charAt(0)}{similar.lastName.charAt(0)}
                    </div>
                    <div className="ml-3 flex-1">
                      <h4 className="text-sm font-medium text-slate-800">{similar.firstName} {similar.lastName}</h4>
                      <p className="text-xs text-slate-500">{similar.title}</p>
                    </div>
                    <div className="flex items-center">
                      <span className="px-2 py-1 rounded-full text-xs font-medium bg-blue-50 text-blue-700 mr-2">
                        {similar.similarity}% similar
                      </span>
                      <ArrowRight className="w-4 h-4 text-slate-400" />
                    </div>
                  </Link>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default TalentDetail;
=== FIN ===

=== Contenu de frontend\src\pages\talent\TalentPool.jsx ===
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Users, Search, Filter, PlusCircle, ChevronDown } from 'lucide-react';
import axios from '../../utils/axios';
import { toast } from 'react-toastify';
import LoadingSpinner from '../../components/common/LoadingSpinner';
import CandidateRow from '../../components/candidates/CandidateRow';

const TalentPool = () => {
  const [loading, setLoading] = useState(true);
  const [candidates, setCandidates] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState({
    minScore: 0,
    skills: [],
    experience: null,
  });

  const [showFilters, setShowFilters] = useState(false);
  const [selectedSkills, setSelectedSkills] = useState([]);
  const [availableSkills, setAvailableSkills] = useState([]);
  
  useEffect(() => {
    const fetchCandidates = async () => {
      try {
        setLoading(true);
        const response = await axios.get('/api/candidates');
        setCandidates(response.data);
        
        // Extract unique skills from all candidates
        const skills = new Set();
        response.data.forEach(candidate => {
          candidate.skills.forEach(skill => skills.add(skill));
        });
        setAvailableSkills(Array.from(skills));
      } catch (error) {
        console.error('Error fetching candidates:', error);
        toast.error('Erreur lors du chargement des candidats');
      } finally {
        setLoading(false);
      }
    };
    
    fetchCandidates();
  }, []);
  
  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
  };
  
  const handleFilterChange = (name, value) => {
    setFilters(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  const toggleSkillFilter = (skill) => {
    setSelectedSkills(prev => {
      if (prev.includes(skill)) {
        return prev.filter(s => s !== skill);
      } else {
        return [...prev, skill];
      }
    });
  };
  
  const resetFilters = () => {
    setFilters({
      minScore: 0,
      skills: [],
      experience: null,
    });
    setSelectedSkills([]);
  };
  
  const filteredCandidates = React.useMemo(() => {
    return candidates.filter(candidate => {
      // Filter by search term
      if (searchTerm && !`${candidate.firstName} ${candidate.lastName}`.toLowerCase().includes(searchTerm.toLowerCase())) {
        return false;
      }
      
      // Filter by minimum score
      if (candidate.score < filters.minScore) {
        return false;
      }
      
      // Filter by skills
      if (selectedSkills.length > 0) {
        const candidateSkills = candidate.skills.map(s => s.toLowerCase());
        const hasAllSkills = selectedSkills.every(skill => 
          candidateSkills.includes(skill.toLowerCase())
        );
        if (!hasAllSkills) return false;
      }
      
      // Filter by experience
      if (filters.experience && candidate.yearsOfExperience < filters.experience) {
        return false;
      }
      
      return true;
    });
  }, [candidates, searchTerm, filters, selectedSkills]);
  
  if (loading) {
    return <LoadingSpinner />;
  }

  return (
    <div>
      {/* Header */}
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6">
        <div>
          <h1 className="text-2xl font-bold text-slate-800">Base de talents</h1>
          <p className="text-slate-500 mt-1">Gérez et explorez votre pool de candidats</p>
        </div>
        <div className="flex flex-col sm:flex-row gap-3">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400" size={18} />
            <input
              type="text"
              placeholder="Rechercher un candidat..."
              className="pl-10 pr-4 py-2 border border-slate-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 w-full sm:w-64"
              value={searchTerm}
              onChange={handleSearch}
            />
          </div>
          <button 
            className="flex items-center px-4 py-2 bg-white border border-slate-200 rounded-lg shadow-sm hover:bg-slate-50"
            onClick={() => setShowFilters(!showFilters)}
          >
            <Filter className="h-4 w-4 text-slate-600 mr-2" />
            <span className="text-sm font-medium text-slate-700">Filtres</span>
          </button>
          <Link to="/cv-analysis" className="flex items-center px-4 py-2 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg shadow-sm hover:from-blue-700 hover:to-indigo-700">
            <PlusCircle className="h-4 w-4 mr-2" />
            <span className="text-sm font-medium">Ajouter</span>
          </Link>
        </div>
      </div>
      
      {/* Filters Panel */}
      {showFilters && (
        <div className="bg-white rounded-xl shadow-sm p-6 mb-6">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-lg font-medium text-slate-800">Filtres avancés</h2>
            <button 
              className="text-sm text-blue-600 hover:text-blue-800"
              onClick={resetFilters}
            >
              Réinitialiser
            </button>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* Score minimum */}
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">Score minimum</label>
              <div className="relative">
                <select
                  className="w-full p-2 border border-slate-200 rounded-lg appearance-none focus:outline-none focus:ring-2 focus:ring-blue-500"
                  value={filters.minScore}
                  onChange={(e) => handleFilterChange('minScore', parseInt(e.target.value))}
                >
                  <option value={0}>Tous</option>
                  <option value={50}>50% et plus</option>
                  <option value={70}>70% et plus</option>
                  <option value={85}>85% et plus</option>
                </select>
                <ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400" size={16} />
              </div>
            </div>
            
            {/* Experience minimum */}
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">Expérience minimum</label>
              <div className="relative">
                <select
                  className="w-full p-2 border border-slate-200 rounded-lg appearance-none focus:outline-none focus:ring-2 focus:ring-blue-500"
                  value={filters.experience || ''}
                  onChange={(e) => handleFilterChange('experience', e.target.value ? parseInt(e.target.value) : null)}
                >
                  <option value="">Toute expérience</option>
                  <option value={1}>1 an et plus</option>
                  <option value={3}>3 ans et plus</option>
                  <option value={5}>5 ans et plus</option>
                  <option value={10}>10 ans et plus</option>
                </select>
                <ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400" size={16} />
              </div>
            </div>
            
            {/* Skills */}
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">Compétences</label>
              <div className="space-y-2">
                <div className="flex flex-wrap gap-2">
                  {selectedSkills.map(skill => (
                    <span 
                      key={skill} 
                      className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 cursor-pointer"
                      onClick={() => toggleSkillFilter(skill)}
                    >
                      {skill} ×
                    </span>
                  ))}
                </div>
                <div className="relative">
                  <select
                    className="w-full p-2 border border-slate-200 rounded-lg appearance-none focus:outline-none focus:ring-2 focus:ring-blue-500"
                    value=""
                    onChange={(e) => {
                      if (e.target.value) {
                        toggleSkillFilter(e.target.value);
                      }
                    }}
                  >
                    <option value="">Ajouter une compétence</option>
                    {availableSkills
                      .filter(skill => !selectedSkills.includes(skill))
                      .map(skill => (
                        <option key={skill} value={skill}>{skill}</option>
                      ))
                    }
                  </select>
                  <ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400" size={16} />
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Candidates List */}
      <div className="bg-white rounded-xl shadow-sm overflow-hidden">
        <div className="p-6 pb-3 border-b border-slate-100">
          <div className="flex justify-between items-center">
            <h2 className="text-lg font-semibold text-slate-800">Candidats ({filteredCandidates.length})</h2>
          </div>
        </div>
        
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="bg-slate-50">
                <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Nom</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Poste</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Compétences clés</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Score IA</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-slate-100">
              {filteredCandidates.map(candidate => (
                <CandidateRow key={candidate.id} candidate={candidate} />
              ))}
              {filteredCandidates.length === 0 && (
                <tr>
                  <td colSpan="5" className="px-6 py-10 text-center text-slate-500">
                    Aucun candidat trouvé avec les filtres actuels
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default TalentPool;
=== FIN ===

=== Contenu de frontend\src\services\api.js ===
import axios from '../utils/axios';


export const authService = {
  login: async (email, password) => {
    const response = await axios.post('/auth/login', { email, password });
    const { data } = response.data; // Déstructure data
    const { user, token } = data; // Déstructure user et token
    return { user, token }; // Retourne l'objet attendu
  },
  
  register: async (data) => {
    const response = await axios.post('/api/auth/register', data);
    return response.data;
  },
  
  forgotPassword: async (email) => {
    const response = await axios.post('/api/auth/forgot-password', { email });
    return response.data;
  },
  
  resetPassword: async (token, password) => {
    const response = await axios.post('/api/auth/reset-password', { token, password });
    return response.data;
  },
  
  getCurrentUser: async () => {
    const response = await axios.get('/api/auth/me');
    return response.data;
  },
  
  logout: async () => {
    const response = await axios.post('/api/auth/logout');
    return response.data;
  }
};

// export const cvService = {
//   uploadCV: async (files, jobId = null) => {
//     const formData = new FormData();
    
//     if (jobId) {
//       formData.append('jobId', jobId);
//     }
    
//     Array.from(files).forEach(file => {
//       formData.append('files', file);
//     });
    
//     const response = await axios.post('/api/cv/upload', formData, {
//       headers: {
//         'Content-Type': 'multipart/form-data'
//       }
//     });
    
//     return response.data;
//   },
  
//   analyzeCV: async (cvId, jobId) => {
//     const response = await axios.post('/api/cv/analyze-single', { cvId, jobId });
//     return response.data;
//   },
  
//   analyzeBatch: async (files, jobId) => {
//     const formData = new FormData();
//     formData.append('jobId', jobId);
    
//     Array.from(files).forEach(file => {
//       formData.append('files', file);
//     });
    
//     const response = await axios.post('/api/cv/analyze', formData, {
//       headers: {
//         'Content-Type': 'multipart/form-data'
//       }
//     });
    
//     return response.data.analysisId;
//   },
  
//   getAnalysisProgress: async (analysisId) => {
//     const response = await axios.get(`/api/cv/analyze/progress/${analysisId}`);
//     return response.data;
//   },

//   // Nouvelle méthode pour obtenir tous les candidats
//   getCandidates: async (filters = {}) => {
//     try {
//       const params = new URLSearchParams();

//       if (filters.status) params.append('status', filters.status);
//       if (filters.skills) params.append('skills', filters.skills.join(','));
//       if (filters.minScore) params.append('minScore', filters.minScore);

//       const response = await axios.get(`/api/candidates?${params.toString()}`);
//       return response.data;
//     } catch (error) {
//       console.error('Error fetching candidates:', error);
//       throw error;
//     }
//   },

//   // Méthode mise à jour pour obtenir les détails d'un candidat
//   getCVById: async (id) => {
//     try {
//       const response = await axios.get(`/api/cv/${id}`);
//       return response.data;
//     } catch (error) {
//       console.error('Error fetching CV details:', error);
//       throw error;
//     }
//   },
  
//   downloadCV: async (id) => {
//     try {
//       const response = await axios.get(`/api/cv/download/${id}`, {
//         responseType: 'blob'
//       });
      
//       const url = window.URL.createObjectURL(new Blob([response.data]));
//       const link = document.createElement('a');
//       link.href = url;
//       link.setAttribute('download', `cv_${id}.pdf`);
//       document.body.appendChild(link);
//       link.click();
//       link.remove();
//     } catch (error) {
//       console.error('Error downloading CV:', error);
//     }
//   }
// };





export const getCandidates = async (companyId) => {
  try {
    const response = await axios.get(`/companies/${companyId}/candidates`);
    return response.data;
  } catch (error) {
    console.error('Error fetching candidates:', error);
    throw error;
  }
};

export const getCandidateById = async (companyId, id) => {
  try {
    const response = await axios.get(`/candidates/companies/${companyId}/candidates/${id}`);
    return response.data;
  } catch (error) {
    console.error('Error fetching candidate:', error);
    throw error;
  }
};

export const createCandidate = async (companyId, candidateData) => {
  try {
    const response = await axios.post(`/candidates/companies/${companyId}/candidates`, candidateData);
    return response.data;
  } catch (error) {
    console.error('Error creating candidate:', error);
    throw error;
  }
};

export const updateCandidate = async (companyId, id, candidateData) => {
  try {
    const response = await axios.put(`/candidates/companies/${companyId}/candidates/${id}`, candidateData);
    return response.data;
  } catch (error) {
    console.error('Error updating candidate:', error);
    throw error;
  }
};

export const deleteCandidate = async (companyId, id) => {
  try {
    const response = await axios.delete(`/candidates/companies/${companyId}/candidates/${id}`);
    return response.data;
  } catch (error) {
    console.error('Error deleting candidate:', error);
    throw error;
  }
};

export const downloadCV = async (id) => {
  try {
  
    const response = await axios.get(`/candidates/candidates/${id}/download-cv`);
    return response.data.url;
  } catch (error) {
    console.error('Error downloading CV:', error);
    throw error;
  }
};

export const jobService = {
  

  getJobs: async (companyId, params = {}) => {
    try {
      const response = await axios.get(`/jobs/companies/${companyId}/jobs`, { params });
    
      // Le backend renvoie { data: jobs, currentPage, totalPages, totalJobs }
      return response.data.data; // On retourne uniquement le tableau des jobs
    } catch (error) {
      console.error('Erreur lors de la récupération des jobs:', error.response?.data || error.message);
      throw error;
    }
  },
  
  getJobById: async (companyId, jobId) => {
    try {
      const response = await axios.get(`/jobs/companies/${companyId}/jobs/${jobId}`);
      return response.data.data; // Le backend renvoie { data: job }
    } catch (error) {
      console.error(`Erreur lors de la récupération du job ${jobId}:`, error.response?.data || error.message);
      throw error;
    }
  },


  getDepartments: async () => {
    try {
      const response = await axios.get('/api/jobs/departments');
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la récupération des départements:', error);
      // Pour le développement, retourne des données simulées
      if (process.env.NODE_ENV === 'development') {
        return [
          { id: '1', name: 'Support Client' },
          { id: '2', name: 'Finance' },
          { id: '3', name: 'Ressources Humaines' },
          { id: '4', name: 'Informatique' },
          { id: '5', name: 'Juridique' },
          { id: '6', name: 'Marketing' },
          { id: '7', name: 'Ventes' },
          { id: '8', name: 'Ingénierie' },
          { id: '9', name: 'Produit' }
        ];
      }
      throw error;
    }
  },

   

  createJob: async (companyId, jobData) => {
    try {
      console.log('Sending job data:', jobData); // Débogage
      const response = await axios.post(`/jobs/companies/${companyId}/jobs`, jobData, {
        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
      });
      return response.data.data;
    } catch (error) {
      console.error('Error creating job:', error.response?.data || error);
      throw error;
    }
  },

  // Mettre à jour un job
  updateJob: async (companyId, jobId, jobData) => {
    try {
      const response = await axios.put(`/jobs/companies/${companyId}/jobs/${jobId}`, jobData);
      return response.data.data;
    } catch (error) {
      console.error(`Erreur lors de la mise à jour du job ${jobId}:`, error.response?.data || error.message);
      throw error;
    }
  },

  deleteJob: async (companyId, jobId) => {
    try {
      const response = await axios.delete(`/jobs/companies/${companyId}/jobs/${jobId}`);
      return response.data;
    } catch (error) {
      console.error(`Erreur lors de la suppression du job ${jobId}:`, error.response?.data || error.message);
      throw error;
    }
  },
  getHiringTeam: async (companyId, jobId) => {
    try {
      const response = await axios.get(`/jobs/companies/${companyId}/jobs/${jobId}/hiring-team`);
      return response.data.data;
    } catch (error) {
      console.error(`Erreur lors de la récupération de l'équipe de recrutement pour le job ${jobId}:`, error.response?.data || error.message);
      throw error;
    }
  },

  addHiringMember: async (companyId, jobId, memberData) => {
    try {
      const response = await axios.post(`/jobs/companies/${companyId}/jobs/${jobId}/hiring-team`, memberData);
      return response.data.data;
    } catch (error) {
      console.error(`Erreur lors de l'ajout d'un membre à l'équipe de recrutement pour le job ${jobId}:`, error.response?.data || error.message);
      throw error;
    }
  },

  removeHiringMember: async (companyId, jobId, memberId) => {
    try {
      const response = await axios.delete(`/jobs/companies/${companyId}/jobs/${jobId}/hiring-team/${memberId}`);
      return response.data;
    } catch (error) {
      console.error(`Erreur lors de la suppression d'un membre de l'équipe de recrutement pour le job ${jobId}:`, error.response?.data || error.message);
      throw error;
    }
  },

  generateJobDescription: async (title, requirements) => {
    try {
      const response = await axios.post('/api/jobs/generate-description', { title, requirements });
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la génération de la description du job:', error.response?.data || error.message);
      throw error;
    }
  }
};



 

export const interviewService = {
  getInterviews: async (filters = {}) => {
    const params = new URLSearchParams();
    
    if (filters.status) params.append('status', filters.status);
    if (filters.from) params.append('from', filters.from);
    if (filters.to) params.append('to', filters.to);
    
    const response = await axios.get(`/api/interviews?${params.toString()}`);
    return response.data;
  },
  
  getInterviewById: async (id) => {
    const response = await axios.get(`/api/interviews/${id}`);
    return response.data;
  },
  
  scheduleInterview: async (data) => {
    const response = await axios.post('/api/interviews', data);
    return response.data;
  },
  
  updateInterview: async (id, data) => {
    const response = await axios.put(`/api/interviews/${id}`, data);
    return response.data;
  },
  
  cancelInterview: async (id, reason) => {
    const response = await axios.post(`/api/interviews/${id}/cancel`, { reason });
    return response.data;
  },
  
  generateInterviewQuestions: async (candidateId, jobId) => {
    const response = await axios.post('/api/interviews/generate-questions', { candidateId, jobId });
    return response.data;
  }
};


// Nouveau service pour les messages
export const messageService = {
  getConversations: async (filters = {}) => {
    try {
      const params = new URLSearchParams();

      if (filters.filter) params.append('filter', filters.filter);

      const response = await axios.get(`/api/messages/conversations?${params.toString()}`);
      return response.data;
    } catch (error) {
      console.error('Error fetching conversations:', error);
      throw error;
    }
  },

  getMessages: async (conversationId) => {
    try {
      const response = await axios.get(`/api/messages/conversations/${conversationId}`);
      return response.data;
    } catch (error) {
      console.error('Error fetching messages:', error);
      throw error;
    }
  },

  sendMessage: async (conversationId, content) => {
    try {
      const response = await axios.post(`/api/messages/conversations/${conversationId}`, { content });
      return response.data;
    } catch (error) {
      console.error('Error sending message:', error);
      throw error;
    }
  }
};

// Nouveau service pour le dashboard
export const dashboardService = {
  getDashboardData: async () => {
    try {
      const response = await axios.get('/api/dashboard');
      return response.data;
    } catch (error) {
      console.error('Error fetching dashboard data:', error);
      throw error;
    }
  }
};

// Workflow service
 
const getCompanyId = () => {
  // Example: Retrieve from user context or local storage
  return localStorage.getItem('companyId') ; // Placeholder
};
export const workflowService = {
  // Récupérer les workflows pour une entreprise spécifique
  getWorkflows: async (companyId) => {
    try {
      if (!companyId) {
        throw new Error('companyId est requis');
      }
      const response = await axios.get(`/workflows/companies/${companyId}/templates`);
       
      return response.data.data; // Le backend renvoie les données dans `data`
    } catch (error) {
      console.error('Error fetching workflows:', error);
      throw error.response?.data || error;
    }
  },

  // Créer un nouveau workflow

  

  createWorkflow: async (companyId, data) => {
    try {
      if (!companyId) throw new Error('companyId est requis pour createWorkflow');
      if (!data.name) throw new Error('Le nom du workflow est requis');
      
      

      const payload = {
        name: data.name,
        type: 'RECRUITMENT', // Valeur par défaut
        stages: [
          {
            name: 'Initial Review',
            type: 'AI_SCREENING', // Valeur par défaut, doit correspondre à StageType
            order: 0,
            settings: {},
          },
        ],
      };

      const response = await axios.post(`/workflows/companies/${companyId}/templates`, payload);
      console.log("response.data.data",response.data.data);
      return response.data.data;
    } catch (error) {
      console.error('Error creating workflow:', error);
      throw error.response?.data || error;
    }
  },


  // Mettre à jour un workflow
  updateWorkflow: async (companyId, id, data) => {
    try {
      if (!companyId || !id) {
        throw new Error('companyId et id sont requis');
      }
      const response = await axios.put(`/workflows/companies/${companyId}/templates/${id}`, data);
      return response.data.data;
    } catch (error) {
      console.error('Error updating workflow:', error);
      throw error.response?.data || error;
    }
  },

  // Récupérer les stages d'un workflow
  getWorkflowStages: async (companyId, workflowId) => {
    try {
      if (!companyId || !workflowId) {
        throw new Error('companyId et workflowId sont requis');
      }

      const response1 = await axios.get(
        `http://localhost:5000/api/v1/workflows/companies/${companyId}/templates/${workflowId}`,
        {
          headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
        }
      );
      const stages = response1.data.data.stages || [];
      console.log('Fetched stages response1:', stages); // Débogage

      return stages;
     
    } catch (error) {
      console.error('Error fetching workflow stages:', error);
      if (process.env.NODE_ENV === 'development') {
        return [
          { id: '1', name: 'Initial Review', type: 'SCREENING', order: 0 },
          { id: '2', name: 'Interview', type: 'INTERVIEW', order: 1 },
        ];
      }
      throw error.response?.data || error;
    }
  },

  // Créer un nouveau stage
  createWorkflowStage: async (companyId, workflowId, stageData) => {
    try {
      if (!companyId || !workflowId) {
        throw new Error('companyId et workflowId sont requis');
      }
      const templateResponse = await axios.get(`/workflows/companies/${companyId}/templates/${workflowId}`);
      const currentStages = templateResponse.data.data.stages || [];
      const newStage = {
        name: stageData.name,
        type: stageData.type || 'AI_SCREENING',
        order: stageData.order || currentStages.length,
        settings: stageData.settings || {},
      };
      const updatedStages = [...currentStages, newStage];
      const response = await axios.put(`/workflows/companies/${companyId}/templates/${workflowId}`, {
        stages: updatedStages,
      });
      return response.data.data.stages.find((stage) => stage.name === newStage.name);
    } catch (error) {
      console.error('Error creating workflow stage:', error);
      throw error.response?.data || error;
    }
  },

  // Mettre à jour un stage
  async updateWorkflowStage(companyId, workflowId, stageId, stageData) {
    try {
      if (!companyId || !workflowId || !stageId) {
        throw new Error('companyId, workflowId et stageId sont requis');
      }
      const templateResponse = await axios.get(
        `http://localhost:5000/api/v1/workflows/companies/${companyId}/templates/${workflowId}`, // Ajoute le port si nécessaire
        { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
      );
      console.log('Template response:', templateResponse.data); // Débogage
      const currentStages = templateResponse.data.data.stages || [];
      const updatedStages = currentStages.map((stage) =>
        stage.id === stageId ? { ...stage, ...stageData } : stage
      );
      const response = await axios.put(
        `http://localhost:5000/api/v1/workflows/companies/${companyId}/templates/${workflowId}`,
        { stages: updatedStages },
        { headers: { Authorization: `Bearer ${localStorage.getItem('token')}` } }
      );
      console.log('PUT response:', response.data); // Débogage
      const updatedStage = response.data.data?.stages?.find((stage) => stage.id === stageId) || updatedStages.find((stage) => stage.id === stageId);
      if (!updatedStage) {
        throw new Error('Étape mise à jour non trouvée dans la réponse');
      }
      return updatedStage;
    } catch (error) {
      console.error('Error updating workflow stage:', error);
      throw error.response?.data || error;
    }
  },

  // Supprimer un stage
  deleteWorkflowStage: async (companyId, workflowId, stageId) => {
    try {
      if (!companyId || !workflowId || !stageId) {
        throw new Error('companyId, workflowId et stageId sont requis');
      }
      const templateResponse = await axios.get(`/workflows/companies/${companyId}/templates/${workflowId}`);
      const currentStages = templateResponse.data.data.stages || [];
      const updatedStages = currentStages
        .filter((stage) => stage.id !== stageId)
        .map((stage, index) => ({ ...stage, order: index })); // Réajuster les ordres
      const response = await axios.put(`/workflows/companies/${companyId}/templates/${workflowId}`, {
        stages: updatedStages,
      });
      return response.data.data;
    } catch (error) {
      console.error('Error deleting workflow stage:', error);
      throw error.response?.data || error;
    }
  },
};



// Mock data pour le développement
function getMockStages(workflowId) {
  if (workflowId === 'default' || workflowId === 1) {
    return [
      { id: 'stage-1', name: 'Leads', type: 'lead', dueDays: 3, order: 0 },
      { id: 'stage-2', name: 'Applicants', type: 'applied', dueDays: 3, order: 1 },
      { id: 'stage-3', name: 'Short List', type: 'review', dueDays: 2, order: 2 },
      { id: 'stage-4', name: 'Screening Call', type: 'interview', dueDays: 14, order: 3 },
      { id: 'stage-5', name: 'Interview', type: 'interview', dueDays: 14, order: 4 },
      { id: 'stage-6', name: 'Final review', type: 'review', dueDays: 14, order: 5 },
      { id: 'stage-7', name: 'Offer', type: 'offer', dueDays: 14, order: 6 },
      { id: 'stage-8', name: 'Hired', type: 'hired', dueDays: null, order: 7 },
      { id: 'stage-9', name: 'Disqualified', type: 'disqualified', dueDays: null, order: 8 },
      { id: 'stage-10', name: 'Archived', type: 'none', dueDays: null, order: 9 }
    ];
  } else {
    // Pour les autres workflows, retourner une version simplifiée
    return [
      { id: `${workflowId}-stage-1`, name: 'Leads', type: 'lead', dueDays: 3, order: 0 },
      { id: `${workflowId}-stage-2`, name: 'Applicants', type: 'applied', dueDays: 3, order: 1 },
      { id: `${workflowId}-stage-3`, name: 'Interview', type: 'interview', dueDays: 14, order: 2 },
      { id: `${workflowId}-stage-4`, name: 'Hired', type: 'hired', dueDays: null, order: 3 }
    ];
  }
}

// Service pour les templates d'entretien
// export const meetingTemplateService = {
//   getMeetingTemplates: async () => {
//     try {
//       const response = await axios.get('/api/meeting-templates');
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors du chargement des templates d\'entretien:', error);
//       // Pour le développement, retourner des données simulées
//       if (process.env.NODE_ENV === 'development') {
//         return getMockMeetingTemplates();
//       }
//       throw error;
//     }
//   },

//   getMeetingTemplateById: async (id) => {
//     try {
//       const response = await axios.get(`/api/meeting-templates/${id}`);
//       return response.data;
//     } catch (error) {
//       console.error(`Erreur lors du chargement du template d'entretien ${id}:`, error);
//       throw error;
//     }
//   },

//   createMeetingTemplate: async (data) => {
//     try {
//       const response = await axios.post('/scheduling/companies/:companyId/meeting-templates', data);
//       console.log("response.data",response.data);
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors de la création du template d\'entretien:', error);
//       throw error;
//     }
//   },

//   updateMeetingTemplate: async (id, data) => {
//     try {
//       const response = await axios.put(`/api/meeting-templates/${id}`, data);
//       return response.data;
//     } catch (error) {
//       console.error(`Erreur lors de la mise à jour du template d'entretien ${id}:`, error);
//       throw error;
//     }
//   },

//   deleteMeetingTemplate: async (id) => {
//     try {
//       const response = await axios.delete(`/api/meeting-templates/${id}`);
//       return response.data;
//     } catch (error) {
//       console.error(`Erreur lors de la suppression du template d'entretien ${id}:`, error);
//       throw error;
//     }
//   }
// };

export const meetingTemplateService = {
  getRatingCards: async (companyId) => {
    try {
      const response = await axios.get(`/ratings/companies/${companyId}/rating-card-templates`);
      return response.data.data;
    } catch (error) {
      console.error('Erreur lors de la récupération des fiches d\'évaluation:', error);
      throw error;
    }
  },
  getMeetingTemplates: async (companyId) => {
    try {
      const response = await axios.get(`/scheduling/companies/${companyId}/meeting-templates`);
      return response.data.data; // Ajuste selon la structure de réponse du backend
    } catch (error) {
      console.error('Erreur lors du chargement des templates d\'entretien:', error);
      if (process.env.NODE_ENV === 'development') {
        return getMockMeetingTemplates();
      }
      throw error;
    }
  },

  getMeetingTemplateById: async (companyId, id) => {
    try {
      const response = await axios.get(`/scheduling/companies/${companyId}/meeting-templates/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`Erreur lors du chargement du template d'entretien ${id}:`, error);
      throw error;
    }
  },

  createMeetingTemplate: async (companyId, data) => {
    try {
      const response = await axios.post(`/scheduling/companies/${companyId}/meeting-templates`, data);
      console.log("response.data", response.data);
      return response.data.data;
    } catch (error) {
      console.error('Erreur lors de la création du template d\'entretien:', error);
      throw error;
    }
  },

  updateMeetingTemplate: async (companyId, id, data) => {
    try {
      const response = await axios.put(`/scheduling/companies/${companyId}/meeting-templates/${id}`, data);
      return response.data.data;
    } catch (error) {
      console.error(`Erreur lors de la mise à jour du template d'entretien ${id}:`, error);
      throw error;
    }
  },

  deleteMeetingTemplate: async (companyId, id) => {
    try {
      const response = await axios.delete(`/scheduling/companies/${companyId}/meeting-templates/${id}`);
      return response.data;
    } catch (error) {
      console.error(`Erreur lors de la suppression du template d'entretien ${id}:`, error);
      throw error;
    }
  }

};



// Service de templates de messages


export const messageTemplateService = {
  getMessageTemplates: async (companyId) => {
    try {
      const response = await axios.get(`/messagingTemplate/companies/${companyId}/message-templates`);
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la récupération des templates de messages:', error);
      throw error;
    }
  },

  getMessageTemplateById: async (companyId, id) => {
    try {
      const response = await axios.get(`/messagingTemplate/companies/${companyId}/message-templates/${id}`);
      return response.data;
    } catch (error) {
      console.error(`Erreur lors de la récupération du template ${id}:`, error);
      throw error;
    }
  },

  createMessageTemplate: async (companyId, templateData) => {
    try {
      const response = await axios.post(`/messagingTemplate/companies/${companyId}/message-templates`, templateData);
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la création du template:', error);
      throw error;
    }
  },

  updateMessageTemplate: async (companyId, id, templateData) => {
    try {
      const response = await axios.put(`/messagingTemplate/companies/${companyId}/message-templates/${id}`, templateData);
      return response.data;
    } catch (error) {
      console.error(`Erreur lors de la mise à jour du template ${id}:`, error);
      throw error;
    }
  },

  deleteMessageTemplate: async (companyId, id) => {
    try {
      const response = await axios.delete(`/messagingTemplate/companies/${companyId}/message-templates/${id}`);
      return response.data;
    } catch (error) {
      console.error(`Erreur lors de la suppression du template ${id}:`, error);
      throw error;
    }
  }
};




// // Service de questions
// export const questionService = {
//   getCustomQuestions: async () => {
//     try {
//       const response = await axios.get('/api/questions/custom');
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors de la récupération des questions personnalisées:', error);
//       // Pour les besoins de développement, renvoyer des données simulées si le backend n'est pas encore prêt
//       if (process.env.NODE_ENV === 'development') {
//         return getMockQuestions();
//       }
//       throw error;
//     }
//   },

//   getQuestionSets: async () => {
//     try {
//       const response = await axios.get('/api/questions/sets');
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors de la récupération des ensembles de questions:', error);
//       // Pour les besoins de développement, renvoyer des données simulées si le backend n'est pas encore prêt
//       if (process.env.NODE_ENV === 'development') {
//         return [];
//       }
//       throw error;
//     }
//   },

//   createQuestion: async (questionData) => {
//     try {
//       const response = await axios.post('/api/questions', questionData);
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors de la création de la question:', error);
//       throw error;
//     }
//   },

//   updateQuestion: async (id, questionData) => {
//     try {
//       const response = await axios.put(`/api/questions/${id}`, questionData);
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors de la mise à jour de la question:', error);
//       throw error;
//     }
//   },

//   deleteQuestion: async (id) => {
//     try {
//       const response = await axios.delete(`/api/questions/${id}`);
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors de la suppression de la question:', error);
//       throw error;
//     }
//   },

//   createQuestionSet: async (setData) => {
//     try {
//       const response = await axios.post('/api/questions/sets', setData);
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors de la création de l\'ensemble de questions:', error);
//       throw error;
//     }
//   }
// };

 
// Service de questions
export const questionService = {
  getCustomQuestions: async (companyId) => {
    try {
      const response = await axios.get(`/questions/companies/${companyId}/questions/custom`);
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la récupération des questions personnalisées:', error);
      throw error;
    }
  },

  getQuestionSets: async (companyId) => {
    try {
      const response = await axios.get(`/questions/companies/${companyId}/questions/sets`);
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la récupération des ensembles de questions:', error);
      throw error;
    }
  },

  createQuestion: async (companyId, questionData) => {
    try {
      const response = await axios.post(`/questions/companies/${companyId}/questions`, questionData);
      return response.data.data;
    } catch (error) {
      console.error('Erreur lors de la création de la question:', error);
      throw error;
    }
  },

  updateQuestion: async (companyId, id, questionData) => {
    try {
      const response = await axios.put(`/questions/companies/${companyId}/questions/${id}`, questionData);
      return response.data.data;
    } catch (error) {
      console.error('Erreur lors de la mise à jour de la question:', error);
      throw error;
    }
  },

  deleteQuestion: async (companyId, id) => {
    try {
      const response = await axios.delete(`/questions/companies/${companyId}/questions/${id}`);
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la suppression de la question:', error);
      throw error;
    }
  },

  createQuestionSet: async (companyId, setData) => {
    try {
      const response = await axios.post(`/questions/companies/${companyId}/questions/sets`, setData);
      return response.data.data;
    } catch (error) {
      console.error('Erreur lors de la création de l\'ensemble de questions:', error);
      throw error;
    }
  },
  updateQuestionSet: async (companyId, id, setData) => {
    try {
      const response = await axios.put(`/questions/companies/${companyId}/questions/sets/${id}`, setData);
      return response.data.data;
    } catch (error) {
      console.error('Erreur lors de la mise à jour de l\'ensemble de questions:', error);
      throw error;
    }
  },

  deleteQuestionSet: async (companyId, id) => {
    try {
      const response = await axios.delete(`/questions/companies/${companyId}/questions/sets/${id}`);
      return response.data;
    } catch (error) {
      console.error('Erreur lors de la suppression de l\'ensemble de questions:', error);
      throw error;
    }
  }
};

// Données simulées pour le développement
function getMockQuestions() {
  return [
    {
      id: 'q1',
      text: 'Décrivez votre personnalité en quelques phrases.',
      responseType: 'short_text',
      visibility: 'public'
    },
    {
      id: 'q2',
      text: 'Décrivez votre travail idéal.',
      responseType: 'paragraph',
      visibility: 'public'
    },
    {
      id: 'q3',
      text: 'Quelles sont vos attentes salariales?',
      responseType: 'short_text',
      visibility: 'private'
    },
    {
      id: 'q4',
      text: 'Qu\'écoutez-vous pendant que vous travaillez?',
      responseType: 'short_text',
      visibility: 'public'
    },
    {
      id: 'q5',
      text: 'Que faites-vous pendant votre temps libre?',
      responseType: 'short_text',
      visibility: 'public'
    },
    {
      id: 'q6',
      text: 'Qu\'est-ce qui vous enthousiasme le plus dans ce poste?',
      responseType: 'paragraph',
      visibility: 'public'
    },
    {
      id: 'q7',
      text: 'Qu\'est-ce qui vous motive?',
      responseType: 'short_text',
      visibility: 'public'
    },
    {
      id: 'q8',
      text: 'Que devrions-nous absolument savoir sur vous?',
      responseType: 'paragraph',
      visibility: 'public'
    },
    {
      id: 'q9',
      text: 'Quelle est votre passion en dehors du travail?',
      responseType: 'short_text',
      visibility: 'public'
    }
  ]
}

// Service pour les fiches d'évaluation
export const ratingCardService = {
  // Get all rating card templates for a company
  async getRatingCards(companyId) {
    try {
      const response = await axios.get(`/ratings/companies/${companyId}/rating-card-templates`);
      return response.data.data; // Backend returns templates in `data`
    } catch (error) {
      throw new Error(error.response?.data?.message || 'Erreur lors de la récupération des fiches d\'évaluation');
    }
  },

  // Get a specific rating card template by ID
  async getRatingCardById(companyId, templateId) {
    try {
      const response = await axios.get(`/ratings/companies/${companyId}/rating-card-templates/${templateId}`);
      return response.data.data; // Backend returns template in `data`
    } catch (error) {
      throw new Error(error.response?.data?.message || 'Erreur lors de la récupération de la fiche d\'évaluation');
    }
  },

  // Create a new rating card template
  async createRatingCard(companyId, ratingCardData) {
    try {
      const response = await axios.post(`/ratings/companies/${companyId}/rating-card-templates`, ratingCardData);
      return response.data.data; // Backend returns created template in `data`
    } catch (error) {
      throw new Error(error.response?.data?.message || 'Erreur lors de la création de la fiche d\'évaluation');
    }
  },

  // Update an existing rating card template
  async updateRatingCard(companyId, templateId, ratingCardData) {
    try {
      const response = await axios.put(`/ratings/companies/${companyId}/rating-card-templates/${templateId}`, ratingCardData);
      return response.data.data; // Backend returns updated template in `data`
    } catch (error) {
      throw new Error(error.response?.data?.message || 'Erreur lors de la mise à jour de la fiche d\'évaluation');
    }
  },

  // Delete a rating card template
  async deleteRatingCard(companyId, templateId) {
    try {
      await axios.delete(`/ratings/companies/${companyId}/rating-card-templates/${templateId}`);
      return { message: 'Fiche d\'évaluation supprimée avec succès' };
    } catch (error) {
      throw new Error(error.response?.data?.message || 'Erreur lors de la suppression de la fiche d\'évaluation');
    }
  },
};
 

// Données simulées pour le développement
function getMockMeetingTemplates() {
  return [
    {
      id: 'template-1',
      name: 'Template d\'entretien par défaut',
      title: 'Premier entretien',
      duration: '30 minutes',
      type: 'Visioconférence',
      content: 'Introduction:\n- Présentation de l\'entreprise\n- Présentation du poste\n\nQuestions sur l\'expérience:\n- Parcours professionnel\n- Compétences techniques\n\nQuestions comportementales:\n- Exemples de situations difficiles\n- Travail en équipe\n\nConclusion:\n- Questions du candidat\n- Prochaines étapes',
      ratingCardId: 'rating-1',
      isDefault: true
    }
  ];
}

function getMockRatingCards() {
  return [
    {
      id: 'rating-1',
      name: 'Fiche d\'évaluation technique',
    },
    {
      id: 'rating-2',
      name: 'Fiche d\'évaluation comportementale',
    },
    {
      id: 'rating-3',
      name: 'Fiche d\'évaluation générale',
    }
  ];
}


// Service pour les paramètres d'entreprise
// export const companyService = {

//   getDepartments: async () => {
//     try {
//       const response = await axios.get('/companies');
      
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors de la récupération des départements:', error);

//       // Pour le développement, retourner des données simulées
//       if (process.env.NODE_ENV === 'development') {
//         return [
//           { id: '1', name: 'Support Client (CS)' },
//           { id: '2', name: 'Finance' },
//           { id: '3', name: 'Ressources Humaines (RH)' },
//           { id: '4', name: 'Informatique (IT)' },
//           { id: '5', name: 'Juridique' },
//           { id: '6', name: 'Marketing' },
//           { id: '7', name: 'Produit' },
//           { id: '8', name: 'Ventes' },
//           { id: '9', name: 'Ingénierie Logicielle' }
//         ];
//       }

//       throw error;
//     }
//   },

//   createDepartment: async (data) => {
//     try {
//       const response = await axios.post('/api/company/departments', data);
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors de la création du département:', error);

//       // Pour le développement
//       if (process.env.NODE_ENV === 'development') {
//         return {
//           id: Date.now().toString(),
//           name: data.name
//         };
//       }

//       throw error;
//     }
//   },

//   updateDepartment: async (id, data) => {
//     try {
//       const response = await axios.put(`/api/company/departments/${id}`, data);
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors de la mise à jour du département:', error);
//       throw error;
//     }
//   },

//   deleteDepartment: async (id) => {
//     try {
//       const response = await axios.delete(`/api/company/departments/${id}`);
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors de la suppression du département:', error);
//       throw error;
//     }
//   },
//   getCompanyProfile: async () => {
//     try {
//       const response = await axios.get('/api/company/profile');
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors de la récupération du profil d\'entreprise:', error);
//       // Pour le développement, retourner des données simulées
//       if (process.env.NODE_ENV === 'development') {
//         return {
//           name: 'RecrutPME',
//           website: 'https://www.recruitpme.fr',
//           phone: '01 23 45 67 89'
//         };
//       }
//       throw error;
//     }
//   },

//   updateCompanyProfile: async (data) => {
//     try {
//       const response = await axios.put('/api/company/profile', data);
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors de la mise à jour du profil d\'entreprise:', error);
//       throw error;
//     }
//   },

//    createCompany: async (companyData)  => {
//     try {
//       const response = await axios.post('/companies', companyData);
//       console.log('Données de l\'entreprise à créer:', response.data);

//       return response.data;
      

//     } catch (error) {
//       console.error('Erreur lors de la creatione d\'entreprise:', error);
//       throw error;
//     }
     
//   },

//   getCompanyLocations: async () => {
//     try {
//       const response = await axios.get('/api/company/locations');
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors de la récupération des emplacements:', error);
//       // Pour le développement, retourner des données simulées
//       if (process.env.NODE_ENV === 'development') {
//         return [
//           {
//             id: '1',
//             address: '123 Avenue des Champs-Élysées',
//             country: 'France',
//             city: 'Paris',
//             postalCode: '75008'
//           }
//         ];
//       }
//       throw error;
//     }
//   },

//   addCompanyLocation: async (data) => {
//     try {
//       const response = await axios.post('/api/company/locations', data);
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors de l\'ajout d\'un emplacement:', error);
//       throw error;
//     }
//   },

//   updateCompanyLocation: async (id, data) => {
//     try {
//       const response = await axios.put(`/api/company/locations/${id}`, data);
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors de la mise à jour d\'un emplacement:', error);
//       throw error;
//     }
//   },

//   deleteCompanyLocation: async (id) => {
//     try {
//       const response = await axios.delete(`/api/company/locations/${id}`);
//       return response.data;
//     } catch (error) {
//       console.error('Erreur lors de la suppression d\'un emplacement:', error);
//       throw error;
//     }
//   }
// };
// export const companyService = {
//   createCompany: async (companyData) => {
//     try {
//       const response = await axios.post('/companies', companyData);
//       return response.data;
//     } catch (error) {
//       const errorMessage = error.response?.data?.message || 'Erreur lors de la création de l\'entreprise';
//       const validationErrors = error.response?.data?.errors || [];
//       throw new Error(`${errorMessage}: ${validationErrors.map(e => e.message).join(', ')}`);
//     }
//   },
//   getCompanyProfile: async () => {
//     try {
//       const response = await axios.get('/my-companies'); // Doit correspondre à /my-companies
//       console.log('Réponse de /my-companies:', response.data);
//       return response.data.data[0] || null;
//     } catch (error) {
//       console.error('Erreur lors de getCompanyProfile:', error);
//       throw error.response?.data?.message || 'Erreur lors de la récupération du profil';
//     }
//   },
//   updateCompany: async (companyId, companyData) => {
//     try {
//       const response = await axios.put(`/companies/${companyId}`, companyData);
//       return response.data;
//     } catch (error) {
//       throw error.response?.data?.message || 'Erreur lors de la mise à jour de l\'entreprise';
//     }
//   }
// };

export const companyService = {
  // Récupérer le profil de l'entreprise
  

    getCompanyProfile: async () => {
    try {
      const response = await axios.get('/companies/my-companies'); // Doit correspondre à /my-companies
      console.log('Réponse de /my-companies:', response.data);
      return response.data.data[0] || null;
    } catch (error) {
      console.error('Erreur lors de getCompanyProfile:', error);
      throw error.response?.data?.message || 'Erreur lors de la récupération du profil';
    }
  },

  

  createCompany: async (companyData) => {
        try {
          const response = await axios.post('/companies', companyData);
          return response.data;
        } catch (error) {
          const errorMessage = error.response?.data?.message || 'Erreur lors de la création de l\'entreprise';
          const validationErrors = error.response?.data?.errors || [];
          throw new Error(`${errorMessage}: ${validationErrors.map(e => e.message).join(', ')}`);
        }},

  // Mettre à jour une entreprise
  async updateCompany(companyId, data) {
    try {
      console.log('Données envoyées au backend:', { companyId, data });
      const response = await axios.put(`/companies/${companyId}`, data);
      console.log(response.data);
      return response.data;
    } catch (error) {
      throw new Error(error.response?.data?.message || 'Erreur lors de la mise à jour de l\'entreprise');
    }
  },

  // Récupérer les départements
  async getDepartments(companyId) {
    try {
      const response = await axios.get(`/companies/${companyId}/departments`);
       

      return response.data.data;
    } catch (error) {
      throw new Error(error.response?.data?.message || 'Erreur lors de la récupération des départements');
    }
  },

  // Créer un département
  async createDepartment(companyId, data) {
    try {
      const response = await axios.post(`/companies/${companyId}/departments`, data);
      return response.data.data;
    } catch (error) {
      throw new Error(error.response?.data?.message || 'Erreur lors de la création du département');
    }
  },

  // Mettre à jour un département
  async updateDepartment(companyId, departmentId, data) {
    try {
      const response = await axios.put(`/companies/${companyId}/departments/${departmentId}`, data);
      return response.data;
    } catch (error) {
      throw new Error(error.response?.data?.message || 'Erreur lors de la mise à jour du département');
    }
  },

  // Supprimer un département
  async deleteDepartment(companyId, departmentId) {
    try {
      const response = await axios.delete(`/companies/${companyId}/departments/${departmentId}`);
      return response.data;
    } catch (error) {
      throw new Error(error.response?.data?.message || 'Erreur lors de la suppression du département');
    }
  },

  // Récupérer les emplacements
  async getCompanyLocations(companyId) {
    try {
      const response = await axios.get(`/companies/${companyId}/locations`);
      return response.data.data;
    } catch (error) {
      throw new Error(error.response?.data?.message || 'Erreur lors de la récupération des emplacements');
    }
  },

  // Ajouter un emplacement
  async addCompanyLocation(companyId, data) {
    try {
      console.log('Données envoyées pour ajout d\'emplacement:', { companyId, data });
      const response = await axios.post(`/companies/${companyId}/locations`, data);
      return response.data.data;
    } catch (error) {
      console.error('Erreur lors de l\'ajout de l\'emplacement:', error);
      throw new Error(error.response?.data?.message || 'Validation failed');
    }
  },

  // Mettre à jour un emplacement
  async updateCompanyLocation(companyId, locationId, data) {
    try {
      const response = await axios.put(`/companies/${companyId}/locations/${locationId}`, data);
      return response.data;
    } catch (error) {
      throw new Error(error.response?.data?.message || 'Erreur lors de la mise à jour de l\'emplacement');
    }
  },

  // Supprimer un emplacement
  async deleteCompanyLocation(companyId, locationId) {
    try {
      const response = await axios.delete(`/companies/${companyId}/locations/${locationId}`);
      return response.data;
    } catch (error) {
      throw new Error(error.response?.data?.message || 'Erreur lors de la suppression de l\'emplacement');
    }
  },
};

export const userService = {
  getUserIdByEmail: async (email) => {
    try {
      const response = await axios.get(`/users/email/${email}`, {
        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },
      });
      return response.data.id;
    } catch (error) {
      console.error('Erreur lors de la récupération de l\'ID utilisateur:', error);
      throw error;
    }
  },
};

const getAuthHeaders = () => {
  const token = localStorage.getItem('token');
  return {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json',
  };
};

const handleResponse = async (response) => {
  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.message || 'Request failed');
  }
  return response.json();
};

export const cvService = {
  getCandidates: async (companyId) => {
    const response = await axios.get(`candidates/companies/${companyId}/candidates`, {
      
      headers: getAuthHeaders(),
    });
    return handleResponse(response);
  },

  getCandidateById: async (companyId, id) => {
    const response = await axios.get(`candidates/companies/${companyId}/candidates/${id}`, {
       
      headers: getAuthHeaders(),
    });
    return handleResponse(response);
  },

  createCandidate: async (companyId, candidateData) => {
    const response = await axios.post(`candidates/companies/${companyId}/candidates`, {
      
      headers: getAuthHeaders(),
      body: JSON.stringify(candidateData),
    });
    return handleResponse(response);
  },

  updateCandidate: async (companyId, id, candidateData) => {
    const response = await axios.put(`candidates/companies/${companyId}/candidates/${id}`, {
      
      headers: getAuthHeaders(),
      body: JSON.stringify(candidateData),
    });
    return handleResponse(response);
  },

  deleteCandidate: async (companyId, id) => {
    const response = await axios.delete(`candidates/companies/${companyId}/candidates/${id}`, {
      
      headers: getAuthHeaders(),
    });
    return handleResponse(response);
  },

  downloadCV: async (id) => {
    const response = await axios.get(`candidates/candidates/${id}/download-cv`, {
       
      headers: getAuthHeaders(),
    });
    return handleResponse(response);
  },

  getCandidatesByJob: async (jobId) => {
    const response = await axios.get(`candidates/jobs/${jobId}/candidates`, {
      
      headers: getAuthHeaders(),
    });
    return handleResponse(response);
  },

  updateCandidateStage: async (candidateId, stageId) => {
    const response = await axios.put(`candidates/candidates/${candidateId}/stage`, {
       
      headers: getAuthHeaders(),
      body: JSON.stringify({ stageId }),
    });
    return handleResponse(response);
  },

  disqualifyCandidate: async (candidateId) => {
    const response = await axios.put(`candidates/candidates/${candidateId}/disqualify`, {
      
      headers: getAuthHeaders(),
    });
    return handleResponse(response);
  },
};

 
=== FIN ===

=== Contenu de frontend\src\utils\axios.js ===
import axios from 'axios';
import { toast } from 'react-toastify';


const instance = axios.create({
  baseURL:  'http://localhost:5000/api/v1',
  headers: {
    'Content-Type': 'application/json'
  },
  // withCredentials: true
});

// Request interceptor for adding the auth token
instance.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    console.log("token: ",token);
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Response interceptor for handling errors
instance.interceptors.response.use(
  (response) => response,
  (error) => {
    const { response } = error;
    
    // Handle different error statuses
    if (response) {
      switch (response.status) {
        case 401:
          // Unauthorized - Redirect to login
          localStorage.removeItem('token');
          window.location.href = '/login';
          break;
        case 403:
          // Forbidden
          toast.error('Vous n\'avez pas les permissions nécessaires');
          break;
        case 404:
          // Not found
          console.error('Resource not found');
          break;
        case 500:
          // Server error
          toast.error('Erreur serveur. Veuillez réessayer plus tard.');
          break;
        default:
          // Other errors
          const errorMessage = response.data?.message || 'Une erreur est survenue';
          toast.error(errorMessage);
      }
    } else {
      // Network error
      toast.error('Erreur réseau. Veuillez vérifier votre connexion.');
    }
    
    return Promise.reject(error);
  }
);

export default instance;
=== FIN ===

=== Contenu de frontend\src\utils\countries.js ===
export const countries = [
    "France",
    "Belgique",
    "Suisse",
    "Canada",
    "Luxembourg",
    "Monaco",
    "Allemagne",
    "Espagne",
    "Italie",
    "Royaume-Uni",
    "Portugal",
    "Pays-Bas",
    "Maroc",
    "Algérie",
    "Tunisie",
    "Sénégal",
    "Côte d'Ivoire",
    "Mali",
    "États-Unis",
    "Brésil",
    "Argentine",
    "Mexique",
    "Chine",
    "Japon",
    "Corée du Sud",
    "Australie",
    "Nouvelle-Zélande",
    "Afrique du Sud",
    "Égypte",
    "Inde",
    // Ajoutez d'autres pays selon vos besoins
];
=== FIN ===

